/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "CGAL_NDEBUG",
                1
            ]
        ],
        "depends": [
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "phd/domain/particle.h"
        ],
        "include_dirs": [
            "./phd/domain",
            "phd/domain",
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include",
            "phd/utils/",
            "phd/containers/",
            "phd/domain/",
            "phd/hilbert/",
            "phd/equation_state/",
            "phd/load_balance/",
            "phd/gravity",
            "phd/riemann/",
            "phd/mesh/",
            "phd/reconstruction/",
            "phd/source_term/",
            "/opt/homebrew/Cellar/cgal/5.2/include",
            "/opt/homebrew/Cellar/boost/1.75.0_1/include"
        ],
        "language": "c++",
        "libraries": [
            "gmp",
            "m"
        ],
        "library_dirs": [
            "/opt/homebrew/Cellar/cgal/5.2/lib"
        ],
        "name": "phd.domain.domain_manager",
        "sources": [
            "phd/domain/domain_manager.pyx",
            "phd/domain/particle.cpp"
        ]
    },
    "module_name": "phd.domain.domain_manager"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__phd__domain__domain_manager
#define __PYX_HAVE_API__phd__domain__domain_manager
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <list>
#include "particle.h"
#include "stdlib.h"
#include <algorithm>
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "phd/domain/domain_manager.pyx",
  "stringsource",
  "phd/domain/domain_manager.pxd",
  "__init__.pxd",
  "type.pxd",
  "phd/utils/carray.pxd",
  "phd/containers/containers.pxd",
  "phd/domain/boundary.pxd",
  "phd/load_balance/tree.pxd",
  "phd/load_balance/load_balance.pxd",
};

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter;
struct __pyx_obj_3phd_5utils_6carray_BaseArray;
struct __pyx_obj_3phd_5utils_6carray_DoubleArray;
struct __pyx_obj_3phd_5utils_6carray_IntArray;
struct __pyx_obj_3phd_5utils_6carray_LongArray;
struct __pyx_obj_3phd_5utils_6carray_LongLongArray;
struct __pyx_obj_3phd_10containers_10containers_CarrayContainer;
struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase;
struct __pyx_obj_3phd_6domain_8boundary_Reflective;
struct __pyx_obj_3phd_6domain_8boundary_Periodic;
struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool;
struct __pyx_obj_3phd_12load_balance_4tree_Tree;
struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance;
struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_11DoubleArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_8IntArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_9LongArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_13LongLongArray_remove;

/* "utils/carray.pxd":20
 *     cpdef np.ndarray get_npy_array(self)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 *     cpdef reset(self)
 */
struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":45
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_11DoubleArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":68
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_8IntArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":91
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_9LongArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":114
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_13LongLongArray_remove {
  int __pyx_n;
  int input_sorted;
};
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray;
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items;

/* "containers/containers.pxd":11
 *     cdef readonly dict carray_named_groups
 * 
 *     cpdef register_carray(self, int carray_size, str carray_name, str dtype=*)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int get_carray_size(self)
 */
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray {
  int __pyx_n;
  PyObject *dtype;
};

/* "containers/containers.pxd":20
 *     cpdef resize(self, int carray_size)
 *     cpdef remove_tagged_particles(self, np.int8_t tag)
 *     cpdef CarrayContainer extract_items(self, LongArray index_array, list carray_list_names=*)             # <<<<<<<<<<<<<<
 *     cpdef int append_container(self, CarrayContainer container)
 *     cpdef copy(self, CarrayContainer container, LongArray indices, list carray_list_names)
 */
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items {
  int __pyx_n;
  PyObject *carray_list_names;
};

/* "domain/boundary.pxd":11
 *     FlagParticle* particle_flag_deref(cpplist[FlagParticle].iterator &it)
 * 
 * cdef enum:             # <<<<<<<<<<<<<<
 *     REFLECTIVE = 0x01
 *     PERIODIC   = 0x02
 */
enum  {
  __pyx_e_3phd_6domain_8boundary_REFLECTIVE = 0x01,
  __pyx_e_3phd_6domain_8boundary_PERIODIC = 0x02
};
struct __pyx_t_3phd_12load_balance_4tree_Node;

/* "load_balance/tree.pxd":6
 * from ..containers.containers cimport CarrayContainer
 * 
 * ctypedef np.int64_t (*hilbert_type)(np.int32_t, np.int32_t, np.int32_t, int)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "stdlib.h":
 */
typedef __pyx_t_5numpy_int64_t (*__pyx_t_3phd_12load_balance_4tree_hilbert_type)(__pyx_t_5numpy_int32_t, __pyx_t_5numpy_int32_t, __pyx_t_5numpy_int32_t, int);

/* "load_balance/tree.pxd":15
 * 
 * # forward decleration
 * cdef struct Node             # <<<<<<<<<<<<<<
 * 
 * cdef struct Node:
 */
struct __pyx_t_3phd_12load_balance_4tree_Node {
  __pyx_t_5numpy_int64_t sfc_key;
  __pyx_t_5numpy_int64_t sfc_start_key;
  __pyx_t_5numpy_int64_t number_sfc_keys;
  __pyx_t_5numpy_int64_t level;
  __pyx_t_5numpy_float64_t box_length;
  __pyx_t_5numpy_float64_t center[3];
  int particle_index_start;
  int number_particles;
  int number_segments;
  int leaf;
  int array_index;
  int children_start;
  int zorder_to_hilbert[8];
};
struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields;

/* "phd/domain/domain_manager.pxd":104
 *     cpdef bint ghost_complete(self)
 * 
 *     cpdef update_ghost_fields(self, CarrayContainer particles, list fields,             # <<<<<<<<<<<<<<
 *             bint apply_boundary_condition=*)
 *     cpdef update_ghost_gradients(self, CarrayContainer particles, CarrayContainer gradients)
 */
struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields {
  int __pyx_n;
  int apply_boundary_condition;
};

/* "utils/carray.pxd":7
 * cdef class BaseArray
 * 
 * cdef class BaseArrayIter:             # <<<<<<<<<<<<<<
 *     cdef BaseArray arr
 *     cdef int i
 */
struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter {
  PyObject_HEAD
  struct __pyx_obj_3phd_5utils_6carray_BaseArray *arr;
  int i;
};


/* "utils/carray.pxd":5
 * 
 * # forward declaration
 * cdef class BaseArray             # <<<<<<<<<<<<<<
 * 
 * cdef class BaseArrayIter:
 */
struct __pyx_obj_3phd_5utils_6carray_BaseArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray *__pyx_vtab;
  long length;
  long alloc;
  PyArrayObject *_npy_array;
};


/* "utils/carray.pxd":31
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class DoubleArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.float64_t"""
 *     cdef np.float64_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_DoubleArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_float64_t *data;
  __pyx_t_5numpy_float64_t minimum;
  __pyx_t_5numpy_float64_t maximum;
};


/* "utils/carray.pxd":54
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class IntArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int8_t"""
 *     cdef np.int8_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_IntArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int8_t *data;
  __pyx_t_5numpy_int8_t minimum;
  __pyx_t_5numpy_int8_t maximum;
};


/* "utils/carray.pxd":77
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int32_t"""
 *     cdef np.int32_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_LongArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int32_t *data;
  __pyx_t_5numpy_int32_t minimum;
  __pyx_t_5numpy_int32_t maximum;
};


/* "utils/carray.pxd":100
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongLongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int64_t"""
 *     cdef np.int64_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_LongLongArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int64_t *data;
  __pyx_t_5numpy_int64_t minimum;
  __pyx_t_5numpy_int64_t maximum;
};


/* "containers/containers.pxd":5
 * 
 * 
 * cdef class CarrayContainer:             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly dict carrays
 */
struct __pyx_obj_3phd_10containers_10containers_CarrayContainer {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *__pyx_vtab;
  PyObject *carrays;
  PyObject *carray_dtypes;
  PyObject *carray_named_groups;
};


/* "domain/boundary.pxd":17
 * cdef inline bint intersect_bounds(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class BoundaryConditionBase:             # <<<<<<<<<<<<<<
 *     cdef void create_ghost_particle(self, cpplist[FlagParticle] &flagged_particles,
 *                                     DomainManager domain_manager)
 */
struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *__pyx_vtab;
};


/* "domain/boundary.pxd":29
 *     cpdef update_fields(self, CarrayContainer particles, DomainManager domain_manager)
 * 
 * cdef class Reflective(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_3phd_6domain_8boundary_Reflective {
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};


/* "domain/boundary.pxd":32
 *     pass
 * 
 * cdef class Periodic(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 */
struct __pyx_obj_3phd_6domain_8boundary_Periodic {
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};


/* "load_balance/tree.pxd":37
 *     int zorder_to_hilbert[8]    # map zorder to hilbert
 * 
 * cdef class TreeMemoryPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef int used                       # number of nodes used in the pool
 */
struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool *__pyx_vtab;
  int used;
  int capacity;
  struct __pyx_t_3phd_12load_balance_4tree_Node *node_array;
};


/* "load_balance/tree.pxd":50
 *     cpdef int number_nodes(self)        # number of nodes in tree
 * 
 * cdef class Tree:             # <<<<<<<<<<<<<<
 * 
 *     cdef double domain_corner[3]           # corner of particle domain
 */
struct __pyx_obj_3phd_12load_balance_4tree_Tree {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *__pyx_vtab;
  double domain_corner[3];
  double domain_length;
  double domain_fac;
  int order;
  int min_in_leaf;
  double factor;
  int total_num_part;
  int number_leaves;
  int dim;
  __pyx_t_3phd_12load_balance_4tree_hilbert_type hilbert_func;
  int bounds[2][3];
  struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *mem_pool;
  struct __pyx_t_3phd_12load_balance_4tree_Node *root;
};


/* "load_balance/load_balance.pxd":9
 * 
 * 
 * cdef class LoadBalance:             # <<<<<<<<<<<<<<
 * 
 *     cdef public np.int32_t order
 */
struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance *__pyx_vtab;
  __pyx_t_5numpy_int32_t order;
  __pyx_t_5numpy_float64_t factor;
  __pyx_t_5numpy_int32_t min_in_leaf;
  int dim;
  __pyx_t_5numpy_float64_t fac;
  double bounds[2][3];
  int domain_info_added;
  double corner[3];
  __pyx_t_5numpy_float64_t box_length;
  PyObject *export_ids;
  PyObject *export_pid;
  struct __pyx_obj_3phd_12load_balance_4tree_Tree *tree;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *leaf_pid;
  __pyx_t_3phd_12load_balance_4tree_hilbert_type hilbert_func;
};


/* "phd/domain/domain_manager.pxd":45
 *         const GhostID &a, const GhostID &b) nogil
 * 
 * cdef class DomainManager:             # <<<<<<<<<<<<<<
 * 
 *     cdef public DoubleArray old_radius
 */
struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *__pyx_vtab;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *old_radius;
  struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *load_balance;
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *boundary_condition;
  double initial_radius;
  double search_radius_factor;
  int particle_fields_registered;
  int dim;
  PyObject *xmin;
  PyObject *xmax;
  __pyx_t_5numpy_float64_t translate[3];
  __pyx_t_5numpy_float64_t bounds[2][3];
  __pyx_t_5numpy_float64_t max_length;
  __pyx_t_5numpy_float64_t min_length;
  std::vector<BoundaryParticle>  ghost_vec;
  std::list<struct FlagParticle>  flagged_particles;
  int num_export;
  int num_real_particles;
  PyArrayObject *loc_done;
  PyArrayObject *glb_done;
  std::vector<GhostID>  export_ghost_buffer;
  std::vector<GhostID>  import_ghost_buffer;
  PyArrayObject *send_cnts;
  PyArrayObject *recv_cnts;
  PyArrayObject *send_disp;
  PyArrayObject *recv_disp;
};



/* "utils/carray.pxd":5
 * 
 * # forward declaration
 * cdef class BaseArray             # <<<<<<<<<<<<<<
 * 
 * cdef class BaseArrayIter:
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray {
  PyObject *(*reserve)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyArrayObject *(*get_npy_array)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*squeeze)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*remove)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove *__pyx_optional_args);
  PyObject *(*extend)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*reset)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*shrink)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyObject *(*align_array)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*get_c_type)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*copy_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*paste_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*add_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray *__pyx_vtabptr_3phd_5utils_6carray_BaseArray;


/* "utils/carray.pxd":31
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class DoubleArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.float64_t"""
 *     cdef np.float64_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *);
  __pyx_t_5numpy_float64_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *);
  __pyx_t_5numpy_float64_t (*get)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, long, __pyx_t_5numpy_float64_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, __pyx_t_5numpy_float64_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray *__pyx_vtabptr_3phd_5utils_6carray_DoubleArray;


/* "utils/carray.pxd":54
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class IntArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int8_t"""
 *     cdef np.int8_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_IntArray *);
  __pyx_t_5numpy_int8_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_IntArray *);
  __pyx_t_5numpy_int8_t (*get)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, long, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray *__pyx_vtabptr_3phd_5utils_6carray_IntArray;


/* "utils/carray.pxd":77
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int32_t"""
 *     cdef np.int32_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  __pyx_t_5numpy_int32_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  __pyx_t_5numpy_int32_t (*get)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, long, __pyx_t_5numpy_int32_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, __pyx_t_5numpy_int32_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *__pyx_vtabptr_3phd_5utils_6carray_LongArray;


/* "utils/carray.pxd":100
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongLongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int64_t"""
 *     cdef np.int64_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *);
  __pyx_t_5numpy_int64_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *);
  __pyx_t_5numpy_int64_t (*get)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, long, __pyx_t_5numpy_int64_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, __pyx_t_5numpy_int64_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray *__pyx_vtabptr_3phd_5utils_6carray_LongLongArray;


/* "containers/containers.pxd":5
 * 
 * 
 * cdef class CarrayContainer:             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly dict carrays
 */

struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer {
  PyObject *(*register_carray)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray *__pyx_optional_args);
  int (*get_carray_size)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*remove_items)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*extend)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int __pyx_skip_dispatch);
  void (*pointer_groups)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, __pyx_t_5numpy_float64_t **, PyObject *);
  struct __pyx_obj_3phd_5utils_6carray_BaseArray *(*get_carray)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int __pyx_skip_dispatch);
  PyObject *(*remove_tagged_particles)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *(*extract_items)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items *__pyx_optional_args);
  int (*append_container)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*copy)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*paste)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*add)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *__pyx_vtabptr_3phd_10containers_10containers_CarrayContainer;


/* "domain/boundary.pxd":17
 * cdef inline bint intersect_bounds(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class BoundaryConditionBase:             # <<<<<<<<<<<<<<
 *     cdef void create_ghost_particle(self, cpplist[FlagParticle] &flagged_particles,
 *                                     DomainManager domain_manager)
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase {
  void (*create_ghost_particle)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*create_ghost_particle_serial)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*create_ghost_particle_parallel)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*migrate_particles)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*update_gradients)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  PyObject *(*update_fields)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *__pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase;


/* "domain/boundary.pxd":29
 *     cpdef update_fields(self, CarrayContainer particles, DomainManager domain_manager)
 * 
 * cdef class Reflective(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective {
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective *__pyx_vtabptr_3phd_6domain_8boundary_Reflective;


/* "domain/boundary.pxd":32
 *     pass
 * 
 * cdef class Periodic(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic {
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic *__pyx_vtabptr_3phd_6domain_8boundary_Periodic;


/* "load_balance/tree.pxd":37
 *     int zorder_to_hilbert[8]    # map zorder to hilbert
 * 
 * cdef class TreeMemoryPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef int used                       # number of nodes used in the pool
 */

struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool {
  struct __pyx_t_3phd_12load_balance_4tree_Node *(*get)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int);
  void (*resize)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int);
  void (*reset)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *);
  int (*number_leaves)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int __pyx_skip_dispatch);
  int (*number_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool *__pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool;


/* "load_balance/tree.pxd":50
 *     cpdef int number_nodes(self)        # number of nodes in tree
 * 
 * cdef class Tree:             # <<<<<<<<<<<<<<
 * 
 *     cdef double domain_corner[3]           # corner of particle domain
 */

struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree {
  void (*_leaves_to_array)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, int *);
  void (*_create_node_children)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *);
  void (*_fill_particles_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, __pyx_t_5numpy_int64_t *, int);
  void (*_fill_segments_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, __pyx_t_5numpy_int64_t *, __pyx_t_5numpy_int32_t *, int);
  PyObject *(*_build_local_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, PyArrayObject *, int, int __pyx_skip_dispatch);
  void (*_build_global_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, int, PyArrayObject *, PyArrayObject *, int);
  void (*construct_global_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *);
  struct __pyx_t_3phd_12load_balance_4tree_Node *(*find_leaf)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, __pyx_t_5numpy_int64_t);
  int (*get_nearest_process_neighbors)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, double *, double, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  void (*_neighbors)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, double *, double *, __pyx_t_5numpy_int32_t *, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
};
static struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *__pyx_vtabptr_3phd_12load_balance_4tree_Tree;


/* "load_balance/load_balance.pxd":9
 * 
 * 
 * cdef class LoadBalance:             # <<<<<<<<<<<<<<
 * 
 *     cdef public np.int32_t order
 */

struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance {
  void (*calculate_local_work)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyArrayObject *);
  void (*find_split_in_work)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, PyArrayObject *);
  void (*collect_particles_export)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int);
  void (*compute_hilbert_keys)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
};
static struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance *__pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance;


/* "phd/domain/domain_manager.pyx":47
 * 
 * 
 * cdef class DomainManager:             # <<<<<<<<<<<<<<
 *     def __init__(self, list xmin, list xmax, double initial_radius,
 *                  double search_radius_factor=2.0):
 */

struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager {
  PyObject *(*check_for_partition)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*partition)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*setup_initial_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*store_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*setup_for_ghost_creation)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*create_ghost_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*create_interior_ghost_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*update_search_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*copy_particles_serial)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*copy_particles_parallel)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*move_generators)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, double, int __pyx_skip_dispatch);
  PyObject *(*migrate_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  int (*ghost_complete)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*update_ghost_fields)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields *__pyx_optional_args);
  PyObject *(*update_ghost_gradients)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*reindex_ghost)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int);
  int (*get_nearest_intersect_process_neighbors)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double *, double, double, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
};
static struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *__pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_check_for_partition(CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED PyObject *__pyx_v_integrator, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_partition(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_setup_initial_radius(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_store_radius(CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_setup_for_ghost_creation(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_search_radius(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_create_ghost_particles(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_create_interior_ghost_particles(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_copy_particles_parallel(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_copy_particles_serial(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto*/
static int __pyx_f_3phd_6domain_14domain_manager_13DomainManager_ghost_complete(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_move_generators(CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, double __pyx_v_dt, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_migrate_particles(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, PyObject *__pyx_v_fields, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_ghost_gradients(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_gradients, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_3phd_6domain_14domain_manager_13DomainManager_get_nearest_intersect_process_neighbors(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, double *__pyx_v_center, double __pyx_v_old_h, double __pyx_v_new_h, int __pyx_v_rank, struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_nbrs); /* proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_reindex_ghost(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_v_num_real_particles, int __pyx_v_total_num_particles); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'phd.utils.carray' */
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_BaseArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_BaseArrayIter = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_DoubleArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_IntArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_LongArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_LongLongArray = 0;

/* Module declarations from 'phd.containers.containers' */
static PyTypeObject *__pyx_ptype_3phd_10containers_10containers_CarrayContainer = 0;

/* Module declarations from 'phd.domain.boundary' */
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase = 0;
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_Reflective = 0;
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_Periodic = 0;

/* Module declarations from 'phd.load_balance.tree' */
static PyTypeObject *__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool = 0;
static PyTypeObject *__pyx_ptype_3phd_12load_balance_4tree_Tree = 0;

/* Module declarations from 'phd.load_balance.load_balance' */
static PyTypeObject *__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance = 0;

/* Module declarations from 'libc.math' */

/* Module declarations from 'phd.domain.domain_manager' */
static PyTypeObject *__pyx_ptype_3phd_6domain_14domain_manager_DomainManager = 0;
static int __pyx_v_3phd_6domain_14domain_manager_REAL;
static int __pyx_v_3phd_6domain_14domain_manager_GHOST;
static int __pyx_v_3phd_6domain_14domain_manager_EXTERIOR;
static int __pyx_v_3phd_6domain_14domain_manager_INTERIOR;
static PyObject *__pyx_v_3phd_6domain_14domain_manager_fields_for_parallel = 0;
static CYTHON_INLINE int __pyx_f_3phd_6domain_14domain_manager_boundary_particle_cmp(BoundaryParticle const &, BoundaryParticle const &); /*proto*/
static CYTHON_INLINE int __pyx_f_3phd_6domain_14domain_manager_ghostid_cmp(GhostID const &, GhostID const &); /*proto*/
#define __Pyx_MODULE_NAME "phd.domain.domain_manager"
extern int __pyx_module_is_main_phd__domain__domain_manager;
int __pyx_module_is_main_phd__domain__domain_manager = 0;

/* Implementation of 'phd.domain.domain_manager' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_w[] = "w";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_op[] = "op";
static const char __pyx_k_INT[] = "INT";
static const char __pyx_k_MPI[] = "MPI";
static const char __pyx_k_SUM[] = "SUM";
static const char __pyx_k_ids[] = "ids";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_phd[] = "phd";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_Real[] = "Real";
static const char __pyx_k_comm[] = "_comm";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_long[] = "long";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_rank[] = "_rank";
static const char __pyx_k_size[] = "_size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_xmax[] = "xmax";
static const char __pyx_k_xmin[] = "xmin";
static const char __pyx_k_Ghost[] = "Ghost";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_fields[] = "fields";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_process[] = "process";
static const char __pyx_k_Alltoall[] = "Alltoall";
static const char __pyx_k_Exterior[] = "Exterior";
static const char __pyx_k_Interior[] = "Interior";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_longlong[] = "longlong";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Allreduce[] = "Allreduce";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_gradients[] = "gradients";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_particles[] = "particles";
static const char __pyx_k_partition[] = "partition";
static const char __pyx_k_primitive[] = "primitive";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_integrator[] = "integrator";
static const char __pyx_k_old_radius[] = "old_radius";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_check_class[] = "check_class";
static const char __pyx_k_in_parallel[] = "_in_parallel";
static const char __pyx_k_utils_tools[] = "utils.tools";
static const char __pyx_k_ParticleTAGS[] = "ParticleTAGS";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_store_radius[] = "store_radius";
static const char __pyx_k_DomainManager[] = "DomainManager";
static const char __pyx_k_decomposition[] = "decomposition";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_ghost_complete[] = "ghost_complete";
static const char __pyx_k_initial_radius[] = "initial_radius";
static const char __pyx_k_move_generators[] = "move_generators";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_migrate_particles[] = "migrate_particles";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_exchange_particles[] = "exchange_particles";
static const char __pyx_k_check_for_partition[] = "check_for_partition";
static const char __pyx_k_update_ghost_fields[] = "update_ghost_fields";
static const char __pyx_k_utils_particle_tags[] = "utils.particle_tags";
static const char __pyx_k_search_radius_factor[] = "search_radius_factor";
static const char __pyx_k_setup_initial_radius[] = "setup_initial_radius";
static const char __pyx_k_update_search_radius[] = "update_search_radius";
static const char __pyx_k_create_ghost_particles[] = "create_ghost_particles";
static const char __pyx_k_update_ghost_gradients[] = "update_ghost_gradients";
static const char __pyx_k_apply_boundary_condition[] = "apply_boundary_condition";
static const char __pyx_k_setup_for_ghost_creation[] = "setup_for_ghost_creation";
static const char __pyx_k_utils_exchange_particles[] = "utils.exchange_particles";
static const char __pyx_k_Wrong_dimension_specified[] = "Wrong dimension specified";
static const char __pyx_k_ERROR_Boundary_inconsistent[] = "ERROR: Boundary inconsistent";
static const char __pyx_k_Found_error_in_interior_ghost[] = "Found error in interior ghost";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_ERROR_Fields_not_registered_in_p[] = "ERROR: Fields not registered in particles by Mesh!";
static const char __pyx_k_ERROR_Particle_dim_does_not_matc[] = "ERROR: Particle dim does not match";
static const char __pyx_k_Not_all_setters_defined_in_Domai[] = "Not all setters defined in DomainMangaer";
static const char __pyx_k_Wrong_dimensions_for_xmin_and_xm[] = "Wrong dimensions for xmin and xmax";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self_export_ghost_buffer_self_gh[] = "self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_Allreduce;
static PyObject *__pyx_n_s_Alltoall;
static PyObject *__pyx_n_s_DomainManager;
static PyObject *__pyx_kp_s_ERROR_Boundary_inconsistent;
static PyObject *__pyx_kp_s_ERROR_Fields_not_registered_in_p;
static PyObject *__pyx_kp_s_ERROR_Particle_dim_does_not_matc;
static PyObject *__pyx_n_s_Exterior;
static PyObject *__pyx_kp_s_Found_error_in_interior_ghost;
static PyObject *__pyx_n_s_Ghost;
static PyObject *__pyx_n_s_INT;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_Interior;
static PyObject *__pyx_n_s_MPI;
static PyObject *__pyx_kp_s_Not_all_setters_defined_in_Domai;
static PyObject *__pyx_n_s_ParticleTAGS;
static PyObject *__pyx_n_s_Real;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SUM;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Wrong_dimension_specified;
static PyObject *__pyx_kp_s_Wrong_dimensions_for_xmin_and_xm;
static PyObject *__pyx_n_s_apply_boundary_condition;
static PyObject *__pyx_n_s_check_class;
static PyObject *__pyx_n_s_check_for_partition;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_comm;
static PyObject *__pyx_n_s_create_ghost_particles;
static PyObject *__pyx_n_s_decomposition;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_exchange_particles;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_ghost_complete;
static PyObject *__pyx_n_s_gradients;
static PyObject *__pyx_n_s_ids;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_parallel;
static PyObject *__pyx_n_s_initial_radius;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_integrator;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_long;
static PyObject *__pyx_n_s_longlong;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_migrate_particles;
static PyObject *__pyx_n_s_move_generators;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_old_radius;
static PyObject *__pyx_n_s_op;
static PyObject *__pyx_n_s_particles;
static PyObject *__pyx_n_s_partition;
static PyObject *__pyx_n_s_phd;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_primitive;
static PyObject *__pyx_n_s_process;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rank;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_search_radius_factor;
static PyObject *__pyx_kp_s_self_export_ghost_buffer_self_gh;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_setup_for_ghost_creation;
static PyObject *__pyx_n_s_setup_initial_radius;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_store_radius;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_update_ghost_fields;
static PyObject *__pyx_n_s_update_ghost_gradients;
static PyObject *__pyx_n_s_update_search_radius;
static PyObject *__pyx_n_s_utils_exchange_particles;
static PyObject *__pyx_n_s_utils_particle_tags;
static PyObject *__pyx_n_s_utils_tools;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_xmax;
static PyObject *__pyx_n_s_xmin;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager___init__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_xmin, PyObject *__pyx_v_xmax, double __pyx_v_initial_radius, double __pyx_v_search_radius_factor); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_2register_fields(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4initialize(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_6set_boundary_condition(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_boundary_condition); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_8set_load_balance(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_load_balance); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10check_for_partition(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, PyObject *__pyx_v_integrator); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12partition(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_14setup_initial_radius(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_16store_radius(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18setup_for_ghost_creation(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_20update_search_radius(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_22create_ghost_particles(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_24ghost_complete(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_26move_generators(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_28migrate_particles(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_30update_ghost_fields(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, PyObject *__pyx_v_fields, int __pyx_v_apply_boundary_condition); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_32update_ghost_gradients(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_gradients); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10old_radius___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10old_radius_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10old_radius_4__del__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12load_balance___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12load_balance_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12load_balance_4__del__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_4__del__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_14initial_radius___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_14initial_radius_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmin___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmin_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmin_4__del__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmax___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmax_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmax_4__del__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_3phd_6domain_14domain_manager_DomainManager(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
/* Late includes */

/* "phd/domain/domain_manager.pyx":26
 * 
 * 
 * cdef inline bint boundary_particle_cmp(             # <<<<<<<<<<<<<<
 *         const BoundaryParticle &a, const BoundaryParticle &b) nogil:
 *     """Sort boundary particles by processor order. This is
 */

static CYTHON_INLINE int __pyx_f_3phd_6domain_14domain_manager_boundary_particle_cmp(BoundaryParticle const &__pyx_v_a, BoundaryParticle const &__pyx_v_b) {
  int __pyx_r;

  /* "phd/domain/domain_manager.pyx":30
 *     """Sort boundary particles by processor order. This is
 *     used for exporting particles"""
 *     return a.proc < b.proc             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_a.proc < __pyx_v_b.proc);
  goto __pyx_L0;

  /* "phd/domain/domain_manager.pyx":26
 * 
 * 
 * cdef inline bint boundary_particle_cmp(             # <<<<<<<<<<<<<<
 *         const BoundaryParticle &a, const BoundaryParticle &b) nogil:
 *     """Sort boundary particles by processor order. This is
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":33
 * 
 * 
 * cdef inline bint ghostid_cmp(             # <<<<<<<<<<<<<<
 *         const GhostID &a, const GhostID &b) nogil:
 *     """Sort boundary particles by processor order and by export
 */

static CYTHON_INLINE int __pyx_f_3phd_6domain_14domain_manager_ghostid_cmp(GhostID const &__pyx_v_a, GhostID const &__pyx_v_b) {
  int __pyx_r;
  int __pyx_t_1;

  /* "phd/domain/domain_manager.pyx":39
 *     export have the same order.
 *     """
 *     if a.proc < b.proc:             # <<<<<<<<<<<<<<
 *         return True
 *     elif a.proc > b.proc:
 */
  __pyx_t_1 = ((__pyx_v_a.proc < __pyx_v_b.proc) != 0);
  if (__pyx_t_1) {

    /* "phd/domain/domain_manager.pyx":40
 *     """
 *     if a.proc < b.proc:
 *         return True             # <<<<<<<<<<<<<<
 *     elif a.proc > b.proc:
 *         return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "phd/domain/domain_manager.pyx":39
 *     export have the same order.
 *     """
 *     if a.proc < b.proc:             # <<<<<<<<<<<<<<
 *         return True
 *     elif a.proc > b.proc:
 */
  }

  /* "phd/domain/domain_manager.pyx":41
 *     if a.proc < b.proc:
 *         return True
 *     elif a.proc > b.proc:             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_a.proc > __pyx_v_b.proc) != 0);
  if (__pyx_t_1) {

    /* "phd/domain/domain_manager.pyx":42
 *         return True
 *     elif a.proc > b.proc:
 *         return False             # <<<<<<<<<<<<<<
 *     else:
 *         return a.export_num < b.export_num
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "phd/domain/domain_manager.pyx":41
 *     if a.proc < b.proc:
 *         return True
 *     elif a.proc > b.proc:             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  }

  /* "phd/domain/domain_manager.pyx":44
 *         return False
 *     else:
 *         return a.export_num < b.export_num             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = (__pyx_v_a.export_num < __pyx_v_b.export_num);
    goto __pyx_L0;
  }

  /* "phd/domain/domain_manager.pyx":33
 * 
 * 
 * cdef inline bint ghostid_cmp(             # <<<<<<<<<<<<<<
 *         const GhostID &a, const GhostID &b) nogil:
 *     """Sort boundary particles by processor order and by export
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":48
 * 
 * cdef class DomainManager:
 *     def __init__(self, list xmin, list xmax, double initial_radius,             # <<<<<<<<<<<<<<
 *                  double search_radius_factor=2.0):
 * 
 */

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xmin = 0;
  PyObject *__pyx_v_xmax = 0;
  double __pyx_v_initial_radius;
  double __pyx_v_search_radius_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xmin,&__pyx_n_s_xmax,&__pyx_n_s_initial_radius,&__pyx_n_s_search_radius_factor,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xmin)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 1); __PYX_ERR(0, 48, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initial_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 2); __PYX_ERR(0, 48, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_search_radius_factor);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 48, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_xmin = ((PyObject*)values[0]);
    __pyx_v_xmax = ((PyObject*)values[1]);
    __pyx_v_initial_radius = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_initial_radius == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_search_radius_factor = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_search_radius_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 49, __pyx_L3_error)
    } else {
      __pyx_v_search_radius_factor = ((double)2.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 48, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xmin), (&PyList_Type), 1, "xmin", 1))) __PYX_ERR(0, 48, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xmax), (&PyList_Type), 1, "xmax", 1))) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager___init__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), __pyx_v_xmin, __pyx_v_xmax, __pyx_v_initial_radius, __pyx_v_search_radius_factor);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager___init__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_xmin, PyObject *__pyx_v_xmax, double __pyx_v_initial_radius, double __pyx_v_search_radius_factor) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_11;
  __pyx_t_5numpy_float64_t __pyx_t_12;
  __pyx_t_5numpy_float64_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "phd/domain/domain_manager.pyx":51
 *                  double search_radius_factor=2.0):
 * 
 *         if len(xmin) not in [2, 3]:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrong dimension specified")
 *         if len(xmin) != len(xmax):
 */
  if (unlikely(__pyx_v_xmin == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 51, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_xmin); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 51, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_1 != 2) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_t_1 != 3) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "phd/domain/domain_manager.pyx":52
 * 
 *         if len(xmin) not in [2, 3]:
 *             raise RuntimeError("Wrong dimension specified")             # <<<<<<<<<<<<<<
 *         if len(xmin) != len(xmax):
 *             raise RuntimeError("Wrong dimensions for xmin and xmax")
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 52, __pyx_L1_error)

    /* "phd/domain/domain_manager.pyx":51
 *                  double search_radius_factor=2.0):
 * 
 *         if len(xmin) not in [2, 3]:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrong dimension specified")
 *         if len(xmin) != len(xmax):
 */
  }

  /* "phd/domain/domain_manager.pyx":53
 *         if len(xmin) not in [2, 3]:
 *             raise RuntimeError("Wrong dimension specified")
 *         if len(xmin) != len(xmax):             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrong dimensions for xmin and xmax")
 * 
 */
  if (unlikely(__pyx_v_xmin == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 53, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_xmin); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 53, __pyx_L1_error)
  if (unlikely(__pyx_v_xmax == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 53, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_xmax); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_1 != __pyx_t_5) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "phd/domain/domain_manager.pyx":54
 *             raise RuntimeError("Wrong dimension specified")
 *         if len(xmin) != len(xmax):
 *             raise RuntimeError("Wrong dimensions for xmin and xmax")             # <<<<<<<<<<<<<<
 * 
 *         self.dim = len(xmin)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 54, __pyx_L1_error)

    /* "phd/domain/domain_manager.pyx":53
 *         if len(xmin) not in [2, 3]:
 *             raise RuntimeError("Wrong dimension specified")
 *         if len(xmin) != len(xmax):             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrong dimensions for xmin and xmax")
 * 
 */
  }

  /* "phd/domain/domain_manager.pyx":56
 *             raise RuntimeError("Wrong dimensions for xmin and xmax")
 * 
 *         self.dim = len(xmin)             # <<<<<<<<<<<<<<
 *         self.initial_radius = initial_radius
 *         self.search_radius_factor = search_radius_factor
 */
  if (unlikely(__pyx_v_xmin == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 56, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_xmin); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_v_self->dim = __pyx_t_5;

  /* "phd/domain/domain_manager.pyx":57
 * 
 *         self.dim = len(xmin)
 *         self.initial_radius = initial_radius             # <<<<<<<<<<<<<<
 *         self.search_radius_factor = search_radius_factor
 * 
 */
  __pyx_v_self->initial_radius = __pyx_v_initial_radius;

  /* "phd/domain/domain_manager.pyx":58
 *         self.dim = len(xmin)
 *         self.initial_radius = initial_radius
 *         self.search_radius_factor = search_radius_factor             # <<<<<<<<<<<<<<
 * 
 *         self.load_balance = None
 */
  __pyx_v_self->search_radius_factor = __pyx_v_search_radius_factor;

  /* "phd/domain/domain_manager.pyx":60
 *         self.search_radius_factor = search_radius_factor
 * 
 *         self.load_balance = None             # <<<<<<<<<<<<<<
 *         self.boundary_condition = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->load_balance);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->load_balance));
  __pyx_v_self->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)Py_None);

  /* "phd/domain/domain_manager.pyx":61
 * 
 *         self.load_balance = None
 *         self.boundary_condition = None             # <<<<<<<<<<<<<<
 * 
 *         self.particle_fields_registered = False
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->boundary_condition);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->boundary_condition));
  __pyx_v_self->boundary_condition = ((struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *)Py_None);

  /* "phd/domain/domain_manager.pyx":63
 *         self.boundary_condition = None
 * 
 *         self.particle_fields_registered = False             # <<<<<<<<<<<<<<
 * 
 *         # list of particle to create ghost particles from
 */
  __pyx_v_self->particle_fields_registered = 0;

  /* "phd/domain/domain_manager.pyx":66
 * 
 *         # list of particle to create ghost particles from
 *         self.flagged_particles.clear()             # <<<<<<<<<<<<<<
 *         self.num_real_particles = 0
 *         self.num_export = 0
 */
  __pyx_v_self->flagged_particles.clear();

  /* "phd/domain/domain_manager.pyx":67
 *         # list of particle to create ghost particles from
 *         self.flagged_particles.clear()
 *         self.num_real_particles = 0             # <<<<<<<<<<<<<<
 *         self.num_export = 0
 * 
 */
  __pyx_v_self->num_real_particles = 0;

  /* "phd/domain/domain_manager.pyx":68
 *         self.flagged_particles.clear()
 *         self.num_real_particles = 0
 *         self.num_export = 0             # <<<<<<<<<<<<<<
 * 
 *         self.xmin = xmin
 */
  __pyx_v_self->num_export = 0;

  /* "phd/domain/domain_manager.pyx":70
 *         self.num_export = 0
 * 
 *         self.xmin = xmin             # <<<<<<<<<<<<<<
 *         self.xmax = xmax
 * 
 */
  __Pyx_INCREF(__pyx_v_xmin);
  __Pyx_GIVEREF(__pyx_v_xmin);
  __Pyx_GOTREF(__pyx_v_self->xmin);
  __Pyx_DECREF(__pyx_v_self->xmin);
  __pyx_v_self->xmin = __pyx_v_xmin;

  /* "phd/domain/domain_manager.pyx":71
 * 
 *         self.xmin = xmin
 *         self.xmax = xmax             # <<<<<<<<<<<<<<
 * 
 *         self.min_length = 0.
 */
  __Pyx_INCREF(__pyx_v_xmax);
  __Pyx_GIVEREF(__pyx_v_xmax);
  __Pyx_GOTREF(__pyx_v_self->xmax);
  __Pyx_DECREF(__pyx_v_self->xmax);
  __pyx_v_self->xmax = __pyx_v_xmax;

  /* "phd/domain/domain_manager.pyx":73
 *         self.xmax = xmax
 * 
 *         self.min_length = 0.             # <<<<<<<<<<<<<<
 *         self.max_length = 0.
 *         for i in range(self.dim):
 */
  __pyx_v_self->min_length = 0.;

  /* "phd/domain/domain_manager.pyx":74
 * 
 *         self.min_length = 0.
 *         self.max_length = 0.             # <<<<<<<<<<<<<<
 *         for i in range(self.dim):
 *             if xmax[i] < xmin[i]:
 */
  __pyx_v_self->max_length = 0.;

  /* "phd/domain/domain_manager.pyx":75
 *         self.min_length = 0.
 *         self.max_length = 0.
 *         for i in range(self.dim):             # <<<<<<<<<<<<<<
 *             if xmax[i] < xmin[i]:
 *                 raise RuntimeError("ERROR: Boundary inconsistent")
 */
  __pyx_t_6 = __pyx_v_self->dim;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "phd/domain/domain_manager.pyx":76
 *         self.max_length = 0.
 *         for i in range(self.dim):
 *             if xmax[i] < xmin[i]:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("ERROR: Boundary inconsistent")
 * 
 */
    if (unlikely(__pyx_v_xmax == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 76, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_xmax, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_v_xmin == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 76, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_xmin, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyObject_RichCompare(__pyx_t_4, __pyx_t_9, Py_LT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(__pyx_t_3)) {

      /* "phd/domain/domain_manager.pyx":77
 *         for i in range(self.dim):
 *             if xmax[i] < xmin[i]:
 *                 raise RuntimeError("ERROR: Boundary inconsistent")             # <<<<<<<<<<<<<<
 * 
 *             self.bounds[0][i] = xmin[i]
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(0, 77, __pyx_L1_error)

      /* "phd/domain/domain_manager.pyx":76
 *         self.max_length = 0.
 *         for i in range(self.dim):
 *             if xmax[i] < xmin[i]:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("ERROR: Boundary inconsistent")
 * 
 */
    }

    /* "phd/domain/domain_manager.pyx":79
 *                 raise RuntimeError("ERROR: Boundary inconsistent")
 * 
 *             self.bounds[0][i] = xmin[i]             # <<<<<<<<<<<<<<
 *             self.bounds[1][i] = xmax[i]
 *             self.translate[i] = xmax[i] - xmin[i]
 */
    if (unlikely(__pyx_v_xmin == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 79, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_xmin, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_11 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    ((__pyx_v_self->bounds[0])[__pyx_v_i]) = __pyx_t_11;

    /* "phd/domain/domain_manager.pyx":80
 * 
 *             self.bounds[0][i] = xmin[i]
 *             self.bounds[1][i] = xmax[i]             # <<<<<<<<<<<<<<
 *             self.translate[i] = xmax[i] - xmin[i]
 * 
 */
    if (unlikely(__pyx_v_xmax == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 80, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_xmax, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_11 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    ((__pyx_v_self->bounds[1])[__pyx_v_i]) = __pyx_t_11;

    /* "phd/domain/domain_manager.pyx":81
 *             self.bounds[0][i] = xmin[i]
 *             self.bounds[1][i] = xmax[i]
 *             self.translate[i] = xmax[i] - xmin[i]             # <<<<<<<<<<<<<<
 * 
 *             # minimum and maximum side length
 */
    if (unlikely(__pyx_v_xmax == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 81, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_xmax, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (unlikely(__pyx_v_xmin == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 81, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_xmin, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_11 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_self->translate[__pyx_v_i]) = __pyx_t_11;

    /* "phd/domain/domain_manager.pyx":84
 * 
 *             # minimum and maximum side length
 *             self.min_length = min(self.min_length, self.translate[i])             # <<<<<<<<<<<<<<
 *             self.max_length = max(self.max_length, self.translate[i])
 * 
 */
    __pyx_t_11 = (__pyx_v_self->translate[__pyx_v_i]);
    __pyx_t_12 = __pyx_v_self->min_length;
    if (((__pyx_t_11 < __pyx_t_12) != 0)) {
      __pyx_t_13 = __pyx_t_11;
    } else {
      __pyx_t_13 = __pyx_t_12;
    }
    __pyx_v_self->min_length = __pyx_t_13;

    /* "phd/domain/domain_manager.pyx":85
 *             # minimum and maximum side length
 *             self.min_length = min(self.min_length, self.translate[i])
 *             self.max_length = max(self.max_length, self.translate[i])             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
    __pyx_t_13 = (__pyx_v_self->translate[__pyx_v_i]);
    __pyx_t_11 = __pyx_v_self->max_length;
    if (((__pyx_t_13 > __pyx_t_11) != 0)) {
      __pyx_t_12 = __pyx_t_13;
    } else {
      __pyx_t_12 = __pyx_t_11;
    }
    __pyx_v_self->max_length = __pyx_t_12;
  }

  /* "phd/domain/domain_manager.pyx":87
 *             self.max_length = max(self.max_length, self.translate[i])
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.loc_done = np.zeros(1, dtype=np.int32)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_phd); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_3) {

    /* "phd/domain/domain_manager.pyx":89
 *         if phd._in_parallel:
 * 
 *             self.loc_done = np.zeros(1, dtype=np.int32)             # <<<<<<<<<<<<<<
 *             self.glb_done = np.zeros(1, dtype=np.int32)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_int32); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, __pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_14);
    __Pyx_GOTREF(__pyx_v_self->loc_done);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->loc_done));
    __pyx_v_self->loc_done = ((PyArrayObject *)__pyx_t_14);
    __pyx_t_14 = 0;

    /* "phd/domain/domain_manager.pyx":90
 * 
 *             self.loc_done = np.zeros(1, dtype=np.int32)
 *             self.glb_done = np.zeros(1, dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *             # mpi send/receive counts
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__4, __pyx_t_14); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_10);
    __Pyx_GOTREF(__pyx_v_self->glb_done);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->glb_done));
    __pyx_v_self->glb_done = ((PyArrayObject *)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "phd/domain/domain_manager.pyx":93
 * 
 *             # mpi send/receive counts
 *             self.send_cnts = np.zeros(phd._size, dtype=np.int32)             # <<<<<<<<<<<<<<
 *             self.recv_cnts = np.zeros(phd._size, dtype=np.int32)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_zeros); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_phd); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_size); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int32); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_15) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_15);
    __Pyx_GOTREF(__pyx_v_self->send_cnts);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->send_cnts));
    __pyx_v_self->send_cnts = ((PyArrayObject *)__pyx_t_15);
    __pyx_t_15 = 0;

    /* "phd/domain/domain_manager.pyx":94
 *             # mpi send/receive counts
 *             self.send_cnts = np.zeros(phd._size, dtype=np.int32)
 *             self.recv_cnts = np.zeros(phd._size, dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *             # mpi send/recieve displacements
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_phd); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_size); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_int32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_15, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->recv_cnts);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->recv_cnts));
    __pyx_v_self->recv_cnts = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "phd/domain/domain_manager.pyx":97
 * 
 *             # mpi send/recieve displacements
 *             self.send_disp = np.zeros(phd._size, dtype=np.int32)             # <<<<<<<<<<<<<<
 *             self.recv_disp = np.zeros(phd._size, dtype=np.int32)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_phd); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_size); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_15);
    __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int32); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_4, __pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_14);
    __Pyx_GOTREF(__pyx_v_self->send_disp);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->send_disp));
    __pyx_v_self->send_disp = ((PyArrayObject *)__pyx_t_14);
    __pyx_t_14 = 0;

    /* "phd/domain/domain_manager.pyx":98
 *             # mpi send/recieve displacements
 *             self.send_disp = np.zeros(phd._size, dtype=np.int32)
 *             self.recv_disp = np.zeros(phd._size, dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *     def register_fields(self, CarrayContainer particles):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_zeros); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_phd); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_int32); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_14, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_9);
    __Pyx_GOTREF(__pyx_v_self->recv_disp);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->recv_disp));
    __pyx_v_self->recv_disp = ((PyArrayObject *)__pyx_t_9);
    __pyx_t_9 = 0;

    /* "phd/domain/domain_manager.pyx":87
 *             self.max_length = max(self.max_length, self.translate[i])
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.loc_done = np.zeros(1, dtype=np.int32)
 */
  }

  /* "phd/domain/domain_manager.pyx":48
 * 
 * cdef class DomainManager:
 *     def __init__(self, list xmin, list xmax, double initial_radius,             # <<<<<<<<<<<<<<
 *                  double search_radius_factor=2.0):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":100
 *             self.recv_disp = np.zeros(phd._size, dtype=np.int32)
 * 
 *     def register_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Register mesh fields into the particle container (i.e.
 *         volume, center of mass)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_3register_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_2register_fields[] = "Register mesh fields into the particle container (i.e.\n        volume, center of mass)\n\n        Parameters\n        ----------\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_3register_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("register_fields (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 100, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_2register_fields(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_2register_fields(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_v_field = 0;
  PyObject *__pyx_v_dtype = 0;
  int __pyx_v_num_particles;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("register_fields", 0);

  /* "phd/domain/domain_manager.pyx":108
 *         """
 *         cdef str field, dtype
 *         cdef int num_particles = particles.get_carray_size()             # <<<<<<<<<<<<<<
 * 
 *         if self.dim != len(particles.carray_named_groups["position"]):
 */
  __pyx_v_num_particles = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);

  /* "phd/domain/domain_manager.pyx":110
 *         cdef int num_particles = particles.get_carray_size()
 * 
 *         if self.dim != len(particles.carray_named_groups["position"]):             # <<<<<<<<<<<<<<
 *             raise RuntimeError("ERROR: Particle dim does not match")
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 110, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_v_self->dim != __pyx_t_2) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "phd/domain/domain_manager.pyx":111
 * 
 *         if self.dim != len(particles.carray_named_groups["position"]):
 *             raise RuntimeError("ERROR: Particle dim does not match")             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 111, __pyx_L1_error)

    /* "phd/domain/domain_manager.pyx":110
 *         cdef int num_particles = particles.get_carray_size()
 * 
 *         if self.dim != len(particles.carray_named_groups["position"]):             # <<<<<<<<<<<<<<
 *             raise RuntimeError("ERROR: Particle dim does not match")
 * 
 */
  }

  /* "phd/domain/domain_manager.pyx":113
 *             raise RuntimeError("ERROR: Particle dim does not match")
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             for field, dtype in fields_for_parallel.iteritems():
 *                 if field not in particles.carrays.keys():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "phd/domain/domain_manager.pyx":114
 * 
 *         if phd._in_parallel:
 *             for field, dtype in fields_for_parallel.iteritems():             # <<<<<<<<<<<<<<
 *                 if field not in particles.carrays.keys():
 *                     particles.register_carray(num_particles, field, dtype)
 */
    __pyx_t_2 = 0;
    if (unlikely(__pyx_v_3phd_6domain_14domain_manager_fields_for_parallel == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
      __PYX_ERR(0, 114, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_3phd_6domain_14domain_manager_fields_for_parallel, 1, __pyx_n_s_iteritems, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_5, &__pyx_t_2, &__pyx_t_1, &__pyx_t_7, NULL, __pyx_t_6);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);
      if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 114, __pyx_L1_error)
      if (!(likely(PyString_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_field, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_dtype, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "phd/domain/domain_manager.pyx":115
 *         if phd._in_parallel:
 *             for field, dtype in fields_for_parallel.iteritems():
 *                 if field not in particles.carrays.keys():             # <<<<<<<<<<<<<<
 *                     particles.register_carray(num_particles, field, dtype)
 *         else:
 */
      if (unlikely(__pyx_v_particles->carrays == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
        __PYX_ERR(0, 115, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PyDict_Keys(__pyx_v_particles->carrays); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_field, __pyx_t_7, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = (__pyx_t_3 != 0);
      if (__pyx_t_9) {

        /* "phd/domain/domain_manager.pyx":116
 *             for field, dtype in fields_for_parallel.iteritems():
 *                 if field not in particles.carrays.keys():
 *                     particles.register_carray(num_particles, field, dtype)             # <<<<<<<<<<<<<<
 *         else:
 *             particles.register_carray(num_particles, "map", "long")
 */
        __pyx_t_10.__pyx_n = 1;
        __pyx_t_10.dtype = __pyx_v_dtype;
        __pyx_t_7 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->register_carray(__pyx_v_particles, __pyx_v_num_particles, __pyx_v_field, 0, &__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "phd/domain/domain_manager.pyx":115
 *         if phd._in_parallel:
 *             for field, dtype in fields_for_parallel.iteritems():
 *                 if field not in particles.carrays.keys():             # <<<<<<<<<<<<<<
 *                     particles.register_carray(num_particles, field, dtype)
 *         else:
 */
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "phd/domain/domain_manager.pyx":113
 *             raise RuntimeError("ERROR: Particle dim does not match")
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             for field, dtype in fields_for_parallel.iteritems():
 *                 if field not in particles.carrays.keys():
 */
    goto __pyx_L4;
  }

  /* "phd/domain/domain_manager.pyx":118
 *                     particles.register_carray(num_particles, field, dtype)
 *         else:
 *             particles.register_carray(num_particles, "map", "long")             # <<<<<<<<<<<<<<
 * 
 *         particles.register_carray(num_particles, "radius", "double")
 */
  /*else*/ {
    __pyx_t_10.__pyx_n = 1;
    __pyx_t_10.dtype = __pyx_n_s_long;
    __pyx_t_4 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->register_carray(__pyx_v_particles, __pyx_v_num_particles, __pyx_n_s_map, 0, &__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L4:;

  /* "phd/domain/domain_manager.pyx":120
 *             particles.register_carray(num_particles, "map", "long")
 * 
 *         particles.register_carray(num_particles, "radius", "double")             # <<<<<<<<<<<<<<
 *         particles.register_carray(num_particles, "old_radius", "double")
 * 
 */
  __pyx_t_10.__pyx_n = 1;
  __pyx_t_10.dtype = __pyx_n_s_double;
  __pyx_t_4 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->register_carray(__pyx_v_particles, __pyx_v_num_particles, __pyx_n_s_radius, 0, &__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "phd/domain/domain_manager.pyx":121
 * 
 *         particles.register_carray(num_particles, "radius", "double")
 *         particles.register_carray(num_particles, "old_radius", "double")             # <<<<<<<<<<<<<<
 * 
 *         # set initial radius for mesh generation
 */
  __pyx_t_10.__pyx_n = 1;
  __pyx_t_10.dtype = __pyx_n_s_double;
  __pyx_t_4 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->register_carray(__pyx_v_particles, __pyx_v_num_particles, __pyx_n_s_old_radius, 0, &__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "phd/domain/domain_manager.pyx":124
 * 
 *         # set initial radius for mesh generation
 *         self.setup_initial_radius(particles)             # <<<<<<<<<<<<<<
 *         self.particle_fields_registered = True
 * 
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self->__pyx_vtab)->setup_initial_radius(__pyx_v_self, __pyx_v_particles, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "phd/domain/domain_manager.pyx":125
 *         # set initial radius for mesh generation
 *         self.setup_initial_radius(particles)
 *         self.particle_fields_registered = True             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self):
 */
  __pyx_v_self->particle_fields_registered = 1;

  /* "phd/domain/domain_manager.pyx":100
 *             self.recv_disp = np.zeros(phd._size, dtype=np.int32)
 * 
 *     def register_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Register mesh fields into the particle container (i.e.
 *         volume, center of mass)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.register_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":127
 *         self.particle_fields_registered = True
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         if not self.particle_fields_registered:
 *             raise RuntimeError("ERROR: Fields not registered in particles by Mesh!")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_5initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_5initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4initialize(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4initialize(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "phd/domain/domain_manager.pyx":128
 * 
 *     def initialize(self):
 *         if not self.particle_fields_registered:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("ERROR: Fields not registered in particles by Mesh!")
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_self->particle_fields_registered != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "phd/domain/domain_manager.pyx":129
 *     def initialize(self):
 *         if not self.particle_fields_registered:
 *             raise RuntimeError("ERROR: Fields not registered in particles by Mesh!")             # <<<<<<<<<<<<<<
 * 
 *         if not self.boundary_condition:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 129, __pyx_L1_error)

    /* "phd/domain/domain_manager.pyx":128
 * 
 *     def initialize(self):
 *         if not self.particle_fields_registered:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("ERROR: Fields not registered in particles by Mesh!")
 * 
 */
  }

  /* "phd/domain/domain_manager.pyx":131
 *             raise RuntimeError("ERROR: Fields not registered in particles by Mesh!")
 * 
 *         if not self.boundary_condition:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Not all setters defined in DomainMangaer")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->boundary_condition)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "phd/domain/domain_manager.pyx":132
 * 
 *         if not self.boundary_condition:
 *             raise RuntimeError("Not all setters defined in DomainMangaer")             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 132, __pyx_L1_error)

    /* "phd/domain/domain_manager.pyx":131
 *             raise RuntimeError("ERROR: Fields not registered in particles by Mesh!")
 * 
 *         if not self.boundary_condition:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Not all setters defined in DomainMangaer")
 * 
 */
  }

  /* "phd/domain/domain_manager.pyx":134
 *             raise RuntimeError("Not all setters defined in DomainMangaer")
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             if not self.load_balance:
 *                 raise RuntimeError("Not all setters defined in DomainMangaer")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "phd/domain/domain_manager.pyx":135
 * 
 *         if phd._in_parallel:
 *             if not self.load_balance:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Not all setters defined in DomainMangaer")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->load_balance)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 135, __pyx_L1_error)
    __pyx_t_1 = ((!__pyx_t_3) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "phd/domain/domain_manager.pyx":136
 *         if phd._in_parallel:
 *             if not self.load_balance:
 *                 raise RuntimeError("Not all setters defined in DomainMangaer")             # <<<<<<<<<<<<<<
 * 
 *     #@check_class(phd.BoundaryConditionBase)
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 136, __pyx_L1_error)

      /* "phd/domain/domain_manager.pyx":135
 * 
 *         if phd._in_parallel:
 *             if not self.load_balance:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Not all setters defined in DomainMangaer")
 * 
 */
    }

    /* "phd/domain/domain_manager.pyx":134
 *             raise RuntimeError("Not all setters defined in DomainMangaer")
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             if not self.load_balance:
 *                 raise RuntimeError("Not all setters defined in DomainMangaer")
 */
  }

  /* "phd/domain/domain_manager.pyx":127
 *         self.particle_fields_registered = True
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         if not self.particle_fields_registered:
 *             raise RuntimeError("ERROR: Fields not registered in particles by Mesh!")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":139
 * 
 *     #@check_class(phd.BoundaryConditionBase)
 *     def set_boundary_condition(self, boundary_condition):             # <<<<<<<<<<<<<<
 *         '''add boundary condition to list'''
 *         self.boundary_condition = boundary_condition
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_7set_boundary_condition(PyObject *__pyx_v_self, PyObject *__pyx_v_boundary_condition); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_6set_boundary_condition[] = "add boundary condition to list";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_7set_boundary_condition(PyObject *__pyx_v_self, PyObject *__pyx_v_boundary_condition) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_boundary_condition (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_6set_boundary_condition(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((PyObject *)__pyx_v_boundary_condition));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_6set_boundary_condition(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_boundary_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_boundary_condition", 0);

  /* "phd/domain/domain_manager.pyx":141
 *     def set_boundary_condition(self, boundary_condition):
 *         '''add boundary condition to list'''
 *         self.boundary_condition = boundary_condition             # <<<<<<<<<<<<<<
 * 
 *     #@check_class(phd.LoadBalance)
 */
  if (!(likely(((__pyx_v_boundary_condition) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_boundary_condition, __pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase))))) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_boundary_condition;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->boundary_condition);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->boundary_condition));
  __pyx_v_self->boundary_condition = ((struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":139
 * 
 *     #@check_class(phd.BoundaryConditionBase)
 *     def set_boundary_condition(self, boundary_condition):             # <<<<<<<<<<<<<<
 *         '''add boundary condition to list'''
 *         self.boundary_condition = boundary_condition
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.set_boundary_condition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":144
 * 
 *     #@check_class(phd.LoadBalance)
 *     def set_load_balance(self, load_balance):             # <<<<<<<<<<<<<<
 *         '''add boundary condition to list'''
 *         self.load_balance = load_balance
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_9set_load_balance(PyObject *__pyx_v_self, PyObject *__pyx_v_load_balance); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_8set_load_balance[] = "add boundary condition to list";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_9set_load_balance(PyObject *__pyx_v_self, PyObject *__pyx_v_load_balance) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_load_balance (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_8set_load_balance(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((PyObject *)__pyx_v_load_balance));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_8set_load_balance(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_load_balance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_load_balance", 0);

  /* "phd/domain/domain_manager.pyx":146
 *     def set_load_balance(self, load_balance):
 *         '''add boundary condition to list'''
 *         self.load_balance = load_balance             # <<<<<<<<<<<<<<
 * 
 *     cpdef check_for_partition(self, CarrayContainer particles, object integrator):
 */
  if (!(likely(((__pyx_v_load_balance) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_load_balance, __pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance))))) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_load_balance;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->load_balance);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->load_balance));
  __pyx_v_self->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":144
 * 
 *     #@check_class(phd.LoadBalance)
 *     def set_load_balance(self, load_balance):             # <<<<<<<<<<<<<<
 *         '''add boundary condition to list'''
 *         self.load_balance = load_balance
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.set_load_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":148
 *         self.load_balance = load_balance
 * 
 *     cpdef check_for_partition(self, CarrayContainer particles, object integrator):             # <<<<<<<<<<<<<<
 *         """
 *         Check if partition needs to called
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_11check_for_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_check_for_partition(CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED PyObject *__pyx_v_integrator, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_for_partition", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_for_partition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_11check_for_partition)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), __pyx_v_integrator};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), __pyx_v_integrator};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(__pyx_v_integrator);
          __Pyx_GIVEREF(__pyx_v_integrator);
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_integrator);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":152
 *         Check if partition needs to called
 *         """
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cpdef partition(self, CarrayContainer particles):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "phd/domain/domain_manager.pyx":148
 *         self.load_balance = load_balance
 * 
 *     cpdef check_for_partition(self, CarrayContainer particles, object integrator):             # <<<<<<<<<<<<<<
 *         """
 *         Check if partition needs to called
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.check_for_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_11check_for_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_10check_for_partition[] = "\n        Check if partition needs to called\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_11check_for_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  PyObject *__pyx_v_integrator = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_for_partition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_integrator,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_integrator)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_for_partition", 1, 2, 2, 1); __PYX_ERR(0, 148, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check_for_partition") < 0)) __PYX_ERR(0, 148, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_integrator = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check_for_partition", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 148, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.check_for_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10check_for_partition(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), __pyx_v_particles, __pyx_v_integrator);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10check_for_partition(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, PyObject *__pyx_v_integrator) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_for_partition", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_6domain_14domain_manager_13DomainManager_check_for_partition(__pyx_v_self, __pyx_v_particles, __pyx_v_integrator, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.check_for_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":154
 *         return True
 * 
 *     cpdef partition(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """
 *         Distribute particles across processors.
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_13partition(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_partition(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("partition", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_partition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_13partition)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_particles)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_particles));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":166
 *         # for particles that have left the domain apply boundary
 *         # condition to particle back in the domain
 *         self.boundary_condition.migrate_particles(particles, self)             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  ((struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *)__pyx_v_self->boundary_condition->__pyx_vtab)->migrate_particles(__pyx_v_self->boundary_condition, __pyx_v_particles, __pyx_v_self);

  /* "phd/domain/domain_manager.pyx":168
 *         self.boundary_condition.migrate_particles(particles, self)
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             self.load_balance.decomposition(particles)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "phd/domain/domain_manager.pyx":169
 * 
 *         if phd._in_parallel:
 *             self.load_balance.decomposition(particles)             # <<<<<<<<<<<<<<
 * 
 *     cpdef setup_initial_radius(self, CarrayContainer particles):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->load_balance), __pyx_n_s_decomposition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_v_particles)) : __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_v_particles));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/domain/domain_manager.pyx":168
 *         self.boundary_condition.migrate_particles(particles, self)
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             self.load_balance.decomposition(particles)
 * 
 */
  }

  /* "phd/domain/domain_manager.pyx":154
 *         return True
 * 
 *     cpdef partition(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """
 *         Distribute particles across processors.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_13partition(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_12partition[] = "\n        Distribute particles across processors.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_13partition(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("partition (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12partition(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12partition(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("partition", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_6domain_14domain_manager_13DomainManager_partition(__pyx_v_self, __pyx_v_particles, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":171
 *             self.load_balance.decomposition(particles)
 * 
 *     cpdef setup_initial_radius(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """At the start of the simulation assign every particle an
 *         initial radius used for constructing the mesh. This values
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_15setup_initial_radius(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_setup_initial_radius(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_r = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_rold = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setup_initial_radius", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setup_initial_radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_15setup_initial_radius)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_particles)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_particles));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":183
 *         """
 *         cdef int i
 *         cdef DoubleArray r = particles.get_carray("radius")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray rold = particles.get_carray("old_radius")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_radius, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 183, __pyx_L1_error)
  __pyx_v_r = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":184
 *         cdef int i
 *         cdef DoubleArray r = particles.get_carray("radius")
 *         cdef DoubleArray rold = particles.get_carray("old_radius")             # <<<<<<<<<<<<<<
 * 
 *         for i in range(particles.get_carray_size()):
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_old_radius, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 184, __pyx_L1_error)
  __pyx_v_rold = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":186
 *         cdef DoubleArray rold = particles.get_carray("old_radius")
 * 
 *         for i in range(particles.get_carray_size()):             # <<<<<<<<<<<<<<
 *             r.data[i] = self.initial_radius
 *             rold.data[i] = self.initial_radius
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "phd/domain/domain_manager.pyx":187
 * 
 *         for i in range(particles.get_carray_size()):
 *             r.data[i] = self.initial_radius             # <<<<<<<<<<<<<<
 *             rold.data[i] = self.initial_radius
 * 
 */
    __pyx_t_8 = __pyx_v_self->initial_radius;
    (__pyx_v_r->data[__pyx_v_i]) = __pyx_t_8;

    /* "phd/domain/domain_manager.pyx":188
 *         for i in range(particles.get_carray_size()):
 *             r.data[i] = self.initial_radius
 *             rold.data[i] = self.initial_radius             # <<<<<<<<<<<<<<
 * 
 *     cpdef store_radius(self, CarrayContainer particles):
 */
    __pyx_t_8 = __pyx_v_self->initial_radius;
    (__pyx_v_rold->data[__pyx_v_i]) = __pyx_t_8;
  }

  /* "phd/domain/domain_manager.pyx":171
 *             self.load_balance.decomposition(particles)
 * 
 *     cpdef setup_initial_radius(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """At the start of the simulation assign every particle an
 *         initial radius used for constructing the mesh. This values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.setup_initial_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XDECREF((PyObject *)__pyx_v_rold);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_15setup_initial_radius(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_14setup_initial_radius[] = "At the start of the simulation assign every particle an\n        initial radius used for constructing the mesh. This values\n        gets updated after each mesh build.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_15setup_initial_radius(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_initial_radius (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 171, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_14setup_initial_radius(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_14setup_initial_radius(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setup_initial_radius", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_6domain_14domain_manager_13DomainManager_setup_initial_radius(__pyx_v_self, __pyx_v_particles, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.setup_initial_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":190
 *             rold.data[i] = self.initial_radius
 * 
 *     cpdef store_radius(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """At the start of the simulation assign every particle an
 *         initial radius used for constructing the mesh. This values
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_17store_radius(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_store_radius(CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_r = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_rold = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("store_radius", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_store_radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_17store_radius)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_particles)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_particles));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":202
 *         """
 *         cdef int i
 *         cdef DoubleArray r = particles.get_carray("radius")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray rold = particles.get_carray("old_radius")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_radius, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_v_r = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":203
 *         cdef int i
 *         cdef DoubleArray r = particles.get_carray("radius")
 *         cdef DoubleArray rold = particles.get_carray("old_radius")             # <<<<<<<<<<<<<<
 * 
 *         for i in range(particles.get_carray_size()):
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_old_radius, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_v_rold = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":205
 *         cdef DoubleArray rold = particles.get_carray("old_radius")
 * 
 *         for i in range(particles.get_carray_size()):             # <<<<<<<<<<<<<<
 *             rold.data[i] = r.data[i]
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "phd/domain/domain_manager.pyx":206
 * 
 *         for i in range(particles.get_carray_size()):
 *             rold.data[i] = r.data[i]             # <<<<<<<<<<<<<<
 * 
 *     cpdef setup_for_ghost_creation(self, CarrayContainer particles):
 */
    (__pyx_v_rold->data[__pyx_v_i]) = (__pyx_v_r->data[__pyx_v_i]);
  }

  /* "phd/domain/domain_manager.pyx":190
 *             rold.data[i] = self.initial_radius
 * 
 *     cpdef store_radius(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """At the start of the simulation assign every particle an
 *         initial radius used for constructing the mesh. This values
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.store_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XDECREF((PyObject *)__pyx_v_rold);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_17store_radius(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_16store_radius[] = "At the start of the simulation assign every particle an\n        initial radius used for constructing the mesh. This values\n        gets updated after each mesh build.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_17store_radius(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("store_radius (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 190, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_16store_radius(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_16store_radius(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("store_radius", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_6domain_14domain_manager_13DomainManager_store_radius(__pyx_v_self, __pyx_v_particles, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.store_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":208
 *             rold.data[i] = r.data[i]
 * 
 *     cpdef setup_for_ghost_creation(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Go through each particle and flag for ghost creation. For particles
 *         with infinite radius use radius from previous time step.
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_19setup_for_ghost_creation(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_setup_for_ghost_creation(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_dim;
  struct FlagParticle *__pyx_v_p;
  __pyx_t_5numpy_float64_t *__pyx_v_x[3];
  CYTHON_UNUSED struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_r = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_rold = 0;
  std::list<struct FlagParticle> ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  struct FlagParticle __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setup_for_ghost_creation", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setup_for_ghost_creation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_19setup_for_ghost_creation)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_particles)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_particles));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":222
 *         cdef np.float64_t *x[3]
 *         cdef double search_radius
 *         cdef DoubleArray r = particles.get_carray("radius")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray rold = particles.get_carray("old_radius")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_radius, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 222, __pyx_L1_error)
  __pyx_v_r = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":223
 *         cdef double search_radius
 *         cdef DoubleArray r = particles.get_carray("radius")
 *         cdef DoubleArray rold = particles.get_carray("old_radius")             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_old_radius, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 223, __pyx_L1_error)
  __pyx_v_rold = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":225
 *         cdef DoubleArray rold = particles.get_carray("old_radius")
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 *         particles.pointer_groups(x, particles.carray_named_groups["position"])
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 225, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_5;

  /* "phd/domain/domain_manager.pyx":226
 * 
 *         dim = len(particles.carray_named_groups["position"])
 *         particles.pointer_groups(x, particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *         # set ghost buffer to zero
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 226, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 226, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_x, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":229
 * 
 *         # set ghost buffer to zero
 *         self.ghost_vec.clear()             # <<<<<<<<<<<<<<
 *         self.num_real_particles = particles.get_carray_size()
 * 
 */
  __pyx_v_self->ghost_vec.clear();

  /* "phd/domain/domain_manager.pyx":230
 *         # set ghost buffer to zero
 *         self.ghost_vec.clear()
 *         self.num_real_particles = particles.get_carray_size()             # <<<<<<<<<<<<<<
 * 
 *         # buffer to keep track of which particles
 */
  __pyx_v_self->num_real_particles = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);

  /* "phd/domain/domain_manager.pyx":234
 *         # buffer to keep track of which particles
 *         # have to exported for ghost updates
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.num_export = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "phd/domain/domain_manager.pyx":236
 *         if phd._in_parallel:
 * 
 *             self.num_export = 0             # <<<<<<<<<<<<<<
 *             self.export_ghost_buffer.clear()
 *             self.import_ghost_buffer.clear()
 */
    __pyx_v_self->num_export = 0;

    /* "phd/domain/domain_manager.pyx":237
 * 
 *             self.num_export = 0
 *             self.export_ghost_buffer.clear()             # <<<<<<<<<<<<<<
 *             self.import_ghost_buffer.clear()
 * 
 */
    __pyx_v_self->export_ghost_buffer.clear();

    /* "phd/domain/domain_manager.pyx":238
 *             self.num_export = 0
 *             self.export_ghost_buffer.clear()
 *             self.import_ghost_buffer.clear()             # <<<<<<<<<<<<<<
 * 
 *         # flag all real particles for ghost creation
 */
    __pyx_v_self->import_ghost_buffer.clear();

    /* "phd/domain/domain_manager.pyx":234
 *         # buffer to keep track of which particles
 *         # have to exported for ghost updates
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.num_export = 0
 */
  }

  /* "phd/domain/domain_manager.pyx":242
 *         # flag all real particles for ghost creation
 *         # there should be no ghost particles in the particle container
 *         self.flagged_particles.resize(particles.get_carray_size(), FlagParticle())             # <<<<<<<<<<<<<<
 * 
 *         i = 0
 */
  __pyx_v_self->flagged_particles.resize(((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0), __pyx_t_7);

  /* "phd/domain/domain_manager.pyx":244
 *         self.flagged_particles.resize(particles.get_carray_size(), FlagParticle())
 * 
 *         i = 0             # <<<<<<<<<<<<<<
 *         cdef cpplist[FlagParticle].iterator it = self.flagged_particles.begin()
 *         while(it != self.flagged_particles.end()):
 */
  __pyx_v_i = 0;

  /* "phd/domain/domain_manager.pyx":245
 * 
 *         i = 0
 *         cdef cpplist[FlagParticle].iterator it = self.flagged_particles.begin()             # <<<<<<<<<<<<<<
 *         while(it != self.flagged_particles.end()):
 * 
 */
  __pyx_v_it = __pyx_v_self->flagged_particles.begin();

  /* "phd/domain/domain_manager.pyx":246
 *         i = 0
 *         cdef cpplist[FlagParticle].iterator it = self.flagged_particles.begin()
 *         while(it != self.flagged_particles.end()):             # <<<<<<<<<<<<<<
 * 
 *             # populate with particle information
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_it != __pyx_v_self->flagged_particles.end()) != 0);
    if (!__pyx_t_6) break;

    /* "phd/domain/domain_manager.pyx":249
 * 
 *             # populate with particle information
 *             p = particle_flag_deref(it)             # <<<<<<<<<<<<<<
 *             p.index = i
 * 
 */
    __pyx_v_p = particle_flag_deref(__pyx_v_it);

    /* "phd/domain/domain_manager.pyx":250
 *             # populate with particle information
 *             p = particle_flag_deref(it)
 *             p.index = i             # <<<<<<<<<<<<<<
 * 
 *             # initial values are flags meant to skip
 */
    __pyx_v_p->index = __pyx_v_i;

    /* "phd/domain/domain_manager.pyx":254
 *             # initial values are flags meant to skip
 *             # calcualtion for first mesh build
 *             if phd._in_parallel:             # <<<<<<<<<<<<<<
 *                 p.old_search_radius = -1
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "phd/domain/domain_manager.pyx":255
 *             # calcualtion for first mesh build
 *             if phd._in_parallel:
 *                 p.old_search_radius = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 p.old_search_radius = 0.
 */
      __pyx_v_p->old_search_radius = -1.0;

      /* "phd/domain/domain_manager.pyx":254
 *             # initial values are flags meant to skip
 *             # calcualtion for first mesh build
 *             if phd._in_parallel:             # <<<<<<<<<<<<<<
 *                 p.old_search_radius = -1
 *             else:
 */
      goto __pyx_L6;
    }

    /* "phd/domain/domain_manager.pyx":257
 *                 p.old_search_radius = -1
 *             else:
 *                 p.old_search_radius = 0.             # <<<<<<<<<<<<<<
 * 
 *             # scale search radius from voronoi radius
 */
    /*else*/ {
      __pyx_v_p->old_search_radius = 0.;
    }
    __pyx_L6:;

    /* "phd/domain/domain_manager.pyx":260
 * 
 *             # scale search radius from voronoi radius
 *             p.search_radius = self.search_radius_factor*rold.data[i]             # <<<<<<<<<<<<<<
 * 
 *             # copy position and momentum, momentum is used because
 */
    __pyx_v_p->search_radius = (__pyx_v_self->search_radius_factor * (__pyx_v_rold->data[__pyx_v_i]));

    /* "phd/domain/domain_manager.pyx":264
 *             # copy position and momentum, momentum is used because
 *             # after an update only the momentum is correct
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 *                 p.x[k] = x[k][i]
 * 
 */
    __pyx_t_8 = __pyx_v_dim;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_k = __pyx_t_10;

      /* "phd/domain/domain_manager.pyx":265
 *             # after an update only the momentum is correct
 *             for k in range(dim):
 *                 p.x[k] = x[k][i]             # <<<<<<<<<<<<<<
 * 
 *             # next particle
 */
      (__pyx_v_p->x[__pyx_v_k]) = ((__pyx_v_x[__pyx_v_k])[__pyx_v_i]);
    }

    /* "phd/domain/domain_manager.pyx":268
 * 
 *             # next particle
 *             inc(it)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    (void)((++__pyx_v_it));

    /* "phd/domain/domain_manager.pyx":269
 *             # next particle
 *             inc(it)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *     cpdef update_search_radius(self, CarrayContainer particles):
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "phd/domain/domain_manager.pyx":208
 *             rold.data[i] = r.data[i]
 * 
 *     cpdef setup_for_ghost_creation(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Go through each particle and flag for ghost creation. For particles
 *         with infinite radius use radius from previous time step.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.setup_for_ghost_creation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XDECREF((PyObject *)__pyx_v_rold);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_19setup_for_ghost_creation(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_18setup_for_ghost_creation[] = "Go through each particle and flag for ghost creation. For particles\n        with infinite radius use radius from previous time step.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_19setup_for_ghost_creation(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_for_ghost_creation (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18setup_for_ghost_creation(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18setup_for_ghost_creation(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setup_for_ghost_creation", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_6domain_14domain_manager_13DomainManager_setup_for_ghost_creation(__pyx_v_self, __pyx_v_particles, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.setup_for_ghost_creation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":271
 *             i += 1
 * 
 *     cpdef update_search_radius(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Go through each flag particle and update its radius. If
 *         the particle is still infinite double the search radius. If
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_21update_search_radius(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_search_radius(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  struct FlagParticle *__pyx_v_p;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_r = 0;
  std::list<struct FlagParticle> ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_search_radius", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_search_radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_21update_search_radius)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_particles)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_particles));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 271, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":286
 *         cdef FlagParticle *p
 *         cdef double search_radius
 *         cdef DoubleArray r = particles.get_carray("radius")             # <<<<<<<<<<<<<<
 * 
 *         # there should be no ghost particles
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_radius, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 286, __pyx_L1_error)
  __pyx_v_r = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":289
 * 
 *         # there should be no ghost particles
 *         cdef cpplist[FlagParticle].iterator it = self.flagged_particles.begin()             # <<<<<<<<<<<<<<
 *         while(it != self.flagged_particles.end()):
 * 
 */
  __pyx_v_it = __pyx_v_self->flagged_particles.begin();

  /* "phd/domain/domain_manager.pyx":290
 *         # there should be no ghost particles
 *         cdef cpplist[FlagParticle].iterator it = self.flagged_particles.begin()
 *         while(it != self.flagged_particles.end()):             # <<<<<<<<<<<<<<
 * 
 *             # retrieve particle
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_it != __pyx_v_self->flagged_particles.end()) != 0);
    if (!__pyx_t_5) break;

    /* "phd/domain/domain_manager.pyx":293
 * 
 *             # retrieve particle
 *             p = particle_flag_deref(it)             # <<<<<<<<<<<<<<
 *             i = p.index
 * 
 */
    __pyx_v_p = particle_flag_deref(__pyx_v_it);

    /* "phd/domain/domain_manager.pyx":294
 *             # retrieve particle
 *             p = particle_flag_deref(it)
 *             i = p.index             # <<<<<<<<<<<<<<
 * 
 *             # at this point the radius of each particle has been
 */
    __pyx_t_6 = __pyx_v_p->index;
    __pyx_v_i = __pyx_t_6;

    /* "phd/domain/domain_manager.pyx":299
 *             # updated by the mesh
 * 
 *             if r.data[i] < 0: # infinite radius             # <<<<<<<<<<<<<<
 *                 # grow until finite
 *                 p.old_search_radius = p.search_radius
 */
    __pyx_t_5 = (((__pyx_v_r->data[__pyx_v_i]) < 0.0) != 0);
    if (__pyx_t_5) {

      /* "phd/domain/domain_manager.pyx":301
 *             if r.data[i] < 0: # infinite radius
 *                 # grow until finite
 *                 p.old_search_radius = p.search_radius             # <<<<<<<<<<<<<<
 *                 p.search_radius = self.search_radius_factor*p.search_radius
 *                 inc(it) # next particle
 */
      __pyx_t_7 = __pyx_v_p->search_radius;
      __pyx_v_p->old_search_radius = __pyx_t_7;

      /* "phd/domain/domain_manager.pyx":302
 *                 # grow until finite
 *                 p.old_search_radius = p.search_radius
 *                 p.search_radius = self.search_radius_factor*p.search_radius             # <<<<<<<<<<<<<<
 *                 inc(it) # next particle
 * 
 */
      __pyx_v_p->search_radius = (__pyx_v_self->search_radius_factor * __pyx_v_p->search_radius);

      /* "phd/domain/domain_manager.pyx":303
 *                 p.old_search_radius = p.search_radius
 *                 p.search_radius = self.search_radius_factor*p.search_radius
 *                 inc(it) # next particle             # <<<<<<<<<<<<<<
 * 
 *             else: # finite radius
 */
      (void)((++__pyx_v_it));

      /* "phd/domain/domain_manager.pyx":299
 *             # updated by the mesh
 * 
 *             if r.data[i] < 0: # infinite radius             # <<<<<<<<<<<<<<
 *                 # grow until finite
 *                 p.old_search_radius = p.search_radius
 */
      goto __pyx_L5;
    }

    /* "phd/domain/domain_manager.pyx":308
 *                 # if updated radius is smaller than
 *                 # then search radius we are done
 *                 if r.data[i] < p.search_radius:             # <<<<<<<<<<<<<<
 *                     it = self.flagged_particles.erase(it)
 *                 else:
 */
    /*else*/ {
      __pyx_t_5 = (((__pyx_v_r->data[__pyx_v_i]) < __pyx_v_p->search_radius) != 0);
      if (__pyx_t_5) {

        /* "phd/domain/domain_manager.pyx":309
 *                 # then search radius we are done
 *                 if r.data[i] < p.search_radius:
 *                     it = self.flagged_particles.erase(it)             # <<<<<<<<<<<<<<
 *                 else:
 *                     p.old_search_radius = p.search_radius
 */
        __pyx_v_it = __pyx_v_self->flagged_particles.erase(__pyx_v_it);

        /* "phd/domain/domain_manager.pyx":308
 *                 # if updated radius is smaller than
 *                 # then search radius we are done
 *                 if r.data[i] < p.search_radius:             # <<<<<<<<<<<<<<
 *                     it = self.flagged_particles.erase(it)
 *                 else:
 */
        goto __pyx_L6;
      }

      /* "phd/domain/domain_manager.pyx":311
 *                     it = self.flagged_particles.erase(it)
 *                 else:
 *                     p.old_search_radius = p.search_radius             # <<<<<<<<<<<<<<
 *                     p.search_radius = self.search_radius_factor*p.search_radius
 *                     inc(it) # next particle
 */
      /*else*/ {
        __pyx_t_7 = __pyx_v_p->search_radius;
        __pyx_v_p->old_search_radius = __pyx_t_7;

        /* "phd/domain/domain_manager.pyx":312
 *                 else:
 *                     p.old_search_radius = p.search_radius
 *                     p.search_radius = self.search_radius_factor*p.search_radius             # <<<<<<<<<<<<<<
 *                     inc(it) # next particle
 * 
 */
        __pyx_v_p->search_radius = (__pyx_v_self->search_radius_factor * __pyx_v_p->search_radius);

        /* "phd/domain/domain_manager.pyx":313
 *                     p.old_search_radius = p.search_radius
 *                     p.search_radius = self.search_radius_factor*p.search_radius
 *                     inc(it) # next particle             # <<<<<<<<<<<<<<
 * 
 *     cpdef create_ghost_particles(self, CarrayContainer particles):
 */
        (void)((++__pyx_v_it));
      }
      __pyx_L6:;
    }
    __pyx_L5:;
  }

  /* "phd/domain/domain_manager.pyx":271
 *             i += 1
 * 
 *     cpdef update_search_radius(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Go through each flag particle and update its radius. If
 *         the particle is still infinite double the search radius. If
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.update_search_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_21update_search_radius(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_20update_search_radius[] = "Go through each flag particle and update its radius. If\n        the particle is still infinite double the search radius. If\n        the new radius is smaller then the old search radius then that\n        particle is done.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_21update_search_radius(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_search_radius (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 271, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_20update_search_radius(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_20update_search_radius(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_search_radius", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_search_radius(__pyx_v_self, __pyx_v_particles, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.update_search_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":315
 *                     inc(it) # next particle
 * 
 *     cpdef create_ghost_particles(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """After mesh generation, this method goes through partilce list
 *         and generates ghost particles and communicates them. This method
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_23create_ghost_particles(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_create_ghost_particles(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_ghost_particles", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_create_ghost_particles); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_23create_ghost_particles)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_particles)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_particles));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":327
 *         """
 *         # clear out for next batch of ghost particles
 *         self.ghost_vec.clear()             # <<<<<<<<<<<<<<
 *         self.boundary_condition.create_ghost_particle(self.flagged_particles, self)
 * 
 */
  __pyx_v_self->ghost_vec.clear();

  /* "phd/domain/domain_manager.pyx":328
 *         # clear out for next batch of ghost particles
 *         self.ghost_vec.clear()
 *         self.boundary_condition.create_ghost_particle(self.flagged_particles, self)             # <<<<<<<<<<<<<<
 * 
 *         # copy particles, put in processor order and export
 */
  ((struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *)__pyx_v_self->boundary_condition->__pyx_vtab)->create_ghost_particle(__pyx_v_self->boundary_condition, __pyx_v_self->flagged_particles, __pyx_v_self);

  /* "phd/domain/domain_manager.pyx":331
 * 
 *         # copy particles, put in processor order and export
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             # do processor patch ghost particles
 *             self.create_interior_ghost_particles(particles)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "phd/domain/domain_manager.pyx":333
 *         if phd._in_parallel:
 *             # do processor patch ghost particles
 *             self.create_interior_ghost_particles(particles)             # <<<<<<<<<<<<<<
 *             self.copy_particles_parallel(particles)
 *         else:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self->__pyx_vtab)->create_interior_ghost_particles(__pyx_v_self, __pyx_v_particles); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/domain/domain_manager.pyx":334
 *             # do processor patch ghost particles
 *             self.create_interior_ghost_particles(particles)
 *             self.copy_particles_parallel(particles)             # <<<<<<<<<<<<<<
 *         else:
 *             self.copy_particles_serial(particles)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self->__pyx_vtab)->copy_particles_parallel(__pyx_v_self, __pyx_v_particles); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/domain/domain_manager.pyx":331
 * 
 *         # copy particles, put in processor order and export
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             # do processor patch ghost particles
 *             self.create_interior_ghost_particles(particles)
 */
    goto __pyx_L3;
  }

  /* "phd/domain/domain_manager.pyx":336
 *             self.copy_particles_parallel(particles)
 *         else:
 *             self.copy_particles_serial(particles)             # <<<<<<<<<<<<<<
 * 
 *     cdef create_interior_ghost_particles(self, CarrayContainer particles):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self->__pyx_vtab)->copy_particles_serial(__pyx_v_self, __pyx_v_particles); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "phd/domain/domain_manager.pyx":315
 *                     inc(it) # next particle
 * 
 *     cpdef create_ghost_particles(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """After mesh generation, this method goes through partilce list
 *         and generates ghost particles and communicates them. This method
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.create_ghost_particles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_23create_ghost_particles(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_22create_ghost_particles[] = "After mesh generation, this method goes through partilce list\n        and generates ghost particles and communicates them. This method\n        is called by mesh repeatedly until the mesh is complete.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_23create_ghost_particles(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_ghost_particles (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 315, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_22create_ghost_particles(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_22create_ghost_particles(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_ghost_particles", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_6domain_14domain_manager_13DomainManager_create_ghost_particles(__pyx_v_self, __pyx_v_particles, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.create_ghost_particles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":338
 *             self.copy_particles_serial(particles)
 * 
 *     cdef create_interior_ghost_particles(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Create interior ghost particles to stitch back the solution
 *         across processors.
 */

static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_create_interior_ghost_particles(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  int __pyx_v_i;
  int __pyx_v_dim;
  struct FlagParticle *__pyx_v_p;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_nbrs_pid = 0;
  CYTHON_UNUSED struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_leaf_pid = 0;
  std::list<struct FlagParticle> ::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_interior_ghost_particles", 0);

  /* "phd/domain/domain_manager.pyx":350
 *         cdef int i, dim
 *         cdef FlagParticle *p
 *         cdef LongArray nbrs_pid = LongArray()             # <<<<<<<<<<<<<<
 *         cdef LongArray leaf_pid = self.load_balance.leaf_pid
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3phd_5utils_6carray_LongArray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nbrs_pid = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":351
 *         cdef FlagParticle *p
 *         cdef LongArray nbrs_pid = LongArray()
 *         cdef LongArray leaf_pid = self.load_balance.leaf_pid             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->load_balance->leaf_pid);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_leaf_pid = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":353
 *         cdef LongArray leaf_pid = self.load_balance.leaf_pid
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *         # create interior ghost particles from flagged particles
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 353, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_2;

  /* "phd/domain/domain_manager.pyx":356
 * 
 *         # create interior ghost particles from flagged particles
 *         cdef cpplist[FlagParticle].iterator it = self.flagged_particles.begin()             # <<<<<<<<<<<<<<
 *         while it != self.flagged_particles.end():
 * 
 */
  __pyx_v_it = __pyx_v_self->flagged_particles.begin();

  /* "phd/domain/domain_manager.pyx":357
 *         # create interior ghost particles from flagged particles
 *         cdef cpplist[FlagParticle].iterator it = self.flagged_particles.begin()
 *         while it != self.flagged_particles.end():             # <<<<<<<<<<<<<<
 * 
 *             # retrieve particle
 */
  while (1) {
    __pyx_t_3 = ((__pyx_v_it != __pyx_v_self->flagged_particles.end()) != 0);
    if (!__pyx_t_3) break;

    /* "phd/domain/domain_manager.pyx":360
 * 
 *             # retrieve particle
 *             p = particle_flag_deref(it)             # <<<<<<<<<<<<<<
 * 
 *             # find all processors encolsed between old_search_radius
 */
    __pyx_v_p = particle_flag_deref(__pyx_v_it);

    /* "phd/domain/domain_manager.pyx":364
 *             # find all processors encolsed between old_search_radius
 *             # and search_radius from domain partition
 *             nbrs_pid.reset()             # <<<<<<<<<<<<<<
 *             self.get_nearest_intersect_process_neighbors(
 *                     p.x, p.old_search_radius, p.search_radius,
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_nbrs_pid->__pyx_base.__pyx_vtab)->__pyx_base.reset(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_nbrs_pid), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/domain/domain_manager.pyx":367
 *             self.get_nearest_intersect_process_neighbors(
 *                     p.x, p.old_search_radius, p.search_radius,
 *                     phd._rank, nbrs_pid)             # <<<<<<<<<<<<<<
 * 
 *             # if processors found put the particle in buffer
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_rank); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "phd/domain/domain_manager.pyx":365
 *             # and search_radius from domain partition
 *             nbrs_pid.reset()
 *             self.get_nearest_intersect_process_neighbors(             # <<<<<<<<<<<<<<
 *                     p.x, p.old_search_radius, p.search_radius,
 *                     phd._rank, nbrs_pid)
 */
    (void)(((struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self->__pyx_vtab)->get_nearest_intersect_process_neighbors(__pyx_v_self, __pyx_v_p->x, __pyx_v_p->old_search_radius, __pyx_v_p->search_radius, __pyx_t_5, __pyx_v_nbrs_pid));

    /* "phd/domain/domain_manager.pyx":371
 *             # if processors found put the particle in buffer
 *             # for ghost creation and export
 *             if nbrs_pid.length:             # <<<<<<<<<<<<<<
 *                 for i in range(nbrs_pid.length):
 * 
 */
    __pyx_t_3 = (__pyx_v_nbrs_pid->__pyx_base.length != 0);
    if (__pyx_t_3) {

      /* "phd/domain/domain_manager.pyx":372
 *             # for ghost creation and export
 *             if nbrs_pid.length:
 *                 for i in range(nbrs_pid.length):             # <<<<<<<<<<<<<<
 * 
 *                     # store particle information for ghost creation
 */
      __pyx_t_6 = __pyx_v_nbrs_pid->__pyx_base.length;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_7; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "phd/domain/domain_manager.pyx":375
 * 
 *                     # store particle information for ghost creation
 *                     self.ghost_vec.push_back(BoundaryParticle(             # <<<<<<<<<<<<<<
 *                         p.x, p.index, nbrs_pid.data[i], INTERIOR, dim))
 * 
 */
        try {
          __pyx_v_self->ghost_vec.push_back(BoundaryParticle(__pyx_v_p->x, __pyx_v_p->index, (__pyx_v_nbrs_pid->data[__pyx_v_i]), __pyx_v_3phd_6domain_14domain_manager_INTERIOR, __pyx_v_dim));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 375, __pyx_L1_error)
        }
      }

      /* "phd/domain/domain_manager.pyx":371
 *             # if processors found put the particle in buffer
 *             # for ghost creation and export
 *             if nbrs_pid.length:             # <<<<<<<<<<<<<<
 *                 for i in range(nbrs_pid.length):
 * 
 */
    }

    /* "phd/domain/domain_manager.pyx":378
 *                         p.x, p.index, nbrs_pid.data[i], INTERIOR, dim))
 * 
 *             inc(it)  # increment iterator             # <<<<<<<<<<<<<<
 * 
 *     cdef copy_particles_parallel(self, CarrayContainer particles):
 */
    (void)((++__pyx_v_it));
  }

  /* "phd/domain/domain_manager.pyx":338
 *             self.copy_particles_serial(particles)
 * 
 *     cdef create_interior_ghost_particles(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Create interior ghost particles to stitch back the solution
 *         across processors.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.create_interior_ghost_particles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_nbrs_pid);
  __Pyx_XDECREF((PyObject *)__pyx_v_leaf_pid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":380
 *             inc(it)  # increment iterator
 * 
 *     cdef copy_particles_parallel(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Copy particles from ghost_particle vector in parallel run.
 * 
 */

static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_copy_particles_parallel(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  struct __pyx_obj_3phd_5utils_6carray_IntArray *__pyx_v_tags = 0;
  struct __pyx_obj_3phd_5utils_6carray_IntArray *__pyx_v_types = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongLongArray *__pyx_v_keys = 0;
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_dim;
  int __pyx_v_num_import;
  int __pyx_v_num_new_ghost;
  __pyx_t_5numpy_float64_t *__pyx_v_xg[3];
  BoundaryParticle *__pyx_v_p;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_ghosts = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_indices = 0;
  int __pyx_v_start_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  PyArrayObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  long __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_particles_parallel", 0);

  /* "phd/domain/domain_manager.pyx":398
 *         cdef BoundaryParticle *p
 *         cdef CarrayContainer ghosts
 *         cdef LongArray indices = LongArray()             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3phd_5utils_6carray_LongArray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_indices = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":400
 *         cdef LongArray indices = LongArray()
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *         # reset import/export counts
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 400, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_2;

  /* "phd/domain/domain_manager.pyx":403
 * 
 *         # reset import/export counts
 *         for i in range(phd._size):             # <<<<<<<<<<<<<<
 *             self.send_cnts[i] = 0
 *             self.recv_cnts[i] = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_4 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/domain/domain_manager.pyx":404
 *         # reset import/export counts
 *         for i in range(phd._size):
 *             self.send_cnts[i] = 0             # <<<<<<<<<<<<<<
 *             self.recv_cnts[i] = 0
 * 
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_cnts), __pyx_v_i, __pyx_int_0, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 404, __pyx_L1_error)

    /* "phd/domain/domain_manager.pyx":405
 *         for i in range(phd._size):
 *             self.send_cnts[i] = 0
 *             self.recv_cnts[i] = 0             # <<<<<<<<<<<<<<
 * 
 *         # if ghost created
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->recv_cnts), __pyx_v_i, __pyx_int_0, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 405, __pyx_L1_error)
  }

  /* "phd/domain/domain_manager.pyx":408
 * 
 *         # if ghost created
 *         num_new_ghost = self.ghost_vec.size()             # <<<<<<<<<<<<<<
 *         if num_new_ghost != 0:
 * 
 */
  __pyx_v_num_new_ghost = __pyx_v_self->ghost_vec.size();

  /* "phd/domain/domain_manager.pyx":409
 *         # if ghost created
 *         num_new_ghost = self.ghost_vec.size()
 *         if num_new_ghost != 0:             # <<<<<<<<<<<<<<
 * 
 *             # sort particles in processor order for export
 */
  __pyx_t_7 = ((__pyx_v_num_new_ghost != 0) != 0);
  if (__pyx_t_7) {

    /* "phd/domain/domain_manager.pyx":412
 * 
 *             # sort particles in processor order for export
 *             sort(self.ghost_vec.begin(), self.ghost_vec.end(),             # <<<<<<<<<<<<<<
 *                     boundary_particle_cmp)
 * 
 */
    std::sort<std::vector<BoundaryParticle> ::iterator,int (BoundaryParticle const &, BoundaryParticle const &)>(__pyx_v_self->ghost_vec.begin(), __pyx_v_self->ghost_vec.end(), __pyx_f_3phd_6domain_14domain_manager_boundary_particle_cmp);

    /* "phd/domain/domain_manager.pyx":416
 * 
 *             # copy indices to make ghost particles
 *             indices.resize(num_new_ghost)             # <<<<<<<<<<<<<<
 *             for i in range(num_new_ghost):
 * 
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_indices->__pyx_base.__pyx_vtab)->__pyx_base.resize(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_indices), __pyx_v_num_new_ghost, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "phd/domain/domain_manager.pyx":417
 *             # copy indices to make ghost particles
 *             indices.resize(num_new_ghost)
 *             for i in range(num_new_ghost):             # <<<<<<<<<<<<<<
 * 
 *                 p = &self.ghost_vec[i]       # retrieve particle
 */
    __pyx_t_6 = __pyx_v_num_new_ghost;
    __pyx_t_8 = __pyx_t_6;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "phd/domain/domain_manager.pyx":419
 *             for i in range(num_new_ghost):
 * 
 *                 p = &self.ghost_vec[i]       # retrieve particle             # <<<<<<<<<<<<<<
 *                 if p.proc > phd._size or p.proc < 0:
 *                     raise RuntimeError("Found error in interior ghost")
 */
      __pyx_v_p = (&(__pyx_v_self->ghost_vec[__pyx_v_i]));

      /* "phd/domain/domain_manager.pyx":420
 * 
 *                 p = &self.ghost_vec[i]       # retrieve particle
 *                 if p.proc > phd._size or p.proc < 0:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("Found error in interior ghost")
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_p->proc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_size); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_10, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_11) {
      } else {
        __pyx_t_7 = __pyx_t_11;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_11 = ((__pyx_v_p->proc < 0) != 0);
      __pyx_t_7 = __pyx_t_11;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_7)) {

        /* "phd/domain/domain_manager.pyx":421
 *                 p = &self.ghost_vec[i]       # retrieve particle
 *                 if p.proc > phd._size or p.proc < 0:
 *                     raise RuntimeError("Found error in interior ghost")             # <<<<<<<<<<<<<<
 * 
 *                 indices.data[i] = p.index    # index of particle
 */
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 421, __pyx_L1_error)

        /* "phd/domain/domain_manager.pyx":420
 * 
 *                 p = &self.ghost_vec[i]       # retrieve particle
 *                 if p.proc > phd._size or p.proc < 0:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("Found error in interior ghost")
 * 
 */
      }

      /* "phd/domain/domain_manager.pyx":423
 *                     raise RuntimeError("Found error in interior ghost")
 * 
 *                 indices.data[i] = p.index    # index of particle             # <<<<<<<<<<<<<<
 *                 self.send_cnts[p.proc] += 1  # bin processor for export
 * 
 */
      __pyx_t_12 = __pyx_v_p->index;
      (__pyx_v_indices->data[__pyx_v_i]) = __pyx_t_12;

      /* "phd/domain/domain_manager.pyx":424
 * 
 *                 indices.data[i] = p.index    # index of particle
 *                 self.send_cnts[p.proc] += 1  # bin processor for export             # <<<<<<<<<<<<<<
 * 
 *             # copy particles to make ghost
 */
      __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
      __pyx_t_13 = __pyx_v_self->send_cnts;
      __pyx_t_12 = __pyx_v_p->proc;
      __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_t_13), __pyx_t_12, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 424, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_t_13), __pyx_t_12, __pyx_t_10, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 424, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_13)); __pyx_t_13 = 0;
    }

    /* "phd/domain/domain_manager.pyx":427
 * 
 *             # copy particles to make ghost
 *             ghosts = particles.extract_items(indices)             # <<<<<<<<<<<<<<
 * 
 *             tags = ghosts.get_carray("tag")
 */
    __pyx_t_10 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->extract_items(__pyx_v_particles, __pyx_v_indices, 0, NULL)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_v_ghosts = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "phd/domain/domain_manager.pyx":429
 *             ghosts = particles.extract_items(indices)
 * 
 *             tags = ghosts.get_carray("tag")             # <<<<<<<<<<<<<<
 *             types = ghosts.get_carray("type")
 *             keys = ghosts.get_carray("key")
 */
    __pyx_t_10 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_ghosts->__pyx_vtab)->get_carray(__pyx_v_ghosts, __pyx_n_s_tag, 0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_3phd_5utils_6carray_IntArray))))) __PYX_ERR(0, 429, __pyx_L1_error)
    __pyx_v_tags = ((struct __pyx_obj_3phd_5utils_6carray_IntArray *)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "phd/domain/domain_manager.pyx":430
 * 
 *             tags = ghosts.get_carray("tag")
 *             types = ghosts.get_carray("type")             # <<<<<<<<<<<<<<
 *             keys = ghosts.get_carray("key")
 * 
 */
    __pyx_t_10 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_ghosts->__pyx_vtab)->get_carray(__pyx_v_ghosts, __pyx_n_s_type, 0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_3phd_5utils_6carray_IntArray))))) __PYX_ERR(0, 430, __pyx_L1_error)
    __pyx_v_types = ((struct __pyx_obj_3phd_5utils_6carray_IntArray *)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "phd/domain/domain_manager.pyx":431
 *             tags = ghosts.get_carray("tag")
 *             types = ghosts.get_carray("type")
 *             keys = ghosts.get_carray("key")             # <<<<<<<<<<<<<<
 * 
 *             # update position and momentum
 */
    __pyx_t_10 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_ghosts->__pyx_vtab)->get_carray(__pyx_v_ghosts, __pyx_n_s_key, 0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_3phd_5utils_6carray_LongLongArray))))) __PYX_ERR(0, 431, __pyx_L1_error)
    __pyx_v_keys = ((struct __pyx_obj_3phd_5utils_6carray_LongLongArray *)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "phd/domain/domain_manager.pyx":434
 * 
 *             # update position and momentum
 *             ghosts.pointer_groups(xg, particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *             # transfer new data to ghost
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 434, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (!(likely(PyList_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_10)->tp_name), 0))) __PYX_ERR(0, 434, __pyx_L1_error)
    ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_ghosts->__pyx_vtab)->pointer_groups(__pyx_v_ghosts, __pyx_v_xg, ((PyObject*)__pyx_t_10));
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "phd/domain/domain_manager.pyx":437
 * 
 *             # transfer new data to ghost
 *             for i in range(num_new_ghost):             # <<<<<<<<<<<<<<
 *                 p = &self.ghost_vec[i]
 * 
 */
    __pyx_t_6 = __pyx_v_num_new_ghost;
    __pyx_t_8 = __pyx_t_6;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "phd/domain/domain_manager.pyx":438
 *             # transfer new data to ghost
 *             for i in range(num_new_ghost):
 *                 p = &self.ghost_vec[i]             # <<<<<<<<<<<<<<
 * 
 *                # store export information
 */
      __pyx_v_p = (&(__pyx_v_self->ghost_vec[__pyx_v_i]));

      /* "phd/domain/domain_manager.pyx":441
 * 
 *                # store export information
 *                 self.export_ghost_buffer.push_back(GhostID(             # <<<<<<<<<<<<<<
 *                     p.index, p.proc, self.num_export))
 * 
 */
      try {
        __pyx_v_self->export_ghost_buffer.push_back(GhostID(__pyx_v_p->index, __pyx_v_p->proc, __pyx_v_self->num_export));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 441, __pyx_L1_error)
      }

      /* "phd/domain/domain_manager.pyx":444
 *                     p.index, p.proc, self.num_export))
 * 
 *                 tags.data[i]  = GHOST             # <<<<<<<<<<<<<<
 *                 types.data[i] = p.ghost_type
 * 
 */
      (__pyx_v_tags->data[__pyx_v_i]) = __pyx_v_3phd_6domain_14domain_manager_GHOST;

      /* "phd/domain/domain_manager.pyx":445
 * 
 *                 tags.data[i]  = GHOST
 *                 types.data[i] = p.ghost_type             # <<<<<<<<<<<<<<
 * 
 *                 # we store export number in the keys data, temporarily
 */
      __pyx_t_12 = __pyx_v_p->ghost_type;
      (__pyx_v_types->data[__pyx_v_i]) = __pyx_t_12;

      /* "phd/domain/domain_manager.pyx":449
 *                 # we store export number in the keys data, temporarily
 *                 # for reordering after the mesh is complete
 *                 keys.data[i] = self.num_export             # <<<<<<<<<<<<<<
 *                 self.num_export += 1
 * 
 */
      __pyx_t_12 = __pyx_v_self->num_export;
      (__pyx_v_keys->data[__pyx_v_i]) = __pyx_t_12;

      /* "phd/domain/domain_manager.pyx":450
 *                 # for reordering after the mesh is complete
 *                 keys.data[i] = self.num_export
 *                 self.num_export += 1             # <<<<<<<<<<<<<<
 * 
 *                 for k in range(dim):
 */
      __pyx_v_self->num_export = (__pyx_v_self->num_export + 1);

      /* "phd/domain/domain_manager.pyx":452
 *                 self.num_export += 1
 * 
 *                 for k in range(dim):             # <<<<<<<<<<<<<<
 * 
 *                     # update values
 */
      __pyx_t_12 = __pyx_v_dim;
      __pyx_t_14 = __pyx_t_12;
      for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_k = __pyx_t_15;

        /* "phd/domain/domain_manager.pyx":455
 * 
 *                     # update values
 *                     xg[k][i] = p.x[k]             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
        ((__pyx_v_xg[__pyx_v_k])[__pyx_v_i]) = (__pyx_v_p->x[__pyx_v_k]);
      }
    }

    /* "phd/domain/domain_manager.pyx":409
 *         # if ghost created
 *         num_new_ghost = self.ghost_vec.size()
 *         if num_new_ghost != 0:             # <<<<<<<<<<<<<<
 * 
 *             # sort particles in processor order for export
 */
    goto __pyx_L5;
  }

  /* "phd/domain/domain_manager.pyx":458
 * 
 *         else:
 *             ghosts = CarrayContainer(0, particles.carray_dtypes)             # <<<<<<<<<<<<<<
 * 
 *         # how many particles are going to each processor
 */
  /*else*/ {
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_v_particles->carray_dtypes);
    __Pyx_GIVEREF(__pyx_v_particles->carray_dtypes);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_particles->carray_dtypes);
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_10containers_10containers_CarrayContainer), __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_ghosts = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L5:;

  /* "phd/domain/domain_manager.pyx":461
 * 
 *         # how many particles are going to each processor
 *         phd._comm.Alltoall([self.send_cnts, phd.MPI.INT],             # <<<<<<<<<<<<<<
 *                 [self.recv_cnts, phd.MPI.INT])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_phd); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_comm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Alltoall); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MPI); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_INT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyList_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_cnts));
  PyList_SET_ITEM(__pyx_t_16, 0, ((PyObject *)__pyx_v_self->send_cnts));
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "phd/domain/domain_manager.pyx":462
 *         # how many particles are going to each processor
 *         phd._comm.Alltoall([self.send_cnts, phd.MPI.INT],
 *                 [self.recv_cnts, phd.MPI.INT])             # <<<<<<<<<<<<<<
 * 
 *         # how many incoming particles
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MPI); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_INT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = PyList_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_cnts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_cnts));
  PyList_SET_ITEM(__pyx_t_17, 0, ((PyObject *)__pyx_v_self->recv_cnts));
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_16, __pyx_t_17};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_16, __pyx_t_17};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_18 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_6, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_6, __pyx_t_17);
    __pyx_t_16 = 0;
    __pyx_t_17 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":465
 * 
 *         # how many incoming particles
 *         num_import = 0             # <<<<<<<<<<<<<<
 *         for i in range(phd._size):
 *             num_import += self.recv_cnts[i]
 */
  __pyx_v_num_import = 0;

  /* "phd/domain/domain_manager.pyx":466
 *         # how many incoming particles
 *         num_import = 0
 *         for i in range(phd._size):             # <<<<<<<<<<<<<<
 *             num_import += self.recv_cnts[i]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_size); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_long(__pyx_t_10); if (unlikely((__pyx_t_4 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/domain/domain_manager.pyx":467
 *         num_import = 0
 *         for i in range(phd._size):
 *             num_import += self.recv_cnts[i]             # <<<<<<<<<<<<<<
 * 
 *         # create displacement arrays
 */
    __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_num_import); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->recv_cnts), __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = PyNumber_InPlaceAdd(__pyx_t_10, __pyx_t_1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_18); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_num_import = __pyx_t_8;
  }

  /* "phd/domain/domain_manager.pyx":470
 * 
 *         # create displacement arrays
 *         self.send_disp[0] = self.recv_disp[0] = 0             # <<<<<<<<<<<<<<
 *         for i in range(1, phd._size):
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 */
  if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_disp), 0, __pyx_int_0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 470, __pyx_L1_error)
  if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->recv_disp), 0, __pyx_int_0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 470, __pyx_L1_error)

  /* "phd/domain/domain_manager.pyx":471
 *         # create displacement arrays
 *         self.send_disp[0] = self.recv_disp[0] = 0
 *         for i in range(1, phd._size):             # <<<<<<<<<<<<<<
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 *             self.recv_disp[i] = self.recv_cnts[i-1] + self.recv_disp[i-1]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_phd); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_4 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 1; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/domain/domain_manager.pyx":472
 *         self.send_disp[0] = self.recv_disp[0] = 0
 *         for i in range(1, phd._size):
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]             # <<<<<<<<<<<<<<
 *             self.recv_disp[i] = self.recv_cnts[i-1] + self.recv_disp[i-1]
 * 
 */
    __pyx_t_19 = (__pyx_v_i - 1);
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->send_cnts), __pyx_t_19, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_19 = (__pyx_v_i - 1);
    __pyx_t_18 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->send_disp), __pyx_t_19, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_10 = PyNumber_Add(__pyx_t_1, __pyx_t_18); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_disp), __pyx_v_i, __pyx_t_10, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "phd/domain/domain_manager.pyx":473
 *         for i in range(1, phd._size):
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 *             self.recv_disp[i] = self.recv_cnts[i-1] + self.recv_disp[i-1]             # <<<<<<<<<<<<<<
 * 
 *         # index to start adding new ghost particles
 */
    __pyx_t_19 = (__pyx_v_i - 1);
    __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->recv_cnts), __pyx_t_19, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_19 = (__pyx_v_i - 1);
    __pyx_t_18 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->recv_disp), __pyx_t_19, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = PyNumber_Add(__pyx_t_10, __pyx_t_18); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->recv_disp), __pyx_v_i, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "phd/domain/domain_manager.pyx":476
 * 
 *         # index to start adding new ghost particles
 *         start_index = particles.get_carray_size()             # <<<<<<<<<<<<<<
 * 
 *         # send our particles / recieve particles
 */
  __pyx_v_start_index = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);

  /* "phd/domain/domain_manager.pyx":479
 * 
 *         # send our particles / recieve particles
 *         particles.extend(num_import)             # <<<<<<<<<<<<<<
 *         exchange_particles(particles, ghosts,
 *                 self.send_cnts, self.recv_cnts,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->extend(__pyx_v_particles, __pyx_v_num_import, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":480
 *         # send our particles / recieve particles
 *         particles.extend(num_import)
 *         exchange_particles(particles, ghosts,             # <<<<<<<<<<<<<<
 *                 self.send_cnts, self.recv_cnts,
 *                 start_index, phd._comm,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_exchange_particles); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);

  /* "phd/domain/domain_manager.pyx":482
 *         exchange_particles(particles, ghosts,
 *                 self.send_cnts, self.recv_cnts,
 *                 start_index, phd._comm,             # <<<<<<<<<<<<<<
 *                 particles.carrays.keys(),
 *                 self.send_disp, self.recv_disp)
 */
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_start_index); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_phd); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_comm); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "phd/domain/domain_manager.pyx":483
 *                 self.send_cnts, self.recv_cnts,
 *                 start_index, phd._comm,
 *                 particles.carrays.keys(),             # <<<<<<<<<<<<<<
 *                 self.send_disp, self.recv_disp)
 * 
 */
  if (unlikely(__pyx_v_particles->carrays == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 483, __pyx_L1_error)
  }
  __pyx_t_17 = __Pyx_PyDict_Keys(__pyx_v_particles->carrays); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);

  /* "phd/domain/domain_manager.pyx":484
 *                 start_index, phd._comm,
 *                 particles.carrays.keys(),
 *                 self.send_disp, self.recv_disp)             # <<<<<<<<<<<<<<
 * 
 *     cdef copy_particles_serial(self, CarrayContainer particles):
 */
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[10] = {__pyx_t_3, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_ghosts), ((PyObject *)__pyx_v_self->send_cnts), ((PyObject *)__pyx_v_self->recv_cnts), __pyx_t_10, __pyx_t_16, __pyx_t_17, ((PyObject *)__pyx_v_self->send_disp), ((PyObject *)__pyx_v_self->recv_disp)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_6, 9+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[10] = {__pyx_t_3, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_ghosts), ((PyObject *)__pyx_v_self->send_cnts), ((PyObject *)__pyx_v_self->recv_cnts), __pyx_t_10, __pyx_t_16, __pyx_t_17, ((PyObject *)__pyx_v_self->send_disp), ((PyObject *)__pyx_v_self->recv_disp)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_6, 9+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  } else
  #endif
  {
    __pyx_t_20 = PyTuple_New(9+__pyx_t_6); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_particles));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
    PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_6, ((PyObject *)__pyx_v_particles));
    __Pyx_INCREF(((PyObject *)__pyx_v_ghosts));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ghosts));
    PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_6, ((PyObject *)__pyx_v_ghosts));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_cnts));
    PyTuple_SET_ITEM(__pyx_t_20, 2+__pyx_t_6, ((PyObject *)__pyx_v_self->send_cnts));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_cnts));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_cnts));
    PyTuple_SET_ITEM(__pyx_t_20, 3+__pyx_t_6, ((PyObject *)__pyx_v_self->recv_cnts));
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_20, 4+__pyx_t_6, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_20, 5+__pyx_t_6, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_20, 6+__pyx_t_6, __pyx_t_17);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->send_disp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_disp));
    PyTuple_SET_ITEM(__pyx_t_20, 7+__pyx_t_6, ((PyObject *)__pyx_v_self->send_disp));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_disp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_disp));
    PyTuple_SET_ITEM(__pyx_t_20, 8+__pyx_t_6, ((PyObject *)__pyx_v_self->recv_disp));
    __pyx_t_10 = 0;
    __pyx_t_16 = 0;
    __pyx_t_17 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":380
 *             inc(it)  # increment iterator
 * 
 *     cdef copy_particles_parallel(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Copy particles from ghost_particle vector in parallel run.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(((PyObject *)__pyx_t_13));
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.copy_particles_parallel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tags);
  __Pyx_XDECREF((PyObject *)__pyx_v_types);
  __Pyx_XDECREF((PyObject *)__pyx_v_keys);
  __Pyx_XDECREF((PyObject *)__pyx_v_ghosts);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":486
 *                 self.send_disp, self.recv_disp)
 * 
 *     cdef copy_particles_serial(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Copy particles from ghost_particle vector in serial run.
 * 
 */

static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_copy_particles_serial(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  struct __pyx_obj_3phd_5utils_6carray_IntArray *__pyx_v_tags = 0;
  struct __pyx_obj_3phd_5utils_6carray_IntArray *__pyx_v_types = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_maps = 0;
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_dim;
  __pyx_t_5numpy_float64_t *__pyx_v_xg[3];
  BoundaryParticle *__pyx_v_p;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_ghosts = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_indices = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  std::vector<BoundaryParticle> ::size_type __pyx_t_4;
  std::vector<BoundaryParticle> ::size_type __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_particles_serial", 0);

  /* "phd/domain/domain_manager.pyx":503
 *         cdef BoundaryParticle *p
 *         cdef CarrayContainer ghosts
 *         cdef LongArray indices = LongArray()             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3phd_5utils_6carray_LongArray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_indices = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":505
 *         cdef LongArray indices = LongArray()
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *         if self.ghost_vec.size() == 0:
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 505, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_2;

  /* "phd/domain/domain_manager.pyx":507
 *         dim = len(particles.carray_named_groups["position"])
 * 
 *         if self.ghost_vec.size() == 0:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_3 = ((__pyx_v_self->ghost_vec.size() == 0) != 0);
  if (__pyx_t_3) {

    /* "phd/domain/domain_manager.pyx":508
 * 
 *         if self.ghost_vec.size() == 0:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # copy indices
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "phd/domain/domain_manager.pyx":507
 *         dim = len(particles.carray_named_groups["position"])
 * 
 *         if self.ghost_vec.size() == 0:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "phd/domain/domain_manager.pyx":511
 * 
 *         # copy indices
 *         indices.resize(self.ghost_vec.size())             # <<<<<<<<<<<<<<
 *         for i in range(self.ghost_vec.size()):
 *             p = &self.ghost_vec[i]
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_indices->__pyx_base.__pyx_vtab)->__pyx_base.resize(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_indices), __pyx_v_self->ghost_vec.size(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":512
 *         # copy indices
 *         indices.resize(self.ghost_vec.size())
 *         for i in range(self.ghost_vec.size()):             # <<<<<<<<<<<<<<
 *             p = &self.ghost_vec[i]
 *             indices.data[i] = p.index
 */
  __pyx_t_4 = __pyx_v_self->ghost_vec.size();
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/domain/domain_manager.pyx":513
 *         indices.resize(self.ghost_vec.size())
 *         for i in range(self.ghost_vec.size()):
 *             p = &self.ghost_vec[i]             # <<<<<<<<<<<<<<
 *             indices.data[i] = p.index
 * 
 */
    __pyx_v_p = (&(__pyx_v_self->ghost_vec[__pyx_v_i]));

    /* "phd/domain/domain_manager.pyx":514
 *         for i in range(self.ghost_vec.size()):
 *             p = &self.ghost_vec[i]
 *             indices.data[i] = p.index             # <<<<<<<<<<<<<<
 * 
 *         # copy all particles to make ghost from
 */
    __pyx_t_7 = __pyx_v_p->index;
    (__pyx_v_indices->data[__pyx_v_i]) = __pyx_t_7;
  }

  /* "phd/domain/domain_manager.pyx":517
 * 
 *         # copy all particles to make ghost from
 *         ghosts = particles.extract_items(indices)             # <<<<<<<<<<<<<<
 * 
 *         tags  = ghosts.get_carray("tag")
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->extract_items(__pyx_v_particles, __pyx_v_indices, 0, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ghosts = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":519
 *         ghosts = particles.extract_items(indices)
 * 
 *         tags  = ghosts.get_carray("tag")             # <<<<<<<<<<<<<<
 *         types = ghosts.get_carray("type")
 *         maps  = ghosts.get_carray("map")
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_ghosts->__pyx_vtab)->get_carray(__pyx_v_ghosts, __pyx_n_s_tag, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_IntArray))))) __PYX_ERR(0, 519, __pyx_L1_error)
  __pyx_v_tags = ((struct __pyx_obj_3phd_5utils_6carray_IntArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":520
 * 
 *         tags  = ghosts.get_carray("tag")
 *         types = ghosts.get_carray("type")             # <<<<<<<<<<<<<<
 *         maps  = ghosts.get_carray("map")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_ghosts->__pyx_vtab)->get_carray(__pyx_v_ghosts, __pyx_n_s_type, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_IntArray))))) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_v_types = ((struct __pyx_obj_3phd_5utils_6carray_IntArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":521
 *         tags  = ghosts.get_carray("tag")
 *         types = ghosts.get_carray("type")
 *         maps  = ghosts.get_carray("map")             # <<<<<<<<<<<<<<
 * 
 *         ghosts.pointer_groups(xg,  particles.carray_named_groups["position"])
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_ghosts->__pyx_vtab)->get_carray(__pyx_v_ghosts, __pyx_n_s_map, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 521, __pyx_L1_error)
  __pyx_v_maps = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":523
 *         maps  = ghosts.get_carray("map")
 * 
 *         ghosts.pointer_groups(xg,  particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *         # transfer ghost position and velocity
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 523, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 523, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_ghosts->__pyx_vtab)->pointer_groups(__pyx_v_ghosts, __pyx_v_xg, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":526
 * 
 *         # transfer ghost position and velocity
 *         for i in range(self.ghost_vec.size()):             # <<<<<<<<<<<<<<
 *             p = &self.ghost_vec[i]
 * 
 */
  __pyx_t_4 = __pyx_v_self->ghost_vec.size();
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/domain/domain_manager.pyx":527
 *         # transfer ghost position and velocity
 *         for i in range(self.ghost_vec.size()):
 *             p = &self.ghost_vec[i]             # <<<<<<<<<<<<<<
 * 
 *             maps.data[i]  = p.index  # reference to image
 */
    __pyx_v_p = (&(__pyx_v_self->ghost_vec[__pyx_v_i]));

    /* "phd/domain/domain_manager.pyx":529
 *             p = &self.ghost_vec[i]
 * 
 *             maps.data[i]  = p.index  # reference to image             # <<<<<<<<<<<<<<
 *             tags.data[i]  = GHOST    # ghost label
 *             types.data[i] = p.ghost_type
 */
    __pyx_t_7 = __pyx_v_p->index;
    (__pyx_v_maps->data[__pyx_v_i]) = __pyx_t_7;

    /* "phd/domain/domain_manager.pyx":530
 * 
 *             maps.data[i]  = p.index  # reference to image
 *             tags.data[i]  = GHOST    # ghost label             # <<<<<<<<<<<<<<
 *             types.data[i] = p.ghost_type
 * 
 */
    (__pyx_v_tags->data[__pyx_v_i]) = __pyx_v_3phd_6domain_14domain_manager_GHOST;

    /* "phd/domain/domain_manager.pyx":531
 *             maps.data[i]  = p.index  # reference to image
 *             tags.data[i]  = GHOST    # ghost label
 *             types.data[i] = p.ghost_type             # <<<<<<<<<<<<<<
 * 
 *             for k in range(dim):
 */
    __pyx_t_7 = __pyx_v_p->ghost_type;
    (__pyx_v_types->data[__pyx_v_i]) = __pyx_t_7;

    /* "phd/domain/domain_manager.pyx":533
 *             types.data[i] = p.ghost_type
 * 
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 * 
 *                 # update values
 */
    __pyx_t_7 = __pyx_v_dim;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_k = __pyx_t_9;

      /* "phd/domain/domain_manager.pyx":536
 * 
 *                 # update values
 *                 xg[k][i] = p.x[k]             # <<<<<<<<<<<<<<
 * 
 *         # add new ghost to total ghost container
 */
      ((__pyx_v_xg[__pyx_v_k])[__pyx_v_i]) = (__pyx_v_p->x[__pyx_v_k]);
    }
  }

  /* "phd/domain/domain_manager.pyx":539
 * 
 *         # add new ghost to total ghost container
 *         particles.append_container(ghosts)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint ghost_complete(self):
 */
  (void)(((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->append_container(__pyx_v_particles, __pyx_v_ghosts, 0));

  /* "phd/domain/domain_manager.pyx":486
 *                 self.send_disp, self.recv_disp)
 * 
 *     cdef copy_particles_serial(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Copy particles from ghost_particle vector in serial run.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.copy_particles_serial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tags);
  __Pyx_XDECREF((PyObject *)__pyx_v_types);
  __Pyx_XDECREF((PyObject *)__pyx_v_maps);
  __Pyx_XDECREF((PyObject *)__pyx_v_ghosts);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":541
 *         particles.append_container(ghosts)
 * 
 *     cpdef bint ghost_complete(self):             # <<<<<<<<<<<<<<
 *         """Return True if their are no more particles flagged for ghost
 *         creation.
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_25ghost_complete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_3phd_6domain_14domain_manager_13DomainManager_ghost_complete(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ghost_complete", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ghost_complete); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_25ghost_complete)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":551
 *         """
 *         # we are done when their are no more particles flagged
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.glb_done[0] = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "phd/domain/domain_manager.pyx":553
 *         if phd._in_parallel:
 * 
 *             self.glb_done[0] = 0             # <<<<<<<<<<<<<<
 *             self.loc_done[0] = self.flagged_particles.size()
 * 
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->glb_done), 0, __pyx_int_0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 553, __pyx_L1_error)

    /* "phd/domain/domain_manager.pyx":554
 * 
 *             self.glb_done[0] = 0
 *             self.loc_done[0] = self.flagged_particles.size()             # <<<<<<<<<<<<<<
 * 
 *             phd._comm.Allreduce(
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->flagged_particles.size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->loc_done), 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/domain/domain_manager.pyx":556
 *             self.loc_done[0] = self.flagged_particles.size()
 * 
 *             phd._comm.Allreduce(             # <<<<<<<<<<<<<<
 *                     [self.loc_done, phd.MPI.INT],
 *                     [self.glb_done, phd.MPI.INT],
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_comm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Allreduce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/domain/domain_manager.pyx":557
 * 
 *             phd._comm.Allreduce(
 *                     [self.loc_done, phd.MPI.INT],             # <<<<<<<<<<<<<<
 *                     [self.glb_done, phd.MPI.INT],
 *                     op=phd.MPI.SUM)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MPI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_INT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->loc_done));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->loc_done));
    PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self->loc_done));
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "phd/domain/domain_manager.pyx":558
 *             phd._comm.Allreduce(
 *                     [self.loc_done, phd.MPI.INT],
 *                     [self.glb_done, phd.MPI.INT],             # <<<<<<<<<<<<<<
 *                     op=phd.MPI.SUM)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MPI); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_INT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->glb_done));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->glb_done));
    PyList_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self->glb_done));
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "phd/domain/domain_manager.pyx":556
 *             self.loc_done[0] = self.flagged_particles.size()
 * 
 *             phd._comm.Allreduce(             # <<<<<<<<<<<<<<
 *                     [self.loc_done, phd.MPI.INT],
 *                     [self.glb_done, phd.MPI.INT],
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;

    /* "phd/domain/domain_manager.pyx":559
 *                     [self.loc_done, phd.MPI.INT],
 *                     [self.glb_done, phd.MPI.INT],
 *                     op=phd.MPI.SUM)             # <<<<<<<<<<<<<<
 * 
 *             return self.glb_done[0] == 0
 */
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MPI); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_SUM); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_op, __pyx_t_3) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "phd/domain/domain_manager.pyx":556
 *             self.loc_done[0] = self.flagged_particles.size()
 * 
 *             phd._comm.Allreduce(             # <<<<<<<<<<<<<<
 *                     [self.loc_done, phd.MPI.INT],
 *                     [self.glb_done, phd.MPI.INT],
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "phd/domain/domain_manager.pyx":561
 *                     op=phd.MPI.SUM)
 * 
 *             return self.glb_done[0] == 0             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->glb_done), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    goto __pyx_L0;

    /* "phd/domain/domain_manager.pyx":551
 *         """
 *         # we are done when their are no more particles flagged
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.glb_done[0] = 0
 */
  }

  /* "phd/domain/domain_manager.pyx":564
 * 
 *         else:
 *             return self.flagged_particles.empty()             # <<<<<<<<<<<<<<
 * 
 *     cpdef move_generators(self, CarrayContainer particles, double dt):
 */
  /*else*/ {
    __pyx_r = __pyx_v_self->flagged_particles.empty();
    goto __pyx_L0;
  }

  /* "phd/domain/domain_manager.pyx":541
 *         particles.append_container(ghosts)
 * 
 *     cpdef bint ghost_complete(self):             # <<<<<<<<<<<<<<
 *         """Return True if their are no more particles flagged for ghost
 *         creation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("phd.domain.domain_manager.DomainManager.ghost_complete", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_25ghost_complete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_24ghost_complete[] = "Return True if their are no more particles flagged for ghost\n        creation.\n\n        Particles that have been flagged for ghost creation are stored\n        in flagged_particles. When flagged particles have a complete\n        voronoi cell they are removed from flagged_particles.\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_25ghost_complete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ghost_complete (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_24ghost_complete(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_24ghost_complete(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ghost_complete", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_3phd_6domain_14domain_manager_13DomainManager_ghost_complete(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.ghost_complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":566
 *             return self.flagged_particles.empty()
 * 
 *     cpdef move_generators(self, CarrayContainer particles, double dt):             # <<<<<<<<<<<<<<
 *         """Move particles after flux update.
 * 
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_27move_generators(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_move_generators(CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, double __pyx_v_dt, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_dim;
  __pyx_t_5numpy_float64_t *__pyx_v_x[3];
  __pyx_t_5numpy_float64_t *__pyx_v_wx[3];
  struct __pyx_obj_3phd_5utils_6carray_IntArray *__pyx_v_tags = 0;
  CYTHON_UNUSED struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_ids = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("move_generators", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_move_generators); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_27move_generators)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_particles), __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_particles), __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 566, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":580
 *         cdef int i, k, dim
 *         cdef np.float64_t *x[3], *wx[3]
 *         cdef IntArray tags = particles.get_carray("tag")             # <<<<<<<<<<<<<<
 *         cdef LongArray ids = particles.get_carray("ids")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_tag, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_IntArray))))) __PYX_ERR(0, 580, __pyx_L1_error)
  __pyx_v_tags = ((struct __pyx_obj_3phd_5utils_6carray_IntArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":581
 *         cdef np.float64_t *x[3], *wx[3]
 *         cdef IntArray tags = particles.get_carray("tag")
 *         cdef LongArray ids = particles.get_carray("ids")             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_ids, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 581, __pyx_L1_error)
  __pyx_v_ids = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":583
 *         cdef LongArray ids = particles.get_carray("ids")
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 *         particles.pointer_groups(x,  particles.carray_named_groups["position"])
 *         particles.pointer_groups(wx, particles.carray_named_groups["w"])
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 583, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_8;

  /* "phd/domain/domain_manager.pyx":584
 * 
 *         dim = len(particles.carray_named_groups["position"])
 *         particles.pointer_groups(x,  particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 *         particles.pointer_groups(wx, particles.carray_named_groups["w"])
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 584, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 584, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_x, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":585
 *         dim = len(particles.carray_named_groups["position"])
 *         particles.pointer_groups(x,  particles.carray_named_groups["position"])
 *         particles.pointer_groups(wx, particles.carray_named_groups["w"])             # <<<<<<<<<<<<<<
 * 
 *         for i in range(particles.get_carray_size()):
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 585, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 585, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_wx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":587
 *         particles.pointer_groups(wx, particles.carray_named_groups["w"])
 * 
 *         for i in range(particles.get_carray_size()):             # <<<<<<<<<<<<<<
 *             if tags.data[i] == REAL:
 *                 for k in range(dim):
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);
  __pyx_t_9 = __pyx_t_6;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "phd/domain/domain_manager.pyx":588
 * 
 *         for i in range(particles.get_carray_size()):
 *             if tags.data[i] == REAL:             # <<<<<<<<<<<<<<
 *                 for k in range(dim):
 *                     x[k][i] += dt*wx[k][i]
 */
    __pyx_t_11 = (((__pyx_v_tags->data[__pyx_v_i]) == __pyx_v_3phd_6domain_14domain_manager_REAL) != 0);
    if (__pyx_t_11) {

      /* "phd/domain/domain_manager.pyx":589
 *         for i in range(particles.get_carray_size()):
 *             if tags.data[i] == REAL:
 *                 for k in range(dim):             # <<<<<<<<<<<<<<
 *                     x[k][i] += dt*wx[k][i]
 * 
 */
      __pyx_t_12 = __pyx_v_dim;
      __pyx_t_13 = __pyx_t_12;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_k = __pyx_t_14;

        /* "phd/domain/domain_manager.pyx":590
 *             if tags.data[i] == REAL:
 *                 for k in range(dim):
 *                     x[k][i] += dt*wx[k][i]             # <<<<<<<<<<<<<<
 * 
 *     cpdef migrate_particles(self, CarrayContainer particles):
 */
        __pyx_t_15 = __pyx_v_k;
        __pyx_t_16 = __pyx_v_i;
        ((__pyx_v_x[__pyx_t_15])[__pyx_t_16]) = (((__pyx_v_x[__pyx_t_15])[__pyx_t_16]) + (__pyx_v_dt * ((__pyx_v_wx[__pyx_v_k])[__pyx_v_i])));
      }

      /* "phd/domain/domain_manager.pyx":588
 * 
 *         for i in range(particles.get_carray_size()):
 *             if tags.data[i] == REAL:             # <<<<<<<<<<<<<<
 *                 for k in range(dim):
 *                     x[k][i] += dt*wx[k][i]
 */
    }
  }

  /* "phd/domain/domain_manager.pyx":566
 *             return self.flagged_particles.empty()
 * 
 *     cpdef move_generators(self, CarrayContainer particles, double dt):             # <<<<<<<<<<<<<<
 *         """Move particles after flux update.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.move_generators", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tags);
  __Pyx_XDECREF((PyObject *)__pyx_v_ids);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_27move_generators(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_26move_generators[] = "Move particles after flux update.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        dt : float\n            Time step of the simulation.\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_27move_generators(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  double __pyx_v_dt;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("move_generators (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("move_generators", 1, 2, 2, 1); __PYX_ERR(0, 566, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "move_generators") < 0)) __PYX_ERR(0, 566, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("move_generators", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 566, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.move_generators", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 566, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_26move_generators(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), __pyx_v_particles, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_26move_generators(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, double __pyx_v_dt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("move_generators", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_6domain_14domain_manager_13DomainManager_move_generators(__pyx_v_self, __pyx_v_particles, __pyx_v_dt, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.move_generators", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":592
 *                     x[k][i] += dt*wx[k][i]
 * 
 *     cpdef migrate_particles(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """For particles that have left the domain or processor patch
 *         move particles to their appropriate spot.
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_29migrate_particles(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_migrate_particles(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("migrate_particles", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_migrate_particles); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_29migrate_particles)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_particles)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_particles));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 592, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":621
 * 
 * 
 *         particles.remove_tagged_particles(GHOST)             # <<<<<<<<<<<<<<
 *         self.num_real_particles = particles.get_carray_size()
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->remove_tagged_particles(__pyx_v_particles, __pyx_v_3phd_6domain_14domain_manager_GHOST, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":622
 * 
 *         particles.remove_tagged_particles(GHOST)
 *         self.num_real_particles = particles.get_carray_size()             # <<<<<<<<<<<<<<
 * 
 *         # for particles that left the domain perform boundary
 */
  __pyx_v_self->num_real_particles = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);

  /* "phd/domain/domain_manager.pyx":626
 *         # for particles that left the domain perform boundary
 *         # condition on those particles
 *         self.boundary_condition.migrate_particles(particles, self)             # <<<<<<<<<<<<<<
 * 
 * #        if phd._in_parallel:
 */
  ((struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *)__pyx_v_self->boundary_condition->__pyx_vtab)->migrate_particles(__pyx_v_self->boundary_condition, __pyx_v_particles, __pyx_v_self);

  /* "phd/domain/domain_manager.pyx":592
 *                     x[k][i] += dt*wx[k][i]
 * 
 *     cpdef migrate_particles(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """For particles that have left the domain or processor patch
 *         move particles to their appropriate spot.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.migrate_particles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_29migrate_particles(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_28migrate_particles[] = "For particles that have left the domain or processor patch\n        move particles to their appropriate spot.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_29migrate_particles(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("migrate_particles (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 592, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_28migrate_particles(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_28migrate_particles(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("migrate_particles", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_6domain_14domain_manager_13DomainManager_migrate_particles(__pyx_v_self, __pyx_v_particles, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.migrate_particles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":712
 * #                    self.send_disp, self.recv_disp)
 * 
 *     cpdef update_ghost_fields(self, CarrayContainer particles, list fields,             # <<<<<<<<<<<<<<
 *             bint apply_boundary_condition=False):
 *         """Transfer ghost fields from their image particle.
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_31update_ghost_fields(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, PyObject *__pyx_v_fields, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields *__pyx_optional_args) {

  /* "phd/domain/domain_manager.pyx":713
 * 
 *     cpdef update_ghost_fields(self, CarrayContainer particles, list fields,
 *             bint apply_boundary_condition=False):             # <<<<<<<<<<<<<<
 *         """Transfer ghost fields from their image particle.
 * 
 */
  int __pyx_v_apply_boundary_condition = ((int)0);
  PyObject *__pyx_v_field = 0;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_ghosts = 0;
  int __pyx_v_i;
  int __pyx_v_num_ghost_particles;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_indices = 0;
  PyArrayObject *__pyx_v_indices_npy = 0;
  PyArrayObject *__pyx_v_map_indices_npy = 0;
  struct __pyx_obj_3phd_5utils_6carray_IntArray *__pyx_v_tags = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_ghost_fields", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_apply_boundary_condition = __pyx_optional_args->apply_boundary_condition;
    }
  }

  /* "phd/domain/domain_manager.pyx":712
 * #                    self.send_disp, self.recv_disp)
 * 
 *     cpdef update_ghost_fields(self, CarrayContainer particles, list fields,             # <<<<<<<<<<<<<<
 *             bint apply_boundary_condition=False):
 *         """Transfer ghost fields from their image particle.
 */
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_ghost_fields); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 712, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_31update_ghost_fields)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_apply_boundary_condition); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_particles), __pyx_v_fields, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 712, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_particles), __pyx_v_fields, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 712, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 712, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(__pyx_v_fields);
          __Pyx_GIVEREF(__pyx_v_fields);
          PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_fields);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 712, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":732
 *         cdef CarrayContainer ghosts
 *         cdef int i, num_ghost_particles
 *         cdef LongArray indices = LongArray()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray indices_npy, map_indices_npy
 *         cdef IntArray tags = particles.get_carray("tag")
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3phd_5utils_6carray_LongArray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_indices = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":734
 *         cdef LongArray indices = LongArray()
 *         cdef np.ndarray indices_npy, map_indices_npy
 *         cdef IntArray tags = particles.get_carray("tag")             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_tag, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_IntArray))))) __PYX_ERR(0, 734, __pyx_L1_error)
  __pyx_v_tags = ((struct __pyx_obj_3phd_5utils_6carray_IntArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":736
 *         cdef IntArray tags = particles.get_carray("tag")
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             num_ghost_particles = self.export_ghost_buffer.size()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {

    /* "phd/domain/domain_manager.pyx":738
 *         if phd._in_parallel:
 * 
 *             num_ghost_particles = self.export_ghost_buffer.size()             # <<<<<<<<<<<<<<
 *             indices.resize(num_ghost_particles)
 * 
 */
    __pyx_v_num_ghost_particles = __pyx_v_self->export_ghost_buffer.size();

    /* "phd/domain/domain_manager.pyx":739
 * 
 *             num_ghost_particles = self.export_ghost_buffer.size()
 *             indices.resize(num_ghost_particles)             # <<<<<<<<<<<<<<
 * 
 *             # grab indices used to create ghost particles
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_indices->__pyx_base.__pyx_vtab)->__pyx_base.resize(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_indices), __pyx_v_num_ghost_particles, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/domain/domain_manager.pyx":742
 * 
 *             # grab indices used to create ghost particles
 *             for i in range(num_ghost_particles):             # <<<<<<<<<<<<<<
 *                 indices.data[i] = self.export_ghost_buffer[i].index
 * 
 */
    __pyx_t_6 = __pyx_v_num_ghost_particles;
    __pyx_t_9 = __pyx_t_6;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "phd/domain/domain_manager.pyx":743
 *             # grab indices used to create ghost particles
 *             for i in range(num_ghost_particles):
 *                 indices.data[i] = self.export_ghost_buffer[i].index             # <<<<<<<<<<<<<<
 * 
 *             # export updated fields
 */
      __pyx_t_11 = (__pyx_v_self->export_ghost_buffer[__pyx_v_i]).index;
      (__pyx_v_indices->data[__pyx_v_i]) = __pyx_t_11;
    }

    /* "phd/domain/domain_manager.pyx":746
 * 
 *             # export updated fields
 *             ghosts = particles.extract_items(indices, fields)             # <<<<<<<<<<<<<<
 *             exchange_particles(particles, ghosts,
 *                     self.send_cnts, self.recv_cnts,
 */
    __pyx_t_12.__pyx_n = 1;
    __pyx_t_12.carray_list_names = __pyx_v_fields;
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->extract_items(__pyx_v_particles, __pyx_v_indices, 0, &__pyx_t_12)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_ghosts = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "phd/domain/domain_manager.pyx":747
 *             # export updated fields
 *             ghosts = particles.extract_items(indices, fields)
 *             exchange_particles(particles, ghosts,             # <<<<<<<<<<<<<<
 *                     self.send_cnts, self.recv_cnts,
 *                     self.num_real_particles, phd._comm, fields,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_exchange_particles); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "phd/domain/domain_manager.pyx":749
 *             exchange_particles(particles, ghosts,
 *                     self.send_cnts, self.recv_cnts,
 *                     self.num_real_particles, phd._comm, fields,             # <<<<<<<<<<<<<<
 *                     self.send_disp, self.recv_disp)
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->num_real_particles); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_phd); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_comm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "phd/domain/domain_manager.pyx":750
 *                     self.send_cnts, self.recv_cnts,
 *                     self.num_real_particles, phd._comm, fields,
 *                     self.send_disp, self.recv_disp)             # <<<<<<<<<<<<<<
 * 
 *             if apply_boundary_condition:
 */
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[10] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_ghosts), ((PyObject *)__pyx_v_self->send_cnts), ((PyObject *)__pyx_v_self->recv_cnts), __pyx_t_4, __pyx_t_3, __pyx_v_fields, ((PyObject *)__pyx_v_self->send_disp), ((PyObject *)__pyx_v_self->recv_disp)};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 9+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 747, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[10] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_ghosts), ((PyObject *)__pyx_v_self->send_cnts), ((PyObject *)__pyx_v_self->recv_cnts), __pyx_t_4, __pyx_t_3, __pyx_v_fields, ((PyObject *)__pyx_v_self->send_disp), ((PyObject *)__pyx_v_self->recv_disp)};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 9+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 747, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(9+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 747, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_particles));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, ((PyObject *)__pyx_v_particles));
      __Pyx_INCREF(((PyObject *)__pyx_v_ghosts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_ghosts));
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, ((PyObject *)__pyx_v_ghosts));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_cnts));
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, ((PyObject *)__pyx_v_self->send_cnts));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_cnts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_cnts));
      PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_6, ((PyObject *)__pyx_v_self->recv_cnts));
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_6, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_6, __pyx_t_3);
      __Pyx_INCREF(__pyx_v_fields);
      __Pyx_GIVEREF(__pyx_v_fields);
      PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_6, __pyx_v_fields);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->send_disp));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_disp));
      PyTuple_SET_ITEM(__pyx_t_5, 7+__pyx_t_6, ((PyObject *)__pyx_v_self->send_disp));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_disp));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_disp));
      PyTuple_SET_ITEM(__pyx_t_5, 8+__pyx_t_6, ((PyObject *)__pyx_v_self->recv_disp));
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 747, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/domain/domain_manager.pyx":752
 *                     self.send_disp, self.recv_disp)
 * 
 *             if apply_boundary_condition:             # <<<<<<<<<<<<<<
 *                 # modify fields by boundary condition
 *                 self.boundary_condition.update_fields(
 */
    __pyx_t_8 = (__pyx_v_apply_boundary_condition != 0);
    if (__pyx_t_8) {

      /* "phd/domain/domain_manager.pyx":754
 *             if apply_boundary_condition:
 *                 # modify fields by boundary condition
 *                 self.boundary_condition.update_fields(             # <<<<<<<<<<<<<<
 *                         particles, self)
 * 
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *)__pyx_v_self->boundary_condition->__pyx_vtab)->update_fields(__pyx_v_self->boundary_condition, __pyx_v_particles, __pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "phd/domain/domain_manager.pyx":752
 *                     self.send_disp, self.recv_disp)
 * 
 *             if apply_boundary_condition:             # <<<<<<<<<<<<<<
 *                 # modify fields by boundary condition
 *                 self.boundary_condition.update_fields(
 */
    }

    /* "phd/domain/domain_manager.pyx":736
 *         cdef IntArray tags = particles.get_carray("tag")
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             num_ghost_particles = self.export_ghost_buffer.size()
 */
    goto __pyx_L3;
  }

  /* "phd/domain/domain_manager.pyx":760
 * 
 *             # find all ghost that need to be updated
 *             for i in range(particles.get_carray_size()):             # <<<<<<<<<<<<<<
 *                 if tags.data[i] == GHOST:
 *                     indices.append(i)
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);
    __pyx_t_9 = __pyx_t_6;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "phd/domain/domain_manager.pyx":761
 *             # find all ghost that need to be updated
 *             for i in range(particles.get_carray_size()):
 *                 if tags.data[i] == GHOST:             # <<<<<<<<<<<<<<
 *                     indices.append(i)
 * 
 */
      __pyx_t_8 = (((__pyx_v_tags->data[__pyx_v_i]) == __pyx_v_3phd_6domain_14domain_manager_GHOST) != 0);
      if (__pyx_t_8) {

        /* "phd/domain/domain_manager.pyx":762
 *             for i in range(particles.get_carray_size()):
 *                 if tags.data[i] == GHOST:
 *                     indices.append(i)             # <<<<<<<<<<<<<<
 * 
 *             indices_npy = indices.get_npy_array()
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_indices->__pyx_base.__pyx_vtab)->append(__pyx_v_indices, __pyx_v_i, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "phd/domain/domain_manager.pyx":761
 *             # find all ghost that need to be updated
 *             for i in range(particles.get_carray_size()):
 *                 if tags.data[i] == GHOST:             # <<<<<<<<<<<<<<
 *                     indices.append(i)
 * 
 */
      }
    }

    /* "phd/domain/domain_manager.pyx":764
 *                     indices.append(i)
 * 
 *             indices_npy = indices.get_npy_array()             # <<<<<<<<<<<<<<
 *             map_indices_npy = particles["map"][indices_npy]
 * 
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_indices->__pyx_base.__pyx_vtab)->__pyx_base.get_npy_array(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_indices), 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_indices_npy = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "phd/domain/domain_manager.pyx":765
 * 
 *             indices_npy = indices.get_npy_array()
 *             map_indices_npy = particles["map"][indices_npy]             # <<<<<<<<<<<<<<
 * 
 *             # update ghost with their image data
 */
    __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_particles), __pyx_n_s_map); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_2, ((PyObject *)__pyx_v_indices_npy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 765, __pyx_L1_error)
    __pyx_v_map_indices_npy = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "phd/domain/domain_manager.pyx":768
 * 
 *             # update ghost with their image data
 *             for field in fields:             # <<<<<<<<<<<<<<
 *                 particles[field][indices_npy] = particles[field][map_indices_npy]
 * 
 */
    if (unlikely(__pyx_v_fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 768, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_v_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_13 = 0;
    for (;;) {
      if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 768, __pyx_L1_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_field, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "phd/domain/domain_manager.pyx":769
 *             # update ghost with their image data
 *             for field in fields:
 *                 particles[field][indices_npy] = particles[field][map_indices_npy]             # <<<<<<<<<<<<<<
 * 
 *             if apply_boundary_condition:
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_particles), __pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_2, ((PyObject *)__pyx_v_map_indices_npy)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_particles), __pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(PyObject_SetItem(__pyx_t_2, ((PyObject *)__pyx_v_indices_npy), __pyx_t_5) < 0)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "phd/domain/domain_manager.pyx":768
 * 
 *             # update ghost with their image data
 *             for field in fields:             # <<<<<<<<<<<<<<
 *                 particles[field][indices_npy] = particles[field][map_indices_npy]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/domain/domain_manager.pyx":771
 *                 particles[field][indices_npy] = particles[field][map_indices_npy]
 * 
 *             if apply_boundary_condition:             # <<<<<<<<<<<<<<
 *                 # modify fields by boundary condition
 *                 self.boundary_condition.update_fields(
 */
    __pyx_t_8 = (__pyx_v_apply_boundary_condition != 0);
    if (__pyx_t_8) {

      /* "phd/domain/domain_manager.pyx":773
 *             if apply_boundary_condition:
 *                 # modify fields by boundary condition
 *                 self.boundary_condition.update_fields(             # <<<<<<<<<<<<<<
 *                         particles, self)
 * 
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *)__pyx_v_self->boundary_condition->__pyx_vtab)->update_fields(__pyx_v_self->boundary_condition, __pyx_v_particles, __pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "phd/domain/domain_manager.pyx":771
 *                 particles[field][indices_npy] = particles[field][map_indices_npy]
 * 
 *             if apply_boundary_condition:             # <<<<<<<<<<<<<<
 *                 # modify fields by boundary condition
 *                 self.boundary_condition.update_fields(
 */
    }
  }
  __pyx_L3:;

  /* "phd/domain/domain_manager.pyx":712
 * #                    self.send_disp, self.recv_disp)
 * 
 *     cpdef update_ghost_fields(self, CarrayContainer particles, list fields,             # <<<<<<<<<<<<<<
 *             bint apply_boundary_condition=False):
 *         """Transfer ghost fields from their image particle.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.update_ghost_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XDECREF((PyObject *)__pyx_v_ghosts);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices_npy);
  __Pyx_XDECREF((PyObject *)__pyx_v_map_indices_npy);
  __Pyx_XDECREF((PyObject *)__pyx_v_tags);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_31update_ghost_fields(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_30update_ghost_fields[] = "Transfer ghost fields from their image particle.\n\n        After ghost particles are created their are certain fields that\n        cannot be calculated (i.e. volume, center-of-mass ...) and need\n        to be upated from their resepective image particle.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Container of particles.\n\n        fields : list\n            List of field strings to update\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_31update_ghost_fields(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  PyObject *__pyx_v_fields = 0;
  int __pyx_v_apply_boundary_condition;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_ghost_fields (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_fields,&__pyx_n_s_apply_boundary_condition,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_ghost_fields", 0, 2, 3, 1); __PYX_ERR(0, 712, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_apply_boundary_condition);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update_ghost_fields") < 0)) __PYX_ERR(0, 712, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_fields = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_apply_boundary_condition = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_apply_boundary_condition == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 713, __pyx_L3_error)
    } else {

      /* "phd/domain/domain_manager.pyx":713
 * 
 *     cpdef update_ghost_fields(self, CarrayContainer particles, list fields,
 *             bint apply_boundary_condition=False):             # <<<<<<<<<<<<<<
 *         """Transfer ghost fields from their image particle.
 * 
 */
      __pyx_v_apply_boundary_condition = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_ghost_fields", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 712, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.update_ghost_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 712, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fields), (&PyList_Type), 1, "fields", 1))) __PYX_ERR(0, 712, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_30update_ghost_fields(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), __pyx_v_particles, __pyx_v_fields, __pyx_v_apply_boundary_condition);

  /* "phd/domain/domain_manager.pyx":712
 * #                    self.send_disp, self.recv_disp)
 * 
 *     cpdef update_ghost_fields(self, CarrayContainer particles, list fields,             # <<<<<<<<<<<<<<
 *             bint apply_boundary_condition=False):
 *         """Transfer ghost fields from their image particle.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_30update_ghost_fields(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, PyObject *__pyx_v_fields, int __pyx_v_apply_boundary_condition) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_ghost_fields", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.apply_boundary_condition = __pyx_v_apply_boundary_condition;
  __pyx_t_1 = __pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager->update_ghost_fields(__pyx_v_self, __pyx_v_particles, __pyx_v_fields, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.update_ghost_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":776
 *                         particles, self)
 * 
 *     cpdef update_ghost_gradients(self, CarrayContainer particles, CarrayContainer gradients):             # <<<<<<<<<<<<<<
 *         """Update ghost gradients from their mirror particle.
 * 
 */

static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_33update_ghost_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_ghost_gradients(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_gradients, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_field = 0;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_grad = 0;
  int __pyx_v_i;
  int __pyx_v_num_ghost_particles;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_indices = 0;
  PyArrayObject *__pyx_v_indices_npy = 0;
  PyArrayObject *__pyx_v_map_indices_npy = 0;
  struct __pyx_obj_3phd_5utils_6carray_IntArray *__pyx_v_tags = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_ghost_gradients", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_ghost_gradients); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_33update_ghost_gradients)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_gradients)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_gradients)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 776, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_gradients));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_gradients));
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_gradients));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/domain/domain_manager.pyx":795
 *         cdef CarrayContainer grad
 *         cdef int i, num_ghost_particles
 *         cdef LongArray indices = LongArray()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray indices_npy, map_indices_npy
 *         cdef IntArray tags = particles.get_carray("tag")
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3phd_5utils_6carray_LongArray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_indices = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":797
 *         cdef LongArray indices = LongArray()
 *         cdef np.ndarray indices_npy, map_indices_npy
 *         cdef IntArray tags = particles.get_carray("tag")             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_tag, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_IntArray))))) __PYX_ERR(0, 797, __pyx_L1_error)
  __pyx_v_tags = ((struct __pyx_obj_3phd_5utils_6carray_IntArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":799
 *         cdef IntArray tags = particles.get_carray("tag")
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             num_ghost_particles = self.export_ghost_buffer.size()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_7) {

    /* "phd/domain/domain_manager.pyx":801
 *         if phd._in_parallel:
 * 
 *             num_ghost_particles = self.export_ghost_buffer.size()             # <<<<<<<<<<<<<<
 *             indices.resize(num_ghost_particles)
 * 
 */
    __pyx_v_num_ghost_particles = __pyx_v_self->export_ghost_buffer.size();

    /* "phd/domain/domain_manager.pyx":802
 * 
 *             num_ghost_particles = self.export_ghost_buffer.size()
 *             indices.resize(num_ghost_particles)             # <<<<<<<<<<<<<<
 * 
 *             # grab indices used to create ghost particles
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_indices->__pyx_base.__pyx_vtab)->__pyx_base.resize(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_indices), __pyx_v_num_ghost_particles, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/domain/domain_manager.pyx":805
 * 
 *             # grab indices used to create ghost particles
 *             for i in range(num_ghost_particles):             # <<<<<<<<<<<<<<
 *                 indices.data[i] = self.export_ghost_buffer[i].index
 * 
 */
    __pyx_t_5 = __pyx_v_num_ghost_particles;
    __pyx_t_8 = __pyx_t_5;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "phd/domain/domain_manager.pyx":806
 *             # grab indices used to create ghost particles
 *             for i in range(num_ghost_particles):
 *                 indices.data[i] = self.export_ghost_buffer[i].index             # <<<<<<<<<<<<<<
 * 
 *             grad = gradients.extract_items(indices,
 */
      __pyx_t_10 = (__pyx_v_self->export_ghost_buffer[__pyx_v_i]).index;
      (__pyx_v_indices->data[__pyx_v_i]) = __pyx_t_10;
    }

    /* "phd/domain/domain_manager.pyx":809
 * 
 *             grad = gradients.extract_items(indices,
 *                     gradients.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 * 
 *             exchange_particles(gradients, grad,
 */
    if (unlikely(__pyx_v_gradients->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 809, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_gradients->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 809, __pyx_L1_error)

    /* "phd/domain/domain_manager.pyx":808
 *                 indices.data[i] = self.export_ghost_buffer[i].index
 * 
 *             grad = gradients.extract_items(indices,             # <<<<<<<<<<<<<<
 *                     gradients.carray_named_groups["primitive"])
 * 
 */
    __pyx_t_11.__pyx_n = 1;
    __pyx_t_11.carray_list_names = ((PyObject*)__pyx_t_2);
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_gradients->__pyx_vtab)->extract_items(__pyx_v_gradients, __pyx_v_indices, 0, &__pyx_t_11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_grad = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "phd/domain/domain_manager.pyx":811
 *                     gradients.carray_named_groups["primitive"])
 * 
 *             exchange_particles(gradients, grad,             # <<<<<<<<<<<<<<
 *                     self.send_cnts, self.recv_cnts, self.num_real_particles, phd._comm,
 *                     gradients.carray_named_groups["primitive"],
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_exchange_particles); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "phd/domain/domain_manager.pyx":812
 * 
 *             exchange_particles(gradients, grad,
 *                     self.send_cnts, self.recv_cnts, self.num_real_particles, phd._comm,             # <<<<<<<<<<<<<<
 *                     gradients.carray_named_groups["primitive"],
 *                     self.send_disp, self.recv_disp)
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->num_real_particles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_phd); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "phd/domain/domain_manager.pyx":813
 *             exchange_particles(gradients, grad,
 *                     self.send_cnts, self.recv_cnts, self.num_real_particles, phd._comm,
 *                     gradients.carray_named_groups["primitive"],             # <<<<<<<<<<<<<<
 *                     self.send_disp, self.recv_disp)
 * 
 */
    if (unlikely(__pyx_v_gradients->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 813, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_gradients->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "phd/domain/domain_manager.pyx":814
 *                     self.send_cnts, self.recv_cnts, self.num_real_particles, phd._comm,
 *                     gradients.carray_named_groups["primitive"],
 *                     self.send_disp, self.recv_disp)             # <<<<<<<<<<<<<<
 * 
 *             # modify gradient by boundary condition
 */
    __pyx_t_12 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[10] = {__pyx_t_12, ((PyObject *)__pyx_v_gradients), ((PyObject *)__pyx_v_grad), ((PyObject *)__pyx_v_self->send_cnts), ((PyObject *)__pyx_v_self->recv_cnts), __pyx_t_3, __pyx_t_4, __pyx_t_6, ((PyObject *)__pyx_v_self->send_disp), ((PyObject *)__pyx_v_self->recv_disp)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 9+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[10] = {__pyx_t_12, ((PyObject *)__pyx_v_gradients), ((PyObject *)__pyx_v_grad), ((PyObject *)__pyx_v_self->send_cnts), ((PyObject *)__pyx_v_self->recv_cnts), __pyx_t_3, __pyx_t_4, __pyx_t_6, ((PyObject *)__pyx_v_self->send_disp), ((PyObject *)__pyx_v_self->recv_disp)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 9+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(9+__pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__pyx_t_12) {
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_gradients));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_gradients));
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_5, ((PyObject *)__pyx_v_gradients));
      __Pyx_INCREF(((PyObject *)__pyx_v_grad));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_grad));
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_5, ((PyObject *)__pyx_v_grad));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_cnts));
      PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_5, ((PyObject *)__pyx_v_self->send_cnts));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_cnts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_cnts));
      PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_5, ((PyObject *)__pyx_v_self->recv_cnts));
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_13, 4+__pyx_t_5, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_13, 5+__pyx_t_5, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_13, 6+__pyx_t_5, __pyx_t_6);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->send_disp));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_disp));
      PyTuple_SET_ITEM(__pyx_t_13, 7+__pyx_t_5, ((PyObject *)__pyx_v_self->send_disp));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_disp));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_disp));
      PyTuple_SET_ITEM(__pyx_t_13, 8+__pyx_t_5, ((PyObject *)__pyx_v_self->recv_disp));
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/domain/domain_manager.pyx":817
 * 
 *             # modify gradient by boundary condition
 *             self.boundary_condition.update_gradients(particles, gradients, self)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    ((struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *)__pyx_v_self->boundary_condition->__pyx_vtab)->update_gradients(__pyx_v_self->boundary_condition, __pyx_v_particles, __pyx_v_gradients, __pyx_v_self);

    /* "phd/domain/domain_manager.pyx":799
 *         cdef IntArray tags = particles.get_carray("tag")
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             num_ghost_particles = self.export_ghost_buffer.size()
 */
    goto __pyx_L3;
  }

  /* "phd/domain/domain_manager.pyx":823
 *             # find all ghost that are outside the domain that
 *             #need to be updated
 *             for i in range(particles.get_carray_size()):             # <<<<<<<<<<<<<<
 *                 if tags.data[i] == GHOST:
 *                     indices.append(i)
 */
  /*else*/ {
    __pyx_t_5 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);
    __pyx_t_8 = __pyx_t_5;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "phd/domain/domain_manager.pyx":824
 *             #need to be updated
 *             for i in range(particles.get_carray_size()):
 *                 if tags.data[i] == GHOST:             # <<<<<<<<<<<<<<
 *                     indices.append(i)
 * 
 */
      __pyx_t_7 = (((__pyx_v_tags->data[__pyx_v_i]) == __pyx_v_3phd_6domain_14domain_manager_GHOST) != 0);
      if (__pyx_t_7) {

        /* "phd/domain/domain_manager.pyx":825
 *             for i in range(particles.get_carray_size()):
 *                 if tags.data[i] == GHOST:
 *                     indices.append(i)             # <<<<<<<<<<<<<<
 * 
 *             # each ghost particle knows the id from which
 */
        __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_indices->__pyx_base.__pyx_vtab)->append(__pyx_v_indices, __pyx_v_i, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 825, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "phd/domain/domain_manager.pyx":824
 *             #need to be updated
 *             for i in range(particles.get_carray_size()):
 *                 if tags.data[i] == GHOST:             # <<<<<<<<<<<<<<
 *                     indices.append(i)
 * 
 */
      }
    }

    /* "phd/domain/domain_manager.pyx":829
 *             # each ghost particle knows the id from which
 *             # it was created from the map array
 *             indices_npy = indices.get_npy_array()             # <<<<<<<<<<<<<<
 *             map_indices_npy = particles["map"][indices_npy]
 * 
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_indices->__pyx_base.__pyx_vtab)->__pyx_base.get_npy_array(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_indices), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_indices_npy = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "phd/domain/domain_manager.pyx":830
 *             # it was created from the map array
 *             indices_npy = indices.get_npy_array()
 *             map_indices_npy = particles["map"][indices_npy]             # <<<<<<<<<<<<<<
 * 
 *             # update ghost gradient from image particle
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_particles), __pyx_n_s_map); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, ((PyObject *)__pyx_v_indices_npy)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 830, __pyx_L1_error)
    __pyx_v_map_indices_npy = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "phd/domain/domain_manager.pyx":833
 * 
 *             # update ghost gradient from image particle
 *             for field in gradients.carray_named_groups["primitive"]:             # <<<<<<<<<<<<<<
 *                 gradients[field][indices_npy] = gradients[field][map_indices_npy]
 * 
 */
    if (unlikely(__pyx_v_gradients->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 833, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_gradients->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_14 = 0;
      __pyx_t_15 = NULL;
    } else {
      __pyx_t_14 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_15 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 833, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_15)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 833, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 833, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 833, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 833, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_15(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 833, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 833, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_field, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "phd/domain/domain_manager.pyx":834
 *             # update ghost gradient from image particle
 *             for field in gradients.carray_named_groups["primitive"]:
 *                 gradients[field][indices_npy] = gradients[field][map_indices_npy]             # <<<<<<<<<<<<<<
 * 
 *             # modify gradient by boundary condition
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_gradients), __pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = __Pyx_PyObject_GetItem(__pyx_t_2, ((PyObject *)__pyx_v_map_indices_npy)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_gradients), __pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(PyObject_SetItem(__pyx_t_2, ((PyObject *)__pyx_v_indices_npy), __pyx_t_13) < 0)) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "phd/domain/domain_manager.pyx":833
 * 
 *             # update ghost gradient from image particle
 *             for field in gradients.carray_named_groups["primitive"]:             # <<<<<<<<<<<<<<
 *                 gradients[field][indices_npy] = gradients[field][map_indices_npy]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/domain/domain_manager.pyx":837
 * 
 *             # modify gradient by boundary condition
 *             self.boundary_condition.update_gradients(particles, gradients, self)             # <<<<<<<<<<<<<<
 * 
 *     cdef int get_nearest_intersect_process_neighbors(self, double center[3], double old_h,
 */
    ((struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *)__pyx_v_self->boundary_condition->__pyx_vtab)->update_gradients(__pyx_v_self->boundary_condition, __pyx_v_particles, __pyx_v_gradients, __pyx_v_self);
  }
  __pyx_L3:;

  /* "phd/domain/domain_manager.pyx":776
 *                         particles, self)
 * 
 *     cpdef update_ghost_gradients(self, CarrayContainer particles, CarrayContainer gradients):             # <<<<<<<<<<<<<<
 *         """Update ghost gradients from their mirror particle.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.update_ghost_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XDECREF((PyObject *)__pyx_v_grad);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices_npy);
  __Pyx_XDECREF((PyObject *)__pyx_v_map_indices_npy);
  __Pyx_XDECREF((PyObject *)__pyx_v_tags);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_33update_ghost_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_32update_ghost_gradients[] = "Update ghost gradients from their mirror particle.\n\n        After reconstruction only real particles have gradients calculated.\n        This call will transfer those calcluated gradients to the respective\n        ghost particles with appropriate updates from the boundary condition.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Container of particles.\n\n        gradients : CarrayContainer\n            Container of gradients for each primitive field.\n\n        ";
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_33update_ghost_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_gradients = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_ghost_gradients (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_gradients,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gradients)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_ghost_gradients", 1, 2, 2, 1); __PYX_ERR(0, 776, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update_ghost_gradients") < 0)) __PYX_ERR(0, 776, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_gradients = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_ghost_gradients", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 776, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.update_ghost_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 776, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gradients), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "gradients", 0))) __PYX_ERR(0, 776, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_32update_ghost_gradients(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), __pyx_v_particles, __pyx_v_gradients);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_32update_ghost_gradients(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_gradients) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_ghost_gradients", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_ghost_gradients(__pyx_v_self, __pyx_v_particles, __pyx_v_gradients, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.update_ghost_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":839
 *             self.boundary_condition.update_gradients(particles, gradients, self)
 * 
 *     cdef int get_nearest_intersect_process_neighbors(self, double center[3], double old_h,             # <<<<<<<<<<<<<<
 *             double new_h, int rank, LongArray nbrs):
 *         """
 */

static int __pyx_f_3phd_6domain_14domain_manager_13DomainManager_get_nearest_intersect_process_neighbors(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, double *__pyx_v_center, double __pyx_v_old_h, double __pyx_v_new_h, int __pyx_v_rank, struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_nbrs) {
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_old_nbrs = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_new_nbrs = 0;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_num_new_nbrs;
  int __pyx_v_num_old_nbrs;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_leaf_pid = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  long __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nearest_intersect_process_neighbors", 0);

  /* "phd/domain/domain_manager.pyx":857
 *             Container to hold all the processors ids.
 *         """
 *         cdef LongArray old_nbrs = LongArray()             # <<<<<<<<<<<<<<
 *         cdef LongArray new_nbrs = LongArray()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3phd_5utils_6carray_LongArray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_old_nbrs = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":858
 *         """
 *         cdef LongArray old_nbrs = LongArray()
 *         cdef LongArray new_nbrs = LongArray()             # <<<<<<<<<<<<<<
 * 
 *         cdef int i, j, num_new_nbrs, num_old_nbrs
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3phd_5utils_6carray_LongArray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_new_nbrs = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":861
 * 
 *         cdef int i, j, num_new_nbrs, num_old_nbrs
 *         cdef LongArray leaf_pid = self.load_balance.leaf_pid             # <<<<<<<<<<<<<<
 * 
 *         nbrs.reset()
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->load_balance->leaf_pid);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_leaf_pid = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":863
 *         cdef LongArray leaf_pid = self.load_balance.leaf_pid
 * 
 *         nbrs.reset()             # <<<<<<<<<<<<<<
 * 
 *         # find all processors from previous radius
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_nbrs->__pyx_base.__pyx_vtab)->__pyx_base.reset(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_nbrs), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":866
 * 
 *         # find all processors from previous radius
 *         if old_h > 0:             # <<<<<<<<<<<<<<
 *             self.load_balance.tree.get_nearest_process_neighbors(
 *                     center, old_h, leaf_pid, rank, old_nbrs)
 */
  __pyx_t_2 = ((__pyx_v_old_h > 0.0) != 0);
  if (__pyx_t_2) {

    /* "phd/domain/domain_manager.pyx":867
 *         # find all processors from previous radius
 *         if old_h > 0:
 *             self.load_balance.tree.get_nearest_process_neighbors(             # <<<<<<<<<<<<<<
 *                     center, old_h, leaf_pid, rank, old_nbrs)
 * 
 */
    (void)(((struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *)__pyx_v_self->load_balance->tree->__pyx_vtab)->get_nearest_process_neighbors(__pyx_v_self->load_balance->tree, __pyx_v_center, __pyx_v_old_h, __pyx_v_leaf_pid, __pyx_v_rank, __pyx_v_old_nbrs));

    /* "phd/domain/domain_manager.pyx":866
 * 
 *         # find all processors from previous radius
 *         if old_h > 0:             # <<<<<<<<<<<<<<
 *             self.load_balance.tree.get_nearest_process_neighbors(
 *                     center, old_h, leaf_pid, rank, old_nbrs)
 */
  }

  /* "phd/domain/domain_manager.pyx":871
 * 
 *         # find all processors from new radius
 *         self.load_balance.tree.get_nearest_process_neighbors(             # <<<<<<<<<<<<<<
 *                 center, new_h, leaf_pid, rank, new_nbrs)
 * 
 */
  (void)(((struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *)__pyx_v_self->load_balance->tree->__pyx_vtab)->get_nearest_process_neighbors(__pyx_v_self->load_balance->tree, __pyx_v_center, __pyx_v_new_h, __pyx_v_leaf_pid, __pyx_v_rank, __pyx_v_new_nbrs));

  /* "phd/domain/domain_manager.pyx":877
 *         # in previous pass
 * 
 *         i = j = 0             # <<<<<<<<<<<<<<
 *         num_old_nbrs = old_nbrs.length
 *         num_new_nbrs = new_nbrs.length
 */
  __pyx_v_i = 0;
  __pyx_v_j = 0;

  /* "phd/domain/domain_manager.pyx":878
 * 
 *         i = j = 0
 *         num_old_nbrs = old_nbrs.length             # <<<<<<<<<<<<<<
 *         num_new_nbrs = new_nbrs.length
 * 
 */
  __pyx_t_3 = __pyx_v_old_nbrs->__pyx_base.length;
  __pyx_v_num_old_nbrs = __pyx_t_3;

  /* "phd/domain/domain_manager.pyx":879
 *         i = j = 0
 *         num_old_nbrs = old_nbrs.length
 *         num_new_nbrs = new_nbrs.length             # <<<<<<<<<<<<<<
 * 
 *         while(i != num_new_nbrs):
 */
  __pyx_t_3 = __pyx_v_new_nbrs->__pyx_base.length;
  __pyx_v_num_new_nbrs = __pyx_t_3;

  /* "phd/domain/domain_manager.pyx":881
 *         num_new_nbrs = new_nbrs.length
 * 
 *         while(i != num_new_nbrs):             # <<<<<<<<<<<<<<
 *             if j == num_old_nbrs:
 *                 while(i < num_new_nbrs):
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_i != __pyx_v_num_new_nbrs) != 0);
    if (!__pyx_t_2) break;

    /* "phd/domain/domain_manager.pyx":882
 * 
 *         while(i != num_new_nbrs):
 *             if j == num_old_nbrs:             # <<<<<<<<<<<<<<
 *                 while(i < num_new_nbrs):
 *                     nbrs.append(new_nbrs.data[i])
 */
    __pyx_t_2 = ((__pyx_v_j == __pyx_v_num_old_nbrs) != 0);
    if (__pyx_t_2) {

      /* "phd/domain/domain_manager.pyx":883
 *         while(i != num_new_nbrs):
 *             if j == num_old_nbrs:
 *                 while(i < num_new_nbrs):             # <<<<<<<<<<<<<<
 *                     nbrs.append(new_nbrs.data[i])
 *                     i += 1
 */
      while (1) {
        __pyx_t_2 = ((__pyx_v_i < __pyx_v_num_new_nbrs) != 0);
        if (!__pyx_t_2) break;

        /* "phd/domain/domain_manager.pyx":884
 *             if j == num_old_nbrs:
 *                 while(i < num_new_nbrs):
 *                     nbrs.append(new_nbrs.data[i])             # <<<<<<<<<<<<<<
 *                     i += 1
 *                 return nbrs.length
 */
        __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_nbrs->__pyx_base.__pyx_vtab)->append(__pyx_v_nbrs, (__pyx_v_new_nbrs->data[__pyx_v_i]), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "phd/domain/domain_manager.pyx":885
 *                 while(i < num_new_nbrs):
 *                     nbrs.append(new_nbrs.data[i])
 *                     i += 1             # <<<<<<<<<<<<<<
 *                 return nbrs.length
 * 
 */
        __pyx_v_i = (__pyx_v_i + 1);
      }

      /* "phd/domain/domain_manager.pyx":886
 *                     nbrs.append(new_nbrs.data[i])
 *                     i += 1
 *                 return nbrs.length             # <<<<<<<<<<<<<<
 * 
 *             if new_nbrs.data[i] < old_nbrs.data[j]:
 */
      __pyx_r = __pyx_v_nbrs->__pyx_base.length;
      goto __pyx_L0;

      /* "phd/domain/domain_manager.pyx":882
 * 
 *         while(i != num_new_nbrs):
 *             if j == num_old_nbrs:             # <<<<<<<<<<<<<<
 *                 while(i < num_new_nbrs):
 *                     nbrs.append(new_nbrs.data[i])
 */
    }

    /* "phd/domain/domain_manager.pyx":888
 *                 return nbrs.length
 * 
 *             if new_nbrs.data[i] < old_nbrs.data[j]:             # <<<<<<<<<<<<<<
 *                 nbrs.append(new_nbrs.data[i])
 *                 i += 1
 */
    __pyx_t_2 = (((__pyx_v_new_nbrs->data[__pyx_v_i]) < (__pyx_v_old_nbrs->data[__pyx_v_j])) != 0);
    if (__pyx_t_2) {

      /* "phd/domain/domain_manager.pyx":889
 * 
 *             if new_nbrs.data[i] < old_nbrs.data[j]:
 *                 nbrs.append(new_nbrs.data[i])             # <<<<<<<<<<<<<<
 *                 i += 1
 *             elif new_nbrs.data[i] > old_nbrs.data[j]:
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_nbrs->__pyx_base.__pyx_vtab)->append(__pyx_v_nbrs, (__pyx_v_new_nbrs->data[__pyx_v_i]), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "phd/domain/domain_manager.pyx":890
 *             if new_nbrs.data[i] < old_nbrs.data[j]:
 *                 nbrs.append(new_nbrs.data[i])
 *                 i += 1             # <<<<<<<<<<<<<<
 *             elif new_nbrs.data[i] > old_nbrs.data[j]:
 *                 j += 1
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "phd/domain/domain_manager.pyx":888
 *                 return nbrs.length
 * 
 *             if new_nbrs.data[i] < old_nbrs.data[j]:             # <<<<<<<<<<<<<<
 *                 nbrs.append(new_nbrs.data[i])
 *                 i += 1
 */
      goto __pyx_L9;
    }

    /* "phd/domain/domain_manager.pyx":891
 *                 nbrs.append(new_nbrs.data[i])
 *                 i += 1
 *             elif new_nbrs.data[i] > old_nbrs.data[j]:             # <<<<<<<<<<<<<<
 *                 j += 1
 *             else:
 */
    __pyx_t_2 = (((__pyx_v_new_nbrs->data[__pyx_v_i]) > (__pyx_v_old_nbrs->data[__pyx_v_j])) != 0);
    if (__pyx_t_2) {

      /* "phd/domain/domain_manager.pyx":892
 *                 i += 1
 *             elif new_nbrs.data[i] > old_nbrs.data[j]:
 *                 j += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 i += 1
 */
      __pyx_v_j = (__pyx_v_j + 1);

      /* "phd/domain/domain_manager.pyx":891
 *                 nbrs.append(new_nbrs.data[i])
 *                 i += 1
 *             elif new_nbrs.data[i] > old_nbrs.data[j]:             # <<<<<<<<<<<<<<
 *                 j += 1
 *             else:
 */
      goto __pyx_L9;
    }

    /* "phd/domain/domain_manager.pyx":894
 *                 j += 1
 *             else:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 j += 1
 * 
 */
    /*else*/ {
      __pyx_v_i = (__pyx_v_i + 1);

      /* "phd/domain/domain_manager.pyx":895
 *             else:
 *                 i += 1
 *                 j += 1             # <<<<<<<<<<<<<<
 * 
 *         return nbrs.length
 */
      __pyx_v_j = (__pyx_v_j + 1);
    }
    __pyx_L9:;
  }

  /* "phd/domain/domain_manager.pyx":897
 *                 j += 1
 * 
 *         return nbrs.length             # <<<<<<<<<<<<<<
 * 
 *     cdef reindex_ghost(self, CarrayContainer particles, int num_real_particles,
 */
  __pyx_r = __pyx_v_nbrs->__pyx_base.length;
  goto __pyx_L0;

  /* "phd/domain/domain_manager.pyx":839
 *             self.boundary_condition.update_gradients(particles, gradients, self)
 * 
 *     cdef int get_nearest_intersect_process_neighbors(self, double center[3], double old_h,             # <<<<<<<<<<<<<<
 *             double new_h, int rank, LongArray nbrs):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("phd.domain.domain_manager.DomainManager.get_nearest_intersect_process_neighbors", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_old_nbrs);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_nbrs);
  __Pyx_XDECREF((PyObject *)__pyx_v_leaf_pid);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pyx":899
 *         return nbrs.length
 * 
 *     cdef reindex_ghost(self, CarrayContainer particles, int num_real_particles,             # <<<<<<<<<<<<<<
 *             int total_num_particles):
 *         """Since ghost particles are exported in batches in processor order we
 */

static PyObject *__pyx_f_3phd_6domain_14domain_manager_13DomainManager_reindex_ghost(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, int __pyx_v_num_real_particles, int __pyx_v_total_num_particles) {
  int __pyx_v_i;
  int __pyx_v_j;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_procs = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongLongArray *__pyx_v_keys = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_indices = 0;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_ghost = 0;
  int __pyx_v_num_ghost_particles;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  std::vector<GhostID> ::size_type __pyx_t_6;
  std::vector<GhostID> ::size_type __pyx_t_7;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  long __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reindex_ghost", 0);

  /* "phd/domain/domain_manager.pyx":909
 *         cdef LongArray procs
 *         cdef LongLongArray keys
 *         cdef LongArray indices = LongArray()             # <<<<<<<<<<<<<<
 * 
 *         cdef CarrayContainer ghost
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_3phd_5utils_6carray_LongArray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_indices = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":914
 *         cdef int num_ghost_particles
 * 
 *         num_ghost_particles = total_num_particles - num_real_particles             # <<<<<<<<<<<<<<
 * 
 *         # sort our export ghost in processor and export order
 */
  __pyx_v_num_ghost_particles = (__pyx_v_total_num_particles - __pyx_v_num_real_particles);

  /* "phd/domain/domain_manager.pyx":917
 * 
 *         # sort our export ghost in processor and export order
 *         sort(self.export_ghost_buffer.begin(),             # <<<<<<<<<<<<<<
 *                 self.export_ghost_buffer.end(), ghostid_cmp)
 * 
 */
  std::sort<std::vector<GhostID> ::iterator,int (GhostID const &, GhostID const &)>(__pyx_v_self->export_ghost_buffer.begin(), __pyx_v_self->export_ghost_buffer.end(), __pyx_f_3phd_6domain_14domain_manager_ghostid_cmp);

  /* "phd/domain/domain_manager.pyx":921
 * 
 *         # reset import/export counts
 *         for i in range(phd._size):             # <<<<<<<<<<<<<<
 *             self.send_cnts[i] = 0
 *             self.recv_cnts[i] = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "phd/domain/domain_manager.pyx":922
 *         # reset import/export counts
 *         for i in range(phd._size):
 *             self.send_cnts[i] = 0             # <<<<<<<<<<<<<<
 *             self.recv_cnts[i] = 0
 * 
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_cnts), __pyx_v_i, __pyx_int_0, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 922, __pyx_L1_error)

    /* "phd/domain/domain_manager.pyx":923
 *         for i in range(phd._size):
 *             self.send_cnts[i] = 0
 *             self.recv_cnts[i] = 0             # <<<<<<<<<<<<<<
 * 
 *         # grab indices used to create ghost particles
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->recv_cnts), __pyx_v_i, __pyx_int_0, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 923, __pyx_L1_error)
  }

  /* "phd/domain/domain_manager.pyx":926
 * 
 *         # grab indices used to create ghost particles
 *         for i in range(self.export_ghost_buffer.size()):             # <<<<<<<<<<<<<<
 *             # bin processor for export
 *             self.send_cnts[self.export_ghost_buffer[i].proc] += 1
 */
  __pyx_t_6 = __pyx_v_self->export_ghost_buffer.size();
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_7; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "phd/domain/domain_manager.pyx":928
 *         for i in range(self.export_ghost_buffer.size()):
 *             # bin processor for export
 *             self.send_cnts[self.export_ghost_buffer[i].proc] += 1             # <<<<<<<<<<<<<<
 * 
 *         # total particles going to each processor
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
    __pyx_t_8 = __pyx_v_self->send_cnts;
    __pyx_t_9 = (__pyx_v_self->export_ghost_buffer[__pyx_v_i]).proc;
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_t_8), __pyx_t_9, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_t_8), __pyx_t_9, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
  }

  /* "phd/domain/domain_manager.pyx":931
 * 
 *         # total particles going to each processor
 *         phd._comm.Alltoall([self.send_cnts, phd.MPI.INT],             # <<<<<<<<<<<<<<
 *                 [self.recv_cnts, phd.MPI.INT])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_comm); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_Alltoall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_phd); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_MPI); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_INT); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyList_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_cnts));
  PyList_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_v_self->send_cnts));
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_10);
  __pyx_t_10 = 0;

  /* "phd/domain/domain_manager.pyx":932
 *         # total particles going to each processor
 *         phd._comm.Alltoall([self.send_cnts, phd.MPI.INT],
 *                 [self.recv_cnts, phd.MPI.INT])             # <<<<<<<<<<<<<<
 * 
 *         # create displacement arrays
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_phd); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_MPI); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_INT); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyList_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_cnts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_cnts));
  PyList_SET_ITEM(__pyx_t_12, 0, ((PyObject *)__pyx_v_self->recv_cnts));
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_11, __pyx_t_12};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_11, __pyx_t_12};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  {
    __pyx_t_13 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_5, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_5, __pyx_t_12);
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":935
 * 
 *         # create displacement arrays
 *         self.send_disp[0] = self.recv_disp[0] = 0             # <<<<<<<<<<<<<<
 *         for i in range(1, phd._size):
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 */
  if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_disp), 0, __pyx_int_0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 935, __pyx_L1_error)
  if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->recv_disp), 0, __pyx_int_0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 935, __pyx_L1_error)

  /* "phd/domain/domain_manager.pyx":936
 *         # create displacement arrays
 *         self.send_disp[0] = self.recv_disp[0] = 0
 *         for i in range(1, phd._size):             # <<<<<<<<<<<<<<
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 *             self.recv_disp[i] = self.recv_cnts[i-1] + self.recv_disp[i-1]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_3 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 1; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "phd/domain/domain_manager.pyx":937
 *         self.send_disp[0] = self.recv_disp[0] = 0
 *         for i in range(1, phd._size):
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]             # <<<<<<<<<<<<<<
 *             self.recv_disp[i] = self.recv_cnts[i-1] + self.recv_disp[i-1]
 * 
 */
    __pyx_t_14 = (__pyx_v_i - 1);
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->send_cnts), __pyx_t_14, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = (__pyx_v_i - 1);
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->send_disp), __pyx_t_14, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_disp), __pyx_v_i, __pyx_t_13, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "phd/domain/domain_manager.pyx":938
 *         for i in range(1, phd._size):
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 *             self.recv_disp[i] = self.recv_cnts[i-1] + self.recv_disp[i-1]             # <<<<<<<<<<<<<<
 * 
 *         procs = particles.get_carray("process")
 */
    __pyx_t_14 = (__pyx_v_i - 1);
    __pyx_t_13 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->recv_cnts), __pyx_t_14, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = (__pyx_v_i - 1);
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->recv_disp), __pyx_t_14, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Add(__pyx_t_13, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->recv_disp), __pyx_v_i, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "phd/domain/domain_manager.pyx":940
 *             self.recv_disp[i] = self.recv_cnts[i-1] + self.recv_disp[i-1]
 * 
 *         procs = particles.get_carray("process")             # <<<<<<<<<<<<<<
 *         keys = particles.get_carray("key")
 * 
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_process, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 940, __pyx_L1_error)
  __pyx_v_procs = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/domain/domain_manager.pyx":941
 * 
 *         procs = particles.get_carray("process")
 *         keys = particles.get_carray("key")             # <<<<<<<<<<<<<<
 * 
 *         j = 0
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_key, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3phd_5utils_6carray_LongLongArray))))) __PYX_ERR(0, 941, __pyx_L1_error)
  __pyx_v_keys = ((struct __pyx_obj_3phd_5utils_6carray_LongLongArray *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/domain/domain_manager.pyx":943
 *         keys = particles.get_carray("key")
 * 
 *         j = 0             # <<<<<<<<<<<<<<
 *         # copy ghost information for sort
 *         self.import_ghost_buffer.resize(num_ghost_particles)
 */
  __pyx_v_j = 0;

  /* "phd/domain/domain_manager.pyx":945
 *         j = 0
 *         # copy ghost information for sort
 *         self.import_ghost_buffer.resize(num_ghost_particles)             # <<<<<<<<<<<<<<
 *         for i in range(num_real_particles, total_num_particles):
 * 
 */
  try {
    __pyx_v_self->import_ghost_buffer.resize(__pyx_v_num_ghost_particles);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 945, __pyx_L1_error)
  }

  /* "phd/domain/domain_manager.pyx":946
 *         # copy ghost information for sort
 *         self.import_ghost_buffer.resize(num_ghost_particles)
 *         for i in range(num_real_particles, total_num_particles):             # <<<<<<<<<<<<<<
 * 
 *             self.import_ghost_buffer[j].index = i
 */
  __pyx_t_5 = __pyx_v_total_num_particles;
  __pyx_t_9 = __pyx_t_5;
  for (__pyx_t_15 = __pyx_v_num_real_particles; __pyx_t_15 < __pyx_t_9; __pyx_t_15+=1) {
    __pyx_v_i = __pyx_t_15;

    /* "phd/domain/domain_manager.pyx":948
 *         for i in range(num_real_particles, total_num_particles):
 * 
 *             self.import_ghost_buffer[j].index = i             # <<<<<<<<<<<<<<
 *             self.import_ghost_buffer[j].proc = procs.data[i]
 *             self.import_ghost_buffer[j].export_num = keys.data[i]
 */
    (__pyx_v_self->import_ghost_buffer[__pyx_v_j]).index = __pyx_v_i;

    /* "phd/domain/domain_manager.pyx":949
 * 
 *             self.import_ghost_buffer[j].index = i
 *             self.import_ghost_buffer[j].proc = procs.data[i]             # <<<<<<<<<<<<<<
 *             self.import_ghost_buffer[j].export_num = keys.data[i]
 *             j += 1
 */
    (__pyx_v_self->import_ghost_buffer[__pyx_v_j]).proc = (__pyx_v_procs->data[__pyx_v_i]);

    /* "phd/domain/domain_manager.pyx":950
 *             self.import_ghost_buffer[j].index = i
 *             self.import_ghost_buffer[j].proc = procs.data[i]
 *             self.import_ghost_buffer[j].export_num = keys.data[i]             # <<<<<<<<<<<<<<
 *             j += 1
 * 
 */
    (__pyx_v_self->import_ghost_buffer[__pyx_v_j]).export_num = (__pyx_v_keys->data[__pyx_v_i]);

    /* "phd/domain/domain_manager.pyx":951
 *             self.import_ghost_buffer[j].proc = procs.data[i]
 *             self.import_ghost_buffer[j].export_num = keys.data[i]
 *             j += 1             # <<<<<<<<<<<<<<
 * 
 *         # sort our import ghost in processor and export order
 */
    __pyx_v_j = (__pyx_v_j + 1);
  }

  /* "phd/domain/domain_manager.pyx":954
 * 
 *         # sort our import ghost in processor and export order
 *         sort(self.import_ghost_buffer.begin(),             # <<<<<<<<<<<<<<
 *                 self.import_ghost_buffer.end(), ghostid_cmp)
 * 
 */
  std::sort<std::vector<GhostID> ::iterator,int (GhostID const &, GhostID const &)>(__pyx_v_self->import_ghost_buffer.begin(), __pyx_v_self->import_ghost_buffer.end(), __pyx_f_3phd_6domain_14domain_manager_ghostid_cmp);

  /* "phd/domain/domain_manager.pyx":958
 * 
 *         # copy particle in correct import order
 *         indices.resize(num_ghost_particles)             # <<<<<<<<<<<<<<
 *         for i in range(num_ghost_particles):
 *             indices.data[i] = self.import_ghost_buffer[i].index
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_indices->__pyx_base.__pyx_vtab)->__pyx_base.resize(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_indices), __pyx_v_num_ghost_particles, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/domain/domain_manager.pyx":959
 *         # copy particle in correct import order
 *         indices.resize(num_ghost_particles)
 *         for i in range(num_ghost_particles):             # <<<<<<<<<<<<<<
 *             indices.data[i] = self.import_ghost_buffer[i].index
 * 
 */
  __pyx_t_5 = __pyx_v_num_ghost_particles;
  __pyx_t_9 = __pyx_t_5;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_9; __pyx_t_15+=1) {
    __pyx_v_i = __pyx_t_15;

    /* "phd/domain/domain_manager.pyx":960
 *         indices.resize(num_ghost_particles)
 *         for i in range(num_ghost_particles):
 *             indices.data[i] = self.import_ghost_buffer[i].index             # <<<<<<<<<<<<<<
 * 
 *         # reappend ghost particles in correct import order
 */
    __pyx_t_16 = (__pyx_v_self->import_ghost_buffer[__pyx_v_i]).index;
    (__pyx_v_indices->data[__pyx_v_i]) = __pyx_t_16;
  }

  /* "phd/domain/domain_manager.pyx":963
 * 
 *         # reappend ghost particles in correct import order
 *         ghost = particles.extract_items(indices)             # <<<<<<<<<<<<<<
 *         particles.resize(num_real_particles)
 *         particles.append_container(ghost)
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->extract_items(__pyx_v_particles, __pyx_v_indices, 0, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ghost = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/domain/domain_manager.pyx":964
 *         # reappend ghost particles in correct import order
 *         ghost = particles.extract_items(indices)
 *         particles.resize(num_real_particles)             # <<<<<<<<<<<<<<
 *         particles.append_container(ghost)
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->resize(__pyx_v_particles, __pyx_v_num_real_particles, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/domain/domain_manager.pyx":965
 *         ghost = particles.extract_items(indices)
 *         particles.resize(num_real_particles)
 *         particles.append_container(ghost)             # <<<<<<<<<<<<<<
 */
  (void)(((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->append_container(__pyx_v_particles, __pyx_v_ghost, 0));

  /* "phd/domain/domain_manager.pyx":899
 *         return nbrs.length
 * 
 *     cdef reindex_ghost(self, CarrayContainer particles, int num_real_particles,             # <<<<<<<<<<<<<<
 *             int total_num_particles):
 *         """Since ghost particles are exported in batches in processor order we
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(((PyObject *)__pyx_t_8));
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.reindex_ghost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_procs);
  __Pyx_XDECREF((PyObject *)__pyx_v_keys);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_ghost);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pxd":47
 * cdef class DomainManager:
 * 
 *     cdef public DoubleArray old_radius             # <<<<<<<<<<<<<<
 *     cdef public LoadBalance load_balance
 *     cdef public BoundaryConditionBase boundary_condition
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_10old_radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_10old_radius_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10old_radius___get__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10old_radius___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->old_radius));
  __pyx_r = ((PyObject *)__pyx_v_self->old_radius);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_10old_radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_10old_radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10old_radius_2__set__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10old_radius_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(2, 47, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->old_radius);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->old_radius));
  __pyx_v_self->old_radius = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.old_radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_10old_radius_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_10old_radius_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10old_radius_4__del__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_10old_radius_4__del__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->old_radius);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->old_radius));
  __pyx_v_self->old_radius = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pxd":48
 * 
 *     cdef public DoubleArray old_radius
 *     cdef public LoadBalance load_balance             # <<<<<<<<<<<<<<
 *     cdef public BoundaryConditionBase boundary_condition
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_12load_balance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_12load_balance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12load_balance___get__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12load_balance___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->load_balance));
  __pyx_r = ((PyObject *)__pyx_v_self->load_balance);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_12load_balance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_12load_balance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12load_balance_2__set__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12load_balance_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance))))) __PYX_ERR(2, 48, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->load_balance);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->load_balance));
  __pyx_v_self->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.load_balance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_12load_balance_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_12load_balance_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12load_balance_4__del__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_12load_balance_4__del__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->load_balance);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->load_balance));
  __pyx_v_self->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pxd":49
 *     cdef public DoubleArray old_radius
 *     cdef public LoadBalance load_balance
 *     cdef public BoundaryConditionBase boundary_condition             # <<<<<<<<<<<<<<
 * 
 *     cdef public double initial_radius
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition___get__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->boundary_condition));
  __pyx_r = ((PyObject *)__pyx_v_self->boundary_condition);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_2__set__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase))))) __PYX_ERR(2, 49, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->boundary_condition);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->boundary_condition));
  __pyx_v_self->boundary_condition = ((struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.boundary_condition.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_4__del__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_4__del__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->boundary_condition);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->boundary_condition));
  __pyx_v_self->boundary_condition = ((struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pxd":51
 *     cdef public BoundaryConditionBase boundary_condition
 * 
 *     cdef public double initial_radius             # <<<<<<<<<<<<<<
 *     cdef public double search_radius_factor
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_14initial_radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_14initial_radius_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_14initial_radius___get__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_14initial_radius___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->initial_radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.initial_radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_14initial_radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_14initial_radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_14initial_radius_2__set__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_14initial_radius_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 51, __pyx_L1_error)
  __pyx_v_self->initial_radius = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.initial_radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pxd":52
 * 
 *     cdef public double initial_radius
 *     cdef public double search_radius_factor             # <<<<<<<<<<<<<<
 * 
 *     cdef bint particle_fields_registered
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor___get__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->search_radius_factor); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.search_radius_factor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor_2__set__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_v_self->search_radius_factor = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.search_radius_factor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pxd":57
 * 
 *     cdef int dim
 *     cdef public list xmin             # <<<<<<<<<<<<<<
 *     cdef public list xmax
 *     cdef np.float64_t[3] translate
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmin___get__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmin___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->xmin);
  __pyx_r = __pyx_v_self->xmin;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmin_2__set__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmin_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 57, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->xmin);
  __Pyx_DECREF(__pyx_v_self->xmin);
  __pyx_v_self->xmin = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.xmin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmin_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmin_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmin_4__del__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmin_4__del__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->xmin);
  __Pyx_DECREF(__pyx_v_self->xmin);
  __pyx_v_self->xmin = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/domain/domain_manager.pxd":58
 *     cdef int dim
 *     cdef public list xmin
 *     cdef public list xmax             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[3] translate
 *     cdef np.float64_t[2][3] bounds
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmax_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmax_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmax___get__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmax___get__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->xmax);
  __pyx_r = __pyx_v_self->xmax;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmax_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmax_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmax_2__set__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmax_2__set__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 58, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->xmax);
  __Pyx_DECREF(__pyx_v_self->xmax);
  __pyx_v_self->xmax = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.xmax.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmax_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmax_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmax_4__del__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_4xmax_4__del__(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->xmax);
  __Pyx_DECREF(__pyx_v_self->xmax);
  __pyx_v_self->xmax = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_34__reduce_cython__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_6domain_14domain_manager_13DomainManager_36__setstate_cython__(((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_6domain_14domain_manager_13DomainManager_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.domain.domain_manager.DomainManager.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":869
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":870
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":873
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":875
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":876
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":882
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 882, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":883
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 883, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 884, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 884, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":888
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 888, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":889
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 889, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 890, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 890, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":894
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 894, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":895
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 895, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":896
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 896, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager __pyx_vtable_3phd_6domain_14domain_manager_DomainManager;

static PyObject *__pyx_tp_new_3phd_6domain_14domain_manager_DomainManager(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)o);
  p->__pyx_vtab = __pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager;
  new((void*)&(p->ghost_vec)) std::vector<BoundaryParticle> ();
  new((void*)&(p->flagged_particles)) std::list<struct FlagParticle> ();
  new((void*)&(p->export_ghost_buffer)) std::vector<GhostID> ();
  new((void*)&(p->import_ghost_buffer)) std::vector<GhostID> ();
  p->old_radius = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)Py_None); Py_INCREF(Py_None);
  p->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)Py_None); Py_INCREF(Py_None);
  p->boundary_condition = ((struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *)Py_None); Py_INCREF(Py_None);
  p->xmin = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->xmax = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->loc_done = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->glb_done = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->send_cnts = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->recv_cnts = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->send_disp = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->recv_disp = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_3phd_6domain_14domain_manager_DomainManager(PyObject *o) {
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *p = (struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->ghost_vec);
  __Pyx_call_destructor(p->flagged_particles);
  __Pyx_call_destructor(p->export_ghost_buffer);
  __Pyx_call_destructor(p->import_ghost_buffer);
  Py_CLEAR(p->old_radius);
  Py_CLEAR(p->load_balance);
  Py_CLEAR(p->boundary_condition);
  Py_CLEAR(p->xmin);
  Py_CLEAR(p->xmax);
  Py_CLEAR(p->loc_done);
  Py_CLEAR(p->glb_done);
  Py_CLEAR(p->send_cnts);
  Py_CLEAR(p->recv_cnts);
  Py_CLEAR(p->send_disp);
  Py_CLEAR(p->recv_disp);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3phd_6domain_14domain_manager_DomainManager(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *p = (struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)o;
  if (p->old_radius) {
    e = (*v)(((PyObject *)p->old_radius), a); if (e) return e;
  }
  if (p->load_balance) {
    e = (*v)(((PyObject *)p->load_balance), a); if (e) return e;
  }
  if (p->boundary_condition) {
    e = (*v)(((PyObject *)p->boundary_condition), a); if (e) return e;
  }
  if (p->xmin) {
    e = (*v)(p->xmin, a); if (e) return e;
  }
  if (p->xmax) {
    e = (*v)(p->xmax, a); if (e) return e;
  }
  if (p->loc_done) {
    e = (*v)(((PyObject *)p->loc_done), a); if (e) return e;
  }
  if (p->glb_done) {
    e = (*v)(((PyObject *)p->glb_done), a); if (e) return e;
  }
  if (p->send_cnts) {
    e = (*v)(((PyObject *)p->send_cnts), a); if (e) return e;
  }
  if (p->recv_cnts) {
    e = (*v)(((PyObject *)p->recv_cnts), a); if (e) return e;
  }
  if (p->send_disp) {
    e = (*v)(((PyObject *)p->send_disp), a); if (e) return e;
  }
  if (p->recv_disp) {
    e = (*v)(((PyObject *)p->recv_disp), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3phd_6domain_14domain_manager_DomainManager(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *p = (struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)o;
  tmp = ((PyObject*)p->old_radius);
  p->old_radius = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->load_balance);
  p->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->boundary_condition);
  p->boundary_condition = ((struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->xmin);
  p->xmin = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->xmax);
  p->xmax = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->loc_done);
  p->loc_done = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->glb_done);
  p->glb_done = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->send_cnts);
  p->send_cnts = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->recv_cnts);
  p->recv_cnts = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->send_disp);
  p->send_disp = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->recv_disp);
  p->recv_disp = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_old_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_10old_radius_1__get__(o);
}

static int __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_old_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_10old_radius_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_10old_radius_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_load_balance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_12load_balance_1__get__(o);
}

static int __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_load_balance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_12load_balance_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_12load_balance_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_boundary_condition(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_1__get__(o);
}

static int __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_boundary_condition(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_18boundary_condition_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_initial_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_14initial_radius_1__get__(o);
}

static int __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_initial_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_14initial_radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_search_radius_factor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor_1__get__(o);
}

static int __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_search_radius_factor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_20search_radius_factor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_xmin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmin_1__get__(o);
}

static int __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_xmin(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmin_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmin_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_xmax(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmax_1__get__(o);
}

static int __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_xmax(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmax_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_4xmax_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_3phd_6domain_14domain_manager_DomainManager[] = {
  {"register_fields", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_3register_fields, METH_O, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_2register_fields},
  {"initialize", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_5initialize, METH_NOARGS, 0},
  {"set_boundary_condition", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_7set_boundary_condition, METH_O, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_6set_boundary_condition},
  {"set_load_balance", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_9set_load_balance, METH_O, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_8set_load_balance},
  {"check_for_partition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_11check_for_partition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_10check_for_partition},
  {"partition", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_13partition, METH_O, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_12partition},
  {"setup_initial_radius", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_15setup_initial_radius, METH_O, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_14setup_initial_radius},
  {"store_radius", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_17store_radius, METH_O, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_16store_radius},
  {"setup_for_ghost_creation", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_19setup_for_ghost_creation, METH_O, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_18setup_for_ghost_creation},
  {"update_search_radius", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_21update_search_radius, METH_O, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_20update_search_radius},
  {"create_ghost_particles", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_23create_ghost_particles, METH_O, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_22create_ghost_particles},
  {"ghost_complete", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_25ghost_complete, METH_NOARGS, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_24ghost_complete},
  {"move_generators", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_27move_generators, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_26move_generators},
  {"migrate_particles", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_29migrate_particles, METH_O, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_28migrate_particles},
  {"update_ghost_fields", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_31update_ghost_fields, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_30update_ghost_fields},
  {"update_ghost_gradients", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_33update_ghost_gradients, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_6domain_14domain_manager_13DomainManager_32update_ghost_gradients},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_35__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3phd_6domain_14domain_manager_13DomainManager_37__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3phd_6domain_14domain_manager_DomainManager[] = {
  {(char *)"old_radius", __pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_old_radius, __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_old_radius, (char *)0, 0},
  {(char *)"load_balance", __pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_load_balance, __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_load_balance, (char *)0, 0},
  {(char *)"boundary_condition", __pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_boundary_condition, __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_boundary_condition, (char *)0, 0},
  {(char *)"initial_radius", __pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_initial_radius, __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_initial_radius, (char *)0, 0},
  {(char *)"search_radius_factor", __pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_search_radius_factor, __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_search_radius_factor, (char *)0, 0},
  {(char *)"xmin", __pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_xmin, __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_xmin, (char *)0, 0},
  {(char *)"xmax", __pyx_getprop_3phd_6domain_14domain_manager_13DomainManager_xmax, __pyx_setprop_3phd_6domain_14domain_manager_13DomainManager_xmax, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3phd_6domain_14domain_manager_DomainManager = {
  PyVarObject_HEAD_INIT(0, 0)
  "phd.domain.domain_manager.DomainManager", /*tp_name*/
  sizeof(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3phd_6domain_14domain_manager_DomainManager, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3phd_6domain_14domain_manager_DomainManager, /*tp_traverse*/
  __pyx_tp_clear_3phd_6domain_14domain_manager_DomainManager, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3phd_6domain_14domain_manager_DomainManager, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3phd_6domain_14domain_manager_DomainManager, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3phd_6domain_14domain_manager_13DomainManager_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3phd_6domain_14domain_manager_DomainManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_domain_manager(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_domain_manager},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "domain_manager",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Allreduce, __pyx_k_Allreduce, sizeof(__pyx_k_Allreduce), 0, 0, 1, 1},
  {&__pyx_n_s_Alltoall, __pyx_k_Alltoall, sizeof(__pyx_k_Alltoall), 0, 0, 1, 1},
  {&__pyx_n_s_DomainManager, __pyx_k_DomainManager, sizeof(__pyx_k_DomainManager), 0, 0, 1, 1},
  {&__pyx_kp_s_ERROR_Boundary_inconsistent, __pyx_k_ERROR_Boundary_inconsistent, sizeof(__pyx_k_ERROR_Boundary_inconsistent), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Fields_not_registered_in_p, __pyx_k_ERROR_Fields_not_registered_in_p, sizeof(__pyx_k_ERROR_Fields_not_registered_in_p), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Particle_dim_does_not_matc, __pyx_k_ERROR_Particle_dim_does_not_matc, sizeof(__pyx_k_ERROR_Particle_dim_does_not_matc), 0, 0, 1, 0},
  {&__pyx_n_s_Exterior, __pyx_k_Exterior, sizeof(__pyx_k_Exterior), 0, 0, 1, 1},
  {&__pyx_kp_s_Found_error_in_interior_ghost, __pyx_k_Found_error_in_interior_ghost, sizeof(__pyx_k_Found_error_in_interior_ghost), 0, 0, 1, 0},
  {&__pyx_n_s_Ghost, __pyx_k_Ghost, sizeof(__pyx_k_Ghost), 0, 0, 1, 1},
  {&__pyx_n_s_INT, __pyx_k_INT, sizeof(__pyx_k_INT), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_Interior, __pyx_k_Interior, sizeof(__pyx_k_Interior), 0, 0, 1, 1},
  {&__pyx_n_s_MPI, __pyx_k_MPI, sizeof(__pyx_k_MPI), 0, 0, 1, 1},
  {&__pyx_kp_s_Not_all_setters_defined_in_Domai, __pyx_k_Not_all_setters_defined_in_Domai, sizeof(__pyx_k_Not_all_setters_defined_in_Domai), 0, 0, 1, 0},
  {&__pyx_n_s_ParticleTAGS, __pyx_k_ParticleTAGS, sizeof(__pyx_k_ParticleTAGS), 0, 0, 1, 1},
  {&__pyx_n_s_Real, __pyx_k_Real, sizeof(__pyx_k_Real), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SUM, __pyx_k_SUM, sizeof(__pyx_k_SUM), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Wrong_dimension_specified, __pyx_k_Wrong_dimension_specified, sizeof(__pyx_k_Wrong_dimension_specified), 0, 0, 1, 0},
  {&__pyx_kp_s_Wrong_dimensions_for_xmin_and_xm, __pyx_k_Wrong_dimensions_for_xmin_and_xm, sizeof(__pyx_k_Wrong_dimensions_for_xmin_and_xm), 0, 0, 1, 0},
  {&__pyx_n_s_apply_boundary_condition, __pyx_k_apply_boundary_condition, sizeof(__pyx_k_apply_boundary_condition), 0, 0, 1, 1},
  {&__pyx_n_s_check_class, __pyx_k_check_class, sizeof(__pyx_k_check_class), 0, 0, 1, 1},
  {&__pyx_n_s_check_for_partition, __pyx_k_check_for_partition, sizeof(__pyx_k_check_for_partition), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_comm, __pyx_k_comm, sizeof(__pyx_k_comm), 0, 0, 1, 1},
  {&__pyx_n_s_create_ghost_particles, __pyx_k_create_ghost_particles, sizeof(__pyx_k_create_ghost_particles), 0, 0, 1, 1},
  {&__pyx_n_s_decomposition, __pyx_k_decomposition, sizeof(__pyx_k_decomposition), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_exchange_particles, __pyx_k_exchange_particles, sizeof(__pyx_k_exchange_particles), 0, 0, 1, 1},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_ghost_complete, __pyx_k_ghost_complete, sizeof(__pyx_k_ghost_complete), 0, 0, 1, 1},
  {&__pyx_n_s_gradients, __pyx_k_gradients, sizeof(__pyx_k_gradients), 0, 0, 1, 1},
  {&__pyx_n_s_ids, __pyx_k_ids, sizeof(__pyx_k_ids), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_parallel, __pyx_k_in_parallel, sizeof(__pyx_k_in_parallel), 0, 0, 1, 1},
  {&__pyx_n_s_initial_radius, __pyx_k_initial_radius, sizeof(__pyx_k_initial_radius), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_integrator, __pyx_k_integrator, sizeof(__pyx_k_integrator), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_long, __pyx_k_long, sizeof(__pyx_k_long), 0, 0, 1, 1},
  {&__pyx_n_s_longlong, __pyx_k_longlong, sizeof(__pyx_k_longlong), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_migrate_particles, __pyx_k_migrate_particles, sizeof(__pyx_k_migrate_particles), 0, 0, 1, 1},
  {&__pyx_n_s_move_generators, __pyx_k_move_generators, sizeof(__pyx_k_move_generators), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_old_radius, __pyx_k_old_radius, sizeof(__pyx_k_old_radius), 0, 0, 1, 1},
  {&__pyx_n_s_op, __pyx_k_op, sizeof(__pyx_k_op), 0, 0, 1, 1},
  {&__pyx_n_s_particles, __pyx_k_particles, sizeof(__pyx_k_particles), 0, 0, 1, 1},
  {&__pyx_n_s_partition, __pyx_k_partition, sizeof(__pyx_k_partition), 0, 0, 1, 1},
  {&__pyx_n_s_phd, __pyx_k_phd, sizeof(__pyx_k_phd), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_primitive, __pyx_k_primitive, sizeof(__pyx_k_primitive), 0, 0, 1, 1},
  {&__pyx_n_s_process, __pyx_k_process, sizeof(__pyx_k_process), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rank, __pyx_k_rank, sizeof(__pyx_k_rank), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_search_radius_factor, __pyx_k_search_radius_factor, sizeof(__pyx_k_search_radius_factor), 0, 0, 1, 1},
  {&__pyx_kp_s_self_export_ghost_buffer_self_gh, __pyx_k_self_export_ghost_buffer_self_gh, sizeof(__pyx_k_self_export_ghost_buffer_self_gh), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_setup_for_ghost_creation, __pyx_k_setup_for_ghost_creation, sizeof(__pyx_k_setup_for_ghost_creation), 0, 0, 1, 1},
  {&__pyx_n_s_setup_initial_radius, __pyx_k_setup_initial_radius, sizeof(__pyx_k_setup_initial_radius), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_store_radius, __pyx_k_store_radius, sizeof(__pyx_k_store_radius), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_update_ghost_fields, __pyx_k_update_ghost_fields, sizeof(__pyx_k_update_ghost_fields), 0, 0, 1, 1},
  {&__pyx_n_s_update_ghost_gradients, __pyx_k_update_ghost_gradients, sizeof(__pyx_k_update_ghost_gradients), 0, 0, 1, 1},
  {&__pyx_n_s_update_search_radius, __pyx_k_update_search_radius, sizeof(__pyx_k_update_search_radius), 0, 0, 1, 1},
  {&__pyx_n_s_utils_exchange_particles, __pyx_k_utils_exchange_particles, sizeof(__pyx_k_utils_exchange_particles), 0, 0, 1, 1},
  {&__pyx_n_s_utils_particle_tags, __pyx_k_utils_particle_tags, sizeof(__pyx_k_utils_particle_tags), 0, 0, 1, 1},
  {&__pyx_n_s_utils_tools, __pyx_k_utils_tools, sizeof(__pyx_k_utils_tools), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_xmax, __pyx_k_xmax, sizeof(__pyx_k_xmax), 0, 0, 1, 1},
  {&__pyx_n_s_xmin, __pyx_k_xmin, sizeof(__pyx_k_xmin), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 884, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "phd/domain/domain_manager.pyx":52
 * 
 *         if len(xmin) not in [2, 3]:
 *             raise RuntimeError("Wrong dimension specified")             # <<<<<<<<<<<<<<
 *         if len(xmin) != len(xmax):
 *             raise RuntimeError("Wrong dimensions for xmin and xmax")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Wrong_dimension_specified); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "phd/domain/domain_manager.pyx":54
 *             raise RuntimeError("Wrong dimension specified")
 *         if len(xmin) != len(xmax):
 *             raise RuntimeError("Wrong dimensions for xmin and xmax")             # <<<<<<<<<<<<<<
 * 
 *         self.dim = len(xmin)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Wrong_dimensions_for_xmin_and_xm); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "phd/domain/domain_manager.pyx":77
 *         for i in range(self.dim):
 *             if xmax[i] < xmin[i]:
 *                 raise RuntimeError("ERROR: Boundary inconsistent")             # <<<<<<<<<<<<<<
 * 
 *             self.bounds[0][i] = xmin[i]
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Boundary_inconsistent); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "phd/domain/domain_manager.pyx":89
 *         if phd._in_parallel:
 * 
 *             self.loc_done = np.zeros(1, dtype=np.int32)             # <<<<<<<<<<<<<<
 *             self.glb_done = np.zeros(1, dtype=np.int32)
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "phd/domain/domain_manager.pyx":111
 * 
 *         if self.dim != len(particles.carray_named_groups["position"]):
 *             raise RuntimeError("ERROR: Particle dim does not match")             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Particle_dim_does_not_matc); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "phd/domain/domain_manager.pyx":129
 *     def initialize(self):
 *         if not self.particle_fields_registered:
 *             raise RuntimeError("ERROR: Fields not registered in particles by Mesh!")             # <<<<<<<<<<<<<<
 * 
 *         if not self.boundary_condition:
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Fields_not_registered_in_p); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "phd/domain/domain_manager.pyx":132
 * 
 *         if not self.boundary_condition:
 *             raise RuntimeError("Not all setters defined in DomainMangaer")             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Not_all_setters_defined_in_Domai); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "phd/domain/domain_manager.pyx":421
 *                 p = &self.ghost_vec[i]       # retrieve particle
 *                 if p.proc > phd._size or p.proc < 0:
 *                     raise RuntimeError("Found error in interior ghost")             # <<<<<<<<<<<<<<
 * 
 *                 indices.data[i] = p.index    # index of particle
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Found_error_in_interior_ghost); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_export_ghost_buffer_self_gh); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.export_ghost_buffer,self.ghost_vec,self.import_ghost_buffer cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_export_ghost_buffer_self_gh); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(3, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(3, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_3phd_6domain_14domain_manager_fields_for_parallel = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("boundary_particle_cmp", (void (*)(void))__pyx_f_3phd_6domain_14domain_manager_boundary_particle_cmp, "int (BoundaryParticle const &, BoundaryParticle const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("ghostid_cmp", (void (*)(void))__pyx_f_3phd_6domain_14domain_manager_ghostid_cmp, "int (GhostID const &, GhostID const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager = &__pyx_vtable_3phd_6domain_14domain_manager_DomainManager;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.check_for_partition = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_check_for_partition;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.partition = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_partition;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.setup_initial_radius = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_setup_initial_radius;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.store_radius = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_store_radius;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.setup_for_ghost_creation = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_setup_for_ghost_creation;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.create_ghost_particles = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_create_ghost_particles;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.create_interior_ghost_particles = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_create_interior_ghost_particles;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.update_search_radius = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_search_radius;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.copy_particles_serial = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_copy_particles_serial;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.copy_particles_parallel = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_copy_particles_parallel;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.move_generators = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, double, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_move_generators;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.migrate_particles = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_migrate_particles;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.ghost_complete = (int (*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_ghost_complete;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.update_ghost_fields = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields *__pyx_optional_args))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.update_ghost_gradients = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_update_ghost_gradients;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.reindex_ghost = (PyObject *(*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_reindex_ghost;
  __pyx_vtable_3phd_6domain_14domain_manager_DomainManager.get_nearest_intersect_process_neighbors = (int (*)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double *, double, double, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *))__pyx_f_3phd_6domain_14domain_manager_13DomainManager_get_nearest_intersect_process_neighbors;
  if (PyType_Ready(&__pyx_type_3phd_6domain_14domain_manager_DomainManager) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3phd_6domain_14domain_manager_DomainManager.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3phd_6domain_14domain_manager_DomainManager.tp_dictoffset && __pyx_type_3phd_6domain_14domain_manager_DomainManager.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3phd_6domain_14domain_manager_DomainManager.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3phd_6domain_14domain_manager_DomainManager.tp_dict, __pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DomainManager, (PyObject *)&__pyx_type_3phd_6domain_14domain_manager_DomainManager) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3phd_6domain_14domain_manager_DomainManager) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_ptype_3phd_6domain_14domain_manager_DomainManager = &__pyx_type_3phd_6domain_14domain_manager_DomainManager;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.utils.carray"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_5utils_6carray_BaseArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "BaseArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_BaseArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_BaseArray) __PYX_ERR(5, 5, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_BaseArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_BaseArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_BaseArray)) __PYX_ERR(5, 5, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_BaseArrayIter = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "BaseArrayIter", sizeof(struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_BaseArrayIter) __PYX_ERR(5, 7, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_DoubleArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "DoubleArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_DoubleArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_DoubleArray) __PYX_ERR(5, 31, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_DoubleArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_DoubleArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_DoubleArray)) __PYX_ERR(5, 31, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_IntArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "IntArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_IntArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_IntArray) __PYX_ERR(5, 54, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_IntArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_IntArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_IntArray)) __PYX_ERR(5, 54, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_LongArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "LongArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_LongArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_LongArray) __PYX_ERR(5, 77, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_LongArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_LongArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_LongArray)) __PYX_ERR(5, 77, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_LongLongArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "LongLongArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_LongLongArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_LongLongArray) __PYX_ERR(5, 100, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_LongLongArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_LongLongArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_LongLongArray)) __PYX_ERR(5, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.containers.containers"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_10containers_10containers_CarrayContainer = __Pyx_ImportType(__pyx_t_1, "phd.containers.containers", "CarrayContainer", sizeof(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_10containers_10containers_CarrayContainer) __PYX_ERR(6, 5, __pyx_L1_error)
  __pyx_vtabptr_3phd_10containers_10containers_CarrayContainer = (struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer*)__Pyx_GetVtable(__pyx_ptype_3phd_10containers_10containers_CarrayContainer->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_10containers_10containers_CarrayContainer)) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.domain.boundary"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "BoundaryConditionBase", sizeof(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase = (struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase)) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_ptype_3phd_6domain_8boundary_Reflective = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "Reflective", sizeof(struct __pyx_obj_3phd_6domain_8boundary_Reflective), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_Reflective) __PYX_ERR(7, 29, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_Reflective = (struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_Reflective->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_Reflective)) __PYX_ERR(7, 29, __pyx_L1_error)
  __pyx_ptype_3phd_6domain_8boundary_Periodic = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "Periodic", sizeof(struct __pyx_obj_3phd_6domain_8boundary_Periodic), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_Periodic) __PYX_ERR(7, 32, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_Periodic = (struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_Periodic->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_Periodic)) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.load_balance.tree"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.tree", "TreeMemoryPool", sizeof(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool) __PYX_ERR(8, 37, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool = (struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool)) __PYX_ERR(8, 37, __pyx_L1_error)
  __pyx_ptype_3phd_12load_balance_4tree_Tree = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.tree", "Tree", sizeof(struct __pyx_obj_3phd_12load_balance_4tree_Tree), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_4tree_Tree) __PYX_ERR(8, 50, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_4tree_Tree = (struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_4tree_Tree->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_4tree_Tree)) __PYX_ERR(8, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.load_balance.load_balance"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.load_balance", "LoadBalance", sizeof(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance) __PYX_ERR(9, 9, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance = (struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance)) __PYX_ERR(9, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initdomain_manager(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initdomain_manager(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_domain_manager(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_domain_manager(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_domain_manager(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'domain_manager' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_domain_manager(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("domain_manager", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_phd__domain__domain_manager) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "phd.domain.domain_manager")) {
      if (unlikely(PyDict_SetItemString(modules, "phd.domain.domain_manager", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "phd/domain/domain_manager.pyx":1
 * import phd             # <<<<<<<<<<<<<<
 * import numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_phd, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_phd, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":2
 * import phd
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * from libc.math cimport fmin
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":9
 * from ..load_balance.tree cimport Node
 * 
 * from ..utils.tools import check_class             # <<<<<<<<<<<<<<
 * from ..utils.particle_tags import ParticleTAGS
 * from ..utils.exchange_particles import exchange_particles
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_check_class);
  __Pyx_GIVEREF(__pyx_n_s_check_class);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_check_class);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_utils_tools, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_check_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_check_class, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/domain/domain_manager.pyx":10
 * 
 * from ..utils.tools import check_class
 * from ..utils.particle_tags import ParticleTAGS             # <<<<<<<<<<<<<<
 * from ..utils.exchange_particles import exchange_particles
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ParticleTAGS);
  __Pyx_GIVEREF(__pyx_n_s_ParticleTAGS);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ParticleTAGS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_utils_particle_tags, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParticleTAGS, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/domain/domain_manager.pyx":11
 * from ..utils.tools import check_class
 * from ..utils.particle_tags import ParticleTAGS
 * from ..utils.exchange_particles import exchange_particles             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_exchange_particles);
  __Pyx_GIVEREF(__pyx_n_s_exchange_particles);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_exchange_particles);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_utils_exchange_particles, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_exchange_particles); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_exchange_particles, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/domain/domain_manager.pyx":14
 * 
 * 
 * cdef int REAL = ParticleTAGS.Real             # <<<<<<<<<<<<<<
 * cdef int GHOST = ParticleTAGS.Ghost
 * cdef int EXTERIOR = ParticleTAGS.Exterior
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Real); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3phd_6domain_14domain_manager_REAL = __pyx_t_3;

  /* "phd/domain/domain_manager.pyx":15
 * 
 * cdef int REAL = ParticleTAGS.Real
 * cdef int GHOST = ParticleTAGS.Ghost             # <<<<<<<<<<<<<<
 * cdef int EXTERIOR = ParticleTAGS.Exterior
 * cdef int INTERIOR = ParticleTAGS.Interior
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Ghost); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_3phd_6domain_14domain_manager_GHOST = __pyx_t_3;

  /* "phd/domain/domain_manager.pyx":16
 * cdef int REAL = ParticleTAGS.Real
 * cdef int GHOST = ParticleTAGS.Ghost
 * cdef int EXTERIOR = ParticleTAGS.Exterior             # <<<<<<<<<<<<<<
 * cdef int INTERIOR = ParticleTAGS.Interior
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Exterior); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3phd_6domain_14domain_manager_EXTERIOR = __pyx_t_3;

  /* "phd/domain/domain_manager.pyx":17
 * cdef int GHOST = ParticleTAGS.Ghost
 * cdef int EXTERIOR = ParticleTAGS.Exterior
 * cdef int INTERIOR = ParticleTAGS.Interior             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Interior); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_3phd_6domain_14domain_manager_INTERIOR = __pyx_t_3;

  /* "phd/domain/domain_manager.pyx":21
 * 
 * cdef dict fields_for_parallel = {
 *         "key": "longlong",             # <<<<<<<<<<<<<<
 *         "process": "long",
 *         }
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_key, __pyx_n_s_longlong) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_process, __pyx_n_s_long) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_3phd_6domain_14domain_manager_fields_for_parallel);
  __Pyx_DECREF_SET(__pyx_v_3phd_6domain_14domain_manager_fields_for_parallel, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/domain/domain_manager.pyx":1
 * import phd             # <<<<<<<<<<<<<<
 * import numpy as np
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init phd.domain.domain_manager", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init phd.domain.domain_manager");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
