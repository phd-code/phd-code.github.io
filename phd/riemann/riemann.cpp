/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "CGAL_NDEBUG",
                1
            ]
        ],
        "depends": [
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "phd/domain/particle.h",
            "phd/mesh/tess.h"
        ],
        "include_dirs": [
            "./phd/domain",
            "phd/domain",
            "./phd/mesh",
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include",
            "phd/utils/",
            "phd/containers/",
            "phd/domain/",
            "phd/hilbert/",
            "phd/equation_state/",
            "phd/load_balance/",
            "phd/gravity",
            "phd/riemann/",
            "phd/mesh/",
            "phd/reconstruction/",
            "phd/source_term/",
            "/opt/homebrew/Cellar/cgal/5.2/include",
            "/opt/homebrew/Cellar/boost/1.75.0_1/include"
        ],
        "language": "c++",
        "libraries": [
            "gmp",
            "m"
        ],
        "library_dirs": [
            "/opt/homebrew/Cellar/cgal/5.2/lib"
        ],
        "name": "phd.riemann.riemann",
        "sources": [
            "phd/riemann/riemann.pyx"
        ]
    },
    "module_name": "phd.riemann.riemann"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__phd__riemann__riemann
#define __PYX_HAVE_API__phd__riemann__riemann
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <list>
#include "particle.h"
#include "stdlib.h"
#include <algorithm>
#include "tess.h"
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "phd/riemann/riemann.pyx",
  "phd/riemann/riemann.pxd",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
  "phd/utils/carray.pxd",
  "phd/containers/containers.pxd",
  "phd/domain/boundary.pxd",
  "phd/load_balance/tree.pxd",
  "phd/load_balance/load_balance.pxd",
  "phd/domain/domain_manager.pxd",
  "phd/mesh/pytess.pxd",
  "phd/equation_state/equation_state.pxd",
  "phd/mesh/mesh.pxd",
  "phd/reconstruction/reconstruction.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter;
struct __pyx_obj_3phd_5utils_6carray_BaseArray;
struct __pyx_obj_3phd_5utils_6carray_DoubleArray;
struct __pyx_obj_3phd_5utils_6carray_IntArray;
struct __pyx_obj_3phd_5utils_6carray_LongArray;
struct __pyx_obj_3phd_5utils_6carray_LongLongArray;
struct __pyx_obj_3phd_10containers_10containers_CarrayContainer;
struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase;
struct __pyx_obj_3phd_6domain_8boundary_Reflective;
struct __pyx_obj_3phd_6domain_8boundary_Periodic;
struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool;
struct __pyx_obj_3phd_12load_balance_4tree_Tree;
struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance;
struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager;
struct __pyx_obj_3phd_4mesh_6pytess_PyTess;
struct __pyx_obj_3phd_4mesh_6pytess_PyTess2d;
struct __pyx_obj_3phd_4mesh_6pytess_PyTess3d;
struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase;
struct __pyx_obj_3phd_14equation_state_14equation_state_IdealGas;
struct __pyx_obj_3phd_4mesh_4mesh_Mesh;
struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase;
struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant;
struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear;
struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase;
struct __pyx_obj_3phd_7riemann_7riemann_HLL;
struct __pyx_obj_3phd_7riemann_7riemann_HLLC;
struct __pyx_obj_3phd_7riemann_7riemann_Exact;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_11DoubleArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_8IntArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_9LongArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_13LongLongArray_remove;

/* "utils/carray.pxd":20
 *     cpdef np.ndarray get_npy_array(self)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 *     cpdef reset(self)
 */
struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":45
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_11DoubleArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":68
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_8IntArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":91
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_9LongArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":114
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_13LongLongArray_remove {
  int __pyx_n;
  int input_sorted;
};
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray;
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items;

/* "containers/containers.pxd":11
 *     cdef readonly dict carray_named_groups
 * 
 *     cpdef register_carray(self, int carray_size, str carray_name, str dtype=*)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int get_carray_size(self)
 */
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray {
  int __pyx_n;
  PyObject *dtype;
};

/* "containers/containers.pxd":20
 *     cpdef resize(self, int carray_size)
 *     cpdef remove_tagged_particles(self, np.int8_t tag)
 *     cpdef CarrayContainer extract_items(self, LongArray index_array, list carray_list_names=*)             # <<<<<<<<<<<<<<
 *     cpdef int append_container(self, CarrayContainer container)
 *     cpdef copy(self, CarrayContainer container, LongArray indices, list carray_list_names)
 */
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items {
  int __pyx_n;
  PyObject *carray_list_names;
};

/* "domain/boundary.pxd":11
 *     FlagParticle* particle_flag_deref(cpplist[FlagParticle].iterator &it)
 * 
 * cdef enum:             # <<<<<<<<<<<<<<
 *     REFLECTIVE = 0x01
 *     PERIODIC   = 0x02
 */
enum  {
  __pyx_e_3phd_6domain_8boundary_REFLECTIVE = 0x01,
  __pyx_e_3phd_6domain_8boundary_PERIODIC = 0x02
};
struct __pyx_t_3phd_12load_balance_4tree_Node;

/* "load_balance/tree.pxd":6
 * from ..containers.containers cimport CarrayContainer
 * 
 * ctypedef np.int64_t (*hilbert_type)(np.int32_t, np.int32_t, np.int32_t, int)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "stdlib.h":
 */
typedef __pyx_t_5numpy_int64_t (*__pyx_t_3phd_12load_balance_4tree_hilbert_type)(__pyx_t_5numpy_int32_t, __pyx_t_5numpy_int32_t, __pyx_t_5numpy_int32_t, int);

/* "load_balance/tree.pxd":15
 * 
 * # forward decleration
 * cdef struct Node             # <<<<<<<<<<<<<<
 * 
 * cdef struct Node:
 */
struct __pyx_t_3phd_12load_balance_4tree_Node {
  __pyx_t_5numpy_int64_t sfc_key;
  __pyx_t_5numpy_int64_t sfc_start_key;
  __pyx_t_5numpy_int64_t number_sfc_keys;
  __pyx_t_5numpy_int64_t level;
  __pyx_t_5numpy_float64_t box_length;
  __pyx_t_5numpy_float64_t center[3];
  int particle_index_start;
  int number_particles;
  int number_segments;
  int leaf;
  int array_index;
  int children_start;
  int zorder_to_hilbert[8];
};
struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields;

/* "domain/domain_manager.pxd":104
 *     cpdef bint ghost_complete(self)
 * 
 *     cpdef update_ghost_fields(self, CarrayContainer particles, list fields,             # <<<<<<<<<<<<<<
 *             bint apply_boundary_condition=*)
 *     cpdef update_ghost_gradients(self, CarrayContainer particles, CarrayContainer gradients)
 */
struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields {
  int __pyx_n;
  int apply_boundary_condition;
};

/* "mesh/pytess.pxd":6
 * from ..domain.domain_manager cimport FlagParticle, GhostID
 * 
 * ctypedef vector[int] nn             # <<<<<<<<<<<<<<
 * ctypedef vector[nn] nn_vec
 * 
 */
typedef std::vector<int>  __pyx_t_3phd_4mesh_6pytess_nn;

/* "mesh/pytess.pxd":7
 * 
 * ctypedef vector[int] nn
 * ctypedef vector[nn] nn_vec             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "tess.h":
 */
typedef std::vector<__pyx_t_3phd_4mesh_6pytess_nn>  __pyx_t_3phd_4mesh_6pytess_nn_vec;

/* "mesh/mesh.pxd":10
 * from ..equation_state.equation_state cimport EquationStateBase
 * 
 * ctypedef vector[int] nn           # nearest neighbors             # <<<<<<<<<<<<<<
 * ctypedef vector[nn] nn_vec
 * 
 */
typedef std::vector<int>  __pyx_t_3phd_4mesh_4mesh_nn;

/* "mesh/mesh.pxd":11
 * 
 * ctypedef vector[int] nn           # nearest neighbors
 * ctypedef vector[nn] nn_vec             # <<<<<<<<<<<<<<
 * 
 * #cdef inline bint in_box(double x[3], double r, np.float64_t bounds[2][3], int dim)
 */
typedef std::vector<__pyx_t_3phd_4mesh_4mesh_nn>  __pyx_t_3phd_4mesh_4mesh_nn_vec;

/* "utils/carray.pxd":7
 * cdef class BaseArray
 * 
 * cdef class BaseArrayIter:             # <<<<<<<<<<<<<<
 *     cdef BaseArray arr
 *     cdef int i
 */
struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter {
  PyObject_HEAD
  struct __pyx_obj_3phd_5utils_6carray_BaseArray *arr;
  int i;
};


/* "utils/carray.pxd":5
 * 
 * # forward declaration
 * cdef class BaseArray             # <<<<<<<<<<<<<<
 * 
 * cdef class BaseArrayIter:
 */
struct __pyx_obj_3phd_5utils_6carray_BaseArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray *__pyx_vtab;
  long length;
  long alloc;
  PyArrayObject *_npy_array;
};


/* "utils/carray.pxd":31
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class DoubleArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.float64_t"""
 *     cdef np.float64_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_DoubleArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_float64_t *data;
  __pyx_t_5numpy_float64_t minimum;
  __pyx_t_5numpy_float64_t maximum;
};


/* "utils/carray.pxd":54
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class IntArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int8_t"""
 *     cdef np.int8_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_IntArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int8_t *data;
  __pyx_t_5numpy_int8_t minimum;
  __pyx_t_5numpy_int8_t maximum;
};


/* "utils/carray.pxd":77
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int32_t"""
 *     cdef np.int32_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_LongArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int32_t *data;
  __pyx_t_5numpy_int32_t minimum;
  __pyx_t_5numpy_int32_t maximum;
};


/* "utils/carray.pxd":100
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongLongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int64_t"""
 *     cdef np.int64_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_LongLongArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int64_t *data;
  __pyx_t_5numpy_int64_t minimum;
  __pyx_t_5numpy_int64_t maximum;
};


/* "containers/containers.pxd":5
 * 
 * 
 * cdef class CarrayContainer:             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly dict carrays
 */
struct __pyx_obj_3phd_10containers_10containers_CarrayContainer {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *__pyx_vtab;
  PyObject *carrays;
  PyObject *carray_dtypes;
  PyObject *carray_named_groups;
};


/* "domain/boundary.pxd":17
 * cdef inline bint intersect_bounds(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class BoundaryConditionBase:             # <<<<<<<<<<<<<<
 *     cdef void create_ghost_particle(self, cpplist[FlagParticle] &flagged_particles,
 *                                     DomainManager domain_manager)
 */
struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *__pyx_vtab;
};


/* "domain/boundary.pxd":29
 *     cpdef update_fields(self, CarrayContainer particles, DomainManager domain_manager)
 * 
 * cdef class Reflective(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_3phd_6domain_8boundary_Reflective {
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};


/* "domain/boundary.pxd":32
 *     pass
 * 
 * cdef class Periodic(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 */
struct __pyx_obj_3phd_6domain_8boundary_Periodic {
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};


/* "load_balance/tree.pxd":37
 *     int zorder_to_hilbert[8]    # map zorder to hilbert
 * 
 * cdef class TreeMemoryPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef int used                       # number of nodes used in the pool
 */
struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool *__pyx_vtab;
  int used;
  int capacity;
  struct __pyx_t_3phd_12load_balance_4tree_Node *node_array;
};


/* "load_balance/tree.pxd":50
 *     cpdef int number_nodes(self)        # number of nodes in tree
 * 
 * cdef class Tree:             # <<<<<<<<<<<<<<
 * 
 *     cdef double domain_corner[3]           # corner of particle domain
 */
struct __pyx_obj_3phd_12load_balance_4tree_Tree {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *__pyx_vtab;
  double domain_corner[3];
  double domain_length;
  double domain_fac;
  int order;
  int min_in_leaf;
  double factor;
  int total_num_part;
  int number_leaves;
  int dim;
  __pyx_t_3phd_12load_balance_4tree_hilbert_type hilbert_func;
  int bounds[2][3];
  struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *mem_pool;
  struct __pyx_t_3phd_12load_balance_4tree_Node *root;
};


/* "load_balance/load_balance.pxd":9
 * 
 * 
 * cdef class LoadBalance:             # <<<<<<<<<<<<<<
 * 
 *     cdef public np.int32_t order
 */
struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance *__pyx_vtab;
  __pyx_t_5numpy_int32_t order;
  __pyx_t_5numpy_float64_t factor;
  __pyx_t_5numpy_int32_t min_in_leaf;
  int dim;
  __pyx_t_5numpy_float64_t fac;
  double bounds[2][3];
  int domain_info_added;
  double corner[3];
  __pyx_t_5numpy_float64_t box_length;
  PyObject *export_ids;
  PyObject *export_pid;
  struct __pyx_obj_3phd_12load_balance_4tree_Tree *tree;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *leaf_pid;
  __pyx_t_3phd_12load_balance_4tree_hilbert_type hilbert_func;
};


/* "domain/domain_manager.pxd":45
 *         const GhostID &a, const GhostID &b) nogil
 * 
 * cdef class DomainManager:             # <<<<<<<<<<<<<<
 * 
 *     cdef public DoubleArray old_radius
 */
struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *__pyx_vtab;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *old_radius;
  struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *load_balance;
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *boundary_condition;
  double initial_radius;
  double search_radius_factor;
  int particle_fields_registered;
  int dim;
  PyObject *xmin;
  PyObject *xmax;
  __pyx_t_5numpy_float64_t translate[3];
  __pyx_t_5numpy_float64_t bounds[2][3];
  __pyx_t_5numpy_float64_t max_length;
  __pyx_t_5numpy_float64_t min_length;
  std::vector<BoundaryParticle>  ghost_vec;
  std::list<struct FlagParticle>  flagged_particles;
  int num_export;
  int num_real_particles;
  PyArrayObject *loc_done;
  PyArrayObject *glb_done;
  std::vector<GhostID>  export_ghost_buffer;
  std::vector<GhostID>  import_ghost_buffer;
  PyArrayObject *send_cnts;
  PyArrayObject *recv_cnts;
  PyArrayObject *send_disp;
  PyArrayObject *recv_disp;
};


/* "mesh/pytess.pxd":34
 *         int reindex_ghost(vector[GhostID] &import_ghost_buffer)
 * 
 * cdef class PyTess:             # <<<<<<<<<<<<<<
 * 
 *     cdef void reset_tess(self)
 */
struct __pyx_obj_3phd_4mesh_6pytess_PyTess {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess *__pyx_vtab;
};


/* "mesh/pytess.pxd":46
 *     cdef int reindex_ghost(self, vector[GhostID] &import_ghost_buffer)
 * 
 * cdef class PyTess2d(PyTess):             # <<<<<<<<<<<<<<
 *     cdef Tess2d *thisptr
 * 
 */
struct __pyx_obj_3phd_4mesh_6pytess_PyTess2d {
  struct __pyx_obj_3phd_4mesh_6pytess_PyTess __pyx_base;
  Tess2d *thisptr;
};


/* "mesh/pytess.pxd":49
 *     cdef Tess2d *thisptr
 * 
 * cdef class PyTess3d(PyTess):             # <<<<<<<<<<<<<<
 *     cdef Tess3d *thisptr
 */
struct __pyx_obj_3phd_4mesh_6pytess_PyTess3d {
  struct __pyx_obj_3phd_4mesh_6pytess_PyTess __pyx_base;
  Tess3d *thisptr;
};


/* "equation_state/equation_state.pxd":5
 * from ..containers.containers cimport CarrayContainer
 * 
 * cdef class EquationStateBase:             # <<<<<<<<<<<<<<
 *     cdef public double gamma
 * 
 */
struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_vtab;
  double gamma;
};


/* "equation_state/equation_state.pxd":13
 *     cpdef np.float64_t get_gamma(self)
 * 
 * cdef class IdealGas(EquationStateBase):             # <<<<<<<<<<<<<<
 *     pass
 */
struct __pyx_obj_3phd_14equation_state_14equation_state_IdealGas {
  struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase __pyx_base;
};


/* "mesh/mesh.pxd":15
 * #cdef inline bint in_box(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class Mesh:             # <<<<<<<<<<<<<<
 * 
 *     # initialization parameters
 */
struct __pyx_obj_3phd_4mesh_4mesh_Mesh {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_4mesh_4mesh_Mesh *__pyx_vtab;
  int relax_iterations;
  int max_iterations;
  double eta;
  int regularize;
  int num_neighbors;
  PyObject *face_fields;
  PyObject *face_field_groups;
  PyObject *update_ghost_fields;
  int particle_fields_registered;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *faces;
  struct __pyx_obj_3phd_4mesh_6pytess_PyTess *tess;
  __pyx_t_3phd_4mesh_4mesh_nn_vec neighbors;
};


/* "reconstruction/reconstruction.pxd":9
 * from ..equation_state.equation_state cimport EquationStateBase
 * 
 * cdef class ReconstructionBase:             # <<<<<<<<<<<<<<
 * 
 *     cdef bint fields_registered
 */
struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_vtab;
  int fields_registered;
  int has_passive_scalars;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *left_states;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *right_states;
  PyObject *reconstruct_fields;
  PyObject *reconstruct_field_groups;
  int num_passive;
  __pyx_t_5numpy_float64_t **passive;
  __pyx_t_5numpy_float64_t **passive_l;
  __pyx_t_5numpy_float64_t **passive_r;
  __pyx_t_5numpy_float64_t **dpassive;
};


/* "reconstruction/reconstruction.pxd":41
 *                          double dt, bint boost)
 * 
 * cdef class PieceWiseConstant(ReconstructionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant {
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase __pyx_base;
};


/* "reconstruction/reconstruction.pxd":44
 *     pass
 * 
 * cdef class PieceWiseLinear(ReconstructionBase):             # <<<<<<<<<<<<<<
 * 
 *     cdef public str limiter
 */
struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear {
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase __pyx_base;
  PyObject *limiter;
  int gizmo_limiter;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *grad;
  int slope_limiter;
  PyObject *reconstruct_grads;
  PyObject *reconstruct_grad_groups;
  __pyx_t_5numpy_float64_t *state_l;
  __pyx_t_5numpy_float64_t *state_r;
  __pyx_t_5numpy_float64_t **priml_pointer;
  __pyx_t_5numpy_float64_t **primr_pointer;
  __pyx_t_5numpy_float64_t **prim_pointer;
  __pyx_t_5numpy_float64_t **grad_pointer;
  __pyx_t_5numpy_float64_t *phi_max;
  __pyx_t_5numpy_float64_t *phi_min;
  __pyx_t_5numpy_float64_t *alpha;
  __pyx_t_5numpy_float64_t *df;
};


/* "phd/riemann/riemann.pxd":7
 * 
 * 
 * cdef class RiemannBase:             # <<<<<<<<<<<<<<
 * 
 *     cdef public double cfl
 */
struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase *__pyx_vtab;
  double cfl;
  int fields_registered;
  PyObject *flux_fields;
  PyObject *flux_field_groups;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *fluxes;
};


/* "phd/riemann/riemann.pxd":25
 *     cdef deboost(self, CarrayContainer fluxes, CarrayContainer faces, int dim)
 * 
 * cdef class HLL(RiemannBase):             # <<<<<<<<<<<<<<
 *     cdef public bint boost
 * 
 */
struct __pyx_obj_3phd_7riemann_7riemann_HLL {
  struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase __pyx_base;
  int boost;
};


/* "phd/riemann/riemann.pxd":32
 *             double gamma, double *sl, double *sc, double *sr)
 * 
 * cdef class HLLC(HLL):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_3phd_7riemann_7riemann_HLLC {
  struct __pyx_obj_3phd_7riemann_7riemann_HLL __pyx_base;
};


/* "phd/riemann/riemann.pxd":35
 *     pass
 * 
 * cdef class Exact(RiemannBase):             # <<<<<<<<<<<<<<
 *     cdef public bint boost
 * 
 */
struct __pyx_obj_3phd_7riemann_7riemann_Exact {
  struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase __pyx_base;
  int boost;
};



/* "utils/carray.pxd":5
 * 
 * # forward declaration
 * cdef class BaseArray             # <<<<<<<<<<<<<<
 * 
 * cdef class BaseArrayIter:
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray {
  PyObject *(*reserve)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyArrayObject *(*get_npy_array)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*squeeze)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*remove)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove *__pyx_optional_args);
  PyObject *(*extend)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*reset)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*shrink)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyObject *(*align_array)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*get_c_type)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*copy_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*paste_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*add_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray *__pyx_vtabptr_3phd_5utils_6carray_BaseArray;


/* "utils/carray.pxd":31
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class DoubleArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.float64_t"""
 *     cdef np.float64_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *);
  __pyx_t_5numpy_float64_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *);
  __pyx_t_5numpy_float64_t (*get)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, long, __pyx_t_5numpy_float64_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, __pyx_t_5numpy_float64_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray *__pyx_vtabptr_3phd_5utils_6carray_DoubleArray;


/* "utils/carray.pxd":54
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class IntArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int8_t"""
 *     cdef np.int8_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_IntArray *);
  __pyx_t_5numpy_int8_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_IntArray *);
  __pyx_t_5numpy_int8_t (*get)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, long, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray *__pyx_vtabptr_3phd_5utils_6carray_IntArray;


/* "utils/carray.pxd":77
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int32_t"""
 *     cdef np.int32_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  __pyx_t_5numpy_int32_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  __pyx_t_5numpy_int32_t (*get)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, long, __pyx_t_5numpy_int32_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, __pyx_t_5numpy_int32_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *__pyx_vtabptr_3phd_5utils_6carray_LongArray;


/* "utils/carray.pxd":100
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongLongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int64_t"""
 *     cdef np.int64_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *);
  __pyx_t_5numpy_int64_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *);
  __pyx_t_5numpy_int64_t (*get)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, long, __pyx_t_5numpy_int64_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, __pyx_t_5numpy_int64_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray *__pyx_vtabptr_3phd_5utils_6carray_LongLongArray;


/* "containers/containers.pxd":5
 * 
 * 
 * cdef class CarrayContainer:             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly dict carrays
 */

struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer {
  PyObject *(*register_carray)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray *__pyx_optional_args);
  int (*get_carray_size)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*remove_items)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*extend)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int __pyx_skip_dispatch);
  void (*pointer_groups)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, __pyx_t_5numpy_float64_t **, PyObject *);
  struct __pyx_obj_3phd_5utils_6carray_BaseArray *(*get_carray)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int __pyx_skip_dispatch);
  PyObject *(*remove_tagged_particles)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *(*extract_items)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items *__pyx_optional_args);
  int (*append_container)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*copy)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*paste)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*add)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *__pyx_vtabptr_3phd_10containers_10containers_CarrayContainer;


/* "domain/boundary.pxd":17
 * cdef inline bint intersect_bounds(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class BoundaryConditionBase:             # <<<<<<<<<<<<<<
 *     cdef void create_ghost_particle(self, cpplist[FlagParticle] &flagged_particles,
 *                                     DomainManager domain_manager)
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase {
  void (*create_ghost_particle)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*create_ghost_particle_serial)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*create_ghost_particle_parallel)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*migrate_particles)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*update_gradients)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  PyObject *(*update_fields)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *__pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase;


/* "domain/boundary.pxd":29
 *     cpdef update_fields(self, CarrayContainer particles, DomainManager domain_manager)
 * 
 * cdef class Reflective(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective {
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective *__pyx_vtabptr_3phd_6domain_8boundary_Reflective;


/* "domain/boundary.pxd":32
 *     pass
 * 
 * cdef class Periodic(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic {
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic *__pyx_vtabptr_3phd_6domain_8boundary_Periodic;


/* "load_balance/tree.pxd":37
 *     int zorder_to_hilbert[8]    # map zorder to hilbert
 * 
 * cdef class TreeMemoryPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef int used                       # number of nodes used in the pool
 */

struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool {
  struct __pyx_t_3phd_12load_balance_4tree_Node *(*get)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int);
  void (*resize)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int);
  void (*reset)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *);
  int (*number_leaves)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int __pyx_skip_dispatch);
  int (*number_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool *__pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool;


/* "load_balance/tree.pxd":50
 *     cpdef int number_nodes(self)        # number of nodes in tree
 * 
 * cdef class Tree:             # <<<<<<<<<<<<<<
 * 
 *     cdef double domain_corner[3]           # corner of particle domain
 */

struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree {
  void (*_leaves_to_array)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, int *);
  void (*_create_node_children)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *);
  void (*_fill_particles_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, __pyx_t_5numpy_int64_t *, int);
  void (*_fill_segments_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, __pyx_t_5numpy_int64_t *, __pyx_t_5numpy_int32_t *, int);
  PyObject *(*_build_local_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, PyArrayObject *, int, int __pyx_skip_dispatch);
  void (*_build_global_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, int, PyArrayObject *, PyArrayObject *, int);
  void (*construct_global_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *);
  struct __pyx_t_3phd_12load_balance_4tree_Node *(*find_leaf)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, __pyx_t_5numpy_int64_t);
  int (*get_nearest_process_neighbors)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, double *, double, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  void (*_neighbors)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, double *, double *, __pyx_t_5numpy_int32_t *, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
};
static struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *__pyx_vtabptr_3phd_12load_balance_4tree_Tree;


/* "load_balance/load_balance.pxd":9
 * 
 * 
 * cdef class LoadBalance:             # <<<<<<<<<<<<<<
 * 
 *     cdef public np.int32_t order
 */

struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance {
  void (*calculate_local_work)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyArrayObject *);
  void (*find_split_in_work)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, PyArrayObject *);
  void (*collect_particles_export)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int);
  void (*compute_hilbert_keys)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
};
static struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance *__pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance;


/* "domain/domain_manager.pxd":45
 *         const GhostID &a, const GhostID &b) nogil
 * 
 * cdef class DomainManager:             # <<<<<<<<<<<<<<
 * 
 *     cdef public DoubleArray old_radius
 */

struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager {
  PyObject *(*check_for_partition)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*partition)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*setup_initial_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*store_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*setup_for_ghost_creation)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*create_ghost_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*create_interior_ghost_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*update_search_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*copy_particles_serial)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*copy_particles_parallel)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*move_generators)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, double, int __pyx_skip_dispatch);
  PyObject *(*migrate_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  int (*ghost_complete)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*update_ghost_fields)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields *__pyx_optional_args);
  PyObject *(*update_ghost_gradients)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*reindex_ghost)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int);
  int (*get_nearest_intersect_process_neighbors)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double *, double, double, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
};
static struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *__pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager;


/* "mesh/pytess.pxd":34
 *         int reindex_ghost(vector[GhostID] &import_ghost_buffer)
 * 
 * cdef class PyTess:             # <<<<<<<<<<<<<<
 * 
 *     cdef void reset_tess(self)
 */

struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess {
  void (*reset_tess)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *);
  int (*build_initial_tess)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *, double **, double *, int);
  int (*update_initial_tess)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *, double **, int, int);
  int (*count_number_of_faces)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *);
  int (*extract_geometry)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *, double **, double **, double *, double *, double **, double **, int *, int *, __pyx_t_3phd_4mesh_6pytess_nn_vec &);
  int (*update_radius)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *, double **, double *, std::list<struct FlagParticle>  &);
  int (*reindex_ghost)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *, std::vector<GhostID>  &);
};
static struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess *__pyx_vtabptr_3phd_4mesh_6pytess_PyTess;


/* "mesh/pytess.pxd":46
 *     cdef int reindex_ghost(self, vector[GhostID] &import_ghost_buffer)
 * 
 * cdef class PyTess2d(PyTess):             # <<<<<<<<<<<<<<
 *     cdef Tess2d *thisptr
 * 
 */

struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess2d {
  struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess __pyx_base;
};
static struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess2d *__pyx_vtabptr_3phd_4mesh_6pytess_PyTess2d;


/* "mesh/pytess.pxd":49
 *     cdef Tess2d *thisptr
 * 
 * cdef class PyTess3d(PyTess):             # <<<<<<<<<<<<<<
 *     cdef Tess3d *thisptr
 */

struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess3d {
  struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess __pyx_base;
};
static struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess3d *__pyx_vtabptr_3phd_4mesh_6pytess_PyTess3d;


/* "equation_state/equation_state.pxd":5
 * from ..containers.containers cimport CarrayContainer
 * 
 * cdef class EquationStateBase:             # <<<<<<<<<<<<<<
 *     cdef public double gamma
 * 
 */

struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase {
  PyObject *(*conservative_from_primitive)(struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*primitive_from_conservative)(struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  __pyx_t_5numpy_float64_t (*sound_speed)(struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, int __pyx_skip_dispatch);
  __pyx_t_5numpy_float64_t (*get_gamma)(struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_vtabptr_3phd_14equation_state_14equation_state_EquationStateBase;


/* "equation_state/equation_state.pxd":13
 *     cpdef np.float64_t get_gamma(self)
 * 
 * cdef class IdealGas(EquationStateBase):             # <<<<<<<<<<<<<<
 *     pass
 */

struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_IdealGas {
  struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_IdealGas *__pyx_vtabptr_3phd_14equation_state_14equation_state_IdealGas;


/* "mesh/mesh.pxd":15
 * #cdef inline bint in_box(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class Mesh:             # <<<<<<<<<<<<<<
 * 
 *     # initialization parameters
 */

struct __pyx_vtabstruct_3phd_4mesh_4mesh_Mesh {
  PyObject *(*reset_mesh)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, int __pyx_skip_dispatch);
  PyObject *(*tessellate)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*build_geometry)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*relax)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*assign_generator_velocities)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, int __pyx_skip_dispatch);
  PyObject *(*assign_face_velocities)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*update_from_fluxes)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_4mesh_4mesh_Mesh *__pyx_vtabptr_3phd_4mesh_4mesh_Mesh;


/* "reconstruction/reconstruction.pxd":9
 * from ..equation_state.equation_state cimport EquationStateBase
 * 
 * cdef class ReconstructionBase:             # <<<<<<<<<<<<<<
 * 
 *     cdef bint fields_registered
 */

struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase {
  PyObject *(*compute_gradients)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*add_spatial)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch);
  PyObject *(*add_temporal)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch);
  PyObject *(*compute_states)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_vtabptr_3phd_14reconstruction_14reconstruction_ReconstructionBase;


/* "reconstruction/reconstruction.pxd":41
 *                          double dt, bint boost)
 * 
 * cdef class PieceWiseConstant(ReconstructionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseConstant {
  struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseConstant;


/* "reconstruction/reconstruction.pxd":44
 *     pass
 * 
 * cdef class PieceWiseLinear(ReconstructionBase):             # <<<<<<<<<<<<<<
 * 
 *     cdef public str limiter
 */

struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseLinear {
  struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseLinear;


/* "phd/riemann/riemann.pyx":15
 * cdef int REAL = ParticleTAGS.Real
 * 
 * cdef class RiemannBase:             # <<<<<<<<<<<<<<
 *     """Riemann base that all riemann solvers need to inherit.
 * 
 */

struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase {
  PyObject *(*compute_fluxes)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, int __pyx_skip_dispatch);
  PyObject *(*riemann_solver)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, double, int);
  double (*compute_time_step)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, int __pyx_skip_dispatch);
  PyObject *(*deboost)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int);
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase *__pyx_vtabptr_3phd_7riemann_7riemann_RiemannBase;


/* "phd/riemann/riemann.pyx":225
 * 
 * 
 * cdef class HLL(RiemannBase):             # <<<<<<<<<<<<<<
 *     """HLL implementation of solving the riemann problem. This is taken
 *     from Toro Riemann Solvers and Numerical Methods for Fluid Dynamics
 */

struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLL {
  struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase __pyx_base;
  void (*get_waves)(struct __pyx_obj_3phd_7riemann_7riemann_HLL *, double, double, double, double, double, double, double, double *, double *, double *);
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLL *__pyx_vtabptr_3phd_7riemann_7riemann_HLL;
static CYTHON_INLINE void __pyx_f_3phd_7riemann_7riemann_3HLL_get_waves(struct __pyx_obj_3phd_7riemann_7riemann_HLL *, double, double, double, double, double, double, double, double *, double *, double *);


/* "phd/riemann/riemann.pyx":507
 * 
 * 
 * cdef class HLLC(HLL):             # <<<<<<<<<<<<<<
 *     """HLLC implementation of solving the riemann problem. This is taken
 *     from Toro Riemann Solvers and Numerical Methods for Fluid Dynamics
 */

struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLLC {
  struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLL __pyx_base;
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLLC *__pyx_vtabptr_3phd_7riemann_7riemann_HLLC;


/* "phd/riemann/riemann.pyx":684
 *             self.deboost(self.fluxes, mesh.faces, dim)
 * 
 * cdef class Exact(RiemannBase):             # <<<<<<<<<<<<<<
 *     """Exact implementation of solving the riemann problem. This is taken
 *     from Toro Riemann Solvers and Numerical Methods for Fluid Dynamics
 */

struct __pyx_vtabstruct_3phd_7riemann_7riemann_Exact {
  struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase __pyx_base;
  double (*p_guess)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double, double, double, double);
  double (*p_func)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double);
  double (*p_func_deriv)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double);
  double (*get_pstar)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double, double, double, double);
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_Exact *__pyx_vtabptr_3phd_7riemann_7riemann_Exact;
static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_p_guess(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double, double, double, double);
static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_p_func(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double);
static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_p_func_deriv(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double);
static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_get_pstar(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double, double, double, double);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_3phd_7riemann_7riemann_11RiemannBase_compute_fluxes(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_v_eos, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_7riemann_7riemann_11RiemannBase_riemann_solver(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED int __pyx_v_dim); /* proto*/
static double __pyx_f_3phd_7riemann_7riemann_11RiemannBase_compute_time_step(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_v_eos, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_7riemann_7riemann_11RiemannBase_deboost(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_fluxes, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_faces, int __pyx_v_dim); /* proto*/
static PyObject *__pyx_f_3phd_7riemann_7riemann_3HLL_riemann_solver(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, double __pyx_v_gamma, int __pyx_v_dim); /* proto*/
static CYTHON_INLINE void __pyx_f_3phd_7riemann_7riemann_3HLL_get_waves(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self, double __pyx_v_dl, double __pyx_v_ul, double __pyx_v_pl, double __pyx_v_dr, double __pyx_v_ur, double __pyx_v_pr, double __pyx_v_gamma, double *__pyx_v_sl, double *__pyx_v_sc, double *__pyx_v_sr); /* proto*/
static PyObject *__pyx_f_3phd_7riemann_7riemann_4HLLC_riemann_solver(struct __pyx_obj_3phd_7riemann_7riemann_HLLC *__pyx_v_self, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, double __pyx_v_gamma, int __pyx_v_dim); /* proto*/
static PyObject *__pyx_f_3phd_7riemann_7riemann_5Exact_riemann_solver(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, double __pyx_v_gamma, int __pyx_v_dim); /* proto*/
static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_p_guess(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, double __pyx_v_dl, double __pyx_v_ul, double __pyx_v_pl, double __pyx_v_cl, double __pyx_v_dr, double __pyx_v_ur, double __pyx_v_pr, double __pyx_v_cr, double __pyx_v_gamma); /* proto*/
static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_p_func(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, double __pyx_v_d, CYTHON_UNUSED double __pyx_v_u, double __pyx_v_p, double __pyx_v_c, double __pyx_v_gamma, double __pyx_v_p_old); /* proto*/
static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_p_func_deriv(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, double __pyx_v_d, CYTHON_UNUSED double __pyx_v_u, double __pyx_v_p, double __pyx_v_c, double __pyx_v_gamma, double __pyx_v_p_old); /* proto*/
static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_get_pstar(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, double __pyx_v_dl, double __pyx_v_ul, double __pyx_v_pl, double __pyx_v_cl, double __pyx_v_dr, double __pyx_v_ur, double __pyx_v_pr, double __pyx_v_cr, double __pyx_v_gamma); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'phd.utils.carray' */
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_BaseArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_BaseArrayIter = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_DoubleArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_IntArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_LongArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_LongLongArray = 0;

/* Module declarations from 'phd.containers.containers' */
static PyTypeObject *__pyx_ptype_3phd_10containers_10containers_CarrayContainer = 0;

/* Module declarations from 'phd.domain.boundary' */
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase = 0;
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_Reflective = 0;
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_Periodic = 0;

/* Module declarations from 'phd.load_balance.tree' */
static PyTypeObject *__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool = 0;
static PyTypeObject *__pyx_ptype_3phd_12load_balance_4tree_Tree = 0;

/* Module declarations from 'phd.load_balance.load_balance' */
static PyTypeObject *__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance = 0;

/* Module declarations from 'phd.domain.domain_manager' */
static PyTypeObject *__pyx_ptype_3phd_6domain_14domain_manager_DomainManager = 0;

/* Module declarations from 'phd.mesh.pytess' */
static PyTypeObject *__pyx_ptype_3phd_4mesh_6pytess_PyTess = 0;
static PyTypeObject *__pyx_ptype_3phd_4mesh_6pytess_PyTess2d = 0;
static PyTypeObject *__pyx_ptype_3phd_4mesh_6pytess_PyTess3d = 0;

/* Module declarations from 'phd.equation_state.equation_state' */
static PyTypeObject *__pyx_ptype_3phd_14equation_state_14equation_state_EquationStateBase = 0;
static PyTypeObject *__pyx_ptype_3phd_14equation_state_14equation_state_IdealGas = 0;

/* Module declarations from 'phd.mesh.mesh' */
static PyTypeObject *__pyx_ptype_3phd_4mesh_4mesh_Mesh = 0;

/* Module declarations from 'phd.reconstruction.reconstruction' */
static PyTypeObject *__pyx_ptype_3phd_14reconstruction_14reconstruction_ReconstructionBase = 0;
static PyTypeObject *__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseConstant = 0;
static PyTypeObject *__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseLinear = 0;

/* Module declarations from 'cython' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'phd.riemann.riemann' */
static PyTypeObject *__pyx_ptype_3phd_7riemann_7riemann_RiemannBase = 0;
static PyTypeObject *__pyx_ptype_3phd_7riemann_7riemann_HLL = 0;
static PyTypeObject *__pyx_ptype_3phd_7riemann_7riemann_HLLC = 0;
static PyTypeObject *__pyx_ptype_3phd_7riemann_7riemann_Exact = 0;
static int __pyx_v_3phd_7riemann_7riemann_REAL;
static CYTHON_INLINE void __pyx_f_3phd_7riemann_7riemann_vacuum_right(double, double *, double, double, double, double *, double *, double *, double *, double *, double, double, double *, int); /*proto*/
static CYTHON_INLINE void __pyx_f_3phd_7riemann_7riemann_vacuum_left(double, double *, double, double, double, double *, double *, double *, double *, double *, double, double, double *, int); /*proto*/
static PyObject *__pyx_f_3phd_7riemann_7riemann___pyx_unpickle_RiemannBase__set_state(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, PyObject *); /*proto*/
static PyObject *__pyx_f_3phd_7riemann_7riemann___pyx_unpickle_HLL__set_state(struct __pyx_obj_3phd_7riemann_7riemann_HLL *, PyObject *); /*proto*/
static PyObject *__pyx_f_3phd_7riemann_7riemann___pyx_unpickle_HLLC__set_state(struct __pyx_obj_3phd_7riemann_7riemann_HLLC *, PyObject *); /*proto*/
static PyObject *__pyx_f_3phd_7riemann_7riemann___pyx_unpickle_Exact__set_state(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "phd.riemann.riemann"
extern int __pyx_module_is_main_phd__riemann__riemann;
int __pyx_module_is_main_phd__riemann__riemann = 0;

/* Implementation of 'phd.riemann.riemann' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_np[] = "np";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_HLL[] = "HLL";
static const char __pyx_k_cfl[] = "cfl";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_eos[] = "eos";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_phd[] = "phd";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_HLLC[] = "HLLC";
static const char __pyx_k_Real[] = "Real";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_left[] = "left";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mass[] = "mass";
static const char __pyx_k_mesh[] = "mesh";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_zero[] = "zero";
static const char __pyx_k_Exact[] = "Exact";
static const char __pyx_k_boost[] = "boost";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_right[] = "right";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_energy[] = "energy";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_normal[] = "normal";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_density[] = "density";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_momentum[] = "momentum";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_pressure[] = "pressure";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_particles[] = "particles";
static const char __pyx_k_phdLogger[] = "phdLogger";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_RiemannBase[] = "RiemannBase";
static const char __pyx_k_ParticleTAGS[] = "ParticleTAGS";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_conservative[] = "conservative";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_compute_fluxes[] = "compute_fluxes";
static const char __pyx_k_reconstruction[] = "reconstruction";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_pyx_unpickle_HLL[] = "__pyx_unpickle_HLL";
static const char __pyx_k_compute_time_step[] = "compute_time_step";
static const char __pyx_k_pyx_unpickle_HLLC[] = "__pyx_unpickle_HLLC";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_pyx_unpickle_Exact[] = "__pyx_unpickle_Exact";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_carrays_to_register[] = "carrays_to_register";
static const char __pyx_k_phd_riemann_riemann[] = "phd.riemann.riemann";
static const char __pyx_k_utils_particle_tags[] = "utils.particle_tags";
static const char __pyx_k_HLL_Starting_riemann[] = "HLL: Starting riemann";
static const char __pyx_k_HLLC_Starting_riemann[] = "HLLC: Starting riemann";
static const char __pyx_k_Exact_Starting_riemann[] = "Exact: Starting riemann";
static const char __pyx_k_pyx_unpickle_RiemannBase[] = "__pyx_unpickle_RiemannBase";
static const char __pyx_k_No_convergence_in_Exact_Riemann[] = "No convergence in Exact Riemann Solver";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_ERROR_Missing_fields_in_particle[] = "ERROR: Missing fields in particles!";
static const char __pyx_k_Incompatible_checksums_s_vs_0x68[] = "Incompatible checksums (%s vs 0x68d4d25 = (cfl, fields_registered, flux_field_groups, flux_fields, fluxes))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xca[] = "Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))";
static const char __pyx_k_RiemannBase_riemann_solver_calle[] = "RiemannBase::riemann_solver called!";
static const char __pyx_k_Riemann_did_not_set_fields_for_f[] = "Riemann did not set fields for flux!";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static PyObject *__pyx_kp_s_ERROR_Missing_fields_in_particle;
static PyObject *__pyx_n_s_Exact;
static PyObject *__pyx_kp_s_Exact_Starting_riemann;
static PyObject *__pyx_n_s_HLL;
static PyObject *__pyx_n_s_HLLC;
static PyObject *__pyx_kp_s_HLLC_Starting_riemann;
static PyObject *__pyx_kp_s_HLL_Starting_riemann;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x68;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xca;
static PyObject *__pyx_kp_s_No_convergence_in_Exact_Riemann;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_ParticleTAGS;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_Real;
static PyObject *__pyx_n_s_RiemannBase;
static PyObject *__pyx_kp_s_RiemannBase_riemann_solver_calle;
static PyObject *__pyx_kp_s_Riemann_did_not_set_fields_for_f;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_boost;
static PyObject *__pyx_n_s_carrays_to_register;
static PyObject *__pyx_n_s_cfl;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_compute_fluxes;
static PyObject *__pyx_n_s_compute_time_step;
static PyObject *__pyx_n_s_conservative;
static PyObject *__pyx_n_s_density;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_energy;
static PyObject *__pyx_n_s_eos;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_left;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mass;
static PyObject *__pyx_n_s_mesh;
static PyObject *__pyx_n_s_momentum;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_normal;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_particles;
static PyObject *__pyx_n_s_phd;
static PyObject *__pyx_n_s_phdLogger;
static PyObject *__pyx_n_s_phd_riemann_riemann;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_pressure;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Exact;
static PyObject *__pyx_n_s_pyx_unpickle_HLL;
static PyObject *__pyx_n_s_pyx_unpickle_HLLC;
static PyObject *__pyx_n_s_pyx_unpickle_RiemannBase;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reconstruction;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_right;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_utils_particle_tags;
static PyObject *__pyx_n_s_velocity;
static PyObject *__pyx_n_s_volume;
static PyObject *__pyx_n_s_zero;
static int __pyx_pf_3phd_7riemann_7riemann_11RiemannBase___init__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, double __pyx_v_cfl, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_2initialize(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_4add_fields(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6compute_fluxes(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_v_eos); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_8compute_time_step(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_v_eos); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_3cfl___get__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_3cfl_2__set__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6fluxes___get__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6fluxes_2__set__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6fluxes_4__del__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_10__reduce_cython__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_12__setstate_cython__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_3phd_7riemann_7riemann_3HLL___init__(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self, double __pyx_v_cfl, int __pyx_v_boost, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_3HLL_5boost___get__(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7riemann_7riemann_3HLL_5boost_2__set__(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_3HLL_2__reduce_cython__(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_3HLL_4__setstate_cython__(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_4HLLC___reduce_cython__(struct __pyx_obj_3phd_7riemann_7riemann_HLLC *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_4HLLC_2__setstate_cython__(struct __pyx_obj_3phd_7riemann_7riemann_HLLC *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_3phd_7riemann_7riemann_5Exact___init__(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, CYTHON_UNUSED double __pyx_v_cfl, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_5Exact_5boost___get__(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7riemann_7riemann_5Exact_5boost_2__set__(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_5Exact_2__reduce_cython__(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_5Exact_4__setstate_cython__(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann___pyx_unpickle_RiemannBase(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_2__pyx_unpickle_HLL(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_4__pyx_unpickle_HLLC(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_3phd_7riemann_7riemann_6__pyx_unpickle_Exact(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_3phd_7riemann_7riemann_RiemannBase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3phd_7riemann_7riemann_HLL(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3phd_7riemann_7riemann_HLLC(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3phd_7riemann_7riemann_Exact(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_4_0;
static PyObject *__pyx_int_109923621;
static PyObject *__pyx_int_212531865;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
/* Late includes */

/* "phd/riemann/riemann.pyx":24
 * 
 *     """
 *     def __init__(self, double cfl=0.5, **kwargs):             # <<<<<<<<<<<<<<
 *         """Constructor for RiemannBase.
 * 
 */

/* Python wrapper */
static int __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_7riemann_7riemann_11RiemannBase___init__[] = "Constructor for RiemannBase.\n\n        Parameters\n        ----------\n        cfl : float\n            The Courant Friedrichs Lewy condition.\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_3phd_7riemann_7riemann_11RiemannBase___init__;
#endif
static int __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_cfl;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cfl,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cfl);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 24, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_cfl = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_cfl == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L3_error)
    } else {
      __pyx_v_cfl = ((double)0.5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 24, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase___init__(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self), __pyx_v_cfl, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7riemann_7riemann_11RiemannBase___init__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, double __pyx_v_cfl, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "phd/riemann/riemann.pyx":33
 * 
 *         """
 *         self.cfl = cfl             # <<<<<<<<<<<<<<
 *         self.fields_registered = False
 * 
 */
  __pyx_v_self->cfl = __pyx_v_cfl;

  /* "phd/riemann/riemann.pyx":34
 *         """
 *         self.cfl = cfl
 *         self.fields_registered = False             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self):
 */
  __pyx_v_self->fields_registered = 0;

  /* "phd/riemann/riemann.pyx":24
 * 
 *     """
 *     def __init__(self, double cfl=0.5, **kwargs):             # <<<<<<<<<<<<<<
 *         """Constructor for RiemannBase.
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":36
 *         self.fields_registered = False
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Setup all connections for computation classes. Should check
 *         always if fields_registered is True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_3initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3phd_7riemann_7riemann_11RiemannBase_2initialize[] = "Setup all connections for computation classes. Should check\n        always if fields_registered is True.\n        ";
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_3initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_2initialize(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_2initialize(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "phd/riemann/riemann.pyx":40
 *         always if fields_registered is True.
 *         """
 *         if not self.fields_registered:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Riemann did not set fields for flux!")
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_self->fields_registered != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "phd/riemann/riemann.pyx":41
 *         """
 *         if not self.fields_registered:
 *             raise RuntimeError("Riemann did not set fields for flux!")             # <<<<<<<<<<<<<<
 * 
 *         self.fluxes = CarrayContainer(carrays_to_register=self.flux_fields)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 41, __pyx_L1_error)

    /* "phd/riemann/riemann.pyx":40
 *         always if fields_registered is True.
 *         """
 *         if not self.fields_registered:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Riemann did not set fields for flux!")
 * 
 */
  }

  /* "phd/riemann/riemann.pyx":43
 *             raise RuntimeError("Riemann did not set fields for flux!")
 * 
 *         self.fluxes = CarrayContainer(carrays_to_register=self.flux_fields)             # <<<<<<<<<<<<<<
 *         self.fluxes.carray_named_groups = self.flux_field_groups
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_carrays_to_register, __pyx_v_self->flux_fields) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_10containers_10containers_CarrayContainer), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->fluxes);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluxes));
  __pyx_v_self->fluxes = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "phd/riemann/riemann.pyx":44
 * 
 *         self.fluxes = CarrayContainer(carrays_to_register=self.flux_fields)
 *         self.fluxes.carray_named_groups = self.flux_field_groups             # <<<<<<<<<<<<<<
 * 
 *     def add_fields(self, CarrayContainer particles):
 */
  __pyx_t_3 = __pyx_v_self->flux_field_groups;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->fluxes->carray_named_groups);
  __Pyx_DECREF(__pyx_v_self->fluxes->carray_named_groups);
  __pyx_v_self->fluxes->carray_named_groups = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "phd/riemann/riemann.pyx":36
 *         self.fields_registered = False
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Setup all connections for computation classes. Should check
 *         always if fields_registered is True.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":46
 *         self.fluxes.carray_named_groups = self.flux_field_groups
 * 
 *     def add_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Create fields to calculate fluxes.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_5add_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_7riemann_7riemann_11RiemannBase_4add_fields[] = "Create fields to calculate fluxes.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_5add_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_fields (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_4add_fields(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_4add_fields(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_v_field_name = 0;
  PyObject *__pyx_v_carray_to_register = 0;
  PyObject *__pyx_v_carray_named_groups = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_fields", 0);

  /* "phd/riemann/riemann.pyx":56
 *         """
 *         cdef str field_name
 *         cdef dict carray_to_register = {}, carray_named_groups = {}             # <<<<<<<<<<<<<<
 * 
 *         if "conservative" not in particles.carray_named_groups or\
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_carray_to_register = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_carray_named_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":58
 *         cdef dict carray_to_register = {}, carray_named_groups = {}
 * 
 *         if "conservative" not in particles.carray_named_groups or\             # <<<<<<<<<<<<<<
 *                 "momentum" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 58, __pyx_L1_error)
  }
  __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_conservative, __pyx_v_particles->carray_named_groups, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 58, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "phd/riemann/riemann.pyx":59
 * 
 *         if "conservative" not in particles.carray_named_groups or\
 *                 "momentum" not in particles.carray_named_groups:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 59, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_momentum, __pyx_v_particles->carray_named_groups, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 59, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;

  /* "phd/riemann/riemann.pyx":58
 *         cdef dict carray_to_register = {}, carray_named_groups = {}
 * 
 *         if "conservative" not in particles.carray_named_groups or\             # <<<<<<<<<<<<<<
 *                 "momentum" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 */
  if (unlikely(__pyx_t_2)) {

    /* "phd/riemann/riemann.pyx":60
 *         if "conservative" not in particles.carray_named_groups or\
 *                 "momentum" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")             # <<<<<<<<<<<<<<
 * 
 *         # add standard primitive fields
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 60, __pyx_L1_error)

    /* "phd/riemann/riemann.pyx":58
 *         cdef dict carray_to_register = {}, carray_named_groups = {}
 * 
 *         if "conservative" not in particles.carray_named_groups or\             # <<<<<<<<<<<<<<
 *                 "momentum" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 */
  }

  /* "phd/riemann/riemann.pyx":63
 * 
 *         # add standard primitive fields
 *         for field_name in particles.carray_named_groups["conservative"]:             # <<<<<<<<<<<<<<
 *             carray_to_register[field_name] = "double"
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 63, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_conservative); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 63, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 63, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 63, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_field_name, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "phd/riemann/riemann.pyx":64
 *         # add standard primitive fields
 *         for field_name in particles.carray_named_groups["conservative"]:
 *             carray_to_register[field_name] = "double"             # <<<<<<<<<<<<<<
 * 
 *         carray_named_groups["conservative"] = particles.carray_named_groups["conservative"]
 */
    if (unlikely(PyDict_SetItem(__pyx_v_carray_to_register, __pyx_v_field_name, __pyx_n_s_double) < 0)) __PYX_ERR(0, 64, __pyx_L1_error)

    /* "phd/riemann/riemann.pyx":63
 * 
 *         # add standard primitive fields
 *         for field_name in particles.carray_named_groups["conservative"]:             # <<<<<<<<<<<<<<
 *             carray_to_register[field_name] = "double"
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "phd/riemann/riemann.pyx":66
 *             carray_to_register[field_name] = "double"
 * 
 *         carray_named_groups["conservative"] = particles.carray_named_groups["conservative"]             # <<<<<<<<<<<<<<
 *         carray_named_groups["momentum"] = particles.carray_named_groups["momentum"]
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 66, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_conservative); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyDict_SetItem(__pyx_v_carray_named_groups, __pyx_n_s_conservative, __pyx_t_5) < 0)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "phd/riemann/riemann.pyx":67
 * 
 *         carray_named_groups["conservative"] = particles.carray_named_groups["conservative"]
 *         carray_named_groups["momentum"] = particles.carray_named_groups["momentum"]             # <<<<<<<<<<<<<<
 * 
 *         # store fields info
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 67, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_momentum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyDict_SetItem(__pyx_v_carray_named_groups, __pyx_n_s_momentum, __pyx_t_5) < 0)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "phd/riemann/riemann.pyx":70
 * 
 *         # store fields info
 *         self.fields_registered = True             # <<<<<<<<<<<<<<
 *         self.flux_fields = carray_to_register
 *         self.flux_field_groups = carray_named_groups
 */
  __pyx_v_self->fields_registered = 1;

  /* "phd/riemann/riemann.pyx":71
 *         # store fields info
 *         self.fields_registered = True
 *         self.flux_fields = carray_to_register             # <<<<<<<<<<<<<<
 *         self.flux_field_groups = carray_named_groups
 * 
 */
  __Pyx_INCREF(__pyx_v_carray_to_register);
  __Pyx_GIVEREF(__pyx_v_carray_to_register);
  __Pyx_GOTREF(__pyx_v_self->flux_fields);
  __Pyx_DECREF(__pyx_v_self->flux_fields);
  __pyx_v_self->flux_fields = __pyx_v_carray_to_register;

  /* "phd/riemann/riemann.pyx":72
 *         self.fields_registered = True
 *         self.flux_fields = carray_to_register
 *         self.flux_field_groups = carray_named_groups             # <<<<<<<<<<<<<<
 * 
 *     cpdef compute_fluxes(self, CarrayContainer particles, Mesh mesh,
 */
  __Pyx_INCREF(__pyx_v_carray_named_groups);
  __Pyx_GIVEREF(__pyx_v_carray_named_groups);
  __Pyx_GOTREF(__pyx_v_self->flux_field_groups);
  __Pyx_DECREF(__pyx_v_self->flux_field_groups);
  __pyx_v_self->flux_field_groups = __pyx_v_carray_named_groups;

  /* "phd/riemann/riemann.pyx":46
 *         self.fluxes.carray_named_groups = self.flux_field_groups
 * 
 *     def add_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Create fields to calculate fluxes.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.add_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field_name);
  __Pyx_XDECREF(__pyx_v_carray_to_register);
  __Pyx_XDECREF(__pyx_v_carray_named_groups);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":74
 *         self.flux_field_groups = carray_named_groups
 * 
 *     cpdef compute_fluxes(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          ReconstructionBase reconstruction, EquationStateBase eos):
 *         """Compute fluxes for each face in the mesh.
 */

static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_7compute_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_7riemann_7riemann_11RiemannBase_compute_fluxes(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_v_eos, int __pyx_skip_dispatch) {
  int __pyx_v_dim;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_fluxes", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_fluxes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_7compute_fluxes)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[5] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), ((PyObject *)__pyx_v_reconstruction), ((PyObject *)__pyx_v_eos)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[5] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), ((PyObject *)__pyx_v_reconstruction), ((PyObject *)__pyx_v_eos)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 74, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_mesh));
          __Pyx_INCREF(((PyObject *)__pyx_v_reconstruction));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_reconstruction));
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_reconstruction));
          __Pyx_INCREF(((PyObject *)__pyx_v_eos));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_eos));
          PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, ((PyObject *)__pyx_v_eos));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/riemann/riemann.pyx":94
 * 
 *         """
 *         cdef int dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *         # resize to hold fluxes for each face in mesh
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 94, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_7;

  /* "phd/riemann/riemann.pyx":97
 * 
 *         # resize to hold fluxes for each face in mesh
 *         self.fluxes.resize(mesh.faces.get_carray_size())             # <<<<<<<<<<<<<<
 *         self.riemann_solver(mesh, reconstruction, eos.get_gamma(), dim)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->fluxes->__pyx_vtab)->resize(__pyx_v_self->fluxes, ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":98
 *         # resize to hold fluxes for each face in mesh
 *         self.fluxes.resize(mesh.faces.get_carray_size())
 *         self.riemann_solver(mesh, reconstruction, eos.get_gamma(), dim)             # <<<<<<<<<<<<<<
 * 
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self->__pyx_vtab)->riemann_solver(__pyx_v_self, __pyx_v_mesh, __pyx_v_reconstruction, ((struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase *)__pyx_v_eos->__pyx_vtab)->get_gamma(__pyx_v_eos, 0), __pyx_v_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":74
 *         self.flux_field_groups = carray_named_groups
 * 
 *     cpdef compute_fluxes(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          ReconstructionBase reconstruction, EquationStateBase eos):
 *         """Compute fluxes for each face in the mesh.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.compute_fluxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_7compute_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_7riemann_7riemann_11RiemannBase_6compute_fluxes[] = "Compute fluxes for each face in the mesh.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        mesh : Mesh\n            Class that builds the domain mesh.\n\n        reconstruction : ReconstructionBase\n            Class that performs field reconstruction inputs for the\n            riemann problem.\n\n        eos : EquationStateBase\n            Thermodynamic equation of state.\n\n        ";
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_7compute_fluxes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction = 0;
  struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_v_eos = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_fluxes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_reconstruction,&__pyx_n_s_eos,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_fluxes", 1, 4, 4, 1); __PYX_ERR(0, 74, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reconstruction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_fluxes", 1, 4, 4, 2); __PYX_ERR(0, 74, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_fluxes", 1, 4, 4, 3); __PYX_ERR(0, 74, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_fluxes") < 0)) __PYX_ERR(0, 74, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_reconstruction = ((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)values[2]);
    __pyx_v_eos = ((struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_fluxes", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 74, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.compute_fluxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 74, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 74, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reconstruction), __pyx_ptype_3phd_14reconstruction_14reconstruction_ReconstructionBase, 1, "reconstruction", 0))) __PYX_ERR(0, 75, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eos), __pyx_ptype_3phd_14equation_state_14equation_state_EquationStateBase, 1, "eos", 0))) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6compute_fluxes(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_reconstruction, __pyx_v_eos);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6compute_fluxes(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_v_eos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_fluxes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_7riemann_7riemann_11RiemannBase_compute_fluxes(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_reconstruction, __pyx_v_eos, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.compute_fluxes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":100
 *         self.riemann_solver(mesh, reconstruction, eos.get_gamma(), dim)
 * 
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction,             # <<<<<<<<<<<<<<
 *                         double gamma, int dim):
 *         """Solve the riemann problem.
 */

static PyObject *__pyx_f_3phd_7riemann_7riemann_11RiemannBase_riemann_solver(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED int __pyx_v_dim) {
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("riemann_solver", 0);

  /* "phd/riemann/riemann.pyx":117
 * 
 *         """
 *         msg = "RiemannBase::riemann_solver called!"             # <<<<<<<<<<<<<<
 *         raise NotImplementedError(msg)
 * 
 */
  __Pyx_INCREF(__pyx_kp_s_RiemannBase_riemann_solver_calle);
  __pyx_v_msg = __pyx_kp_s_RiemannBase_riemann_solver_calle;

  /* "phd/riemann/riemann.pyx":118
 *         """
 *         msg = "RiemannBase::riemann_solver called!"
 *         raise NotImplementedError(msg)             # <<<<<<<<<<<<<<
 * 
 *     cpdef double compute_time_step(self, CarrayContainer particles,
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 118, __pyx_L1_error)

  /* "phd/riemann/riemann.pyx":100
 *         self.riemann_solver(mesh, reconstruction, eos.get_gamma(), dim)
 * 
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction,             # <<<<<<<<<<<<<<
 *                         double gamma, int dim):
 *         """Solve the riemann problem.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.riemann_solver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":120
 *         raise NotImplementedError(msg)
 * 
 *     cpdef double compute_time_step(self, CarrayContainer particles,             # <<<<<<<<<<<<<<
 *                                    EquationStateBase eos):
 *         """Compute time step for next integration step.
 */

static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_9compute_time_step(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_3phd_7riemann_7riemann_11RiemannBase_compute_time_step(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_v_eos, int __pyx_skip_dispatch) {
  struct __pyx_obj_3phd_5utils_6carray_IntArray *__pyx_v_tags = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_vol = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_d = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_p = 0;
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_dim;
  __pyx_t_5numpy_float64_t *__pyx_v_v[3];
  double __pyx_v_c;
  double __pyx_v_R;
  double __pyx_v_dt;
  double __pyx_v_vsq;
  int __pyx_v_boost;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_time_step", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_time_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_9compute_time_step)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_eos)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_eos)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 120, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_eos));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_eos));
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_eos));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_7;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/riemann/riemann.pyx":138
 * 
 *         """
 *         cdef IntArray tags   = particles.get_carray("tag")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray vol = particles.get_carray("volume")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_tag, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_IntArray))))) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_v_tags = ((struct __pyx_obj_3phd_5utils_6carray_IntArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":139
 *         """
 *         cdef IntArray tags   = particles.get_carray("tag")
 *         cdef DoubleArray vol = particles.get_carray("volume")             # <<<<<<<<<<<<<<
 * 
 *         cdef DoubleArray d = particles.get_carray("density")
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_volume, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_v_vol = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":141
 *         cdef DoubleArray vol = particles.get_carray("volume")
 * 
 *         cdef DoubleArray d = particles.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray p = particles.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_v_d = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":142
 * 
 *         cdef DoubleArray d = particles.get_carray("density")
 *         cdef DoubleArray p = particles.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         cdef int i, k, dim
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_v_p = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":147
 *         cdef np.float64_t* v[3]
 *         cdef double c, R, dt, vsq
 *         cdef bint boost = self.boost             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_boost); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_boost = __pyx_t_8;

  /* "phd/riemann/riemann.pyx":149
 *         cdef bint boost = self.boost
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 *         particles.pointer_groups(v, particles.carray_named_groups["velocity"])
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 149, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_9;

  /* "phd/riemann/riemann.pyx":150
 * 
 *         dim = len(particles.carray_named_groups["position"])
 *         particles.pointer_groups(v, particles.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # calculate first value for min
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 150, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 150, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_v, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":153
 * 
 *         # calculate first value for min
 *         c = eos.sound_speed(d.data[0], p.data[0])             # <<<<<<<<<<<<<<
 * 
 *         if dim == 2:
 */
  __pyx_v_c = ((struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase *)__pyx_v_eos->__pyx_vtab)->sound_speed(__pyx_v_eos, (__pyx_v_d->data[0]), (__pyx_v_p->data[0]), 0);

  /* "phd/riemann/riemann.pyx":155
 *         c = eos.sound_speed(d.data[0], p.data[0])
 * 
 *         if dim == 2:             # <<<<<<<<<<<<<<
 *             R = sqrt(vol.data[0]/np.pi)
 *         elif dim == 3:
 */
  switch (__pyx_v_dim) {
    case 2:

    /* "phd/riemann/riemann.pyx":156
 * 
 *         if dim == 2:
 *             R = sqrt(vol.data[0]/np.pi)             # <<<<<<<<<<<<<<
 *         elif dim == 3:
 *             R = pow(3.0*vol.data[0]/(4.0*np.pi), 1.0/3.0)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_vol->data[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_pi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_R = sqrt(__pyx_t_7);

    /* "phd/riemann/riemann.pyx":155
 *         c = eos.sound_speed(d.data[0], p.data[0])
 * 
 *         if dim == 2:             # <<<<<<<<<<<<<<
 *             R = sqrt(vol.data[0]/np.pi)
 *         elif dim == 3:
 */
    break;
    case 3:

    /* "phd/riemann/riemann.pyx":158
 *             R = sqrt(vol.data[0]/np.pi)
 *         elif dim == 3:
 *             R = pow(3.0*vol.data[0]/(4.0*np.pi), 1.0/3.0)             # <<<<<<<<<<<<<<
 * 
 *         if boost:
 */
    __pyx_t_2 = PyFloat_FromDouble((3.0 * (__pyx_v_vol->data[0]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_pi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_float_4_0, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_R = pow(__pyx_t_7, (1.0 / 3.0));

    /* "phd/riemann/riemann.pyx":157
 *         if dim == 2:
 *             R = sqrt(vol.data[0]/np.pi)
 *         elif dim == 3:             # <<<<<<<<<<<<<<
 *             R = pow(3.0*vol.data[0]/(4.0*np.pi), 1.0/3.0)
 * 
 */
    break;
    default: break;
  }

  /* "phd/riemann/riemann.pyx":160
 *             R = pow(3.0*vol.data[0]/(4.0*np.pi), 1.0/3.0)
 * 
 *         if boost:             # <<<<<<<<<<<<<<
 *             dt = R/c
 *         else:
 */
  __pyx_t_8 = (__pyx_v_boost != 0);
  if (__pyx_t_8) {

    /* "phd/riemann/riemann.pyx":161
 * 
 *         if boost:
 *             dt = R/c             # <<<<<<<<<<<<<<
 *         else:
 *             vsq = 0.0
 */
    if (unlikely(__pyx_v_c == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 161, __pyx_L1_error)
    }
    __pyx_v_dt = (__pyx_v_R / __pyx_v_c);

    /* "phd/riemann/riemann.pyx":160
 *             R = pow(3.0*vol.data[0]/(4.0*np.pi), 1.0/3.0)
 * 
 *         if boost:             # <<<<<<<<<<<<<<
 *             dt = R/c
 *         else:
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":163
 *             dt = R/c
 *         else:
 *             vsq = 0.0             # <<<<<<<<<<<<<<
 *             for k in range(dim):
 *                 vsq += v[k][0]*v[k][0]
 */
  /*else*/ {
    __pyx_v_vsq = 0.0;

    /* "phd/riemann/riemann.pyx":164
 *         else:
 *             vsq = 0.0
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 *                 vsq += v[k][0]*v[k][0]
 *             dt = R/(c + sqrt(vsq))
 */
    __pyx_t_5 = __pyx_v_dim;
    __pyx_t_10 = __pyx_t_5;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_k = __pyx_t_11;

      /* "phd/riemann/riemann.pyx":165
 *             vsq = 0.0
 *             for k in range(dim):
 *                 vsq += v[k][0]*v[k][0]             # <<<<<<<<<<<<<<
 *             dt = R/(c + sqrt(vsq))
 * 
 */
      __pyx_v_vsq = (__pyx_v_vsq + (((__pyx_v_v[__pyx_v_k])[0]) * ((__pyx_v_v[__pyx_v_k])[0])));
    }

    /* "phd/riemann/riemann.pyx":166
 *             for k in range(dim):
 *                 vsq += v[k][0]*v[k][0]
 *             dt = R/(c + sqrt(vsq))             # <<<<<<<<<<<<<<
 * 
 *         for i in range(particles.get_carray_size()):
 */
    __pyx_t_7 = (__pyx_v_c + sqrt(__pyx_v_vsq));
    if (unlikely(__pyx_t_7 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 166, __pyx_L1_error)
    }
    __pyx_v_dt = (__pyx_v_R / __pyx_t_7);
  }
  __pyx_L3:;

  /* "phd/riemann/riemann.pyx":168
 *             dt = R/(c + sqrt(vsq))
 * 
 *         for i in range(particles.get_carray_size()):             # <<<<<<<<<<<<<<
 *             # use only real particles
 *             if tags.data[i] == REAL:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);
  __pyx_t_10 = __pyx_t_5;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "phd/riemann/riemann.pyx":170
 *         for i in range(particles.get_carray_size()):
 *             # use only real particles
 *             if tags.data[i] == REAL:             # <<<<<<<<<<<<<<
 * 
 *                 # sound speed
 */
    __pyx_t_8 = (((__pyx_v_tags->data[__pyx_v_i]) == __pyx_v_3phd_7riemann_7riemann_REAL) != 0);
    if (__pyx_t_8) {

      /* "phd/riemann/riemann.pyx":173
 * 
 *                 # sound speed
 *                 c = eos.sound_speed(d.data[i], p.data[i])             # <<<<<<<<<<<<<<
 * 
 *                 # calculate approx radius of each voronoi cell
 */
      __pyx_v_c = ((struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase *)__pyx_v_eos->__pyx_vtab)->sound_speed(__pyx_v_eos, (__pyx_v_d->data[__pyx_v_i]), (__pyx_v_p->data[__pyx_v_i]), 0);

      /* "phd/riemann/riemann.pyx":176
 * 
 *                 # calculate approx radius of each voronoi cell
 *                 if dim == 2:             # <<<<<<<<<<<<<<
 *                     R = sqrt(vol.data[i]/np.pi)
 *                 elif dim == 3:
 */
      switch (__pyx_v_dim) {
        case 2:

        /* "phd/riemann/riemann.pyx":177
 *                 # calculate approx radius of each voronoi cell
 *                 if dim == 2:
 *                     R = sqrt(vol.data[i]/np.pi)             # <<<<<<<<<<<<<<
 *                 elif dim == 3:
 *                     R = pow(3.0*vol.data[i]/(4.0*np.pi), 1.0/3.0)
 */
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_vol->data[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_pi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_R = sqrt(__pyx_t_7);

        /* "phd/riemann/riemann.pyx":176
 * 
 *                 # calculate approx radius of each voronoi cell
 *                 if dim == 2:             # <<<<<<<<<<<<<<
 *                     R = sqrt(vol.data[i]/np.pi)
 *                 elif dim == 3:
 */
        break;
        case 3:

        /* "phd/riemann/riemann.pyx":179
 *                     R = sqrt(vol.data[i]/np.pi)
 *                 elif dim == 3:
 *                     R = pow(3.0*vol.data[i]/(4.0*np.pi), 1.0/3.0)             # <<<<<<<<<<<<<<
 * 
 *                 if boost:
 */
        __pyx_t_3 = PyFloat_FromDouble((3.0 * (__pyx_v_vol->data[__pyx_v_i]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_pi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Multiply(__pyx_float_4_0, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_R = pow(__pyx_t_7, (1.0 / 3.0));

        /* "phd/riemann/riemann.pyx":178
 *                 if dim == 2:
 *                     R = sqrt(vol.data[i]/np.pi)
 *                 elif dim == 3:             # <<<<<<<<<<<<<<
 *                     R = pow(3.0*vol.data[i]/(4.0*np.pi), 1.0/3.0)
 * 
 */
        break;
        default: break;
      }

      /* "phd/riemann/riemann.pyx":181
 *                     R = pow(3.0*vol.data[i]/(4.0*np.pi), 1.0/3.0)
 * 
 *                 if boost:             # <<<<<<<<<<<<<<
 *                     dt = fmin(R/c, dt)
 *                 else:
 */
      __pyx_t_8 = (__pyx_v_boost != 0);
      if (__pyx_t_8) {

        /* "phd/riemann/riemann.pyx":182
 * 
 *                 if boost:
 *                     dt = fmin(R/c, dt)             # <<<<<<<<<<<<<<
 *                 else:
 *                     vsq = 0.0
 */
        if (unlikely(__pyx_v_c == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 182, __pyx_L1_error)
        }
        __pyx_v_dt = fmin((__pyx_v_R / __pyx_v_c), __pyx_v_dt);

        /* "phd/riemann/riemann.pyx":181
 *                     R = pow(3.0*vol.data[i]/(4.0*np.pi), 1.0/3.0)
 * 
 *                 if boost:             # <<<<<<<<<<<<<<
 *                     dt = fmin(R/c, dt)
 *                 else:
 */
        goto __pyx_L9;
      }

      /* "phd/riemann/riemann.pyx":184
 *                     dt = fmin(R/c, dt)
 *                 else:
 *                     vsq = 0.0             # <<<<<<<<<<<<<<
 *                     for k in range(dim):
 *                         vsq += v[k][i]*v[k][i]
 */
      /*else*/ {
        __pyx_v_vsq = 0.0;

        /* "phd/riemann/riemann.pyx":185
 *                 else:
 *                     vsq = 0.0
 *                     for k in range(dim):             # <<<<<<<<<<<<<<
 *                         vsq += v[k][i]*v[k][i]
 *                     dt = fmin(R/(c + sqrt(vsq)), dt)
 */
        __pyx_t_12 = __pyx_v_dim;
        __pyx_t_13 = __pyx_t_12;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_k = __pyx_t_14;

          /* "phd/riemann/riemann.pyx":186
 *                     vsq = 0.0
 *                     for k in range(dim):
 *                         vsq += v[k][i]*v[k][i]             # <<<<<<<<<<<<<<
 *                     dt = fmin(R/(c + sqrt(vsq)), dt)
 *         return self.cfl*dt
 */
          __pyx_v_vsq = (__pyx_v_vsq + (((__pyx_v_v[__pyx_v_k])[__pyx_v_i]) * ((__pyx_v_v[__pyx_v_k])[__pyx_v_i])));
        }

        /* "phd/riemann/riemann.pyx":187
 *                     for k in range(dim):
 *                         vsq += v[k][i]*v[k][i]
 *                     dt = fmin(R/(c + sqrt(vsq)), dt)             # <<<<<<<<<<<<<<
 *         return self.cfl*dt
 * 
 */
        __pyx_t_7 = (__pyx_v_c + sqrt(__pyx_v_vsq));
        if (unlikely(__pyx_t_7 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 187, __pyx_L1_error)
        }
        __pyx_v_dt = fmin((__pyx_v_R / __pyx_t_7), __pyx_v_dt);
      }
      __pyx_L9:;

      /* "phd/riemann/riemann.pyx":170
 *         for i in range(particles.get_carray_size()):
 *             # use only real particles
 *             if tags.data[i] == REAL:             # <<<<<<<<<<<<<<
 * 
 *                 # sound speed
 */
    }
  }

  /* "phd/riemann/riemann.pyx":188
 *                         vsq += v[k][i]*v[k][i]
 *                     dt = fmin(R/(c + sqrt(vsq)), dt)
 *         return self.cfl*dt             # <<<<<<<<<<<<<<
 * 
 *     cdef deboost(self, CarrayContainer fluxes, CarrayContainer faces, int dim):
 */
  __pyx_r = (__pyx_v_self->cfl * __pyx_v_dt);
  goto __pyx_L0;

  /* "phd/riemann/riemann.pyx":120
 *         raise NotImplementedError(msg)
 * 
 *     cpdef double compute_time_step(self, CarrayContainer particles,             # <<<<<<<<<<<<<<
 *                                    EquationStateBase eos):
 *         """Compute time step for next integration step.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("phd.riemann.riemann.RiemannBase.compute_time_step", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tags);
  __Pyx_XDECREF((PyObject *)__pyx_v_vol);
  __Pyx_XDECREF((PyObject *)__pyx_v_d);
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_9compute_time_step(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_7riemann_7riemann_11RiemannBase_8compute_time_step[] = "Compute time step for next integration step.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Container of particles.\n\n        eos : EquationStateBase\n            Thermodynamic equation of state.\n\n        Returns\n        -------\n        double\n            Time step.\n\n        ";
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_9compute_time_step(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_v_eos = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_time_step (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_eos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_time_step", 1, 2, 2, 1); __PYX_ERR(0, 120, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_time_step") < 0)) __PYX_ERR(0, 120, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_eos = ((struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_time_step", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.compute_time_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 120, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eos), __pyx_ptype_3phd_14equation_state_14equation_state_EquationStateBase, 1, "eos", 0))) __PYX_ERR(0, 121, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_8compute_time_step(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self), __pyx_v_particles, __pyx_v_eos);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_8compute_time_step(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_v_eos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_time_step", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_3phd_7riemann_7riemann_11RiemannBase_compute_time_step(__pyx_v_self, __pyx_v_particles, __pyx_v_eos, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.compute_time_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":190
 *         return self.cfl*dt
 * 
 *     cdef deboost(self, CarrayContainer fluxes, CarrayContainer faces, int dim):             # <<<<<<<<<<<<<<
 *         """Deboost riemann solution of fluxes from face reference to lab frame.
 * 
 */

static PyObject *__pyx_f_3phd_7riemann_7riemann_11RiemannBase_deboost(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_fluxes, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_faces, int __pyx_v_dim) {
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_fm = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_fe = 0;
  int __pyx_v_m;
  int __pyx_v_k;
  __pyx_t_5numpy_float64_t *__pyx_v_fmv[3];
  __pyx_t_5numpy_float64_t *__pyx_v_wx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("deboost", 0);

  /* "phd/riemann/riemann.pyx":209
 * 
 *         """
 *         cdef DoubleArray fm = fluxes.get_carray("mass")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray fe = fluxes.get_carray("energy")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_fluxes->__pyx_vtab)->get_carray(__pyx_v_fluxes, __pyx_n_s_mass, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 209, __pyx_L1_error)
  __pyx_v_fm = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":210
 *         """
 *         cdef DoubleArray fm = fluxes.get_carray("mass")
 *         cdef DoubleArray fe = fluxes.get_carray("energy")             # <<<<<<<<<<<<<<
 * 
 *         cdef int m, k
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_fluxes->__pyx_vtab)->get_carray(__pyx_v_fluxes, __pyx_n_s_energy, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 210, __pyx_L1_error)
  __pyx_v_fe = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":215
 *         cdef np.float64_t *fmv[3], *wx[3]
 * 
 *         fluxes.pointer_groups(fmv, fluxes.carray_named_groups["momentum"])             # <<<<<<<<<<<<<<
 *         faces.pointer_groups(wx, faces.carray_named_groups["velocity"])
 * 
 */
  if (unlikely(__pyx_v_fluxes->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 215, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_fluxes->carray_named_groups, __pyx_n_s_momentum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 215, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_fluxes->__pyx_vtab)->pointer_groups(__pyx_v_fluxes, __pyx_v_fmv, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":216
 * 
 *         fluxes.pointer_groups(fmv, fluxes.carray_named_groups["momentum"])
 *         faces.pointer_groups(wx, faces.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # return flux to lab frame Eq. 17
 */
  if (unlikely(__pyx_v_faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 216, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_faces->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 216, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_faces->__pyx_vtab)->pointer_groups(__pyx_v_faces, __pyx_v_wx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":219
 * 
 *         # return flux to lab frame Eq. 17
 *         for m in range(faces.get_carray_size()):             # <<<<<<<<<<<<<<
 *             for k in range(dim):
 *                 fe.data[m] += wx[k][m]*(0.5*wx[k][m]*fm.data[m] + fmv[k][m])
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_faces->__pyx_vtab)->get_carray_size(__pyx_v_faces, 0);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "phd/riemann/riemann.pyx":220
 *         # return flux to lab frame Eq. 17
 *         for m in range(faces.get_carray_size()):
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 *                 fe.data[m] += wx[k][m]*(0.5*wx[k][m]*fm.data[m] + fmv[k][m])
 *                 fmv[k][m]  += wx[k][m]*fm.data[m]
 */
    __pyx_t_5 = __pyx_v_dim;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_k = __pyx_t_7;

      /* "phd/riemann/riemann.pyx":221
 *         for m in range(faces.get_carray_size()):
 *             for k in range(dim):
 *                 fe.data[m] += wx[k][m]*(0.5*wx[k][m]*fm.data[m] + fmv[k][m])             # <<<<<<<<<<<<<<
 *                 fmv[k][m]  += wx[k][m]*fm.data[m]
 * 
 */
      __pyx_t_8 = __pyx_v_m;
      (__pyx_v_fe->data[__pyx_t_8]) = ((__pyx_v_fe->data[__pyx_t_8]) + (((__pyx_v_wx[__pyx_v_k])[__pyx_v_m]) * (((0.5 * ((__pyx_v_wx[__pyx_v_k])[__pyx_v_m])) * (__pyx_v_fm->data[__pyx_v_m])) + ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_m]))));

      /* "phd/riemann/riemann.pyx":222
 *             for k in range(dim):
 *                 fe.data[m] += wx[k][m]*(0.5*wx[k][m]*fm.data[m] + fmv[k][m])
 *                 fmv[k][m]  += wx[k][m]*fm.data[m]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __pyx_v_k;
      __pyx_t_9 = __pyx_v_m;
      ((__pyx_v_fmv[__pyx_t_8])[__pyx_t_9]) = (((__pyx_v_fmv[__pyx_t_8])[__pyx_t_9]) + (((__pyx_v_wx[__pyx_v_k])[__pyx_v_m]) * (__pyx_v_fm->data[__pyx_v_m])));
    }
  }

  /* "phd/riemann/riemann.pyx":190
 *         return self.cfl*dt
 * 
 *     cdef deboost(self, CarrayContainer fluxes, CarrayContainer faces, int dim):             # <<<<<<<<<<<<<<
 *         """Deboost riemann solution of fluxes from face reference to lab frame.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.deboost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fm);
  __Pyx_XDECREF((PyObject *)__pyx_v_fe);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pxd":9
 * cdef class RiemannBase:
 * 
 *     cdef public double cfl             # <<<<<<<<<<<<<<
 * 
 *     cdef bint fields_registered
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_3cfl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_3cfl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_3cfl___get__(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_3cfl___get__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->cfl); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.cfl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_3cfl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_3cfl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_3cfl_2__set__(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_3cfl_2__set__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 9, __pyx_L1_error)
  __pyx_v_self->cfl = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.cfl.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pxd":14
 *     cdef dict flux_fields
 *     cdef dict flux_field_groups
 *     cdef public CarrayContainer fluxes             # <<<<<<<<<<<<<<
 * 
 *     cpdef compute_fluxes(self, CarrayContainer particles, Mesh mesh, ReconstructionBase reconstruction,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_6fluxes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_6fluxes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6fluxes___get__(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6fluxes___get__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->fluxes));
  __pyx_r = ((PyObject *)__pyx_v_self->fluxes);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_6fluxes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_6fluxes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6fluxes_2__set__(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6fluxes_2__set__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(1, 14, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fluxes);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluxes));
  __pyx_v_self->fluxes = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.fluxes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_6fluxes_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_6fluxes_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6fluxes_4__del__(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_6fluxes_4__del__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->fluxes);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fluxes));
  __pyx_v_self->fluxes = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_10__reduce_cython__(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_10__reduce_cython__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->cfl); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->fields_registered); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->flux_field_groups);
  __Pyx_GIVEREF(__pyx_v_self->flux_field_groups);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self->flux_field_groups);
  __Pyx_INCREF(__pyx_v_self->flux_fields);
  __Pyx_GIVEREF(__pyx_v_self->flux_fields);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_self->flux_fields);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->fluxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->fluxes));
  PyTuple_SET_ITEM(__pyx_t_3, 4, ((PyObject *)__pyx_v_self->fluxes));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":7
 *     state = (self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_RiemannBase, (type(self), 0x68d4d25, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->flux_field_groups != ((PyObject*)Py_None));
    __pyx_t_6 = (__pyx_t_4 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->flux_fields != ((PyObject*)Py_None));
    __pyx_t_4 = (__pyx_t_6 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_5 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (((PyObject *)__pyx_v_self->fluxes) != Py_None);
    __pyx_t_6 = (__pyx_t_4 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_5;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RiemannBase, (type(self), 0x68d4d25, None), state
 *     else:
 */
  __pyx_t_5 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":13
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:
 *         return __pyx_unpickle_RiemannBase, (type(self), 0x68d4d25, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_RiemannBase, (type(self), 0x68d4d25, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_RiemannBase); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_109923621);
    __Pyx_GIVEREF(__pyx_int_109923621);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_109923621);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RiemannBase, (type(self), 0x68d4d25, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_RiemannBase, (type(self), 0x68d4d25, None), state
 *     else:
 *         return __pyx_unpickle_RiemannBase, (type(self), 0x68d4d25, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RiemannBase__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_RiemannBase); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_109923621);
    __Pyx_GIVEREF(__pyx_int_109923621);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_109923621);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RiemannBase, (type(self), 0x68d4d25, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RiemannBase__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_11RiemannBase_12__setstate_cython__(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_11RiemannBase_12__setstate_cython__(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_RiemannBase, (type(self), 0x68d4d25, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RiemannBase__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_3phd_7riemann_7riemann___pyx_unpickle_RiemannBase__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RiemannBase, (type(self), 0x68d4d25, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RiemannBase__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.RiemannBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":239
 * 
 *     """
 *     def __init__(self, double cfl=0.5, bint boost=True, **kwargs):             # <<<<<<<<<<<<<<
 *         self.boost = boost
 *         super(HLL, self).__init__(cfl, **kwargs)
 */

/* Python wrapper */
static int __pyx_pw_3phd_7riemann_7riemann_3HLL_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3phd_7riemann_7riemann_3HLL_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_cfl;
  int __pyx_v_boost;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cfl,&__pyx_n_s_boost,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cfl);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boost);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 239, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_cfl = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_cfl == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L3_error)
    } else {
      __pyx_v_cfl = ((double)0.5);
    }
    if (values[1]) {
      __pyx_v_boost = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_boost == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L3_error)
    } else {
      __pyx_v_boost = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 239, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("phd.riemann.riemann.HLL.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_3HLL___init__(((struct __pyx_obj_3phd_7riemann_7riemann_HLL *)__pyx_v_self), __pyx_v_cfl, __pyx_v_boost, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7riemann_7riemann_3HLL___init__(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self, double __pyx_v_cfl, int __pyx_v_boost, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "phd/riemann/riemann.pyx":240
 *     """
 *     def __init__(self, double cfl=0.5, bint boost=True, **kwargs):
 *         self.boost = boost             # <<<<<<<<<<<<<<
 *         super(HLL, self).__init__(cfl, **kwargs)
 * 
 */
  __pyx_v_self->boost = __pyx_v_boost;

  /* "phd/riemann/riemann.pyx":241
 *     def __init__(self, double cfl=0.5, bint boost=True, **kwargs):
 *         self.boost = boost
 *         super(HLL, self).__init__(cfl, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction, double gamma, int dim):
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_3phd_7riemann_7riemann_HLL));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_3phd_7riemann_7riemann_HLL));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_3phd_7riemann_7riemann_HLL));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_cfl); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/riemann/riemann.pyx":239
 * 
 *     """
 *     def __init__(self, double cfl=0.5, bint boost=True, **kwargs):             # <<<<<<<<<<<<<<
 *         self.boost = boost
 *         super(HLL, self).__init__(cfl, **kwargs)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phd.riemann.riemann.HLL.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":243
 *         super(HLL, self).__init__(cfl, **kwargs)
 * 
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction, double gamma, int dim):             # <<<<<<<<<<<<<<
 *         """Solve the riemann problem by HLL solver.
 * 
 */

static PyObject *__pyx_f_3phd_7riemann_7riemann_3HLL_riemann_solver(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, double __pyx_v_gamma, int __pyx_v_dim) {
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dr = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pr = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_fm = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_fe = 0;
  int __pyx_v_i;
  int __pyx_v_k;
  double __pyx_v__dl;
  double __pyx_v__pl;
  double __pyx_v__dr;
  double __pyx_v__pr;
  double __pyx_v_fac1;
  double __pyx_v_fac2;
  double __pyx_v_el;
  double __pyx_v_er;
  double __pyx_v_wn;
  double __pyx_v_Vnl;
  double __pyx_v_Vnr;
  double __pyx_v_sl;
  double __pyx_v_sr;
  double __pyx_v_s_contact;
  double __pyx_v_vl_tmp;
  double __pyx_v_vr_tmp;
  double __pyx_v_nx_tmp;
  double __pyx_v_vl_sq;
  double __pyx_v_vr_sq;
  __pyx_t_5numpy_float64_t *__pyx_v_vl[3];
  __pyx_t_5numpy_float64_t *__pyx_v_vr[3];
  __pyx_t_5numpy_float64_t *__pyx_v_fmv[3];
  __pyx_t_5numpy_float64_t *__pyx_v_nx[3];
  __pyx_t_5numpy_float64_t *__pyx_v_wx[3];
  int __pyx_v_boost;
  int __pyx_v_num_faces;
  double __pyx_v_fac3;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  int __pyx_t_12;
  __pyx_t_5numpy_float64_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("riemann_solver", 0);

  /* "phd/riemann/riemann.pyx":263
 *         """
 *         # left state primitive variables
 *         cdef DoubleArray dl = reconstruction.left_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pl = reconstruction.left_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->left_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->left_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 263, __pyx_L1_error)
  __pyx_v_dl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":264
 *         # left state primitive variables
 *         cdef DoubleArray dl = reconstruction.left_states.get_carray("density")
 *         cdef DoubleArray pl = reconstruction.left_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         # right state primitive variables
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->left_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->left_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_v_pl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":267
 * 
 *         # right state primitive variables
 *         cdef DoubleArray dr = reconstruction.right_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pr = reconstruction.right_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->right_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->right_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 267, __pyx_L1_error)
  __pyx_v_dr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":268
 *         # right state primitive variables
 *         cdef DoubleArray dr = reconstruction.right_states.get_carray("density")
 *         cdef DoubleArray pr = reconstruction.right_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         # face mass and energy flux
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->right_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->right_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 268, __pyx_L1_error)
  __pyx_v_pr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":271
 * 
 *         # face mass and energy flux
 *         cdef DoubleArray fm = self.fluxes.get_carray("mass")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray fe = self.fluxes.get_carray("energy")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.fluxes->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.fluxes, __pyx_n_s_mass, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 271, __pyx_L1_error)
  __pyx_v_fm = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":272
 *         # face mass and energy flux
 *         cdef DoubleArray fm = self.fluxes.get_carray("mass")
 *         cdef DoubleArray fe = self.fluxes.get_carray("energy")             # <<<<<<<<<<<<<<
 * 
 *         cdef int i, k
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.fluxes->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.fluxes, __pyx_n_s_energy, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_v_fe = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":282
 *         cdef np.float64_t *vl[3], *vr[3], *fmv[3], *nx[3], *wx[3]
 * 
 *         cdef bint boost = self.boost             # <<<<<<<<<<<<<<
 *         cdef int num_faces = mesh.faces.get_carray_size()
 * 
 */
  __pyx_t_2 = __pyx_v_self->boost;
  __pyx_v_boost = __pyx_t_2;

  /* "phd/riemann/riemann.pyx":283
 * 
 *         cdef bint boost = self.boost
 *         cdef int num_faces = mesh.faces.get_carray_size()             # <<<<<<<<<<<<<<
 * 
 *         phdLogger.info("HLL: Starting riemann")
 */
  __pyx_v_num_faces = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0);

  /* "phd/riemann/riemann.pyx":285
 *         cdef int num_faces = mesh.faces.get_carray_size()
 * 
 *         phdLogger.info("HLL: Starting riemann")             # <<<<<<<<<<<<<<
 * 
 *         # particle velocities left/right face
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phdLogger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_s_HLL_Starting_riemann) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_HLL_Starting_riemann);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":289
 *         # particle velocities left/right face
 *         reconstruction.left_states.pointer_groups(vl,
 *                 reconstruction.left_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 *         reconstruction.right_states.pointer_groups(vr,
 *                 reconstruction.right_states.carray_named_groups["velocity"])
 */
  if (unlikely(__pyx_v_reconstruction->left_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 289, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_reconstruction->left_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 289, __pyx_L1_error)

  /* "phd/riemann/riemann.pyx":288
 * 
 *         # particle velocities left/right face
 *         reconstruction.left_states.pointer_groups(vl,             # <<<<<<<<<<<<<<
 *                 reconstruction.left_states.carray_named_groups["velocity"])
 *         reconstruction.right_states.pointer_groups(vr,
 */
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->left_states->__pyx_vtab)->pointer_groups(__pyx_v_reconstruction->left_states, __pyx_v_vl, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":291
 *                 reconstruction.left_states.carray_named_groups["velocity"])
 *         reconstruction.right_states.pointer_groups(vr,
 *                 reconstruction.right_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # face momentum fluxes
 */
  if (unlikely(__pyx_v_reconstruction->right_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 291, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_reconstruction->right_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 291, __pyx_L1_error)

  /* "phd/riemann/riemann.pyx":290
 *         reconstruction.left_states.pointer_groups(vl,
 *                 reconstruction.left_states.carray_named_groups["velocity"])
 *         reconstruction.right_states.pointer_groups(vr,             # <<<<<<<<<<<<<<
 *                 reconstruction.right_states.carray_named_groups["velocity"])
 * 
 */
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->right_states->__pyx_vtab)->pointer_groups(__pyx_v_reconstruction->right_states, __pyx_v_vr, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":294
 * 
 *         # face momentum fluxes
 *         self.fluxes.pointer_groups(fmv, self.fluxes.carray_named_groups["momentum"])             # <<<<<<<<<<<<<<
 * 
 *         # face normal and velocity
 */
  if (unlikely(__pyx_v_self->__pyx_base.fluxes->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 294, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.fluxes->carray_named_groups, __pyx_n_s_momentum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 294, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.fluxes->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.fluxes, __pyx_v_fmv, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":297
 * 
 *         # face normal and velocity
 *         mesh.faces.pointer_groups(nx, mesh.faces.carray_named_groups["normal"])             # <<<<<<<<<<<<<<
 *         mesh.faces.pointer_groups(wx, mesh.faces.carray_named_groups["velocity"])
 * 
 */
  if (unlikely(__pyx_v_mesh->faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 297, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_mesh->faces->carray_named_groups, __pyx_n_s_normal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 297, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->pointer_groups(__pyx_v_mesh->faces, __pyx_v_nx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":298
 *         # face normal and velocity
 *         mesh.faces.pointer_groups(nx, mesh.faces.carray_named_groups["normal"])
 *         mesh.faces.pointer_groups(wx, mesh.faces.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # solve riemann for each face
 */
  if (unlikely(__pyx_v_mesh->faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 298, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_mesh->faces->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 298, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->pointer_groups(__pyx_v_mesh->faces, __pyx_v_wx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":301
 * 
 *         # solve riemann for each face
 *         for i in range(num_faces):             # <<<<<<<<<<<<<<
 * 
 *             # left state
 */
  __pyx_t_5 = __pyx_v_num_faces;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "phd/riemann/riemann.pyx":304
 * 
 *             # left state
 *             _dl = dl.data[i]             # <<<<<<<<<<<<<<
 *             _pl = pl.data[i]
 * 
 */
    __pyx_v__dl = (__pyx_v_dl->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":305
 *             # left state
 *             _dl = dl.data[i]
 *             _pl = pl.data[i]             # <<<<<<<<<<<<<<
 * 
 *             # right state
 */
    __pyx_v__pl = (__pyx_v_pl->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":308
 * 
 *             # right state
 *             _dr = dr.data[i]             # <<<<<<<<<<<<<<
 *             _pr = pr.data[i]
 * 
 */
    __pyx_v__dr = (__pyx_v_dr->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":309
 *             # right state
 *             _dr = dr.data[i]
 *             _pr = pr.data[i]             # <<<<<<<<<<<<<<
 * 
 *             Vnl = Vnr = 0.0
 */
    __pyx_v__pr = (__pyx_v_pr->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":311
 *             _pr = pr.data[i]
 * 
 *             Vnl = Vnr = 0.0             # <<<<<<<<<<<<<<
 *             vl_sq = vr_sq = wn = 0.0
 *             for k in range(dim):
 */
    __pyx_v_Vnl = 0.0;
    __pyx_v_Vnr = 0.0;

    /* "phd/riemann/riemann.pyx":312
 * 
 *             Vnl = Vnr = 0.0
 *             vl_sq = vr_sq = wn = 0.0             # <<<<<<<<<<<<<<
 *             for k in range(dim):
 * 
 */
    __pyx_v_vl_sq = 0.0;
    __pyx_v_vr_sq = 0.0;
    __pyx_v_wn = 0.0;

    /* "phd/riemann/riemann.pyx":313
 *             Vnl = Vnr = 0.0
 *             vl_sq = vr_sq = wn = 0.0
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 * 
 *                 vl_tmp = vl[k][i]; vr_tmp = vr[k][i]
 */
    __pyx_t_8 = __pyx_v_dim;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_k = __pyx_t_10;

      /* "phd/riemann/riemann.pyx":315
 *             for k in range(dim):
 * 
 *                 vl_tmp = vl[k][i]; vr_tmp = vr[k][i]             # <<<<<<<<<<<<<<
 *                 nx_tmp = nx[k][i]
 * 
 */
      __pyx_v_vl_tmp = ((__pyx_v_vl[__pyx_v_k])[__pyx_v_i]);
      __pyx_v_vr_tmp = ((__pyx_v_vr[__pyx_v_k])[__pyx_v_i]);

      /* "phd/riemann/riemann.pyx":316
 * 
 *                 vl_tmp = vl[k][i]; vr_tmp = vr[k][i]
 *                 nx_tmp = nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                 # left/right velocity square
 */
      __pyx_v_nx_tmp = ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i]);

      /* "phd/riemann/riemann.pyx":319
 * 
 *                 # left/right velocity square
 *                 vl_sq += vl_tmp*vl_tmp             # <<<<<<<<<<<<<<
 *                 vr_sq += vr_tmp*vr_tmp
 * 
 */
      __pyx_v_vl_sq = (__pyx_v_vl_sq + (__pyx_v_vl_tmp * __pyx_v_vl_tmp));

      /* "phd/riemann/riemann.pyx":320
 *                 # left/right velocity square
 *                 vl_sq += vl_tmp*vl_tmp
 *                 vr_sq += vr_tmp*vr_tmp             # <<<<<<<<<<<<<<
 * 
 *                 # project left/righ velocity to face normal
 */
      __pyx_v_vr_sq = (__pyx_v_vr_sq + (__pyx_v_vr_tmp * __pyx_v_vr_tmp));

      /* "phd/riemann/riemann.pyx":323
 * 
 *                 # project left/righ velocity to face normal
 *                 Vnl += vl_tmp*nx_tmp             # <<<<<<<<<<<<<<
 *                 Vnr += vr_tmp*nx_tmp
 * 
 */
      __pyx_v_Vnl = (__pyx_v_Vnl + (__pyx_v_vl_tmp * __pyx_v_nx_tmp));

      /* "phd/riemann/riemann.pyx":324
 *                 # project left/righ velocity to face normal
 *                 Vnl += vl_tmp*nx_tmp
 *                 Vnr += vr_tmp*nx_tmp             # <<<<<<<<<<<<<<
 * 
 *                 # project face velocity to face normal
 */
      __pyx_v_Vnr = (__pyx_v_Vnr + (__pyx_v_vr_tmp * __pyx_v_nx_tmp));

      /* "phd/riemann/riemann.pyx":327
 * 
 *                 # project face velocity to face normal
 *                 wn += wx[k][i]*nx_tmp             # <<<<<<<<<<<<<<
 * 
 *             # in face frame
 */
      __pyx_v_wn = (__pyx_v_wn + (((__pyx_v_wx[__pyx_v_k])[__pyx_v_i]) * __pyx_v_nx_tmp));
    }

    /* "phd/riemann/riemann.pyx":330
 * 
 *             # in face frame
 *             if boost:             # <<<<<<<<<<<<<<
 *                 wn = 0.
 * 
 */
    __pyx_t_2 = (__pyx_v_boost != 0);
    if (__pyx_t_2) {

      /* "phd/riemann/riemann.pyx":331
 *             # in face frame
 *             if boost:
 *                 wn = 0.             # <<<<<<<<<<<<<<
 * 
 *             self.get_waves(_dl, Vnl, _pl, _dr, Vnr, _pr, gamma,
 */
      __pyx_v_wn = 0.;

      /* "phd/riemann/riemann.pyx":330
 * 
 *             # in face frame
 *             if boost:             # <<<<<<<<<<<<<<
 *                 wn = 0.
 * 
 */
    }

    /* "phd/riemann/riemann.pyx":333
 *                 wn = 0.
 * 
 *             self.get_waves(_dl, Vnl, _pl, _dr, Vnr, _pr, gamma,             # <<<<<<<<<<<<<<
 *                     &sl, &s_contact, &sr)
 * 
 */
    __pyx_f_3phd_7riemann_7riemann_3HLL_get_waves(__pyx_v_self, __pyx_v__dl, __pyx_v_Vnl, __pyx_v__pl, __pyx_v__dr, __pyx_v_Vnr, __pyx_v__pr, __pyx_v_gamma, (&__pyx_v_sl), (&__pyx_v_s_contact), (&__pyx_v_sr));

    /* "phd/riemann/riemann.pyx":337
 * 
 *             # calculate interface flux Eq. 10.21
 *             if(wn <= sl):             # <<<<<<<<<<<<<<
 * 
 *                 # left state
 */
    __pyx_t_2 = ((__pyx_v_wn <= __pyx_v_sl) != 0);
    if (__pyx_t_2) {

      /* "phd/riemann/riemann.pyx":340
 * 
 *                 # left state
 *                 fm.data[i]  = _dl*(Vnl - wn)             # <<<<<<<<<<<<<<
 *                 fe.data[i]  = (0.5*_dl*vl_sq + _pl/(gamma - 1.0))*(Vnl - wn) + _pl*Vnl
 * 
 */
      (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__dl * (__pyx_v_Vnl - __pyx_v_wn));

      /* "phd/riemann/riemann.pyx":341
 *                 # left state
 *                 fm.data[i]  = _dl*(Vnl - wn)
 *                 fe.data[i]  = (0.5*_dl*vl_sq + _pl/(gamma - 1.0))*(Vnl - wn) + _pl*Vnl             # <<<<<<<<<<<<<<
 * 
 *                 for k in range(dim):
 */
      __pyx_t_11 = (__pyx_v_gamma - 1.0);
      if (unlikely(__pyx_t_11 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 341, __pyx_L1_error)
      }
      (__pyx_v_fe->data[__pyx_v_i]) = (((((0.5 * __pyx_v__dl) * __pyx_v_vl_sq) + (__pyx_v__pl / __pyx_t_11)) * (__pyx_v_Vnl - __pyx_v_wn)) + (__pyx_v__pl * __pyx_v_Vnl));

      /* "phd/riemann/riemann.pyx":343
 *                 fe.data[i]  = (0.5*_dl*vl_sq + _pl/(gamma - 1.0))*(Vnl - wn) + _pl*Vnl
 * 
 *                 for k in range(dim):             # <<<<<<<<<<<<<<
 *                     fmv[k][i] = _dl*vl[k][i]*(Vnl - wn) + _pl*nx[k][i]
 * 
 */
      __pyx_t_8 = __pyx_v_dim;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_k = __pyx_t_10;

        /* "phd/riemann/riemann.pyx":344
 * 
 *                 for k in range(dim):
 *                     fmv[k][i] = _dl*vl[k][i]*(Vnl - wn) + _pl*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *             elif((sl < wn) and (wn <= sr)):
 */
        ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__dl * ((__pyx_v_vl[__pyx_v_k])[__pyx_v_i])) * (__pyx_v_Vnl - __pyx_v_wn)) + (__pyx_v__pl * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
      }

      /* "phd/riemann/riemann.pyx":337
 * 
 *             # calculate interface flux Eq. 10.21
 *             if(wn <= sl):             # <<<<<<<<<<<<<<
 * 
 *                 # left state
 */
      goto __pyx_L8;
    }

    /* "phd/riemann/riemann.pyx":346
 *                     fmv[k][i] = _dl*vl[k][i]*(Vnl - wn) + _pl*nx[k][i]
 * 
 *             elif((sl < wn) and (wn <= sr)):             # <<<<<<<<<<<<<<
 * 
 *                 fac1 = sr - wn
 */
    __pyx_t_12 = ((__pyx_v_sl < __pyx_v_wn) != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_2 = __pyx_t_12;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_12 = ((__pyx_v_wn <= __pyx_v_sr) != 0);
    __pyx_t_2 = __pyx_t_12;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_2) {

      /* "phd/riemann/riemann.pyx":348
 *             elif((sl < wn) and (wn <= sr)):
 * 
 *                 fac1 = sr - wn             # <<<<<<<<<<<<<<
 *                 fac2 = sl - wn
 *                 fac3 = sr - sl
 */
      __pyx_v_fac1 = (__pyx_v_sr - __pyx_v_wn);

      /* "phd/riemann/riemann.pyx":349
 * 
 *                 fac1 = sr - wn
 *                 fac2 = sl - wn             # <<<<<<<<<<<<<<
 *                 fac3 = sr - sl
 * 
 */
      __pyx_v_fac2 = (__pyx_v_sl - __pyx_v_wn);

      /* "phd/riemann/riemann.pyx":350
 *                 fac1 = sr - wn
 *                 fac2 = sl - wn
 *                 fac3 = sr - sl             # <<<<<<<<<<<<<<
 * 
 *                 # Eq. 10.20 and Eq. 10.13
 */
      __pyx_v_fac3 = (__pyx_v_sr - __pyx_v_sl);

      /* "phd/riemann/riemann.pyx":353
 * 
 *                 # Eq. 10.20 and Eq. 10.13
 *                 fm.data[i] = (_dl*Vnl*fac1 - _dr*Vnr*fac2 - sl*_dl*fac1 + sr*_dr*fac2)/fac3             # <<<<<<<<<<<<<<
 * 
 *                 for k in range(dim):
 */
      __pyx_t_11 = (((((__pyx_v__dl * __pyx_v_Vnl) * __pyx_v_fac1) - ((__pyx_v__dr * __pyx_v_Vnr) * __pyx_v_fac2)) - ((__pyx_v_sl * __pyx_v__dl) * __pyx_v_fac1)) + ((__pyx_v_sr * __pyx_v__dr) * __pyx_v_fac2));
      if (unlikely(__pyx_v_fac3 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 353, __pyx_L1_error)
      }
      (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_t_11 / __pyx_v_fac3);

      /* "phd/riemann/riemann.pyx":355
 *                 fm.data[i] = (_dl*Vnl*fac1 - _dr*Vnr*fac2 - sl*_dl*fac1 + sr*_dr*fac2)/fac3
 * 
 *                 for k in range(dim):             # <<<<<<<<<<<<<<
 *                     fmv[k][i] = ((_dl*vl[k][i]*Vnl + _pl*nx[k][i])*fac1 - (_dr*vr[k][i]*Vnr + _pr*nx[k][i])*fac2 \
 *                             - sl*(_dl*vl[k][i])*fac1 + sr*(_dr*vr[k][i])*fac2)/fac3
 */
      __pyx_t_8 = __pyx_v_dim;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_k = __pyx_t_10;

        /* "phd/riemann/riemann.pyx":357
 *                 for k in range(dim):
 *                     fmv[k][i] = ((_dl*vl[k][i]*Vnl + _pl*nx[k][i])*fac1 - (_dr*vr[k][i]*Vnr + _pr*nx[k][i])*fac2 \
 *                             - sl*(_dl*vl[k][i])*fac1 + sr*(_dr*vr[k][i])*fac2)/fac3             # <<<<<<<<<<<<<<
 * 
 *                 el = 0.5*_dl*vl_sq + _pl/(gamma - 1.0)
 */
        __pyx_t_13 = (((((((__pyx_v__dl * ((__pyx_v_vl[__pyx_v_k])[__pyx_v_i])) * __pyx_v_Vnl) + (__pyx_v__pl * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i]))) * __pyx_v_fac1) - ((((__pyx_v__dr * ((__pyx_v_vr[__pyx_v_k])[__pyx_v_i])) * __pyx_v_Vnr) + (__pyx_v__pr * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i]))) * __pyx_v_fac2)) - ((__pyx_v_sl * (__pyx_v__dl * ((__pyx_v_vl[__pyx_v_k])[__pyx_v_i]))) * __pyx_v_fac1)) + ((__pyx_v_sr * (__pyx_v__dr * ((__pyx_v_vr[__pyx_v_k])[__pyx_v_i]))) * __pyx_v_fac2));
        if (unlikely(__pyx_v_fac3 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 357, __pyx_L1_error)
        }

        /* "phd/riemann/riemann.pyx":356
 * 
 *                 for k in range(dim):
 *                     fmv[k][i] = ((_dl*vl[k][i]*Vnl + _pl*nx[k][i])*fac1 - (_dr*vr[k][i]*Vnr + _pr*nx[k][i])*fac2 \             # <<<<<<<<<<<<<<
 *                             - sl*(_dl*vl[k][i])*fac1 + sr*(_dr*vr[k][i])*fac2)/fac3
 * 
 */
        ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (__pyx_t_13 / __pyx_v_fac3);
      }

      /* "phd/riemann/riemann.pyx":359
 *                             - sl*(_dl*vl[k][i])*fac1 + sr*(_dr*vr[k][i])*fac2)/fac3
 * 
 *                 el = 0.5*_dl*vl_sq + _pl/(gamma - 1.0)             # <<<<<<<<<<<<<<
 *                 er = 0.5*_dr*vr_sq + _pr/(gamma - 1.0)
 *                 fe.data[i]  = ((el + _pl)*Vnl*fac1 - (er + _pr)*Vnr*fac2 - sl*el*fac1 + sr*er*fac2)/fac3
 */
      __pyx_t_11 = (__pyx_v_gamma - 1.0);
      if (unlikely(__pyx_t_11 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 359, __pyx_L1_error)
      }
      __pyx_v_el = (((0.5 * __pyx_v__dl) * __pyx_v_vl_sq) + (__pyx_v__pl / __pyx_t_11));

      /* "phd/riemann/riemann.pyx":360
 * 
 *                 el = 0.5*_dl*vl_sq + _pl/(gamma - 1.0)
 *                 er = 0.5*_dr*vr_sq + _pr/(gamma - 1.0)             # <<<<<<<<<<<<<<
 *                 fe.data[i]  = ((el + _pl)*Vnl*fac1 - (er + _pr)*Vnr*fac2 - sl*el*fac1 + sr*er*fac2)/fac3
 * 
 */
      __pyx_t_11 = (__pyx_v_gamma - 1.0);
      if (unlikely(__pyx_t_11 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 360, __pyx_L1_error)
      }
      __pyx_v_er = (((0.5 * __pyx_v__dr) * __pyx_v_vr_sq) + (__pyx_v__pr / __pyx_t_11));

      /* "phd/riemann/riemann.pyx":361
 *                 el = 0.5*_dl*vl_sq + _pl/(gamma - 1.0)
 *                 er = 0.5*_dr*vr_sq + _pr/(gamma - 1.0)
 *                 fe.data[i]  = ((el + _pl)*Vnl*fac1 - (er + _pr)*Vnr*fac2 - sl*el*fac1 + sr*er*fac2)/fac3             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_t_11 = ((((((__pyx_v_el + __pyx_v__pl) * __pyx_v_Vnl) * __pyx_v_fac1) - (((__pyx_v_er + __pyx_v__pr) * __pyx_v_Vnr) * __pyx_v_fac2)) - ((__pyx_v_sl * __pyx_v_el) * __pyx_v_fac1)) + ((__pyx_v_sr * __pyx_v_er) * __pyx_v_fac2));
      if (unlikely(__pyx_v_fac3 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 361, __pyx_L1_error)
      }
      (__pyx_v_fe->data[__pyx_v_i]) = (__pyx_t_11 / __pyx_v_fac3);

      /* "phd/riemann/riemann.pyx":346
 *                     fmv[k][i] = _dl*vl[k][i]*(Vnl - wn) + _pl*nx[k][i]
 * 
 *             elif((sl < wn) and (wn <= sr)):             # <<<<<<<<<<<<<<
 * 
 *                 fac1 = sr - wn
 */
      goto __pyx_L8;
    }

    /* "phd/riemann/riemann.pyx":366
 * 
 *                 # right state
 *                 fm.data[i]  = _dr*(Vnr - wn)             # <<<<<<<<<<<<<<
 *                 fe.data[i]  = (0.5*_dr*vr_sq + _pr/(gamma - 1.0))*(Vnr - wn) + _pr*Vnr
 * 
 */
    /*else*/ {
      (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__dr * (__pyx_v_Vnr - __pyx_v_wn));

      /* "phd/riemann/riemann.pyx":367
 *                 # right state
 *                 fm.data[i]  = _dr*(Vnr - wn)
 *                 fe.data[i]  = (0.5*_dr*vr_sq + _pr/(gamma - 1.0))*(Vnr - wn) + _pr*Vnr             # <<<<<<<<<<<<<<
 * 
 *                 for k in range(dim):
 */
      __pyx_t_11 = (__pyx_v_gamma - 1.0);
      if (unlikely(__pyx_t_11 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 367, __pyx_L1_error)
      }
      (__pyx_v_fe->data[__pyx_v_i]) = (((((0.5 * __pyx_v__dr) * __pyx_v_vr_sq) + (__pyx_v__pr / __pyx_t_11)) * (__pyx_v_Vnr - __pyx_v_wn)) + (__pyx_v__pr * __pyx_v_Vnr));

      /* "phd/riemann/riemann.pyx":369
 *                 fe.data[i]  = (0.5*_dr*vr_sq + _pr/(gamma - 1.0))*(Vnr - wn) + _pr*Vnr
 * 
 *                 for k in range(dim):             # <<<<<<<<<<<<<<
 *                     fmv[k][i] = _dr*vr[k][i]*(Vnr - wn) + _pr*nx[k][i]
 * 
 */
      __pyx_t_8 = __pyx_v_dim;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_k = __pyx_t_10;

        /* "phd/riemann/riemann.pyx":370
 * 
 *                 for k in range(dim):
 *                     fmv[k][i] = _dr*vr[k][i]*(Vnr - wn) + _pr*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *         if boost:
 */
        ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__dr * ((__pyx_v_vr[__pyx_v_k])[__pyx_v_i])) * (__pyx_v_Vnr - __pyx_v_wn)) + (__pyx_v__pr * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
      }
    }
    __pyx_L8:;
  }

  /* "phd/riemann/riemann.pyx":372
 *                     fmv[k][i] = _dr*vr[k][i]*(Vnr - wn) + _pr*nx[k][i]
 * 
 *         if boost:             # <<<<<<<<<<<<<<
 *             self.deboost(self.fluxes, mesh.faces, dim)
 * 
 */
  __pyx_t_2 = (__pyx_v_boost != 0);
  if (__pyx_t_2) {

    /* "phd/riemann/riemann.pyx":373
 * 
 *         if boost:
 *             self.deboost(self.fluxes, mesh.faces, dim)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void get_waves(self, double dl, double ul, double pl,
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base.fluxes);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = ((PyObject *)__pyx_v_mesh->faces);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = ((struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLL *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.deboost(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_4), __pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "phd/riemann/riemann.pyx":372
 *                     fmv[k][i] = _dr*vr[k][i]*(Vnr - wn) + _pr*nx[k][i]
 * 
 *         if boost:             # <<<<<<<<<<<<<<
 *             self.deboost(self.fluxes, mesh.faces, dim)
 * 
 */
  }

  /* "phd/riemann/riemann.pyx":243
 *         super(HLL, self).__init__(cfl, **kwargs)
 * 
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction, double gamma, int dim):             # <<<<<<<<<<<<<<
 *         """Solve the riemann problem by HLL solver.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.riemann.riemann.HLL.riemann_solver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dl);
  __Pyx_XDECREF((PyObject *)__pyx_v_pl);
  __Pyx_XDECREF((PyObject *)__pyx_v_dr);
  __Pyx_XDECREF((PyObject *)__pyx_v_pr);
  __Pyx_XDECREF((PyObject *)__pyx_v_fm);
  __Pyx_XDECREF((PyObject *)__pyx_v_fe);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":375
 *             self.deboost(self.fluxes, mesh.faces, dim)
 * 
 *     cdef inline void get_waves(self, double dl, double ul, double pl,             # <<<<<<<<<<<<<<
 *             double dr, double ur, double pr,
 *             double gamma, double *sl, double *sc, double *sr):
 */

static CYTHON_INLINE void __pyx_f_3phd_7riemann_7riemann_3HLL_get_waves(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self, double __pyx_v_dl, double __pyx_v_ul, double __pyx_v_pl, double __pyx_v_dr, double __pyx_v_ur, double __pyx_v_pr, double __pyx_v_gamma, double *__pyx_v_sl, double *__pyx_v_sc, double *__pyx_v_sr) {
  double __pyx_v_p_star;
  double __pyx_v_u_star;
  double __pyx_v_d_avg;
  double __pyx_v_c_avg;
  double __pyx_v__sl;
  double __pyx_v__sr;
  double __pyx_v__sc;
  double __pyx_v_cl;
  double __pyx_v_cr;
  double __pyx_v_z;
  double __pyx_v_plr;
  double __pyx_v_Q;
  double __pyx_v_Al;
  double __pyx_v_Ar;
  double __pyx_v_Bl;
  double __pyx_v_Br;
  double __pyx_v_gl;
  double __pyx_v_gr;
  double __pyx_v_p_min;
  double __pyx_v_p_max;
  double __pyx_v_c_floor;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_waves", 0);

  /* "phd/riemann/riemann.pyx":423
 * 
 *         cdef double z, plr
 *         cdef double Q = 2.             # <<<<<<<<<<<<<<
 *         cdef double Al, Ar, Bl, Br
 *         cdef double gl, gr
 */
  __pyx_v_Q = 2.;

  /* "phd/riemann/riemann.pyx":429
 *         cdef double p_min
 *         cdef double p_max
 *         cdef double c_floor = 1.0E-10             # <<<<<<<<<<<<<<
 * 
 *         cl = fmax(sqrt(gamma*pl/dl), c_floor)
 */
  __pyx_v_c_floor = 1.0E-10;

  /* "phd/riemann/riemann.pyx":431
 *         cdef double c_floor = 1.0E-10
 * 
 *         cl = fmax(sqrt(gamma*pl/dl), c_floor)             # <<<<<<<<<<<<<<
 *         cr = fmax(sqrt(gamma*pr/dr), c_floor)
 * 
 */
  __pyx_t_1 = (__pyx_v_gamma * __pyx_v_pl);
  if (unlikely(__pyx_v_dl == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 431, __pyx_L1_error)
  }
  __pyx_v_cl = fmax(sqrt((__pyx_t_1 / __pyx_v_dl)), __pyx_v_c_floor);

  /* "phd/riemann/riemann.pyx":432
 * 
 *         cl = fmax(sqrt(gamma*pl/dl), c_floor)
 *         cr = fmax(sqrt(gamma*pr/dr), c_floor)             # <<<<<<<<<<<<<<
 * 
 *         d_avg = .5*(dl + dr)
 */
  __pyx_t_1 = (__pyx_v_gamma * __pyx_v_pr);
  if (unlikely(__pyx_v_dr == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 432, __pyx_L1_error)
  }
  __pyx_v_cr = fmax(sqrt((__pyx_t_1 / __pyx_v_dr)), __pyx_v_c_floor);

  /* "phd/riemann/riemann.pyx":434
 *         cr = fmax(sqrt(gamma*pr/dr), c_floor)
 * 
 *         d_avg = .5*(dl + dr)             # <<<<<<<<<<<<<<
 *         c_avg = .5*(cl + cr)
 * 
 */
  __pyx_v_d_avg = (.5 * (__pyx_v_dl + __pyx_v_dr));

  /* "phd/riemann/riemann.pyx":435
 * 
 *         d_avg = .5*(dl + dr)
 *         c_avg = .5*(cl + cr)             # <<<<<<<<<<<<<<
 * 
 *         # estimate p* Eq. 9.20
 */
  __pyx_v_c_avg = (.5 * (__pyx_v_cl + __pyx_v_cr));

  /* "phd/riemann/riemann.pyx":438
 * 
 *         # estimate p* Eq. 9.20
 *         p_star = fmax(0., .5*(pl + pr) + .5*(ul - ur)*d_avg*c_avg)             # <<<<<<<<<<<<<<
 * 
 *         p_min = fmin(pl, pr)
 */
  __pyx_v_p_star = fmax(0., ((.5 * (__pyx_v_pl + __pyx_v_pr)) + (((.5 * (__pyx_v_ul - __pyx_v_ur)) * __pyx_v_d_avg) * __pyx_v_c_avg)));

  /* "phd/riemann/riemann.pyx":440
 *         p_star = fmax(0., .5*(pl + pr) + .5*(ul - ur)*d_avg*c_avg)
 * 
 *         p_min = fmin(pl, pr)             # <<<<<<<<<<<<<<
 *         p_max = fmax(pl, pr)
 * 
 */
  __pyx_v_p_min = fmin(__pyx_v_pl, __pyx_v_pr);

  /* "phd/riemann/riemann.pyx":441
 * 
 *         p_min = fmin(pl, pr)
 *         p_max = fmax(pl, pr)             # <<<<<<<<<<<<<<
 * 
 *         if(((p_max/p_min) < Q) and ((p_min < p_star) and (p_star < p_max))):
 */
  __pyx_v_p_max = fmax(__pyx_v_pl, __pyx_v_pr);

  /* "phd/riemann/riemann.pyx":443
 *         p_max = fmax(pl, pr)
 * 
 *         if(((p_max/p_min) < Q) and ((p_min < p_star) and (p_star < p_max))):             # <<<<<<<<<<<<<<
 * 
 *             u_star = .5*(ul + ur) + .5*(pl - pr)/(d_avg*c_avg)
 */
  if (unlikely(__pyx_v_p_min == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 443, __pyx_L1_error)
  }
  __pyx_t_3 = (((__pyx_v_p_max / __pyx_v_p_min) < __pyx_v_Q) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_p_min < __pyx_v_p_star) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_p_star < __pyx_v_p_max) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "phd/riemann/riemann.pyx":445
 *         if(((p_max/p_min) < Q) and ((p_min < p_star) and (p_star < p_max))):
 * 
 *             u_star = .5*(ul + ur) + .5*(pl - pr)/(d_avg*c_avg)             # <<<<<<<<<<<<<<
 * 
 *         elif(p_star <= p_min):
 */
    __pyx_t_1 = (.5 * (__pyx_v_pl - __pyx_v_pr));
    __pyx_t_4 = (__pyx_v_d_avg * __pyx_v_c_avg);
    if (unlikely(__pyx_t_4 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 445, __pyx_L1_error)
    }
    __pyx_v_u_star = ((.5 * (__pyx_v_ul + __pyx_v_ur)) + (__pyx_t_1 / __pyx_t_4));

    /* "phd/riemann/riemann.pyx":443
 *         p_max = fmax(pl, pr)
 * 
 *         if(((p_max/p_min) < Q) and ((p_min < p_star) and (p_star < p_max))):             # <<<<<<<<<<<<<<
 * 
 *             u_star = .5*(ul + ur) + .5*(pl - pr)/(d_avg*c_avg)
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":447
 *             u_star = .5*(ul + ur) + .5*(pl - pr)/(d_avg*c_avg)
 * 
 *         elif(p_star <= p_min):             # <<<<<<<<<<<<<<
 * 
 *             # two rarefaction riemann solver (TRRS)
 */
  __pyx_t_2 = ((__pyx_v_p_star <= __pyx_v_p_min) != 0);
  if (__pyx_t_2) {

    /* "phd/riemann/riemann.pyx":451
 *             # two rarefaction riemann solver (TRRS)
 *             # Eq. 9.31
 *             z = (gamma - 1.)/(2.*gamma);             # <<<<<<<<<<<<<<
 * 
 *             # Eq. 9.35
 */
    __pyx_t_4 = (__pyx_v_gamma - 1.);
    __pyx_t_1 = (2. * __pyx_v_gamma);
    if (unlikely(__pyx_t_1 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 451, __pyx_L1_error)
    }
    __pyx_v_z = (__pyx_t_4 / __pyx_t_1);

    /* "phd/riemann/riemann.pyx":454
 * 
 *             # Eq. 9.35
 *             plr = pow(pl/pr, z);             # <<<<<<<<<<<<<<
 * 
 *             u_star = (plr*ul/cl + ur/cr + 2.*(plr - 1.)/(gamma - 1.))/\
 */
    if (unlikely(__pyx_v_pr == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 454, __pyx_L1_error)
    }
    __pyx_v_plr = pow((__pyx_v_pl / __pyx_v_pr), __pyx_v_z);

    /* "phd/riemann/riemann.pyx":456
 *             plr = pow(pl/pr, z);
 * 
 *             u_star = (plr*ul/cl + ur/cr + 2.*(plr - 1.)/(gamma - 1.))/\             # <<<<<<<<<<<<<<
 *                     (plr/cl + 1./cr)
 * 
 */
    __pyx_t_1 = (__pyx_v_plr * __pyx_v_ul);
    if (unlikely(__pyx_v_cl == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 456, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_cr == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 456, __pyx_L1_error)
    }
    __pyx_t_4 = (2. * (__pyx_v_plr - 1.));
    __pyx_t_5 = (__pyx_v_gamma - 1.);
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 456, __pyx_L1_error)
    }
    __pyx_t_6 = (((__pyx_t_1 / __pyx_v_cl) + (__pyx_v_ur / __pyx_v_cr)) + (__pyx_t_4 / __pyx_t_5));

    /* "phd/riemann/riemann.pyx":457
 * 
 *             u_star = (plr*ul/cl + ur/cr + 2.*(plr - 1.)/(gamma - 1.))/\
 *                     (plr/cl + 1./cr)             # <<<<<<<<<<<<<<
 * 
 *             # estimate p* from two rarefaction aprroximation Eq. 9.36
 */
    if (unlikely(__pyx_v_cl == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 457, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_cr == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 457, __pyx_L1_error)
    }
    __pyx_t_5 = ((__pyx_v_plr / __pyx_v_cl) + (1. / __pyx_v_cr));

    /* "phd/riemann/riemann.pyx":456
 *             plr = pow(pl/pr, z);
 * 
 *             u_star = (plr*ul/cl + ur/cr + 2.*(plr - 1.)/(gamma - 1.))/\             # <<<<<<<<<<<<<<
 *                     (plr/cl + 1./cr)
 * 
 */
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 456, __pyx_L1_error)
    }
    __pyx_v_u_star = (__pyx_t_6 / __pyx_t_5);

    /* "phd/riemann/riemann.pyx":460
 * 
 *             # estimate p* from two rarefaction aprroximation Eq. 9.36
 *             p_star  = .5*pl*pow(1. + (gamma - 1.)*(ul - u_star)/(2.*cl), 1./z)             # <<<<<<<<<<<<<<
 *             p_star += .5*pr*pow(1. + (gamma - 1.)*(u_star - ur)/(2.*cr), 1./z)
 * 
 */
    __pyx_t_5 = ((__pyx_v_gamma - 1.) * (__pyx_v_ul - __pyx_v_u_star));
    __pyx_t_6 = (2. * __pyx_v_cl);
    if (unlikely(__pyx_t_6 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 460, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_z == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 460, __pyx_L1_error)
    }
    __pyx_v_p_star = ((.5 * __pyx_v_pl) * pow((1. + (__pyx_t_5 / __pyx_t_6)), (1. / __pyx_v_z)));

    /* "phd/riemann/riemann.pyx":461
 *             # estimate p* from two rarefaction aprroximation Eq. 9.36
 *             p_star  = .5*pl*pow(1. + (gamma - 1.)*(ul - u_star)/(2.*cl), 1./z)
 *             p_star += .5*pr*pow(1. + (gamma - 1.)*(u_star - ur)/(2.*cr), 1./z)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_6 = ((__pyx_v_gamma - 1.) * (__pyx_v_u_star - __pyx_v_ur));
    __pyx_t_5 = (2. * __pyx_v_cr);
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 461, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_z == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 461, __pyx_L1_error)
    }
    __pyx_v_p_star = (__pyx_v_p_star + ((.5 * __pyx_v_pr) * pow((1. + (__pyx_t_6 / __pyx_t_5)), (1. / __pyx_v_z))));

    /* "phd/riemann/riemann.pyx":447
 *             u_star = .5*(ul + ur) + .5*(pl - pr)/(d_avg*c_avg)
 * 
 *         elif(p_star <= p_min):             # <<<<<<<<<<<<<<
 * 
 *             # two rarefaction riemann solver (TRRS)
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":467
 *             # two shock riemann solver (TSRS)
 *             # Eq. 9.31
 *             Al = 2./((gamma + 1.)*dl)             # <<<<<<<<<<<<<<
 *             Ar = 2./((gamma + 1.)*dr)
 * 
 */
  /*else*/ {
    __pyx_t_5 = ((__pyx_v_gamma + 1.) * __pyx_v_dl);
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 467, __pyx_L1_error)
    }
    __pyx_v_Al = (2. / __pyx_t_5);

    /* "phd/riemann/riemann.pyx":468
 *             # Eq. 9.31
 *             Al = 2./((gamma + 1.)*dl)
 *             Ar = 2./((gamma + 1.)*dr)             # <<<<<<<<<<<<<<
 * 
 *             Bl = pl*((gamma - 1.)/(gamma + 1.))
 */
    __pyx_t_5 = ((__pyx_v_gamma + 1.) * __pyx_v_dr);
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 468, __pyx_L1_error)
    }
    __pyx_v_Ar = (2. / __pyx_t_5);

    /* "phd/riemann/riemann.pyx":470
 *             Ar = 2./((gamma + 1.)*dr)
 * 
 *             Bl = pl*((gamma - 1.)/(gamma + 1.))             # <<<<<<<<<<<<<<
 *             Br = pr*((gamma - 1.)/(gamma + 1.))
 * 
 */
    __pyx_t_5 = (__pyx_v_gamma - 1.);
    __pyx_t_6 = (__pyx_v_gamma + 1.);
    if (unlikely(__pyx_t_6 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 470, __pyx_L1_error)
    }
    __pyx_v_Bl = (__pyx_v_pl * (__pyx_t_5 / __pyx_t_6));

    /* "phd/riemann/riemann.pyx":471
 * 
 *             Bl = pl*((gamma - 1.)/(gamma + 1.))
 *             Br = pr*((gamma - 1.)/(gamma + 1.))             # <<<<<<<<<<<<<<
 * 
 *             # Eq. 9.41
 */
    __pyx_t_6 = (__pyx_v_gamma - 1.);
    __pyx_t_5 = (__pyx_v_gamma + 1.);
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 471, __pyx_L1_error)
    }
    __pyx_v_Br = (__pyx_v_pr * (__pyx_t_6 / __pyx_t_5));

    /* "phd/riemann/riemann.pyx":474
 * 
 *             # Eq. 9.41
 *             gl = sqrt(Al/(p_star + Bl))             # <<<<<<<<<<<<<<
 *             gr = sqrt(Ar/(p_star + Br))
 * 
 */
    __pyx_t_5 = (__pyx_v_p_star + __pyx_v_Bl);
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 474, __pyx_L1_error)
    }
    __pyx_v_gl = sqrt((__pyx_v_Al / __pyx_t_5));

    /* "phd/riemann/riemann.pyx":475
 *             # Eq. 9.41
 *             gl = sqrt(Al/(p_star + Bl))
 *             gr = sqrt(Ar/(p_star + Br))             # <<<<<<<<<<<<<<
 * 
 *             # estimate p* from two shock aprroximation Eq. 9.43
 */
    __pyx_t_5 = (__pyx_v_p_star + __pyx_v_Br);
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 475, __pyx_L1_error)
    }
    __pyx_v_gr = sqrt((__pyx_v_Ar / __pyx_t_5));

    /* "phd/riemann/riemann.pyx":478
 * 
 *             # estimate p* from two shock aprroximation Eq. 9.43
 *             p_star = (gl*pl + gr*pr - (ur - ul))/(gl + gr)             # <<<<<<<<<<<<<<
 *             u_star = .5*(ul + ur) + .5*(gr*(p_star - pr) - gl*(p_star - pl))
 * 
 */
    __pyx_t_5 = (((__pyx_v_gl * __pyx_v_pl) + (__pyx_v_gr * __pyx_v_pr)) - (__pyx_v_ur - __pyx_v_ul));
    __pyx_t_6 = (__pyx_v_gl + __pyx_v_gr);
    if (unlikely(__pyx_t_6 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 478, __pyx_L1_error)
    }
    __pyx_v_p_star = (__pyx_t_5 / __pyx_t_6);

    /* "phd/riemann/riemann.pyx":479
 *             # estimate p* from two shock aprroximation Eq. 9.43
 *             p_star = (gl*pl + gr*pr - (ur - ul))/(gl + gr)
 *             u_star = .5*(ul + ur) + .5*(gr*(p_star - pr) - gl*(p_star - pl))             # <<<<<<<<<<<<<<
 * 
 *         # calculate fastest left wave speed estimates Eq. 10.68-10.69
 */
    __pyx_v_u_star = ((.5 * (__pyx_v_ul + __pyx_v_ur)) + (.5 * ((__pyx_v_gr * (__pyx_v_p_star - __pyx_v_pr)) - (__pyx_v_gl * (__pyx_v_p_star - __pyx_v_pl)))));
  }
  __pyx_L3:;

  /* "phd/riemann/riemann.pyx":482
 * 
 *         # calculate fastest left wave speed estimates Eq. 10.68-10.69
 *         if(p_star <= pl):             # <<<<<<<<<<<<<<
 *             # rarefaction wave
 *             _sl = ul - cl
 */
  __pyx_t_2 = ((__pyx_v_p_star <= __pyx_v_pl) != 0);
  if (__pyx_t_2) {

    /* "phd/riemann/riemann.pyx":484
 *         if(p_star <= pl):
 *             # rarefaction wave
 *             _sl = ul - cl             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_v__sl = (__pyx_v_ul - __pyx_v_cl);

    /* "phd/riemann/riemann.pyx":482
 * 
 *         # calculate fastest left wave speed estimates Eq. 10.68-10.69
 *         if(p_star <= pl):             # <<<<<<<<<<<<<<
 *             # rarefaction wave
 *             _sl = ul - cl
 */
    goto __pyx_L7;
  }

  /* "phd/riemann/riemann.pyx":488
 *         else:
 *             # shock wave
 *             _sl = ul - cl*sqrt(1.+((gamma+1.)/(2.*gamma))*(p_star/pl - 1.))             # <<<<<<<<<<<<<<
 * 
 *         # calculate fastest right wave speed estimates Eq. 10.68-10.69
 */
  /*else*/ {
    __pyx_t_6 = (__pyx_v_gamma + 1.);
    __pyx_t_5 = (2. * __pyx_v_gamma);
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 488, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_pl == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 488, __pyx_L1_error)
    }
    __pyx_v__sl = (__pyx_v_ul - (__pyx_v_cl * sqrt((1. + ((__pyx_t_6 / __pyx_t_5) * ((__pyx_v_p_star / __pyx_v_pl) - 1.))))));
  }
  __pyx_L7:;

  /* "phd/riemann/riemann.pyx":491
 * 
 *         # calculate fastest right wave speed estimates Eq. 10.68-10.69
 *         if(p_star <= pr):             # <<<<<<<<<<<<<<
 *             # Rarefaction wave
 *             _sr = ur + cr
 */
  __pyx_t_2 = ((__pyx_v_p_star <= __pyx_v_pr) != 0);
  if (__pyx_t_2) {

    /* "phd/riemann/riemann.pyx":493
 *         if(p_star <= pr):
 *             # Rarefaction wave
 *             _sr = ur + cr             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_v__sr = (__pyx_v_ur + __pyx_v_cr);

    /* "phd/riemann/riemann.pyx":491
 * 
 *         # calculate fastest right wave speed estimates Eq. 10.68-10.69
 *         if(p_star <= pr):             # <<<<<<<<<<<<<<
 *             # Rarefaction wave
 *             _sr = ur + cr
 */
    goto __pyx_L8;
  }

  /* "phd/riemann/riemann.pyx":497
 *         else:
 *             # shock wave
 *             _sr = ur + cr*sqrt(1. + ((gamma+1.)/(2.*gamma))*(p_star/pr - 1.))             # <<<<<<<<<<<<<<
 * 
 *         # contact wave speed Eq. 10.70
 */
  /*else*/ {
    __pyx_t_5 = (__pyx_v_gamma + 1.);
    __pyx_t_6 = (2. * __pyx_v_gamma);
    if (unlikely(__pyx_t_6 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 497, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_pr == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 497, __pyx_L1_error)
    }
    __pyx_v__sr = (__pyx_v_ur + (__pyx_v_cr * sqrt((1. + ((__pyx_t_5 / __pyx_t_6) * ((__pyx_v_p_star / __pyx_v_pr) - 1.))))));
  }
  __pyx_L8:;

  /* "phd/riemann/riemann.pyx":500
 * 
 *         # contact wave speed Eq. 10.70
 *         _sc = (pr - pl + dl*ul*(_sl - ul) - dr*ur*(_sr - ur))/(dl*(_sl - ul) - dr*(_sr - ur))             # <<<<<<<<<<<<<<
 * 
 *         sl[0] = _sl
 */
  __pyx_t_6 = (((__pyx_v_pr - __pyx_v_pl) + ((__pyx_v_dl * __pyx_v_ul) * (__pyx_v__sl - __pyx_v_ul))) - ((__pyx_v_dr * __pyx_v_ur) * (__pyx_v__sr - __pyx_v_ur)));
  __pyx_t_5 = ((__pyx_v_dl * (__pyx_v__sl - __pyx_v_ul)) - (__pyx_v_dr * (__pyx_v__sr - __pyx_v_ur)));
  if (unlikely(__pyx_t_5 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 500, __pyx_L1_error)
  }
  __pyx_v__sc = (__pyx_t_6 / __pyx_t_5);

  /* "phd/riemann/riemann.pyx":502
 *         _sc = (pr - pl + dl*ul*(_sl - ul) - dr*ur*(_sr - ur))/(dl*(_sl - ul) - dr*(_sr - ur))
 * 
 *         sl[0] = _sl             # <<<<<<<<<<<<<<
 *         sc[0] = _sc
 *         sr[0] = _sr
 */
  (__pyx_v_sl[0]) = __pyx_v__sl;

  /* "phd/riemann/riemann.pyx":503
 * 
 *         sl[0] = _sl
 *         sc[0] = _sc             # <<<<<<<<<<<<<<
 *         sr[0] = _sr
 * 
 */
  (__pyx_v_sc[0]) = __pyx_v__sc;

  /* "phd/riemann/riemann.pyx":504
 *         sl[0] = _sl
 *         sc[0] = _sc
 *         sr[0] = _sr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_sr[0]) = __pyx_v__sr;

  /* "phd/riemann/riemann.pyx":375
 *             self.deboost(self.fluxes, mesh.faces, dim)
 * 
 *     cdef inline void get_waves(self, double dl, double ul, double pl,             # <<<<<<<<<<<<<<
 *             double dr, double ur, double pr,
 *             double gamma, double *sl, double *sc, double *sr):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("phd.riemann.riemann.HLL.get_waves", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "phd/riemann/riemann.pxd":26
 * 
 * cdef class HLL(RiemannBase):
 *     cdef public bint boost             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void get_waves(self, double dl, double ul, double pl,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_3HLL_5boost_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_3HLL_5boost_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_3HLL_5boost___get__(((struct __pyx_obj_3phd_7riemann_7riemann_HLL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_3HLL_5boost___get__(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->boost); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.HLL.boost.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7riemann_7riemann_3HLL_5boost_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7riemann_7riemann_3HLL_5boost_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_3HLL_5boost_2__set__(((struct __pyx_obj_3phd_7riemann_7riemann_HLL *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7riemann_7riemann_3HLL_5boost_2__set__(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_v_self->boost = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.riemann.riemann.HLL.boost.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_3HLL_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_3HLL_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_3HLL_2__reduce_cython__(((struct __pyx_obj_3phd_7riemann_7riemann_HLL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_3HLL_2__reduce_cython__(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->boost); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.cfl); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.fields_registered); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.flux_field_groups);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.flux_field_groups);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_self->__pyx_base.flux_field_groups);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.flux_fields);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.flux_fields);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_v_self->__pyx_base.flux_fields);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.fluxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.fluxes));
  PyTuple_SET_ITEM(__pyx_t_4, 5, ((PyObject *)__pyx_v_self->__pyx_base.fluxes));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_HLL, (type(self), 0xcaafa99, None), state
 */
  /*else*/ {
    __pyx_t_5 = (__pyx_v_self->__pyx_base.flux_field_groups != ((PyObject*)Py_None));
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_v_self->__pyx_base.flux_fields != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base.fluxes) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_HLL, (type(self), 0xcaafa99, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:
 *         return __pyx_unpickle_HLL, (type(self), 0xcaafa99, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_HLL, (type(self), 0xcaafa99, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_HLL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_212531865);
    __Pyx_GIVEREF(__pyx_int_212531865);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_212531865);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_HLL, (type(self), 0xcaafa99, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_HLL, (type(self), 0xcaafa99, None), state
 *     else:
 *         return __pyx_unpickle_HLL, (type(self), 0xcaafa99, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_HLL__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_HLL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_212531865);
    __Pyx_GIVEREF(__pyx_int_212531865);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_212531865);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.riemann.riemann.HLL.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_HLL, (type(self), 0xcaafa99, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_HLL__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_3HLL_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_3HLL_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_3HLL_4__setstate_cython__(((struct __pyx_obj_3phd_7riemann_7riemann_HLL *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_3HLL_4__setstate_cython__(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_HLL, (type(self), 0xcaafa99, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_HLL__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_3phd_7riemann_7riemann___pyx_unpickle_HLL__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_HLL, (type(self), 0xcaafa99, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_HLL__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.HLL.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":521
 * 
 *     """
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction, double gamma, int dim):             # <<<<<<<<<<<<<<
 *         """Solve the riemann problem by HLLC solver.
 * 
 */

static PyObject *__pyx_f_3phd_7riemann_7riemann_4HLLC_riemann_solver(struct __pyx_obj_3phd_7riemann_7riemann_HLLC *__pyx_v_self, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, double __pyx_v_gamma, int __pyx_v_dim) {
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dr = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pr = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_fm = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_fe = 0;
  int __pyx_v_i;
  int __pyx_v_k;
  double __pyx_v__dl;
  double __pyx_v__pl;
  double __pyx_v__vl[3];
  double __pyx_v_el;
  CYTHON_UNUSED double __pyx_v_cl;
  double __pyx_v__dr;
  double __pyx_v__pr;
  double __pyx_v__vr[3];
  double __pyx_v_er;
  CYTHON_UNUSED double __pyx_v_cr;
  double __pyx_v_n[3];
  double __pyx_v_factor_1;
  double __pyx_v_factor_2;
  double __pyx_v_frho;
  double __pyx_v_wn;
  double __pyx_v_Vnl;
  double __pyx_v_Vnr;
  double __pyx_v_sl;
  double __pyx_v_sr;
  double __pyx_v_s_contact;
  double __pyx_v_vl_sq;
  double __pyx_v_vr_sq;
  __pyx_t_5numpy_float64_t *__pyx_v_vl[3];
  __pyx_t_5numpy_float64_t *__pyx_v_vr[3];
  __pyx_t_5numpy_float64_t *__pyx_v_fmv[3];
  __pyx_t_5numpy_float64_t *__pyx_v_nx[3];
  __pyx_t_5numpy_float64_t *__pyx_v_wx[3];
  int __pyx_v_boost;
  int __pyx_v_num_faces;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  double __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("riemann_solver", 0);

  /* "phd/riemann/riemann.pyx":541
 *         """
 *         # left state primitive variables
 *         cdef DoubleArray dl = reconstruction.left_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pl = reconstruction.left_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->left_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->left_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 541, __pyx_L1_error)
  __pyx_v_dl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":542
 *         # left state primitive variables
 *         cdef DoubleArray dl = reconstruction.left_states.get_carray("density")
 *         cdef DoubleArray pl = reconstruction.left_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         # left state primitive variables
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->left_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->left_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 542, __pyx_L1_error)
  __pyx_v_pl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":545
 * 
 *         # left state primitive variables
 *         cdef DoubleArray dr = reconstruction.right_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pr = reconstruction.right_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->right_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->right_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 545, __pyx_L1_error)
  __pyx_v_dr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":546
 *         # left state primitive variables
 *         cdef DoubleArray dr = reconstruction.right_states.get_carray("density")
 *         cdef DoubleArray pr = reconstruction.right_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         cdef DoubleArray fm = self.fluxes.get_carray("mass")
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->right_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->right_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 546, __pyx_L1_error)
  __pyx_v_pr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":548
 *         cdef DoubleArray pr = reconstruction.right_states.get_carray("pressure")
 * 
 *         cdef DoubleArray fm = self.fluxes.get_carray("mass")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray fe = self.fluxes.get_carray("energy")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.__pyx_base.fluxes->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.__pyx_base.fluxes, __pyx_n_s_mass, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 548, __pyx_L1_error)
  __pyx_v_fm = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":549
 * 
 *         cdef DoubleArray fm = self.fluxes.get_carray("mass")
 *         cdef DoubleArray fe = self.fluxes.get_carray("energy")             # <<<<<<<<<<<<<<
 * 
 *         # local variables
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.__pyx_base.fluxes->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.__pyx_base.fluxes, __pyx_n_s_energy, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 549, __pyx_L1_error)
  __pyx_v_fe = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":565
 *         cdef double fac1, fac2, fac3
 * 
 *         cdef int boost = self.boost             # <<<<<<<<<<<<<<
 *         cdef int num_faces = mesh.faces.get_carray_size()
 * 
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.boost;
  __pyx_v_boost = __pyx_t_2;

  /* "phd/riemann/riemann.pyx":566
 * 
 *         cdef int boost = self.boost
 *         cdef int num_faces = mesh.faces.get_carray_size()             # <<<<<<<<<<<<<<
 * 
 *         phdLogger.info("HLLC: Starting riemann")
 */
  __pyx_v_num_faces = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0);

  /* "phd/riemann/riemann.pyx":568
 *         cdef int num_faces = mesh.faces.get_carray_size()
 * 
 *         phdLogger.info("HLLC: Starting riemann")             # <<<<<<<<<<<<<<
 * 
 *         # particle velocities left/right face
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phdLogger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_s_HLLC_Starting_riemann) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_HLLC_Starting_riemann);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":572
 *         # particle velocities left/right face
 *         reconstruction.left_states.pointer_groups(vl,
 *                 reconstruction.left_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 *         reconstruction.right_states.pointer_groups(vr,
 *                 reconstruction.right_states.carray_named_groups["velocity"])
 */
  if (unlikely(__pyx_v_reconstruction->left_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 572, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_reconstruction->left_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 572, __pyx_L1_error)

  /* "phd/riemann/riemann.pyx":571
 * 
 *         # particle velocities left/right face
 *         reconstruction.left_states.pointer_groups(vl,             # <<<<<<<<<<<<<<
 *                 reconstruction.left_states.carray_named_groups["velocity"])
 *         reconstruction.right_states.pointer_groups(vr,
 */
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->left_states->__pyx_vtab)->pointer_groups(__pyx_v_reconstruction->left_states, __pyx_v_vl, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":574
 *                 reconstruction.left_states.carray_named_groups["velocity"])
 *         reconstruction.right_states.pointer_groups(vr,
 *                 reconstruction.right_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # face momentum fluxes
 */
  if (unlikely(__pyx_v_reconstruction->right_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 574, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_reconstruction->right_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 574, __pyx_L1_error)

  /* "phd/riemann/riemann.pyx":573
 *         reconstruction.left_states.pointer_groups(vl,
 *                 reconstruction.left_states.carray_named_groups["velocity"])
 *         reconstruction.right_states.pointer_groups(vr,             # <<<<<<<<<<<<<<
 *                 reconstruction.right_states.carray_named_groups["velocity"])
 * 
 */
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->right_states->__pyx_vtab)->pointer_groups(__pyx_v_reconstruction->right_states, __pyx_v_vr, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":577
 * 
 *         # face momentum fluxes
 *         self.fluxes.pointer_groups(fmv, self.fluxes.carray_named_groups["momentum"])             # <<<<<<<<<<<<<<
 * 
 *         # face normal and velocity
 */
  if (unlikely(__pyx_v_self->__pyx_base.__pyx_base.fluxes->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 577, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.__pyx_base.fluxes->carray_named_groups, __pyx_n_s_momentum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 577, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.__pyx_base.fluxes->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.__pyx_base.fluxes, __pyx_v_fmv, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":580
 * 
 *         # face normal and velocity
 *         mesh.faces.pointer_groups(nx, mesh.faces.carray_named_groups["normal"])             # <<<<<<<<<<<<<<
 *         mesh.faces.pointer_groups(wx, mesh.faces.carray_named_groups["velocity"])
 * 
 */
  if (unlikely(__pyx_v_mesh->faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 580, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_mesh->faces->carray_named_groups, __pyx_n_s_normal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 580, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->pointer_groups(__pyx_v_mesh->faces, __pyx_v_nx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":581
 *         # face normal and velocity
 *         mesh.faces.pointer_groups(nx, mesh.faces.carray_named_groups["normal"])
 *         mesh.faces.pointer_groups(wx, mesh.faces.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         for i in range(num_faces):
 */
  if (unlikely(__pyx_v_mesh->faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 581, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_mesh->faces->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 581, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->pointer_groups(__pyx_v_mesh->faces, __pyx_v_wx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":583
 *         mesh.faces.pointer_groups(wx, mesh.faces.carray_named_groups["velocity"])
 * 
 *         for i in range(num_faces):             # <<<<<<<<<<<<<<
 * 
 *             # left state
 */
  __pyx_t_5 = __pyx_v_num_faces;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "phd/riemann/riemann.pyx":586
 * 
 *             # left state
 *             _dl = dl.data[i]             # <<<<<<<<<<<<<<
 *             _pl = pl.data[i]
 * 
 */
    __pyx_v__dl = (__pyx_v_dl->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":587
 *             # left state
 *             _dl = dl.data[i]
 *             _pl = pl.data[i]             # <<<<<<<<<<<<<<
 * 
 *             # right state
 */
    __pyx_v__pl = (__pyx_v_pl->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":590
 * 
 *             # right state
 *             _dr = dr.data[i]             # <<<<<<<<<<<<<<
 *             _pr = pr.data[i]
 * 
 */
    __pyx_v__dr = (__pyx_v_dr->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":591
 *             # right state
 *             _dr = dr.data[i]
 *             _pr = pr.data[i]             # <<<<<<<<<<<<<<
 * 
 *             cl = sqrt(gamma*_pl/_dl)
 */
    __pyx_v__pr = (__pyx_v_pr->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":593
 *             _pr = pr.data[i]
 * 
 *             cl = sqrt(gamma*_pl/_dl)             # <<<<<<<<<<<<<<
 *             cr = sqrt(gamma*_pr/_dr)
 * 
 */
    __pyx_t_8 = (__pyx_v_gamma * __pyx_v__pl);
    if (unlikely(__pyx_v__dl == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 593, __pyx_L1_error)
    }
    __pyx_v_cl = sqrt((__pyx_t_8 / __pyx_v__dl));

    /* "phd/riemann/riemann.pyx":594
 * 
 *             cl = sqrt(gamma*_pl/_dl)
 *             cr = sqrt(gamma*_pr/_dr)             # <<<<<<<<<<<<<<
 * 
 *             Vnl = Vnr = 0.0
 */
    __pyx_t_8 = (__pyx_v_gamma * __pyx_v__pr);
    if (unlikely(__pyx_v__dr == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 594, __pyx_L1_error)
    }
    __pyx_v_cr = sqrt((__pyx_t_8 / __pyx_v__dr));

    /* "phd/riemann/riemann.pyx":596
 *             cr = sqrt(gamma*_pr/_dr)
 * 
 *             Vnl = Vnr = 0.0             # <<<<<<<<<<<<<<
 *             vl_sq = vr_sq = wn = 0.0
 *             for k in range(dim):
 */
    __pyx_v_Vnl = 0.0;
    __pyx_v_Vnr = 0.0;

    /* "phd/riemann/riemann.pyx":597
 * 
 *             Vnl = Vnr = 0.0
 *             vl_sq = vr_sq = wn = 0.0             # <<<<<<<<<<<<<<
 *             for k in range(dim):
 * 
 */
    __pyx_v_vl_sq = 0.0;
    __pyx_v_vr_sq = 0.0;
    __pyx_v_wn = 0.0;

    /* "phd/riemann/riemann.pyx":598
 *             Vnl = Vnr = 0.0
 *             vl_sq = vr_sq = wn = 0.0
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 * 
 *                 _vl[k] = vl[k][i]
 */
    __pyx_t_9 = __pyx_v_dim;
    __pyx_t_10 = __pyx_t_9;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_k = __pyx_t_11;

      /* "phd/riemann/riemann.pyx":600
 *             for k in range(dim):
 * 
 *                 _vl[k] = vl[k][i]             # <<<<<<<<<<<<<<
 *                 _vr[k] = vr[k][i]
 * 
 */
      (__pyx_v__vl[__pyx_v_k]) = ((__pyx_v_vl[__pyx_v_k])[__pyx_v_i]);

      /* "phd/riemann/riemann.pyx":601
 * 
 *                 _vl[k] = vl[k][i]
 *                 _vr[k] = vr[k][i]             # <<<<<<<<<<<<<<
 * 
 *                 n[k] = nx[k][i]
 */
      (__pyx_v__vr[__pyx_v_k]) = ((__pyx_v_vr[__pyx_v_k])[__pyx_v_i]);

      /* "phd/riemann/riemann.pyx":603
 *                 _vr[k] = vr[k][i]
 * 
 *                 n[k] = nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                 # left/right velocity square
 */
      (__pyx_v_n[__pyx_v_k]) = ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i]);

      /* "phd/riemann/riemann.pyx":606
 * 
 *                 # left/right velocity square
 *                 vl_sq += _vl[k]*_vl[k]             # <<<<<<<<<<<<<<
 *                 vr_sq += _vr[k]*_vr[k]
 * 
 */
      __pyx_v_vl_sq = (__pyx_v_vl_sq + ((__pyx_v__vl[__pyx_v_k]) * (__pyx_v__vl[__pyx_v_k])));

      /* "phd/riemann/riemann.pyx":607
 *                 # left/right velocity square
 *                 vl_sq += _vl[k]*_vl[k]
 *                 vr_sq += _vr[k]*_vr[k]             # <<<<<<<<<<<<<<
 * 
 *                 # project left/righ velocity to face normal
 */
      __pyx_v_vr_sq = (__pyx_v_vr_sq + ((__pyx_v__vr[__pyx_v_k]) * (__pyx_v__vr[__pyx_v_k])));

      /* "phd/riemann/riemann.pyx":610
 * 
 *                 # project left/righ velocity to face normal
 *                 Vnl += _vl[k]*n[k]             # <<<<<<<<<<<<<<
 *                 Vnr += _vr[k]*n[k]
 * 
 */
      __pyx_v_Vnl = (__pyx_v_Vnl + ((__pyx_v__vl[__pyx_v_k]) * (__pyx_v_n[__pyx_v_k])));

      /* "phd/riemann/riemann.pyx":611
 *                 # project left/righ velocity to face normal
 *                 Vnl += _vl[k]*n[k]
 *                 Vnr += _vr[k]*n[k]             # <<<<<<<<<<<<<<
 * 
 *                 # project face velocity to face normal
 */
      __pyx_v_Vnr = (__pyx_v_Vnr + ((__pyx_v__vr[__pyx_v_k]) * (__pyx_v_n[__pyx_v_k])));

      /* "phd/riemann/riemann.pyx":614
 * 
 *                 # project face velocity to face normal
 *                 wn += wx[k][i]*n[k]             # <<<<<<<<<<<<<<
 * 
 *             # if boosted we are in face frame
 */
      __pyx_v_wn = (__pyx_v_wn + (((__pyx_v_wx[__pyx_v_k])[__pyx_v_i]) * (__pyx_v_n[__pyx_v_k])));
    }

    /* "phd/riemann/riemann.pyx":617
 * 
 *             # if boosted we are in face frame
 *             if boost == 1:             # <<<<<<<<<<<<<<
 *                 wn = 0.
 * 
 */
    __pyx_t_2 = ((__pyx_v_boost == 1) != 0);
    if (__pyx_t_2) {

      /* "phd/riemann/riemann.pyx":618
 *             # if boosted we are in face frame
 *             if boost == 1:
 *                 wn = 0.             # <<<<<<<<<<<<<<
 * 
 *             self.get_waves(_dl, Vnl, _pl, _dr, Vnr, _pr, gamma,
 */
      __pyx_v_wn = 0.;

      /* "phd/riemann/riemann.pyx":617
 * 
 *             # if boosted we are in face frame
 *             if boost == 1:             # <<<<<<<<<<<<<<
 *                 wn = 0.
 * 
 */
    }

    /* "phd/riemann/riemann.pyx":620
 *                 wn = 0.
 * 
 *             self.get_waves(_dl, Vnl, _pl, _dr, Vnr, _pr, gamma,             # <<<<<<<<<<<<<<
 *                     &sl, &s_contact, &sr)
 * 
 */
    ((struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLLC *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.get_waves(((struct __pyx_obj_3phd_7riemann_7riemann_HLL *)__pyx_v_self), __pyx_v__dl, __pyx_v_Vnl, __pyx_v__pl, __pyx_v__dr, __pyx_v_Vnr, __pyx_v__pr, __pyx_v_gamma, (&__pyx_v_sl), (&__pyx_v_s_contact), (&__pyx_v_sr));

    /* "phd/riemann/riemann.pyx":624
 * 
 *             # calculate interface flux Eq. 10.71
 *             if(wn <= sl):             # <<<<<<<<<<<<<<
 * 
 *                 # left state
 */
    __pyx_t_2 = ((__pyx_v_wn <= __pyx_v_sl) != 0);
    if (__pyx_t_2) {

      /* "phd/riemann/riemann.pyx":627
 * 
 *                 # left state
 *                 fm.data[i]  = _dl*(Vnl - wn)             # <<<<<<<<<<<<<<
 *                 fe.data[i]  = (0.5*_dl*vl_sq + _pl/(gamma - 1.0))*(Vnl - wn) + _pl*Vnl
 * 
 */
      (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__dl * (__pyx_v_Vnl - __pyx_v_wn));

      /* "phd/riemann/riemann.pyx":628
 *                 # left state
 *                 fm.data[i]  = _dl*(Vnl - wn)
 *                 fe.data[i]  = (0.5*_dl*vl_sq + _pl/(gamma - 1.0))*(Vnl - wn) + _pl*Vnl             # <<<<<<<<<<<<<<
 * 
 *                 for k in range(dim):
 */
      __pyx_t_8 = (__pyx_v_gamma - 1.0);
      if (unlikely(__pyx_t_8 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 628, __pyx_L1_error)
      }
      (__pyx_v_fe->data[__pyx_v_i]) = (((((0.5 * __pyx_v__dl) * __pyx_v_vl_sq) + (__pyx_v__pl / __pyx_t_8)) * (__pyx_v_Vnl - __pyx_v_wn)) + (__pyx_v__pl * __pyx_v_Vnl));

      /* "phd/riemann/riemann.pyx":630
 *                 fe.data[i]  = (0.5*_dl*vl_sq + _pl/(gamma - 1.0))*(Vnl - wn) + _pl*Vnl
 * 
 *                 for k in range(dim):             # <<<<<<<<<<<<<<
 *                     fmv[k][i] = _dl*vl[k][i]*(Vnl - wn) + _pl*nx[k][i]
 * 
 */
      __pyx_t_9 = __pyx_v_dim;
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
        __pyx_v_k = __pyx_t_11;

        /* "phd/riemann/riemann.pyx":631
 * 
 *                 for k in range(dim):
 *                     fmv[k][i] = _dl*vl[k][i]*(Vnl - wn) + _pl*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *             elif((sl < wn) and (wn <= sr)):
 */
        ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__dl * ((__pyx_v_vl[__pyx_v_k])[__pyx_v_i])) * (__pyx_v_Vnl - __pyx_v_wn)) + (__pyx_v__pl * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
      }

      /* "phd/riemann/riemann.pyx":624
 * 
 *             # calculate interface flux Eq. 10.71
 *             if(wn <= sl):             # <<<<<<<<<<<<<<
 * 
 *                 # left state
 */
      goto __pyx_L8;
    }

    /* "phd/riemann/riemann.pyx":633
 *                     fmv[k][i] = _dl*vl[k][i]*(Vnl - wn) + _pl*nx[k][i]
 * 
 *             elif((sl < wn) and (wn <= sr)):             # <<<<<<<<<<<<<<
 * 
 *                 # intermediate state
 */
    __pyx_t_12 = ((__pyx_v_sl < __pyx_v_wn) != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_2 = __pyx_t_12;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_12 = ((__pyx_v_wn <= __pyx_v_sr) != 0);
    __pyx_t_2 = __pyx_t_12;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_2) {

      /* "phd/riemann/riemann.pyx":636
 * 
 *                 # intermediate state
 *                 if(wn <= s_contact):             # <<<<<<<<<<<<<<
 * 
 *                     # left star state Eq. 10.38 and 10.39
 */
      __pyx_t_2 = ((__pyx_v_wn <= __pyx_v_s_contact) != 0);
      if (__pyx_t_2) {

        /* "phd/riemann/riemann.pyx":639
 * 
 *                     # left star state Eq. 10.38 and 10.39
 *                     factor_1 = _dl*(sl - Vnl)/(sl - s_contact)             # <<<<<<<<<<<<<<
 *                     factor_2 = factor_1*(sl - wn)*(s_contact - Vnl) + _pl
 *                     frho = _dl*(Vnl - sl) + factor_1*(sl - wn)
 */
        __pyx_t_8 = (__pyx_v__dl * (__pyx_v_sl - __pyx_v_Vnl));
        __pyx_t_13 = (__pyx_v_sl - __pyx_v_s_contact);
        if (unlikely(__pyx_t_13 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 639, __pyx_L1_error)
        }
        __pyx_v_factor_1 = (__pyx_t_8 / __pyx_t_13);

        /* "phd/riemann/riemann.pyx":640
 *                     # left star state Eq. 10.38 and 10.39
 *                     factor_1 = _dl*(sl - Vnl)/(sl - s_contact)
 *                     factor_2 = factor_1*(sl - wn)*(s_contact - Vnl) + _pl             # <<<<<<<<<<<<<<
 *                     frho = _dl*(Vnl - sl) + factor_1*(sl - wn)
 * 
 */
        __pyx_v_factor_2 = (((__pyx_v_factor_1 * (__pyx_v_sl - __pyx_v_wn)) * (__pyx_v_s_contact - __pyx_v_Vnl)) + __pyx_v__pl);

        /* "phd/riemann/riemann.pyx":641
 *                     factor_1 = _dl*(sl - Vnl)/(sl - s_contact)
 *                     factor_2 = factor_1*(sl - wn)*(s_contact - Vnl) + _pl
 *                     frho = _dl*(Vnl - sl) + factor_1*(sl - wn)             # <<<<<<<<<<<<<<
 * 
 *                     # total energy
 */
        __pyx_v_frho = ((__pyx_v__dl * (__pyx_v_Vnl - __pyx_v_sl)) + (__pyx_v_factor_1 * (__pyx_v_sl - __pyx_v_wn)));

        /* "phd/riemann/riemann.pyx":644
 * 
 *                     # total energy
 *                     el = 0.5*_dl*vl_sq + _pl/(gamma-1.0)             # <<<<<<<<<<<<<<
 * 
 *                     fm.data[i] = frho
 */
        __pyx_t_13 = (__pyx_v_gamma - 1.0);
        if (unlikely(__pyx_t_13 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 644, __pyx_L1_error)
        }
        __pyx_v_el = (((0.5 * __pyx_v__dl) * __pyx_v_vl_sq) + (__pyx_v__pl / __pyx_t_13));

        /* "phd/riemann/riemann.pyx":646
 *                     el = 0.5*_dl*vl_sq + _pl/(gamma-1.0)
 * 
 *                     fm.data[i] = frho             # <<<<<<<<<<<<<<
 *                     fe.data[i] = (el + _pl)*Vnl - sl*el +\
 *                             (sl - wn)*factor_1*(el/_dl + (s_contact - Vnl)*\
 */
        (__pyx_v_fm->data[__pyx_v_i]) = __pyx_v_frho;

        /* "phd/riemann/riemann.pyx":648
 *                     fm.data[i] = frho
 *                     fe.data[i] = (el + _pl)*Vnl - sl*el +\
 *                             (sl - wn)*factor_1*(el/_dl + (s_contact - Vnl)*\             # <<<<<<<<<<<<<<
 *                             (s_contact + _pl/(_dl*(sl - Vnl))))
 * 
 */
        if (unlikely(__pyx_v__dl == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 648, __pyx_L1_error)
        }

        /* "phd/riemann/riemann.pyx":649
 *                     fe.data[i] = (el + _pl)*Vnl - sl*el +\
 *                             (sl - wn)*factor_1*(el/_dl + (s_contact - Vnl)*\
 *                             (s_contact + _pl/(_dl*(sl - Vnl))))             # <<<<<<<<<<<<<<
 * 
 *                     for k in range(dim):
 */
        __pyx_t_13 = (__pyx_v__dl * (__pyx_v_sl - __pyx_v_Vnl));
        if (unlikely(__pyx_t_13 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 649, __pyx_L1_error)
        }

        /* "phd/riemann/riemann.pyx":647
 * 
 *                     fm.data[i] = frho
 *                     fe.data[i] = (el + _pl)*Vnl - sl*el +\             # <<<<<<<<<<<<<<
 *                             (sl - wn)*factor_1*(el/_dl + (s_contact - Vnl)*\
 *                             (s_contact + _pl/(_dl*(sl - Vnl))))
 */
        (__pyx_v_fe->data[__pyx_v_i]) = ((((__pyx_v_el + __pyx_v__pl) * __pyx_v_Vnl) - (__pyx_v_sl * __pyx_v_el)) + (((__pyx_v_sl - __pyx_v_wn) * __pyx_v_factor_1) * ((__pyx_v_el / __pyx_v__dl) + ((__pyx_v_s_contact - __pyx_v_Vnl) * (__pyx_v_s_contact + (__pyx_v__pl / __pyx_t_13))))));

        /* "phd/riemann/riemann.pyx":651
 *                             (s_contact + _pl/(_dl*(sl - Vnl))))
 * 
 *                     for k in range(dim):             # <<<<<<<<<<<<<<
 *                         fmv[k][i] = frho*vl[k][i] + factor_2*nx[k][i]
 * 
 */
        __pyx_t_9 = __pyx_v_dim;
        __pyx_t_10 = __pyx_t_9;
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v_k = __pyx_t_11;

          /* "phd/riemann/riemann.pyx":652
 * 
 *                     for k in range(dim):
 *                         fmv[k][i] = frho*vl[k][i] + factor_2*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                 else:
 */
          ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = ((__pyx_v_frho * ((__pyx_v_vl[__pyx_v_k])[__pyx_v_i])) + (__pyx_v_factor_2 * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
        }

        /* "phd/riemann/riemann.pyx":636
 * 
 *                 # intermediate state
 *                 if(wn <= s_contact):             # <<<<<<<<<<<<<<
 * 
 *                     # left star state Eq. 10.38 and 10.39
 */
        goto __pyx_L13;
      }

      /* "phd/riemann/riemann.pyx":657
 * 
 *                     # right star state
 *                     factor_1 = _dr*(sr - Vnr)/(sr - s_contact)             # <<<<<<<<<<<<<<
 *                     factor_2 = factor_1*(sr - wn)*(s_contact - Vnr) + _pr
 *                     frho = _dr*(Vnr - sr) + factor_1*(sr - wn)
 */
      /*else*/ {
        __pyx_t_13 = (__pyx_v__dr * (__pyx_v_sr - __pyx_v_Vnr));
        __pyx_t_8 = (__pyx_v_sr - __pyx_v_s_contact);
        if (unlikely(__pyx_t_8 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 657, __pyx_L1_error)
        }
        __pyx_v_factor_1 = (__pyx_t_13 / __pyx_t_8);

        /* "phd/riemann/riemann.pyx":658
 *                     # right star state
 *                     factor_1 = _dr*(sr - Vnr)/(sr - s_contact)
 *                     factor_2 = factor_1*(sr - wn)*(s_contact - Vnr) + _pr             # <<<<<<<<<<<<<<
 *                     frho = _dr*(Vnr - sr) + factor_1*(sr - wn)
 * 
 */
        __pyx_v_factor_2 = (((__pyx_v_factor_1 * (__pyx_v_sr - __pyx_v_wn)) * (__pyx_v_s_contact - __pyx_v_Vnr)) + __pyx_v__pr);

        /* "phd/riemann/riemann.pyx":659
 *                     factor_1 = _dr*(sr - Vnr)/(sr - s_contact)
 *                     factor_2 = factor_1*(sr - wn)*(s_contact - Vnr) + _pr
 *                     frho = _dr*(Vnr - sr) + factor_1*(sr - wn)             # <<<<<<<<<<<<<<
 * 
 *                     # total energy
 */
        __pyx_v_frho = ((__pyx_v__dr * (__pyx_v_Vnr - __pyx_v_sr)) + (__pyx_v_factor_1 * (__pyx_v_sr - __pyx_v_wn)));

        /* "phd/riemann/riemann.pyx":662
 * 
 *                     # total energy
 *                     er = 0.5*_dr*vr_sq + _pr/(gamma-1.0)             # <<<<<<<<<<<<<<
 * 
 *                     fm.data[i] = frho
 */
        __pyx_t_8 = (__pyx_v_gamma - 1.0);
        if (unlikely(__pyx_t_8 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 662, __pyx_L1_error)
        }
        __pyx_v_er = (((0.5 * __pyx_v__dr) * __pyx_v_vr_sq) + (__pyx_v__pr / __pyx_t_8));

        /* "phd/riemann/riemann.pyx":664
 *                     er = 0.5*_dr*vr_sq + _pr/(gamma-1.0)
 * 
 *                     fm.data[i] = frho             # <<<<<<<<<<<<<<
 *                     fe.data[i] = (er + _pr)*Vnr - sr*er +\
 *                             (sr - wn)*factor_1*(er/_dr + (s_contact - Vnr)*\
 */
        (__pyx_v_fm->data[__pyx_v_i]) = __pyx_v_frho;

        /* "phd/riemann/riemann.pyx":666
 *                     fm.data[i] = frho
 *                     fe.data[i] = (er + _pr)*Vnr - sr*er +\
 *                             (sr - wn)*factor_1*(er/_dr + (s_contact - Vnr)*\             # <<<<<<<<<<<<<<
 *                             (s_contact + _pr/(_dr*(sr - Vnr))))
 * 
 */
        if (unlikely(__pyx_v__dr == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 666, __pyx_L1_error)
        }

        /* "phd/riemann/riemann.pyx":667
 *                     fe.data[i] = (er + _pr)*Vnr - sr*er +\
 *                             (sr - wn)*factor_1*(er/_dr + (s_contact - Vnr)*\
 *                             (s_contact + _pr/(_dr*(sr - Vnr))))             # <<<<<<<<<<<<<<
 * 
 *                     for k in range(dim):
 */
        __pyx_t_8 = (__pyx_v__dr * (__pyx_v_sr - __pyx_v_Vnr));
        if (unlikely(__pyx_t_8 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 667, __pyx_L1_error)
        }

        /* "phd/riemann/riemann.pyx":665
 * 
 *                     fm.data[i] = frho
 *                     fe.data[i] = (er + _pr)*Vnr - sr*er +\             # <<<<<<<<<<<<<<
 *                             (sr - wn)*factor_1*(er/_dr + (s_contact - Vnr)*\
 *                             (s_contact + _pr/(_dr*(sr - Vnr))))
 */
        (__pyx_v_fe->data[__pyx_v_i]) = ((((__pyx_v_er + __pyx_v__pr) * __pyx_v_Vnr) - (__pyx_v_sr * __pyx_v_er)) + (((__pyx_v_sr - __pyx_v_wn) * __pyx_v_factor_1) * ((__pyx_v_er / __pyx_v__dr) + ((__pyx_v_s_contact - __pyx_v_Vnr) * (__pyx_v_s_contact + (__pyx_v__pr / __pyx_t_8))))));

        /* "phd/riemann/riemann.pyx":669
 *                             (s_contact + _pr/(_dr*(sr - Vnr))))
 * 
 *                     for k in range(dim):             # <<<<<<<<<<<<<<
 *                         fmv[k][i] = frho*vr[k][i] + factor_2*nx[k][i]
 * 
 */
        __pyx_t_9 = __pyx_v_dim;
        __pyx_t_10 = __pyx_t_9;
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v_k = __pyx_t_11;

          /* "phd/riemann/riemann.pyx":670
 * 
 *                     for k in range(dim):
 *                         fmv[k][i] = frho*vr[k][i] + factor_2*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
          ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = ((__pyx_v_frho * ((__pyx_v_vr[__pyx_v_k])[__pyx_v_i])) + (__pyx_v_factor_2 * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
        }
      }
      __pyx_L13:;

      /* "phd/riemann/riemann.pyx":633
 *                     fmv[k][i] = _dl*vl[k][i]*(Vnl - wn) + _pl*nx[k][i]
 * 
 *             elif((sl < wn) and (wn <= sr)):             # <<<<<<<<<<<<<<
 * 
 *                 # intermediate state
 */
      goto __pyx_L8;
    }

    /* "phd/riemann/riemann.pyx":675
 * 
 *                 # right state
 *                 fm.data[i]  = _dr*(Vnr - wn)             # <<<<<<<<<<<<<<
 *                 fe.data[i]  = (0.5*_dr*vr_sq + _pr/(gamma - 1.0))*(Vnr - wn) + _pr*Vnr
 * 
 */
    /*else*/ {
      (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__dr * (__pyx_v_Vnr - __pyx_v_wn));

      /* "phd/riemann/riemann.pyx":676
 *                 # right state
 *                 fm.data[i]  = _dr*(Vnr - wn)
 *                 fe.data[i]  = (0.5*_dr*vr_sq + _pr/(gamma - 1.0))*(Vnr - wn) + _pr*Vnr             # <<<<<<<<<<<<<<
 * 
 *                 for k in range(dim):
 */
      __pyx_t_8 = (__pyx_v_gamma - 1.0);
      if (unlikely(__pyx_t_8 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 676, __pyx_L1_error)
      }
      (__pyx_v_fe->data[__pyx_v_i]) = (((((0.5 * __pyx_v__dr) * __pyx_v_vr_sq) + (__pyx_v__pr / __pyx_t_8)) * (__pyx_v_Vnr - __pyx_v_wn)) + (__pyx_v__pr * __pyx_v_Vnr));

      /* "phd/riemann/riemann.pyx":678
 *                 fe.data[i]  = (0.5*_dr*vr_sq + _pr/(gamma - 1.0))*(Vnr - wn) + _pr*Vnr
 * 
 *                 for k in range(dim):             # <<<<<<<<<<<<<<
 *                     fmv[k][i] = _dr*vr[k][i]*(Vnr - wn) + _pr*nx[k][i]
 * 
 */
      __pyx_t_9 = __pyx_v_dim;
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
        __pyx_v_k = __pyx_t_11;

        /* "phd/riemann/riemann.pyx":679
 * 
 *                 for k in range(dim):
 *                     fmv[k][i] = _dr*vr[k][i]*(Vnr - wn) + _pr*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *         if boost:
 */
        ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__dr * ((__pyx_v_vr[__pyx_v_k])[__pyx_v_i])) * (__pyx_v_Vnr - __pyx_v_wn)) + (__pyx_v__pr * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
      }
    }
    __pyx_L8:;
  }

  /* "phd/riemann/riemann.pyx":681
 *                     fmv[k][i] = _dr*vr[k][i]*(Vnr - wn) + _pr*nx[k][i]
 * 
 *         if boost:             # <<<<<<<<<<<<<<
 *             self.deboost(self.fluxes, mesh.faces, dim)
 * 
 */
  __pyx_t_2 = (__pyx_v_boost != 0);
  if (__pyx_t_2) {

    /* "phd/riemann/riemann.pyx":682
 * 
 *         if boost:
 *             self.deboost(self.fluxes, mesh.faces, dim)             # <<<<<<<<<<<<<<
 * 
 * cdef class Exact(RiemannBase):
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.fluxes);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = ((PyObject *)__pyx_v_mesh->faces);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = ((struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLLC *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.deboost(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_4), __pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "phd/riemann/riemann.pyx":681
 *                     fmv[k][i] = _dr*vr[k][i]*(Vnr - wn) + _pr*nx[k][i]
 * 
 *         if boost:             # <<<<<<<<<<<<<<
 *             self.deboost(self.fluxes, mesh.faces, dim)
 * 
 */
  }

  /* "phd/riemann/riemann.pyx":521
 * 
 *     """
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction, double gamma, int dim):             # <<<<<<<<<<<<<<
 *         """Solve the riemann problem by HLLC solver.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.riemann.riemann.HLLC.riemann_solver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dl);
  __Pyx_XDECREF((PyObject *)__pyx_v_pl);
  __Pyx_XDECREF((PyObject *)__pyx_v_dr);
  __Pyx_XDECREF((PyObject *)__pyx_v_pr);
  __Pyx_XDECREF((PyObject *)__pyx_v_fm);
  __Pyx_XDECREF((PyObject *)__pyx_v_fe);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_4HLLC_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_4HLLC_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_4HLLC___reduce_cython__(((struct __pyx_obj_3phd_7riemann_7riemann_HLLC *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_4HLLC___reduce_cython__(struct __pyx_obj_3phd_7riemann_7riemann_HLLC *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.boost); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.cfl); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.__pyx_base.fields_registered); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.flux_field_groups);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.flux_field_groups);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_self->__pyx_base.__pyx_base.flux_field_groups);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base.flux_fields);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.__pyx_base.flux_fields);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_v_self->__pyx_base.__pyx_base.flux_fields);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.fluxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.fluxes));
  PyTuple_SET_ITEM(__pyx_t_4, 5, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.fluxes));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_HLLC, (type(self), 0xcaafa99, None), state
 */
  /*else*/ {
    __pyx_t_5 = (__pyx_v_self->__pyx_base.__pyx_base.flux_field_groups != ((PyObject*)Py_None));
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_v_self->__pyx_base.__pyx_base.flux_fields != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.fluxes) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_HLLC, (type(self), 0xcaafa99, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:
 *         return __pyx_unpickle_HLLC, (type(self), 0xcaafa99, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_HLLC, (type(self), 0xcaafa99, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_HLLC); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_212531865);
    __Pyx_GIVEREF(__pyx_int_212531865);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_212531865);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_HLLC, (type(self), 0xcaafa99, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_HLLC, (type(self), 0xcaafa99, None), state
 *     else:
 *         return __pyx_unpickle_HLLC, (type(self), 0xcaafa99, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_HLLC__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_HLLC); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_212531865);
    __Pyx_GIVEREF(__pyx_int_212531865);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_212531865);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.riemann.riemann.HLLC.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_HLLC, (type(self), 0xcaafa99, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_HLLC__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_4HLLC_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_4HLLC_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_4HLLC_2__setstate_cython__(((struct __pyx_obj_3phd_7riemann_7riemann_HLLC *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_4HLLC_2__setstate_cython__(struct __pyx_obj_3phd_7riemann_7riemann_HLLC *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_HLLC, (type(self), 0xcaafa99, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_HLLC__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_3phd_7riemann_7riemann___pyx_unpickle_HLLC__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_HLLC, (type(self), 0xcaafa99, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_HLLC__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.HLLC.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":695
 * 
 *     """
 *     def __init__(self, double cfl=0.5, **kwargs):             # <<<<<<<<<<<<<<
 *         self.boost = True
 *         self.cfl = 0.5
 */

/* Python wrapper */
static int __pyx_pw_3phd_7riemann_7riemann_5Exact_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3phd_7riemann_7riemann_5Exact_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED double __pyx_v_cfl;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cfl,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cfl);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 695, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_cfl = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_cfl == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L3_error)
    } else {
      __pyx_v_cfl = ((double)0.5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 695, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("phd.riemann.riemann.Exact.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_5Exact___init__(((struct __pyx_obj_3phd_7riemann_7riemann_Exact *)__pyx_v_self), __pyx_v_cfl, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7riemann_7riemann_5Exact___init__(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, CYTHON_UNUSED double __pyx_v_cfl, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "phd/riemann/riemann.pyx":696
 *     """
 *     def __init__(self, double cfl=0.5, **kwargs):
 *         self.boost = True             # <<<<<<<<<<<<<<
 *         self.cfl = 0.5
 *         self.fields_registered = False
 */
  __pyx_v_self->boost = 1;

  /* "phd/riemann/riemann.pyx":697
 *     def __init__(self, double cfl=0.5, **kwargs):
 *         self.boost = True
 *         self.cfl = 0.5             # <<<<<<<<<<<<<<
 *         self.fields_registered = False
 * 
 */
  __pyx_v_self->__pyx_base.cfl = 0.5;

  /* "phd/riemann/riemann.pyx":698
 *         self.boost = True
 *         self.cfl = 0.5
 *         self.fields_registered = False             # <<<<<<<<<<<<<<
 * 
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction, double gamma, int dim):
 */
  __pyx_v_self->__pyx_base.fields_registered = 0;

  /* "phd/riemann/riemann.pyx":695
 * 
 *     """
 *     def __init__(self, double cfl=0.5, **kwargs):             # <<<<<<<<<<<<<<
 *         self.boost = True
 *         self.cfl = 0.5
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":700
 *         self.fields_registered = False
 * 
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction, double gamma, int dim):             # <<<<<<<<<<<<<<
 *         """Solve the riemann problem by Exact solver.
 * 
 */

static PyObject *__pyx_f_3phd_7riemann_7riemann_5Exact_riemann_solver(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_reconstruction, double __pyx_v_gamma, int __pyx_v_dim) {
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dr = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pr = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_fm = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_fe = 0;
  int __pyx_v_i;
  int __pyx_v_k;
  __pyx_t_5numpy_float64_t *__pyx_v_vl[3];
  __pyx_t_5numpy_float64_t *__pyx_v_vr[3];
  __pyx_t_5numpy_float64_t *__pyx_v_fmv[3];
  __pyx_t_5numpy_float64_t *__pyx_v_nx[3];
  __pyx_t_5numpy_float64_t __pyx_v__vl[3];
  __pyx_t_5numpy_float64_t __pyx_v__vr[3];
  __pyx_t_5numpy_float64_t __pyx_v_n[3];
  double __pyx_v__dl;
  double __pyx_v__pl;
  double __pyx_v__dr;
  double __pyx_v__pr;
  double __pyx_v__d;
  double __pyx_v_v[3];
  double __pyx_v__p;
  double __pyx_v_vn;
  double __pyx_v_v_sq;
  double __pyx_v_vnl;
  double __pyx_v_vnr;
  double __pyx_v_vl_sq;
  double __pyx_v_vr_sq;
  double __pyx_v_fr;
  double __pyx_v_fl;
  double __pyx_v_u_tmp;
  double __pyx_v_p_star;
  double __pyx_v_u_star;
  double __pyx_v_s_hl;
  double __pyx_v_s_tl;
  double __pyx_v_sl;
  double __pyx_v_sr;
  double __pyx_v_c;
  double __pyx_v_cl;
  double __pyx_v_cr;
  double __pyx_v_c_star_l;
  double __pyx_v_c_star_r;
  int __pyx_v_num_faces;
  double __pyx_v_s_hr;
  double __pyx_v_s_tr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("riemann_solver", 0);

  /* "phd/riemann/riemann.pyx":720
 *         """
 *         # left state primitive variables
 *         cdef DoubleArray dl = reconstruction.left_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pl = reconstruction.left_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->left_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->left_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 720, __pyx_L1_error)
  __pyx_v_dl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":721
 *         # left state primitive variables
 *         cdef DoubleArray dl = reconstruction.left_states.get_carray("density")
 *         cdef DoubleArray pl = reconstruction.left_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         # left state primitive variables
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->left_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->left_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 721, __pyx_L1_error)
  __pyx_v_pl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":724
 * 
 *         # left state primitive variables
 *         cdef DoubleArray dr = reconstruction.right_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pr = reconstruction.right_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->right_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->right_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 724, __pyx_L1_error)
  __pyx_v_dr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":725
 *         # left state primitive variables
 *         cdef DoubleArray dr = reconstruction.right_states.get_carray("density")
 *         cdef DoubleArray pr = reconstruction.right_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         cdef DoubleArray fm  = self.fluxes.get_carray("mass")
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->right_states->__pyx_vtab)->get_carray(__pyx_v_reconstruction->right_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 725, __pyx_L1_error)
  __pyx_v_pr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":727
 *         cdef DoubleArray pr = reconstruction.right_states.get_carray("pressure")
 * 
 *         cdef DoubleArray fm  = self.fluxes.get_carray("mass")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray fe  = self.fluxes.get_carray("energy")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.fluxes->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.fluxes, __pyx_n_s_mass, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 727, __pyx_L1_error)
  __pyx_v_fm = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":728
 * 
 *         cdef DoubleArray fm  = self.fluxes.get_carray("mass")
 *         cdef DoubleArray fe  = self.fluxes.get_carray("energy")             # <<<<<<<<<<<<<<
 * 
 *         cdef int i, k
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.fluxes->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.fluxes, __pyx_n_s_energy, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 728, __pyx_L1_error)
  __pyx_v_fe = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":747
 *         cdef double c, cl, cr, c_star_l, c_star_r
 * 
 *         cdef int num_faces = mesh.faces.get_carray_size()             # <<<<<<<<<<<<<<
 * 
 *         phdLogger.info("Exact: Starting riemann")
 */
  __pyx_v_num_faces = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0);

  /* "phd/riemann/riemann.pyx":749
 *         cdef int num_faces = mesh.faces.get_carray_size()
 * 
 *         phdLogger.info("Exact: Starting riemann")             # <<<<<<<<<<<<<<
 * 
 *         # particle velocities left/right face
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phdLogger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_s_Exact_Starting_riemann) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_Exact_Starting_riemann);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":753
 *         # particle velocities left/right face
 *         reconstruction.left_states.pointer_groups(vl,
 *                 reconstruction.left_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 *         reconstruction.right_states.pointer_groups(vr,
 *                 reconstruction.right_states.carray_named_groups["velocity"])
 */
  if (unlikely(__pyx_v_reconstruction->left_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 753, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_reconstruction->left_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 753, __pyx_L1_error)

  /* "phd/riemann/riemann.pyx":752
 * 
 *         # particle velocities left/right face
 *         reconstruction.left_states.pointer_groups(vl,             # <<<<<<<<<<<<<<
 *                 reconstruction.left_states.carray_named_groups["velocity"])
 *         reconstruction.right_states.pointer_groups(vr,
 */
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->left_states->__pyx_vtab)->pointer_groups(__pyx_v_reconstruction->left_states, __pyx_v_vl, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":755
 *                 reconstruction.left_states.carray_named_groups["velocity"])
 *         reconstruction.right_states.pointer_groups(vr,
 *                 reconstruction.right_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # face momentum fluxes
 */
  if (unlikely(__pyx_v_reconstruction->right_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 755, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_reconstruction->right_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 755, __pyx_L1_error)

  /* "phd/riemann/riemann.pyx":754
 *         reconstruction.left_states.pointer_groups(vl,
 *                 reconstruction.left_states.carray_named_groups["velocity"])
 *         reconstruction.right_states.pointer_groups(vr,             # <<<<<<<<<<<<<<
 *                 reconstruction.right_states.carray_named_groups["velocity"])
 * 
 */
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_reconstruction->right_states->__pyx_vtab)->pointer_groups(__pyx_v_reconstruction->right_states, __pyx_v_vr, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":758
 * 
 *         # face momentum fluxes
 *         self.fluxes.pointer_groups(fmv, self.fluxes.carray_named_groups["momentum"])             # <<<<<<<<<<<<<<
 * 
 *         # face normal
 */
  if (unlikely(__pyx_v_self->__pyx_base.fluxes->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 758, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.fluxes->carray_named_groups, __pyx_n_s_momentum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 758, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.fluxes->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.fluxes, __pyx_v_fmv, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":761
 * 
 *         # face normal
 *         mesh.faces.pointer_groups(nx, mesh.faces.carray_named_groups["normal"])             # <<<<<<<<<<<<<<
 * 
 *         for i in range(num_faces):
 */
  if (unlikely(__pyx_v_mesh->faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 761, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_mesh->faces->carray_named_groups, __pyx_n_s_normal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 761, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->pointer_groups(__pyx_v_mesh->faces, __pyx_v_nx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":763
 *         mesh.faces.pointer_groups(nx, mesh.faces.carray_named_groups["normal"])
 * 
 *         for i in range(num_faces):             # <<<<<<<<<<<<<<
 * 
 *             # left state
 */
  __pyx_t_4 = __pyx_v_num_faces;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/riemann/riemann.pyx":766
 * 
 *             # left state
 *             _dl = dl.data[i]             # <<<<<<<<<<<<<<
 *             _pl = pl.data[i]
 * 
 */
    __pyx_v__dl = (__pyx_v_dl->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":767
 *             # left state
 *             _dl = dl.data[i]
 *             _pl = pl.data[i]             # <<<<<<<<<<<<<<
 * 
 *             # right state
 */
    __pyx_v__pl = (__pyx_v_pl->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":770
 * 
 *             # right state
 *             _dr = dr.data[i]             # <<<<<<<<<<<<<<
 *             _pr = pr.data[i]
 * 
 */
    __pyx_v__dr = (__pyx_v_dr->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":771
 *             # right state
 *             _dr = dr.data[i]
 *             _pr = pr.data[i]             # <<<<<<<<<<<<<<
 * 
 *             # sound speed
 */
    __pyx_v__pr = (__pyx_v_pr->data[__pyx_v_i]);

    /* "phd/riemann/riemann.pyx":774
 * 
 *             # sound speed
 *             cl = sqrt(gamma*_pl/_dl)             # <<<<<<<<<<<<<<
 *             cr = sqrt(gamma*_pr/_dr)
 * 
 */
    __pyx_t_7 = (__pyx_v_gamma * __pyx_v__pl);
    if (unlikely(__pyx_v__dl == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 774, __pyx_L1_error)
    }
    __pyx_v_cl = sqrt((__pyx_t_7 / __pyx_v__dl));

    /* "phd/riemann/riemann.pyx":775
 *             # sound speed
 *             cl = sqrt(gamma*_pl/_dl)
 *             cr = sqrt(gamma*_pr/_dr)             # <<<<<<<<<<<<<<
 * 
 *             vnl = vnr = 0.0
 */
    __pyx_t_7 = (__pyx_v_gamma * __pyx_v__pr);
    if (unlikely(__pyx_v__dr == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 775, __pyx_L1_error)
    }
    __pyx_v_cr = sqrt((__pyx_t_7 / __pyx_v__dr));

    /* "phd/riemann/riemann.pyx":777
 *             cr = sqrt(gamma*_pr/_dr)
 * 
 *             vnl = vnr = 0.0             # <<<<<<<<<<<<<<
 *             vl_sq = vr_sq = 0.0
 *             for k in range(dim):
 */
    __pyx_v_vnl = 0.0;
    __pyx_v_vnr = 0.0;

    /* "phd/riemann/riemann.pyx":778
 * 
 *             vnl = vnr = 0.0
 *             vl_sq = vr_sq = 0.0             # <<<<<<<<<<<<<<
 *             for k in range(dim):
 * 
 */
    __pyx_v_vl_sq = 0.0;
    __pyx_v_vr_sq = 0.0;

    /* "phd/riemann/riemann.pyx":779
 *             vnl = vnr = 0.0
 *             vl_sq = vr_sq = 0.0
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 * 
 *                 _vl[k] = vl[k][i]
 */
    __pyx_t_8 = __pyx_v_dim;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_k = __pyx_t_10;

      /* "phd/riemann/riemann.pyx":781
 *             for k in range(dim):
 * 
 *                 _vl[k] = vl[k][i]             # <<<<<<<<<<<<<<
 *                 _vr[k] = vr[k][i]
 *                 n[k]   = nx[k][i]
 */
      (__pyx_v__vl[__pyx_v_k]) = ((__pyx_v_vl[__pyx_v_k])[__pyx_v_i]);

      /* "phd/riemann/riemann.pyx":782
 * 
 *                 _vl[k] = vl[k][i]
 *                 _vr[k] = vr[k][i]             # <<<<<<<<<<<<<<
 *                 n[k]   = nx[k][i]
 * 
 */
      (__pyx_v__vr[__pyx_v_k]) = ((__pyx_v_vr[__pyx_v_k])[__pyx_v_i]);

      /* "phd/riemann/riemann.pyx":783
 *                 _vl[k] = vl[k][i]
 *                 _vr[k] = vr[k][i]
 *                 n[k]   = nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                 # project left/righ velocity to face normal
 */
      (__pyx_v_n[__pyx_v_k]) = ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i]);

      /* "phd/riemann/riemann.pyx":786
 * 
 *                 # project left/righ velocity to face normal
 *                 vnl += _vl[k]*n[k]             # <<<<<<<<<<<<<<
 *                 vnr += _vr[k]*n[k]
 * 
 */
      __pyx_v_vnl = (__pyx_v_vnl + ((__pyx_v__vl[__pyx_v_k]) * (__pyx_v_n[__pyx_v_k])));

      /* "phd/riemann/riemann.pyx":787
 *                 # project left/righ velocity to face normal
 *                 vnl += _vl[k]*n[k]
 *                 vnr += _vr[k]*n[k]             # <<<<<<<<<<<<<<
 * 
 *                 # left/right velocity square
 */
      __pyx_v_vnr = (__pyx_v_vnr + ((__pyx_v__vr[__pyx_v_k]) * (__pyx_v_n[__pyx_v_k])));

      /* "phd/riemann/riemann.pyx":790
 * 
 *                 # left/right velocity square
 *                 vl_sq += _vl[k]*_vl[k]             # <<<<<<<<<<<<<<
 *                 vr_sq += _vr[k]*_vr[k]
 * 
 */
      __pyx_v_vl_sq = (__pyx_v_vl_sq + ((__pyx_v__vl[__pyx_v_k]) * (__pyx_v__vl[__pyx_v_k])));

      /* "phd/riemann/riemann.pyx":791
 *                 # left/right velocity square
 *                 vl_sq += _vl[k]*_vl[k]
 *                 vr_sq += _vr[k]*_vr[k]             # <<<<<<<<<<<<<<
 * 
 *             # newton rhapson
 */
      __pyx_v_vr_sq = (__pyx_v_vr_sq + ((__pyx_v__vr[__pyx_v_k]) * (__pyx_v__vr[__pyx_v_k])));
    }

    /* "phd/riemann/riemann.pyx":794
 * 
 *             # newton rhapson
 *             p_star = self.get_pstar(_dl, vnl, _pl, cl,             # <<<<<<<<<<<<<<
 *                     _dr, vnr, _pr, cr, gamma)
 * 
 */
    __pyx_v_p_star = __pyx_f_3phd_7riemann_7riemann_5Exact_get_pstar(__pyx_v_self, __pyx_v__dl, __pyx_v_vnl, __pyx_v__pl, __pyx_v_cl, __pyx_v__dr, __pyx_v_vnr, __pyx_v__pr, __pyx_v_cr, __pyx_v_gamma);

    /* "phd/riemann/riemann.pyx":798
 * 
 *             # calculate the contact wave speed
 *             fl = self.p_func(_dl, vnl, _pl, cl, gamma, p_star)             # <<<<<<<<<<<<<<
 *             fr = self.p_func(_dr, vnr, _pr, cr, gamma, p_star)
 *             u_star = 0.5*(vnl + vnr + fr - fl)
 */
    __pyx_v_fl = __pyx_f_3phd_7riemann_7riemann_5Exact_p_func(__pyx_v_self, __pyx_v__dl, __pyx_v_vnl, __pyx_v__pl, __pyx_v_cl, __pyx_v_gamma, __pyx_v_p_star);

    /* "phd/riemann/riemann.pyx":799
 *             # calculate the contact wave speed
 *             fl = self.p_func(_dl, vnl, _pl, cl, gamma, p_star)
 *             fr = self.p_func(_dr, vnr, _pr, cr, gamma, p_star)             # <<<<<<<<<<<<<<
 *             u_star = 0.5*(vnl + vnr + fr - fl)
 * 
 */
    __pyx_v_fr = __pyx_f_3phd_7riemann_7riemann_5Exact_p_func(__pyx_v_self, __pyx_v__dr, __pyx_v_vnr, __pyx_v__pr, __pyx_v_cr, __pyx_v_gamma, __pyx_v_p_star);

    /* "phd/riemann/riemann.pyx":800
 *             fl = self.p_func(_dl, vnl, _pl, cl, gamma, p_star)
 *             fr = self.p_func(_dr, vnr, _pr, cr, gamma, p_star)
 *             u_star = 0.5*(vnl + vnr + fr - fl)             # <<<<<<<<<<<<<<
 * 
 *             if(0.0 <= u_star): # left of contact discontinuity
 */
    __pyx_v_u_star = (0.5 * (((__pyx_v_vnl + __pyx_v_vnr) + __pyx_v_fr) - __pyx_v_fl));

    /* "phd/riemann/riemann.pyx":802
 *             u_star = 0.5*(vnl + vnr + fr - fl)
 * 
 *             if(0.0 <= u_star): # left of contact discontinuity             # <<<<<<<<<<<<<<
 *                 if(p_star <= _pl): # left rarefraction
 * 
 */
    __pyx_t_11 = ((0.0 <= __pyx_v_u_star) != 0);
    if (__pyx_t_11) {

      /* "phd/riemann/riemann.pyx":803
 * 
 *             if(0.0 <= u_star): # left of contact discontinuity
 *                 if(p_star <= _pl): # left rarefraction             # <<<<<<<<<<<<<<
 * 
 *                     # sound speed of head
 */
      __pyx_t_11 = ((__pyx_v_p_star <= __pyx_v__pl) != 0);
      if (__pyx_t_11) {

        /* "phd/riemann/riemann.pyx":806
 * 
 *                     # sound speed of head
 *                     s_hl = vnl - cl             # <<<<<<<<<<<<<<
 * 
 *                     if(0.0 <= s_hl): # left state
 */
        __pyx_v_s_hl = (__pyx_v_vnl - __pyx_v_cl);

        /* "phd/riemann/riemann.pyx":808
 *                     s_hl = vnl - cl
 * 
 *                     if(0.0 <= s_hl): # left state             # <<<<<<<<<<<<<<
 *                         fm.data[i]  = _dl*vnl
 *                         fe.data[i]  = (0.5*_dl*vl_sq + gamma*_pl/(gamma - 1.0))*vnl
 */
        __pyx_t_11 = ((0.0 <= __pyx_v_s_hl) != 0);
        if (__pyx_t_11) {

          /* "phd/riemann/riemann.pyx":809
 * 
 *                     if(0.0 <= s_hl): # left state
 *                         fm.data[i]  = _dl*vnl             # <<<<<<<<<<<<<<
 *                         fe.data[i]  = (0.5*_dl*vl_sq + gamma*_pl/(gamma - 1.0))*vnl
 * 
 */
          (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__dl * __pyx_v_vnl);

          /* "phd/riemann/riemann.pyx":810
 *                     if(0.0 <= s_hl): # left state
 *                         fm.data[i]  = _dl*vnl
 *                         fe.data[i]  = (0.5*_dl*vl_sq + gamma*_pl/(gamma - 1.0))*vnl             # <<<<<<<<<<<<<<
 * 
 *                         for k in range(dim):
 */
          __pyx_t_7 = (__pyx_v_gamma * __pyx_v__pl);
          __pyx_t_12 = (__pyx_v_gamma - 1.0);
          if (unlikely(__pyx_t_12 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 810, __pyx_L1_error)
          }
          (__pyx_v_fe->data[__pyx_v_i]) = ((((0.5 * __pyx_v__dl) * __pyx_v_vl_sq) + (__pyx_t_7 / __pyx_t_12)) * __pyx_v_vnl);

          /* "phd/riemann/riemann.pyx":812
 *                         fe.data[i]  = (0.5*_dl*vl_sq + gamma*_pl/(gamma - 1.0))*vnl
 * 
 *                         for k in range(dim):             # <<<<<<<<<<<<<<
 *                             fmv[k][i] = _dl*vl[k][i]*vnl + _pl*nx[k][i]
 * 
 */
          __pyx_t_8 = __pyx_v_dim;
          __pyx_t_9 = __pyx_t_8;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_v_k = __pyx_t_10;

            /* "phd/riemann/riemann.pyx":813
 * 
 *                         for k in range(dim):
 *                             fmv[k][i] = _dl*vl[k][i]*vnl + _pl*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                     else: # left rarefaction
 */
            ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__dl * ((__pyx_v_vl[__pyx_v_k])[__pyx_v_i])) * __pyx_v_vnl) + (__pyx_v__pl * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
          }

          /* "phd/riemann/riemann.pyx":808
 *                     s_hl = vnl - cl
 * 
 *                     if(0.0 <= s_hl): # left state             # <<<<<<<<<<<<<<
 *                         fm.data[i]  = _dl*vnl
 *                         fe.data[i]  = (0.5*_dl*vl_sq + gamma*_pl/(gamma - 1.0))*vnl
 */
          goto __pyx_L9;
        }

        /* "phd/riemann/riemann.pyx":818
 * 
 *                         # sound speed of star state and tail of rarefraction
 *                         c_star_l = cl*pow(p_star/_pl, (gamma - 1.0)/(2.0*gamma))             # <<<<<<<<<<<<<<
 *                         s_tl = u_star - c_star_l
 * 
 */
        /*else*/ {
          if (unlikely(__pyx_v__pl == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 818, __pyx_L1_error)
          }
          __pyx_t_12 = (__pyx_v_gamma - 1.0);
          __pyx_t_7 = (2.0 * __pyx_v_gamma);
          if (unlikely(__pyx_t_7 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 818, __pyx_L1_error)
          }
          __pyx_v_c_star_l = (__pyx_v_cl * pow((__pyx_v_p_star / __pyx_v__pl), (__pyx_t_12 / __pyx_t_7)));

          /* "phd/riemann/riemann.pyx":819
 *                         # sound speed of star state and tail of rarefraction
 *                         c_star_l = cl*pow(p_star/_pl, (gamma - 1.0)/(2.0*gamma))
 *                         s_tl = u_star - c_star_l             # <<<<<<<<<<<<<<
 * 
 *                         if(0.0 >= s_tl): # star left state
 */
          __pyx_v_s_tl = (__pyx_v_u_star - __pyx_v_c_star_l);

          /* "phd/riemann/riemann.pyx":821
 *                         s_tl = u_star - c_star_l
 * 
 *                         if(0.0 >= s_tl): # star left state             # <<<<<<<<<<<<<<
 *                             _d = _dl*pow(p_star/_pl, 1.0/gamma)
 *                             _p = p_star
 */
          __pyx_t_11 = ((0.0 >= __pyx_v_s_tl) != 0);
          if (__pyx_t_11) {

            /* "phd/riemann/riemann.pyx":822
 * 
 *                         if(0.0 >= s_tl): # star left state
 *                             _d = _dl*pow(p_star/_pl, 1.0/gamma)             # <<<<<<<<<<<<<<
 *                             _p = p_star
 * 
 */
            if (unlikely(__pyx_v__pl == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 822, __pyx_L1_error)
            }
            if (unlikely(__pyx_v_gamma == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 822, __pyx_L1_error)
            }
            __pyx_v__d = (__pyx_v__dl * pow((__pyx_v_p_star / __pyx_v__pl), (1.0 / __pyx_v_gamma)));

            /* "phd/riemann/riemann.pyx":823
 *                         if(0.0 >= s_tl): # star left state
 *                             _d = _dl*pow(p_star/_pl, 1.0/gamma)
 *                             _p = p_star             # <<<<<<<<<<<<<<
 * 
 *                             v_sq = vn = 0.
 */
            __pyx_v__p = __pyx_v_p_star;

            /* "phd/riemann/riemann.pyx":825
 *                             _p = p_star
 * 
 *                             v_sq = vn = 0.             # <<<<<<<<<<<<<<
 *                             for k in range(dim):
 *                                 v[k]  = vl[k][i] + (u_star - vnl)*nx[k][i]
 */
            __pyx_v_v_sq = 0.;
            __pyx_v_vn = 0.;

            /* "phd/riemann/riemann.pyx":826
 * 
 *                             v_sq = vn = 0.
 *                             for k in range(dim):             # <<<<<<<<<<<<<<
 *                                 v[k]  = vl[k][i] + (u_star - vnl)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]
 */
            __pyx_t_8 = __pyx_v_dim;
            __pyx_t_9 = __pyx_t_8;
            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
              __pyx_v_k = __pyx_t_10;

              /* "phd/riemann/riemann.pyx":827
 *                             v_sq = vn = 0.
 *                             for k in range(dim):
 *                                 v[k]  = vl[k][i] + (u_star - vnl)*nx[k][i]             # <<<<<<<<<<<<<<
 *                                 vn   += v[k]*nx[k][i]
 *                                 v_sq += v[k]*v[k]
 */
              (__pyx_v_v[__pyx_v_k]) = (((__pyx_v_vl[__pyx_v_k])[__pyx_v_i]) + ((__pyx_v_u_star - __pyx_v_vnl) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

              /* "phd/riemann/riemann.pyx":828
 *                             for k in range(dim):
 *                                 v[k]  = vl[k][i] + (u_star - vnl)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]             # <<<<<<<<<<<<<<
 *                                 v_sq += v[k]*v[k]
 * 
 */
              __pyx_v_vn = (__pyx_v_vn + ((__pyx_v_v[__pyx_v_k]) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

              /* "phd/riemann/riemann.pyx":829
 *                                 v[k]  = vl[k][i] + (u_star - vnl)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]
 *                                 v_sq += v[k]*v[k]             # <<<<<<<<<<<<<<
 * 
 *                             fm.data[i]  = _d*vn
 */
              __pyx_v_v_sq = (__pyx_v_v_sq + ((__pyx_v_v[__pyx_v_k]) * (__pyx_v_v[__pyx_v_k])));
            }

            /* "phd/riemann/riemann.pyx":831
 *                                 v_sq += v[k]*v[k]
 * 
 *                             fm.data[i]  = _d*vn             # <<<<<<<<<<<<<<
 *                             fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 */
            (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__d * __pyx_v_vn);

            /* "phd/riemann/riemann.pyx":832
 * 
 *                             fm.data[i]  = _d*vn
 *                             fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn             # <<<<<<<<<<<<<<
 * 
 *                             for k in range(dim):
 */
            __pyx_t_7 = (__pyx_v_gamma * __pyx_v__p);
            __pyx_t_12 = (__pyx_v_gamma - 1.0);
            if (unlikely(__pyx_t_12 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 832, __pyx_L1_error)
            }
            (__pyx_v_fe->data[__pyx_v_i]) = ((((0.5 * __pyx_v__d) * __pyx_v_v_sq) + (__pyx_t_7 / __pyx_t_12)) * __pyx_v_vn);

            /* "phd/riemann/riemann.pyx":834
 *                             fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 *                             for k in range(dim):             # <<<<<<<<<<<<<<
 *                                 fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]
 * 
 */
            __pyx_t_8 = __pyx_v_dim;
            __pyx_t_9 = __pyx_t_8;
            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
              __pyx_v_k = __pyx_t_10;

              /* "phd/riemann/riemann.pyx":835
 * 
 *                             for k in range(dim):
 *                                 fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                         else: # inside left fan
 */
              ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__d * (__pyx_v_v[__pyx_v_k])) * __pyx_v_vn) + (__pyx_v__p * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
            }

            /* "phd/riemann/riemann.pyx":821
 *                         s_tl = u_star - c_star_l
 * 
 *                         if(0.0 >= s_tl): # star left state             # <<<<<<<<<<<<<<
 *                             _d = _dl*pow(p_star/_pl, 1.0/gamma)
 *                             _p = p_star
 */
            goto __pyx_L12;
          }

          /* "phd/riemann/riemann.pyx":839
 *                         else: # inside left fan
 * 
 *                             c  = (2.0/(gamma + 1.0))*(cl + 0.5*(gamma - 1.0)*vnl)             # <<<<<<<<<<<<<<
 *                             _d = _dl*pow(c/cl, 2.0/(gamma - 1.0))
 *                             _p = _pl*pow(c/cl, 2.0*gamma/(gamma - 1.0))
 */
          /*else*/ {
            __pyx_t_12 = (__pyx_v_gamma + 1.0);
            if (unlikely(__pyx_t_12 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 839, __pyx_L1_error)
            }
            __pyx_v_c = ((2.0 / __pyx_t_12) * (__pyx_v_cl + ((0.5 * (__pyx_v_gamma - 1.0)) * __pyx_v_vnl)));

            /* "phd/riemann/riemann.pyx":840
 * 
 *                             c  = (2.0/(gamma + 1.0))*(cl + 0.5*(gamma - 1.0)*vnl)
 *                             _d = _dl*pow(c/cl, 2.0/(gamma - 1.0))             # <<<<<<<<<<<<<<
 *                             _p = _pl*pow(c/cl, 2.0*gamma/(gamma - 1.0))
 * 
 */
            if (unlikely(__pyx_v_cl == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 840, __pyx_L1_error)
            }
            __pyx_t_12 = (__pyx_v_gamma - 1.0);
            if (unlikely(__pyx_t_12 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 840, __pyx_L1_error)
            }
            __pyx_v__d = (__pyx_v__dl * pow((__pyx_v_c / __pyx_v_cl), (2.0 / __pyx_t_12)));

            /* "phd/riemann/riemann.pyx":841
 *                             c  = (2.0/(gamma + 1.0))*(cl + 0.5*(gamma - 1.0)*vnl)
 *                             _d = _dl*pow(c/cl, 2.0/(gamma - 1.0))
 *                             _p = _pl*pow(c/cl, 2.0*gamma/(gamma - 1.0))             # <<<<<<<<<<<<<<
 * 
 *                             v_sq = vn = 0.
 */
            if (unlikely(__pyx_v_cl == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 841, __pyx_L1_error)
            }
            __pyx_t_12 = (2.0 * __pyx_v_gamma);
            __pyx_t_7 = (__pyx_v_gamma - 1.0);
            if (unlikely(__pyx_t_7 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 841, __pyx_L1_error)
            }
            __pyx_v__p = (__pyx_v__pl * pow((__pyx_v_c / __pyx_v_cl), (__pyx_t_12 / __pyx_t_7)));

            /* "phd/riemann/riemann.pyx":843
 *                             _p = _pl*pow(c/cl, 2.0*gamma/(gamma - 1.0))
 * 
 *                             v_sq = vn = 0.             # <<<<<<<<<<<<<<
 *                             for k in range(dim):
 *                                 v[k]  = vl[k][i] + (c - vnl)*nx[k][i]
 */
            __pyx_v_v_sq = 0.;
            __pyx_v_vn = 0.;

            /* "phd/riemann/riemann.pyx":844
 * 
 *                             v_sq = vn = 0.
 *                             for k in range(dim):             # <<<<<<<<<<<<<<
 *                                 v[k]  = vl[k][i] + (c - vnl)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]
 */
            __pyx_t_8 = __pyx_v_dim;
            __pyx_t_9 = __pyx_t_8;
            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
              __pyx_v_k = __pyx_t_10;

              /* "phd/riemann/riemann.pyx":845
 *                             v_sq = vn = 0.
 *                             for k in range(dim):
 *                                 v[k]  = vl[k][i] + (c - vnl)*nx[k][i]             # <<<<<<<<<<<<<<
 *                                 vn   += v[k]*nx[k][i]
 *                                 v_sq += v[k]*v[k]
 */
              (__pyx_v_v[__pyx_v_k]) = (((__pyx_v_vl[__pyx_v_k])[__pyx_v_i]) + ((__pyx_v_c - __pyx_v_vnl) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

              /* "phd/riemann/riemann.pyx":846
 *                             for k in range(dim):
 *                                 v[k]  = vl[k][i] + (c - vnl)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]             # <<<<<<<<<<<<<<
 *                                 v_sq += v[k]*v[k]
 * 
 */
              __pyx_v_vn = (__pyx_v_vn + ((__pyx_v_v[__pyx_v_k]) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

              /* "phd/riemann/riemann.pyx":847
 *                                 v[k]  = vl[k][i] + (c - vnl)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]
 *                                 v_sq += v[k]*v[k]             # <<<<<<<<<<<<<<
 * 
 *                             fm.data[i] = _d*vn
 */
              __pyx_v_v_sq = (__pyx_v_v_sq + ((__pyx_v_v[__pyx_v_k]) * (__pyx_v_v[__pyx_v_k])));
            }

            /* "phd/riemann/riemann.pyx":849
 *                                 v_sq += v[k]*v[k]
 * 
 *                             fm.data[i] = _d*vn             # <<<<<<<<<<<<<<
 *                             fe.data[i] = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 */
            (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__d * __pyx_v_vn);

            /* "phd/riemann/riemann.pyx":850
 * 
 *                             fm.data[i] = _d*vn
 *                             fe.data[i] = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn             # <<<<<<<<<<<<<<
 * 
 *                             for k in range(dim):
 */
            __pyx_t_7 = (__pyx_v_gamma * __pyx_v__p);
            __pyx_t_12 = (__pyx_v_gamma - 1.0);
            if (unlikely(__pyx_t_12 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 850, __pyx_L1_error)
            }
            (__pyx_v_fe->data[__pyx_v_i]) = ((((0.5 * __pyx_v__d) * __pyx_v_v_sq) + (__pyx_t_7 / __pyx_t_12)) * __pyx_v_vn);

            /* "phd/riemann/riemann.pyx":852
 *                             fe.data[i] = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 *                             for k in range(dim):             # <<<<<<<<<<<<<<
 *                                 fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]
 * 
 */
            __pyx_t_8 = __pyx_v_dim;
            __pyx_t_9 = __pyx_t_8;
            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
              __pyx_v_k = __pyx_t_10;

              /* "phd/riemann/riemann.pyx":853
 * 
 *                             for k in range(dim):
 *                                 fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                 else: # left shock
 */
              ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__d * (__pyx_v_v[__pyx_v_k])) * __pyx_v_vn) + (__pyx_v__p * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
            }
          }
          __pyx_L12:;
        }
        __pyx_L9:;

        /* "phd/riemann/riemann.pyx":803
 * 
 *             if(0.0 <= u_star): # left of contact discontinuity
 *                 if(p_star <= _pl): # left rarefraction             # <<<<<<<<<<<<<<
 * 
 *                     # sound speed of head
 */
        goto __pyx_L8;
      }

      /* "phd/riemann/riemann.pyx":857
 *                 else: # left shock
 * 
 *                     sl = vnl - cl*sqrt((gamma + 1.0)*p_star/(2.0*gamma*_pl)\             # <<<<<<<<<<<<<<
 *                             + (gamma - 1.0)/(2.0*gamma))
 * 
 */
      /*else*/ {
        __pyx_t_12 = ((__pyx_v_gamma + 1.0) * __pyx_v_p_star);
        __pyx_t_7 = ((2.0 * __pyx_v_gamma) * __pyx_v__pl);
        if (unlikely(__pyx_t_7 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 857, __pyx_L1_error)
        }

        /* "phd/riemann/riemann.pyx":858
 * 
 *                     sl = vnl - cl*sqrt((gamma + 1.0)*p_star/(2.0*gamma*_pl)\
 *                             + (gamma - 1.0)/(2.0*gamma))             # <<<<<<<<<<<<<<
 * 
 *                     if(0.0 <= sl): # left state
 */
        __pyx_t_13 = (__pyx_v_gamma - 1.0);
        __pyx_t_14 = (2.0 * __pyx_v_gamma);
        if (unlikely(__pyx_t_14 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 858, __pyx_L1_error)
        }

        /* "phd/riemann/riemann.pyx":857
 *                 else: # left shock
 * 
 *                     sl = vnl - cl*sqrt((gamma + 1.0)*p_star/(2.0*gamma*_pl)\             # <<<<<<<<<<<<<<
 *                             + (gamma - 1.0)/(2.0*gamma))
 * 
 */
        __pyx_v_sl = (__pyx_v_vnl - (__pyx_v_cl * sqrt(((__pyx_t_12 / __pyx_t_7) + (__pyx_t_13 / __pyx_t_14)))));

        /* "phd/riemann/riemann.pyx":860
 *                             + (gamma - 1.0)/(2.0*gamma))
 * 
 *                     if(0.0 <= sl): # left state             # <<<<<<<<<<<<<<
 *                         fm.data[i] = _dl*vnl
 *                         fe.data[i] = (0.5*_dl*vl_sq + gamma*_pl/(gamma - 1.0))*vnl
 */
        __pyx_t_11 = ((0.0 <= __pyx_v_sl) != 0);
        if (__pyx_t_11) {

          /* "phd/riemann/riemann.pyx":861
 * 
 *                     if(0.0 <= sl): # left state
 *                         fm.data[i] = _dl*vnl             # <<<<<<<<<<<<<<
 *                         fe.data[i] = (0.5*_dl*vl_sq + gamma*_pl/(gamma - 1.0))*vnl
 * 
 */
          (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__dl * __pyx_v_vnl);

          /* "phd/riemann/riemann.pyx":862
 *                     if(0.0 <= sl): # left state
 *                         fm.data[i] = _dl*vnl
 *                         fe.data[i] = (0.5*_dl*vl_sq + gamma*_pl/(gamma - 1.0))*vnl             # <<<<<<<<<<<<<<
 * 
 *                         for k in range(dim):
 */
          __pyx_t_14 = (__pyx_v_gamma * __pyx_v__pl);
          __pyx_t_13 = (__pyx_v_gamma - 1.0);
          if (unlikely(__pyx_t_13 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 862, __pyx_L1_error)
          }
          (__pyx_v_fe->data[__pyx_v_i]) = ((((0.5 * __pyx_v__dl) * __pyx_v_vl_sq) + (__pyx_t_14 / __pyx_t_13)) * __pyx_v_vnl);

          /* "phd/riemann/riemann.pyx":864
 *                         fe.data[i] = (0.5*_dl*vl_sq + gamma*_pl/(gamma - 1.0))*vnl
 * 
 *                         for k in range(dim):             # <<<<<<<<<<<<<<
 *                             fmv[k][i] = _dl*vl[k][i]*vnl + _pl*nx[k][i]
 * 
 */
          __pyx_t_8 = __pyx_v_dim;
          __pyx_t_9 = __pyx_t_8;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_v_k = __pyx_t_10;

            /* "phd/riemann/riemann.pyx":865
 * 
 *                         for k in range(dim):
 *                             fmv[k][i] = _dl*vl[k][i]*vnl + _pl*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                     else: # star left state
 */
            ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__dl * ((__pyx_v_vl[__pyx_v_k])[__pyx_v_i])) * __pyx_v_vnl) + (__pyx_v__pl * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
          }

          /* "phd/riemann/riemann.pyx":860
 *                             + (gamma - 1.0)/(2.0*gamma))
 * 
 *                     if(0.0 <= sl): # left state             # <<<<<<<<<<<<<<
 *                         fm.data[i] = _dl*vnl
 *                         fe.data[i] = (0.5*_dl*vl_sq + gamma*_pl/(gamma - 1.0))*vnl
 */
          goto __pyx_L21;
        }

        /* "phd/riemann/riemann.pyx":869
 *                     else: # star left state
 * 
 *                         _d = _dl*(p_star/_pl + (gamma - 1.0)/(gamma + 1.0))\             # <<<<<<<<<<<<<<
 *                                 /(p_star*(gamma - 1.0)/((gamma + 1.0)*_pl) + 1.0)
 *                         _p = p_star
 */
        /*else*/ {

          /* "phd/riemann/riemann.pyx":870
 * 
 *                         _d = _dl*(p_star/_pl + (gamma - 1.0)/(gamma + 1.0))\
 *                                 /(p_star*(gamma - 1.0)/((gamma + 1.0)*_pl) + 1.0)             # <<<<<<<<<<<<<<
 *                         _p = p_star
 * 
 */
          if (unlikely(__pyx_v__pl == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 869, __pyx_L1_error)
          }

          /* "phd/riemann/riemann.pyx":869
 *                     else: # star left state
 * 
 *                         _d = _dl*(p_star/_pl + (gamma - 1.0)/(gamma + 1.0))\             # <<<<<<<<<<<<<<
 *                                 /(p_star*(gamma - 1.0)/((gamma + 1.0)*_pl) + 1.0)
 *                         _p = p_star
 */
          __pyx_t_13 = (__pyx_v_gamma - 1.0);
          __pyx_t_14 = (__pyx_v_gamma + 1.0);
          if (unlikely(__pyx_t_14 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 869, __pyx_L1_error)
          }
          __pyx_t_7 = (__pyx_v__dl * ((__pyx_v_p_star / __pyx_v__pl) + (__pyx_t_13 / __pyx_t_14)));

          /* "phd/riemann/riemann.pyx":870
 * 
 *                         _d = _dl*(p_star/_pl + (gamma - 1.0)/(gamma + 1.0))\
 *                                 /(p_star*(gamma - 1.0)/((gamma + 1.0)*_pl) + 1.0)             # <<<<<<<<<<<<<<
 *                         _p = p_star
 * 
 */
          __pyx_t_14 = (__pyx_v_p_star * (__pyx_v_gamma - 1.0));
          __pyx_t_13 = ((__pyx_v_gamma + 1.0) * __pyx_v__pl);
          if (unlikely(__pyx_t_13 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 870, __pyx_L1_error)
          }
          __pyx_t_12 = ((__pyx_t_14 / __pyx_t_13) + 1.0);
          if (unlikely(__pyx_t_12 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 870, __pyx_L1_error)
          }
          __pyx_v__d = (__pyx_t_7 / __pyx_t_12);

          /* "phd/riemann/riemann.pyx":871
 *                         _d = _dl*(p_star/_pl + (gamma - 1.0)/(gamma + 1.0))\
 *                                 /(p_star*(gamma - 1.0)/((gamma + 1.0)*_pl) + 1.0)
 *                         _p = p_star             # <<<<<<<<<<<<<<
 * 
 *                         v_sq = vn = 0.
 */
          __pyx_v__p = __pyx_v_p_star;

          /* "phd/riemann/riemann.pyx":873
 *                         _p = p_star
 * 
 *                         v_sq = vn = 0.             # <<<<<<<<<<<<<<
 *                         for k in range(dim):
 *                             v[k]  = vl[k][i] + (u_star - vnl)*nx[k][i]
 */
          __pyx_v_v_sq = 0.;
          __pyx_v_vn = 0.;

          /* "phd/riemann/riemann.pyx":874
 * 
 *                         v_sq = vn = 0.
 *                         for k in range(dim):             # <<<<<<<<<<<<<<
 *                             v[k]  = vl[k][i] + (u_star - vnl)*nx[k][i]
 *                             vn   += v[k]*nx[k][i]
 */
          __pyx_t_8 = __pyx_v_dim;
          __pyx_t_9 = __pyx_t_8;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_v_k = __pyx_t_10;

            /* "phd/riemann/riemann.pyx":875
 *                         v_sq = vn = 0.
 *                         for k in range(dim):
 *                             v[k]  = vl[k][i] + (u_star - vnl)*nx[k][i]             # <<<<<<<<<<<<<<
 *                             vn   += v[k]*nx[k][i]
 *                             v_sq += v[k]*v[k]
 */
            (__pyx_v_v[__pyx_v_k]) = (((__pyx_v_vl[__pyx_v_k])[__pyx_v_i]) + ((__pyx_v_u_star - __pyx_v_vnl) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

            /* "phd/riemann/riemann.pyx":876
 *                         for k in range(dim):
 *                             v[k]  = vl[k][i] + (u_star - vnl)*nx[k][i]
 *                             vn   += v[k]*nx[k][i]             # <<<<<<<<<<<<<<
 *                             v_sq += v[k]*v[k]
 * 
 */
            __pyx_v_vn = (__pyx_v_vn + ((__pyx_v_v[__pyx_v_k]) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

            /* "phd/riemann/riemann.pyx":877
 *                             v[k]  = vl[k][i] + (u_star - vnl)*nx[k][i]
 *                             vn   += v[k]*nx[k][i]
 *                             v_sq += v[k]*v[k]             # <<<<<<<<<<<<<<
 * 
 *                         fm.data[i]  = _d*vn
 */
            __pyx_v_v_sq = (__pyx_v_v_sq + ((__pyx_v_v[__pyx_v_k]) * (__pyx_v_v[__pyx_v_k])));
          }

          /* "phd/riemann/riemann.pyx":879
 *                             v_sq += v[k]*v[k]
 * 
 *                         fm.data[i]  = _d*vn             # <<<<<<<<<<<<<<
 *                         fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 */
          (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__d * __pyx_v_vn);

          /* "phd/riemann/riemann.pyx":880
 * 
 *                         fm.data[i]  = _d*vn
 *                         fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn             # <<<<<<<<<<<<<<
 * 
 *                         for k in range(dim):
 */
          __pyx_t_12 = (__pyx_v_gamma * __pyx_v__p);
          __pyx_t_7 = (__pyx_v_gamma - 1.0);
          if (unlikely(__pyx_t_7 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 880, __pyx_L1_error)
          }
          (__pyx_v_fe->data[__pyx_v_i]) = ((((0.5 * __pyx_v__d) * __pyx_v_v_sq) + (__pyx_t_12 / __pyx_t_7)) * __pyx_v_vn);

          /* "phd/riemann/riemann.pyx":882
 *                         fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 *                         for k in range(dim):             # <<<<<<<<<<<<<<
 *                             fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]
 * 
 */
          __pyx_t_8 = __pyx_v_dim;
          __pyx_t_9 = __pyx_t_8;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_v_k = __pyx_t_10;

            /* "phd/riemann/riemann.pyx":883
 * 
 *                         for k in range(dim):
 *                             fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *             else: # right of contact
 */
            ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__d * (__pyx_v_v[__pyx_v_k])) * __pyx_v_vn) + (__pyx_v__p * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
          }
        }
        __pyx_L21:;
      }
      __pyx_L8:;

      /* "phd/riemann/riemann.pyx":802
 *             u_star = 0.5*(vnl + vnr + fr - fl)
 * 
 *             if(0.0 <= u_star): # left of contact discontinuity             # <<<<<<<<<<<<<<
 *                 if(p_star <= _pl): # left rarefraction
 * 
 */
      goto __pyx_L7;
    }

    /* "phd/riemann/riemann.pyx":887
 *             else: # right of contact
 * 
 *                 if(p_star >= _pr): # right shock             # <<<<<<<<<<<<<<
 * 
 *                     sr = vnr + cr*sqrt((gamma + 1.0)*p_star/(2.0*gamma*_pr)\
 */
    /*else*/ {
      __pyx_t_11 = ((__pyx_v_p_star >= __pyx_v__pr) != 0);
      if (__pyx_t_11) {

        /* "phd/riemann/riemann.pyx":889
 *                 if(p_star >= _pr): # right shock
 * 
 *                     sr = vnr + cr*sqrt((gamma + 1.0)*p_star/(2.0*gamma*_pr)\             # <<<<<<<<<<<<<<
 *                             + (gamma-1.0)/(2.0*gamma))
 * 
 */
        __pyx_t_7 = ((__pyx_v_gamma + 1.0) * __pyx_v_p_star);
        __pyx_t_12 = ((2.0 * __pyx_v_gamma) * __pyx_v__pr);
        if (unlikely(__pyx_t_12 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 889, __pyx_L1_error)
        }

        /* "phd/riemann/riemann.pyx":890
 * 
 *                     sr = vnr + cr*sqrt((gamma + 1.0)*p_star/(2.0*gamma*_pr)\
 *                             + (gamma-1.0)/(2.0*gamma))             # <<<<<<<<<<<<<<
 * 
 *                     if(0.0 >= sr): # right state
 */
        __pyx_t_13 = (__pyx_v_gamma - 1.0);
        __pyx_t_14 = (2.0 * __pyx_v_gamma);
        if (unlikely(__pyx_t_14 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 890, __pyx_L1_error)
        }

        /* "phd/riemann/riemann.pyx":889
 *                 if(p_star >= _pr): # right shock
 * 
 *                     sr = vnr + cr*sqrt((gamma + 1.0)*p_star/(2.0*gamma*_pr)\             # <<<<<<<<<<<<<<
 *                             + (gamma-1.0)/(2.0*gamma))
 * 
 */
        __pyx_v_sr = (__pyx_v_vnr + (__pyx_v_cr * sqrt(((__pyx_t_7 / __pyx_t_12) + (__pyx_t_13 / __pyx_t_14)))));

        /* "phd/riemann/riemann.pyx":892
 *                             + (gamma-1.0)/(2.0*gamma))
 * 
 *                     if(0.0 >= sr): # right state             # <<<<<<<<<<<<<<
 *                         fm.data[i] = _dr*vnr
 *                         fe.data[i] = (0.5*_dr*vr_sq + gamma*_pr/(gamma - 1.0))*vnr
 */
        __pyx_t_11 = ((0.0 >= __pyx_v_sr) != 0);
        if (__pyx_t_11) {

          /* "phd/riemann/riemann.pyx":893
 * 
 *                     if(0.0 >= sr): # right state
 *                         fm.data[i] = _dr*vnr             # <<<<<<<<<<<<<<
 *                         fe.data[i] = (0.5*_dr*vr_sq + gamma*_pr/(gamma - 1.0))*vnr
 * 
 */
          (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__dr * __pyx_v_vnr);

          /* "phd/riemann/riemann.pyx":894
 *                     if(0.0 >= sr): # right state
 *                         fm.data[i] = _dr*vnr
 *                         fe.data[i] = (0.5*_dr*vr_sq + gamma*_pr/(gamma - 1.0))*vnr             # <<<<<<<<<<<<<<
 * 
 *                         for k in range(dim):
 */
          __pyx_t_14 = (__pyx_v_gamma * __pyx_v__pr);
          __pyx_t_13 = (__pyx_v_gamma - 1.0);
          if (unlikely(__pyx_t_13 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 894, __pyx_L1_error)
          }
          (__pyx_v_fe->data[__pyx_v_i]) = ((((0.5 * __pyx_v__dr) * __pyx_v_vr_sq) + (__pyx_t_14 / __pyx_t_13)) * __pyx_v_vnr);

          /* "phd/riemann/riemann.pyx":896
 *                         fe.data[i] = (0.5*_dr*vr_sq + gamma*_pr/(gamma - 1.0))*vnr
 * 
 *                         for k in range(dim):             # <<<<<<<<<<<<<<
 *                             fmv[k][i] = _dr*vr[k][i]*vnr + _pr*nx[k][i]
 * 
 */
          __pyx_t_8 = __pyx_v_dim;
          __pyx_t_9 = __pyx_t_8;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_v_k = __pyx_t_10;

            /* "phd/riemann/riemann.pyx":897
 * 
 *                         for k in range(dim):
 *                             fmv[k][i] = _dr*vr[k][i]*vnr + _pr*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                     else: # star right state
 */
            ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__dr * ((__pyx_v_vr[__pyx_v_k])[__pyx_v_i])) * __pyx_v_vnr) + (__pyx_v__pr * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
          }

          /* "phd/riemann/riemann.pyx":892
 *                             + (gamma-1.0)/(2.0*gamma))
 * 
 *                     if(0.0 >= sr): # right state             # <<<<<<<<<<<<<<
 *                         fm.data[i] = _dr*vnr
 *                         fe.data[i] = (0.5*_dr*vr_sq + gamma*_pr/(gamma - 1.0))*vnr
 */
          goto __pyx_L29;
        }

        /* "phd/riemann/riemann.pyx":901
 *                     else: # star right state
 * 
 *                         _d = _dr*(p_star/_pr + (gamma - 1.0)/(gamma + 1.0))\             # <<<<<<<<<<<<<<
 *                                 /(p_star*(gamma - 1.0)/((gamma + 1.0)*_pr) + 1.0)
 *                         _p = p_star
 */
        /*else*/ {

          /* "phd/riemann/riemann.pyx":902
 * 
 *                         _d = _dr*(p_star/_pr + (gamma - 1.0)/(gamma + 1.0))\
 *                                 /(p_star*(gamma - 1.0)/((gamma + 1.0)*_pr) + 1.0)             # <<<<<<<<<<<<<<
 *                         _p = p_star
 * 
 */
          if (unlikely(__pyx_v__pr == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 901, __pyx_L1_error)
          }

          /* "phd/riemann/riemann.pyx":901
 *                     else: # star right state
 * 
 *                         _d = _dr*(p_star/_pr + (gamma - 1.0)/(gamma + 1.0))\             # <<<<<<<<<<<<<<
 *                                 /(p_star*(gamma - 1.0)/((gamma + 1.0)*_pr) + 1.0)
 *                         _p = p_star
 */
          __pyx_t_13 = (__pyx_v_gamma - 1.0);
          __pyx_t_14 = (__pyx_v_gamma + 1.0);
          if (unlikely(__pyx_t_14 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 901, __pyx_L1_error)
          }
          __pyx_t_12 = (__pyx_v__dr * ((__pyx_v_p_star / __pyx_v__pr) + (__pyx_t_13 / __pyx_t_14)));

          /* "phd/riemann/riemann.pyx":902
 * 
 *                         _d = _dr*(p_star/_pr + (gamma - 1.0)/(gamma + 1.0))\
 *                                 /(p_star*(gamma - 1.0)/((gamma + 1.0)*_pr) + 1.0)             # <<<<<<<<<<<<<<
 *                         _p = p_star
 * 
 */
          __pyx_t_14 = (__pyx_v_p_star * (__pyx_v_gamma - 1.0));
          __pyx_t_13 = ((__pyx_v_gamma + 1.0) * __pyx_v__pr);
          if (unlikely(__pyx_t_13 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 902, __pyx_L1_error)
          }
          __pyx_t_7 = ((__pyx_t_14 / __pyx_t_13) + 1.0);
          if (unlikely(__pyx_t_7 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 902, __pyx_L1_error)
          }
          __pyx_v__d = (__pyx_t_12 / __pyx_t_7);

          /* "phd/riemann/riemann.pyx":903
 *                         _d = _dr*(p_star/_pr + (gamma - 1.0)/(gamma + 1.0))\
 *                                 /(p_star*(gamma - 1.0)/((gamma + 1.0)*_pr) + 1.0)
 *                         _p = p_star             # <<<<<<<<<<<<<<
 * 
 *                         v_sq = vn = 0.
 */
          __pyx_v__p = __pyx_v_p_star;

          /* "phd/riemann/riemann.pyx":905
 *                         _p = p_star
 * 
 *                         v_sq = vn = 0.             # <<<<<<<<<<<<<<
 *                         for k in range(dim):
 *                             v[k]  = vr[k][i] + (u_star - vnr)*nx[k][i]
 */
          __pyx_v_v_sq = 0.;
          __pyx_v_vn = 0.;

          /* "phd/riemann/riemann.pyx":906
 * 
 *                         v_sq = vn = 0.
 *                         for k in range(dim):             # <<<<<<<<<<<<<<
 *                             v[k]  = vr[k][i] + (u_star - vnr)*nx[k][i]
 *                             vn   += v[k]*nx[k][i]
 */
          __pyx_t_8 = __pyx_v_dim;
          __pyx_t_9 = __pyx_t_8;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_v_k = __pyx_t_10;

            /* "phd/riemann/riemann.pyx":907
 *                         v_sq = vn = 0.
 *                         for k in range(dim):
 *                             v[k]  = vr[k][i] + (u_star - vnr)*nx[k][i]             # <<<<<<<<<<<<<<
 *                             vn   += v[k]*nx[k][i]
 *                             v_sq += v[k]*v[k]
 */
            (__pyx_v_v[__pyx_v_k]) = (((__pyx_v_vr[__pyx_v_k])[__pyx_v_i]) + ((__pyx_v_u_star - __pyx_v_vnr) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

            /* "phd/riemann/riemann.pyx":908
 *                         for k in range(dim):
 *                             v[k]  = vr[k][i] + (u_star - vnr)*nx[k][i]
 *                             vn   += v[k]*nx[k][i]             # <<<<<<<<<<<<<<
 *                             v_sq += v[k]*v[k]
 * 
 */
            __pyx_v_vn = (__pyx_v_vn + ((__pyx_v_v[__pyx_v_k]) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

            /* "phd/riemann/riemann.pyx":909
 *                             v[k]  = vr[k][i] + (u_star - vnr)*nx[k][i]
 *                             vn   += v[k]*nx[k][i]
 *                             v_sq += v[k]*v[k]             # <<<<<<<<<<<<<<
 * 
 *                         fm.data[i]  = _d*vn
 */
            __pyx_v_v_sq = (__pyx_v_v_sq + ((__pyx_v_v[__pyx_v_k]) * (__pyx_v_v[__pyx_v_k])));
          }

          /* "phd/riemann/riemann.pyx":911
 *                             v_sq += v[k]*v[k]
 * 
 *                         fm.data[i]  = _d*vn             # <<<<<<<<<<<<<<
 *                         fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 */
          (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__d * __pyx_v_vn);

          /* "phd/riemann/riemann.pyx":912
 * 
 *                         fm.data[i]  = _d*vn
 *                         fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn             # <<<<<<<<<<<<<<
 * 
 *                         for k in range(dim):
 */
          __pyx_t_7 = (__pyx_v_gamma * __pyx_v__p);
          __pyx_t_12 = (__pyx_v_gamma - 1.0);
          if (unlikely(__pyx_t_12 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 912, __pyx_L1_error)
          }
          (__pyx_v_fe->data[__pyx_v_i]) = ((((0.5 * __pyx_v__d) * __pyx_v_v_sq) + (__pyx_t_7 / __pyx_t_12)) * __pyx_v_vn);

          /* "phd/riemann/riemann.pyx":914
 *                         fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 *                         for k in range(dim):             # <<<<<<<<<<<<<<
 *                             fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]
 * 
 */
          __pyx_t_8 = __pyx_v_dim;
          __pyx_t_9 = __pyx_t_8;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_v_k = __pyx_t_10;

            /* "phd/riemann/riemann.pyx":915
 * 
 *                         for k in range(dim):
 *                             fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                 else: # right rarefaction
 */
            ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__d * (__pyx_v_v[__pyx_v_k])) * __pyx_v_vn) + (__pyx_v__p * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
          }
        }
        __pyx_L29:;

        /* "phd/riemann/riemann.pyx":887
 *             else: # right of contact
 * 
 *                 if(p_star >= _pr): # right shock             # <<<<<<<<<<<<<<
 * 
 *                     sr = vnr + cr*sqrt((gamma + 1.0)*p_star/(2.0*gamma*_pr)\
 */
        goto __pyx_L28;
      }

      /* "phd/riemann/riemann.pyx":919
 *                 else: # right rarefaction
 * 
 *                     s_hr = vnr + cr             # <<<<<<<<<<<<<<
 * 
 *                     if(0.0 >= s_hr): # right data state
 */
      /*else*/ {
        __pyx_v_s_hr = (__pyx_v_vnr + __pyx_v_cr);

        /* "phd/riemann/riemann.pyx":921
 *                     s_hr = vnr + cr
 * 
 *                     if(0.0 >= s_hr): # right data state             # <<<<<<<<<<<<<<
 *                         fm.data[i]  = _dr*vnr
 *                         fe.data[i]  = (0.5*_dr*vr_sq + gamma*_pr/(gamma - 1.0))*vnr
 */
        __pyx_t_11 = ((0.0 >= __pyx_v_s_hr) != 0);
        if (__pyx_t_11) {

          /* "phd/riemann/riemann.pyx":922
 * 
 *                     if(0.0 >= s_hr): # right data state
 *                         fm.data[i]  = _dr*vnr             # <<<<<<<<<<<<<<
 *                         fe.data[i]  = (0.5*_dr*vr_sq + gamma*_pr/(gamma - 1.0))*vnr
 * 
 */
          (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__dr * __pyx_v_vnr);

          /* "phd/riemann/riemann.pyx":923
 *                     if(0.0 >= s_hr): # right data state
 *                         fm.data[i]  = _dr*vnr
 *                         fe.data[i]  = (0.5*_dr*vr_sq + gamma*_pr/(gamma - 1.0))*vnr             # <<<<<<<<<<<<<<
 * 
 *                         for k in range(dim):
 */
          __pyx_t_12 = (__pyx_v_gamma * __pyx_v__pr);
          __pyx_t_7 = (__pyx_v_gamma - 1.0);
          if (unlikely(__pyx_t_7 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 923, __pyx_L1_error)
          }
          (__pyx_v_fe->data[__pyx_v_i]) = ((((0.5 * __pyx_v__dr) * __pyx_v_vr_sq) + (__pyx_t_12 / __pyx_t_7)) * __pyx_v_vnr);

          /* "phd/riemann/riemann.pyx":925
 *                         fe.data[i]  = (0.5*_dr*vr_sq + gamma*_pr/(gamma - 1.0))*vnr
 * 
 *                         for k in range(dim):             # <<<<<<<<<<<<<<
 *                             fmv[k][i] = _dr*vr[k][i]*vnr + _pr*nx[k][i]
 * 
 */
          __pyx_t_8 = __pyx_v_dim;
          __pyx_t_9 = __pyx_t_8;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_v_k = __pyx_t_10;

            /* "phd/riemann/riemann.pyx":926
 * 
 *                         for k in range(dim):
 *                             fmv[k][i] = _dr*vr[k][i]*vnr + _pr*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                     else:
 */
            ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__dr * ((__pyx_v_vr[__pyx_v_k])[__pyx_v_i])) * __pyx_v_vnr) + (__pyx_v__pr * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
          }

          /* "phd/riemann/riemann.pyx":921
 *                     s_hr = vnr + cr
 * 
 *                     if(0.0 >= s_hr): # right data state             # <<<<<<<<<<<<<<
 *                         fm.data[i]  = _dr*vnr
 *                         fe.data[i]  = (0.5*_dr*vr_sq + gamma*_pr/(gamma - 1.0))*vnr
 */
          goto __pyx_L36;
        }

        /* "phd/riemann/riemann.pyx":932
 *                         # sound speed of the star state and sound speed
 *                         # of the tail of the rarefraction
 *                         c_star_r = cr*pow(p_star/_pr, (gamma-1.0)/(2.0*gamma))             # <<<<<<<<<<<<<<
 *                         s_tr = u_star + c_star_r
 * 
 */
        /*else*/ {
          if (unlikely(__pyx_v__pr == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 932, __pyx_L1_error)
          }
          __pyx_t_7 = (__pyx_v_gamma - 1.0);
          __pyx_t_12 = (2.0 * __pyx_v_gamma);
          if (unlikely(__pyx_t_12 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 932, __pyx_L1_error)
          }
          __pyx_v_c_star_r = (__pyx_v_cr * pow((__pyx_v_p_star / __pyx_v__pr), (__pyx_t_7 / __pyx_t_12)));

          /* "phd/riemann/riemann.pyx":933
 *                         # of the tail of the rarefraction
 *                         c_star_r = cr*pow(p_star/_pr, (gamma-1.0)/(2.0*gamma))
 *                         s_tr = u_star + c_star_r             # <<<<<<<<<<<<<<
 * 
 *                         if(0.0 <= s_tr): # star left state
 */
          __pyx_v_s_tr = (__pyx_v_u_star + __pyx_v_c_star_r);

          /* "phd/riemann/riemann.pyx":935
 *                         s_tr = u_star + c_star_r
 * 
 *                         if(0.0 <= s_tr): # star left state             # <<<<<<<<<<<<<<
 *                             _d = _dr*pow(p_star/_pr, 1.0/gamma)
 *                             _p = p_star
 */
          __pyx_t_11 = ((0.0 <= __pyx_v_s_tr) != 0);
          if (__pyx_t_11) {

            /* "phd/riemann/riemann.pyx":936
 * 
 *                         if(0.0 <= s_tr): # star left state
 *                             _d = _dr*pow(p_star/_pr, 1.0/gamma)             # <<<<<<<<<<<<<<
 *                             _p = p_star
 * 
 */
            if (unlikely(__pyx_v__pr == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 936, __pyx_L1_error)
            }
            if (unlikely(__pyx_v_gamma == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 936, __pyx_L1_error)
            }
            __pyx_v__d = (__pyx_v__dr * pow((__pyx_v_p_star / __pyx_v__pr), (1.0 / __pyx_v_gamma)));

            /* "phd/riemann/riemann.pyx":937
 *                         if(0.0 <= s_tr): # star left state
 *                             _d = _dr*pow(p_star/_pr, 1.0/gamma)
 *                             _p = p_star             # <<<<<<<<<<<<<<
 * 
 *                             v_sq = vn = 0.
 */
            __pyx_v__p = __pyx_v_p_star;

            /* "phd/riemann/riemann.pyx":939
 *                             _p = p_star
 * 
 *                             v_sq = vn = 0.             # <<<<<<<<<<<<<<
 *                             for k in range(dim):
 *                                 v[k]  = vr[k][i] + (u_star - vnr)*nx[k][i]
 */
            __pyx_v_v_sq = 0.;
            __pyx_v_vn = 0.;

            /* "phd/riemann/riemann.pyx":940
 * 
 *                             v_sq = vn = 0.
 *                             for k in range(dim):             # <<<<<<<<<<<<<<
 *                                 v[k]  = vr[k][i] + (u_star - vnr)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]
 */
            __pyx_t_8 = __pyx_v_dim;
            __pyx_t_9 = __pyx_t_8;
            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
              __pyx_v_k = __pyx_t_10;

              /* "phd/riemann/riemann.pyx":941
 *                             v_sq = vn = 0.
 *                             for k in range(dim):
 *                                 v[k]  = vr[k][i] + (u_star - vnr)*nx[k][i]             # <<<<<<<<<<<<<<
 *                                 vn   += v[k]*nx[k][i]
 *                                 v_sq += v[k]*v[k]
 */
              (__pyx_v_v[__pyx_v_k]) = (((__pyx_v_vr[__pyx_v_k])[__pyx_v_i]) + ((__pyx_v_u_star - __pyx_v_vnr) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

              /* "phd/riemann/riemann.pyx":942
 *                             for k in range(dim):
 *                                 v[k]  = vr[k][i] + (u_star - vnr)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]             # <<<<<<<<<<<<<<
 *                                 v_sq += v[k]*v[k]
 * 
 */
              __pyx_v_vn = (__pyx_v_vn + ((__pyx_v_v[__pyx_v_k]) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

              /* "phd/riemann/riemann.pyx":943
 *                                 v[k]  = vr[k][i] + (u_star - vnr)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]
 *                                 v_sq += v[k]*v[k]             # <<<<<<<<<<<<<<
 * 
 *                             fm.data[i]  = _d*vn
 */
              __pyx_v_v_sq = (__pyx_v_v_sq + ((__pyx_v_v[__pyx_v_k]) * (__pyx_v_v[__pyx_v_k])));
            }

            /* "phd/riemann/riemann.pyx":945
 *                                 v_sq += v[k]*v[k]
 * 
 *                             fm.data[i]  = _d*vn             # <<<<<<<<<<<<<<
 *                             fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 */
            (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__d * __pyx_v_vn);

            /* "phd/riemann/riemann.pyx":946
 * 
 *                             fm.data[i]  = _d*vn
 *                             fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn             # <<<<<<<<<<<<<<
 * 
 *                             for k in range(dim):
 */
            __pyx_t_12 = (__pyx_v_gamma * __pyx_v__p);
            __pyx_t_7 = (__pyx_v_gamma - 1.0);
            if (unlikely(__pyx_t_7 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 946, __pyx_L1_error)
            }
            (__pyx_v_fe->data[__pyx_v_i]) = ((((0.5 * __pyx_v__d) * __pyx_v_v_sq) + (__pyx_t_12 / __pyx_t_7)) * __pyx_v_vn);

            /* "phd/riemann/riemann.pyx":948
 *                             fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 *                             for k in range(dim):             # <<<<<<<<<<<<<<
 *                                 fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]
 * 
 */
            __pyx_t_8 = __pyx_v_dim;
            __pyx_t_9 = __pyx_t_8;
            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
              __pyx_v_k = __pyx_t_10;

              /* "phd/riemann/riemann.pyx":949
 * 
 *                             for k in range(dim):
 *                                 fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *                         else:
 */
              ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__d * (__pyx_v_v[__pyx_v_k])) * __pyx_v_vn) + (__pyx_v__p * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
            }

            /* "phd/riemann/riemann.pyx":935
 *                         s_tr = u_star + c_star_r
 * 
 *                         if(0.0 <= s_tr): # star left state             # <<<<<<<<<<<<<<
 *                             _d = _dr*pow(p_star/_pr, 1.0/gamma)
 *                             _p = p_star
 */
            goto __pyx_L39;
          }

          /* "phd/riemann/riemann.pyx":954
 * 
 *                             # sampled point is inside right fan
 *                             c = (2.0/(gamma + 1.0))*(cr - 0.5*(gamma - 1.0)*vnr)             # <<<<<<<<<<<<<<
 *                             u_tmp = (2.0/(gamma + 1.0))*(-cr + 0.5*(gamma-1.0)*vnr)
 * 
 */
          /*else*/ {
            __pyx_t_7 = (__pyx_v_gamma + 1.0);
            if (unlikely(__pyx_t_7 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 954, __pyx_L1_error)
            }
            __pyx_v_c = ((2.0 / __pyx_t_7) * (__pyx_v_cr - ((0.5 * (__pyx_v_gamma - 1.0)) * __pyx_v_vnr)));

            /* "phd/riemann/riemann.pyx":955
 *                             # sampled point is inside right fan
 *                             c = (2.0/(gamma + 1.0))*(cr - 0.5*(gamma - 1.0)*vnr)
 *                             u_tmp = (2.0/(gamma + 1.0))*(-cr + 0.5*(gamma-1.0)*vnr)             # <<<<<<<<<<<<<<
 * 
 *                             _d = _dr*pow(c/cr, 2.0/(gamma - 1.0))
 */
            __pyx_t_7 = (__pyx_v_gamma + 1.0);
            if (unlikely(__pyx_t_7 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 955, __pyx_L1_error)
            }
            __pyx_v_u_tmp = ((2.0 / __pyx_t_7) * ((-__pyx_v_cr) + ((0.5 * (__pyx_v_gamma - 1.0)) * __pyx_v_vnr)));

            /* "phd/riemann/riemann.pyx":957
 *                             u_tmp = (2.0/(gamma + 1.0))*(-cr + 0.5*(gamma-1.0)*vnr)
 * 
 *                             _d = _dr*pow(c/cr, 2.0/(gamma - 1.0))             # <<<<<<<<<<<<<<
 *                             _p = _pr*pow(c/cr, 2.0*gamma/(gamma - 1.0))
 * 
 */
            if (unlikely(__pyx_v_cr == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 957, __pyx_L1_error)
            }
            __pyx_t_7 = (__pyx_v_gamma - 1.0);
            if (unlikely(__pyx_t_7 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 957, __pyx_L1_error)
            }
            __pyx_v__d = (__pyx_v__dr * pow((__pyx_v_c / __pyx_v_cr), (2.0 / __pyx_t_7)));

            /* "phd/riemann/riemann.pyx":958
 * 
 *                             _d = _dr*pow(c/cr, 2.0/(gamma - 1.0))
 *                             _p = _pr*pow(c/cr, 2.0*gamma/(gamma - 1.0))             # <<<<<<<<<<<<<<
 * 
 *                             v_sq = vn = 0.
 */
            if (unlikely(__pyx_v_cr == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 958, __pyx_L1_error)
            }
            __pyx_t_7 = (2.0 * __pyx_v_gamma);
            __pyx_t_12 = (__pyx_v_gamma - 1.0);
            if (unlikely(__pyx_t_12 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 958, __pyx_L1_error)
            }
            __pyx_v__p = (__pyx_v__pr * pow((__pyx_v_c / __pyx_v_cr), (__pyx_t_7 / __pyx_t_12)));

            /* "phd/riemann/riemann.pyx":960
 *                             _p = _pr*pow(c/cr, 2.0*gamma/(gamma - 1.0))
 * 
 *                             v_sq = vn = 0.             # <<<<<<<<<<<<<<
 *                             for k in range(dim):
 *                                 v[k]  = vr[k][i] + (u_tmp - vnr)*nx[k][i]
 */
            __pyx_v_v_sq = 0.;
            __pyx_v_vn = 0.;

            /* "phd/riemann/riemann.pyx":961
 * 
 *                             v_sq = vn = 0.
 *                             for k in range(dim):             # <<<<<<<<<<<<<<
 *                                 v[k]  = vr[k][i] + (u_tmp - vnr)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]
 */
            __pyx_t_8 = __pyx_v_dim;
            __pyx_t_9 = __pyx_t_8;
            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
              __pyx_v_k = __pyx_t_10;

              /* "phd/riemann/riemann.pyx":962
 *                             v_sq = vn = 0.
 *                             for k in range(dim):
 *                                 v[k]  = vr[k][i] + (u_tmp - vnr)*nx[k][i]             # <<<<<<<<<<<<<<
 *                                 vn   += v[k]*nx[k][i]
 *                                 v_sq += v[k]*v[k]
 */
              (__pyx_v_v[__pyx_v_k]) = (((__pyx_v_vr[__pyx_v_k])[__pyx_v_i]) + ((__pyx_v_u_tmp - __pyx_v_vnr) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

              /* "phd/riemann/riemann.pyx":963
 *                             for k in range(dim):
 *                                 v[k]  = vr[k][i] + (u_tmp - vnr)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]             # <<<<<<<<<<<<<<
 *                                 v_sq += v[k]*v[k]
 * 
 */
              __pyx_v_vn = (__pyx_v_vn + ((__pyx_v_v[__pyx_v_k]) * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));

              /* "phd/riemann/riemann.pyx":964
 *                                 v[k]  = vr[k][i] + (u_tmp - vnr)*nx[k][i]
 *                                 vn   += v[k]*nx[k][i]
 *                                 v_sq += v[k]*v[k]             # <<<<<<<<<<<<<<
 * 
 *                             fm.data[i]  = _d*vn
 */
              __pyx_v_v_sq = (__pyx_v_v_sq + ((__pyx_v_v[__pyx_v_k]) * (__pyx_v_v[__pyx_v_k])));
            }

            /* "phd/riemann/riemann.pyx":966
 *                                 v_sq += v[k]*v[k]
 * 
 *                             fm.data[i]  = _d*vn             # <<<<<<<<<<<<<<
 *                             fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 */
            (__pyx_v_fm->data[__pyx_v_i]) = (__pyx_v__d * __pyx_v_vn);

            /* "phd/riemann/riemann.pyx":967
 * 
 *                             fm.data[i]  = _d*vn
 *                             fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn             # <<<<<<<<<<<<<<
 * 
 *                             for k in range(dim):
 */
            __pyx_t_12 = (__pyx_v_gamma * __pyx_v__p);
            __pyx_t_7 = (__pyx_v_gamma - 1.0);
            if (unlikely(__pyx_t_7 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 967, __pyx_L1_error)
            }
            (__pyx_v_fe->data[__pyx_v_i]) = ((((0.5 * __pyx_v__d) * __pyx_v_v_sq) + (__pyx_t_12 / __pyx_t_7)) * __pyx_v_vn);

            /* "phd/riemann/riemann.pyx":969
 *                             fe.data[i]  = (0.5*_d*v_sq + gamma*_p/(gamma - 1.0))*vn
 * 
 *                             for k in range(dim):             # <<<<<<<<<<<<<<
 *                                 fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]
 * 
 */
            __pyx_t_8 = __pyx_v_dim;
            __pyx_t_9 = __pyx_t_8;
            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
              __pyx_v_k = __pyx_t_10;

              /* "phd/riemann/riemann.pyx":970
 * 
 *                             for k in range(dim):
 *                                 fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]             # <<<<<<<<<<<<<<
 * 
 *         self.deboost(self.fluxes, mesh.faces, dim)
 */
              ((__pyx_v_fmv[__pyx_v_k])[__pyx_v_i]) = (((__pyx_v__d * (__pyx_v_v[__pyx_v_k])) * __pyx_v_vn) + (__pyx_v__p * ((__pyx_v_nx[__pyx_v_k])[__pyx_v_i])));
            }
          }
          __pyx_L39:;
        }
        __pyx_L36:;
      }
      __pyx_L28:;
    }
    __pyx_L7:;
  }

  /* "phd/riemann/riemann.pyx":972
 *                                 fmv[k][i] = _d*v[k]*vn + _p*nx[k][i]
 * 
 *         self.deboost(self.fluxes, mesh.faces, dim)             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base.fluxes);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = ((PyObject *)__pyx_v_mesh->faces);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_7riemann_7riemann_Exact *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.deboost(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_3), __pyx_v_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/riemann/riemann.pyx":700
 *         self.fields_registered = False
 * 
 *     cdef riemann_solver(self, Mesh mesh, ReconstructionBase reconstruction, double gamma, int dim):             # <<<<<<<<<<<<<<
 *         """Solve the riemann problem by Exact solver.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phd.riemann.riemann.Exact.riemann_solver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dl);
  __Pyx_XDECREF((PyObject *)__pyx_v_pl);
  __Pyx_XDECREF((PyObject *)__pyx_v_dr);
  __Pyx_XDECREF((PyObject *)__pyx_v_pr);
  __Pyx_XDECREF((PyObject *)__pyx_v_fm);
  __Pyx_XDECREF((PyObject *)__pyx_v_fe);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":975
 * 
 *     @cython.cdivision(True)
 *     cdef inline double p_guess(self, double dl, double ul, double pl, double cl,             # <<<<<<<<<<<<<<
 *             double dr, double ur, double pr, double cr, double gamma) nogil:
 *         """Calculate starting pressure for iterative exact scheme. This is taken
 */

static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_p_guess(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, double __pyx_v_dl, double __pyx_v_ul, double __pyx_v_pl, double __pyx_v_cl, double __pyx_v_dr, double __pyx_v_ur, double __pyx_v_pr, double __pyx_v_cr, double __pyx_v_gamma) {
  double __pyx_v_ppv;
  double __pyx_v_p_lr;
  double __pyx_v_p_tl;
  double __pyx_v_gl;
  double __pyx_v_gr;
  double __pyx_v_p0;
  CYTHON_UNUSED double __pyx_v_p_star;
  double __pyx_v_p_max;
  double __pyx_v_p_min;
  double __pyx_v_q_max;
  double __pyx_v_u_star;
  double __pyx_v_p_tr;
  double __pyx_r;
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;

  /* "phd/riemann/riemann.pyx":988
 * 
 *         # initial guess for pressure Eq. 4.47
 *         ppv = .5*(pl + pr) - .125*(ur - ul)*(dl + dr)*(cl + cr)             # <<<<<<<<<<<<<<
 * 
 *         p_star = max(0., ppv)
 */
  __pyx_v_ppv = ((.5 * (__pyx_v_pl + __pyx_v_pr)) - (((.125 * (__pyx_v_ur - __pyx_v_ul)) * (__pyx_v_dl + __pyx_v_dr)) * (__pyx_v_cl + __pyx_v_cr)));

  /* "phd/riemann/riemann.pyx":990
 *         ppv = .5*(pl + pr) - .125*(ur - ul)*(dl + dr)*(cl + cr)
 * 
 *         p_star = max(0., ppv)             # <<<<<<<<<<<<<<
 *         p_max  = max(pl, pr)
 *         p_min  = min(pl, pr)
 */
  __pyx_t_1 = __pyx_v_ppv;
  __pyx_t_2 = 0.;
  if (((__pyx_t_1 > __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_v_p_star = __pyx_t_3;

  /* "phd/riemann/riemann.pyx":991
 * 
 *         p_star = max(0., ppv)
 *         p_max  = max(pl, pr)             # <<<<<<<<<<<<<<
 *         p_min  = min(pl, pr)
 *         q_max  = p_max/p_min
 */
  __pyx_t_3 = __pyx_v_pr;
  __pyx_t_1 = __pyx_v_pl;
  if (((__pyx_t_3 > __pyx_t_1) != 0)) {
    __pyx_t_2 = __pyx_t_3;
  } else {
    __pyx_t_2 = __pyx_t_1;
  }
  __pyx_v_p_max = __pyx_t_2;

  /* "phd/riemann/riemann.pyx":992
 *         p_star = max(0., ppv)
 *         p_max  = max(pl, pr)
 *         p_min  = min(pl, pr)             # <<<<<<<<<<<<<<
 *         q_max  = p_max/p_min
 * 
 */
  __pyx_t_2 = __pyx_v_pr;
  __pyx_t_3 = __pyx_v_pl;
  if (((__pyx_t_2 < __pyx_t_3) != 0)) {
    __pyx_t_1 = __pyx_t_2;
  } else {
    __pyx_t_1 = __pyx_t_3;
  }
  __pyx_v_p_min = __pyx_t_1;

  /* "phd/riemann/riemann.pyx":993
 *         p_max  = max(pl, pr)
 *         p_min  = min(pl, pr)
 *         q_max  = p_max/p_min             # <<<<<<<<<<<<<<
 * 
 *         if ((q_max <= 2.) and (p_min <= ppv <= p_max)):
 */
  __pyx_v_q_max = (__pyx_v_p_max / __pyx_v_p_min);

  /* "phd/riemann/riemann.pyx":995
 *         q_max  = p_max/p_min
 * 
 *         if ((q_max <= 2.) and (p_min <= ppv <= p_max)):             # <<<<<<<<<<<<<<
 *             p0 = ppv
 * 
 */
  __pyx_t_5 = ((__pyx_v_q_max <= 2.) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_v_p_min <= __pyx_v_ppv);
  if (__pyx_t_5) {
    __pyx_t_5 = (__pyx_v_ppv <= __pyx_v_p_max);
  }
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_4 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "phd/riemann/riemann.pyx":996
 * 
 *         if ((q_max <= 2.) and (p_min <= ppv <= p_max)):
 *             p0 = ppv             # <<<<<<<<<<<<<<
 * 
 *         elif (ppv <= p_min):
 */
    __pyx_v_p0 = __pyx_v_ppv;

    /* "phd/riemann/riemann.pyx":995
 *         q_max  = p_max/p_min
 * 
 *         if ((q_max <= 2.) and (p_min <= ppv <= p_max)):             # <<<<<<<<<<<<<<
 *             p0 = ppv
 * 
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":998
 *             p0 = ppv
 * 
 *         elif (ppv <= p_min):             # <<<<<<<<<<<<<<
 *             p_lr   = pow(pl/pr, (gamma - 1.)/(2.*gamma))
 *             u_star = (p_lr*ul/cl + ur/cr + 2.*(p_lr - 1.)/(gamma - 1.))
 */
  __pyx_t_4 = ((__pyx_v_ppv <= __pyx_v_p_min) != 0);
  if (__pyx_t_4) {

    /* "phd/riemann/riemann.pyx":999
 * 
 *         elif (ppv <= p_min):
 *             p_lr   = pow(pl/pr, (gamma - 1.)/(2.*gamma))             # <<<<<<<<<<<<<<
 *             u_star = (p_lr*ul/cl + ur/cr + 2.*(p_lr - 1.)/(gamma - 1.))
 *             u_star = u_star/(p_lr/cl + 1./cr)
 */
    __pyx_v_p_lr = pow((__pyx_v_pl / __pyx_v_pr), ((__pyx_v_gamma - 1.) / (2. * __pyx_v_gamma)));

    /* "phd/riemann/riemann.pyx":1000
 *         elif (ppv <= p_min):
 *             p_lr   = pow(pl/pr, (gamma - 1.)/(2.*gamma))
 *             u_star = (p_lr*ul/cl + ur/cr + 2.*(p_lr - 1.)/(gamma - 1.))             # <<<<<<<<<<<<<<
 *             u_star = u_star/(p_lr/cl + 1./cr)
 *             p_tl   = pow(1. + (gamma - 1.)*(ul - u_star)/(2.*cl), 2.*gamma/(gamma - 1.))
 */
    __pyx_v_u_star = ((((__pyx_v_p_lr * __pyx_v_ul) / __pyx_v_cl) + (__pyx_v_ur / __pyx_v_cr)) + ((2. * (__pyx_v_p_lr - 1.)) / (__pyx_v_gamma - 1.)));

    /* "phd/riemann/riemann.pyx":1001
 *             p_lr   = pow(pl/pr, (gamma - 1.)/(2.*gamma))
 *             u_star = (p_lr*ul/cl + ur/cr + 2.*(p_lr - 1.)/(gamma - 1.))
 *             u_star = u_star/(p_lr/cl + 1./cr)             # <<<<<<<<<<<<<<
 *             p_tl   = pow(1. + (gamma - 1.)*(ul - u_star)/(2.*cl), 2.*gamma/(gamma - 1.))
 *             p_tr   = pow(1. + (gamma - 1.)*(u_star - ur)/(2.*cr), 2.*gamma/(gamma - 1.))
 */
    __pyx_v_u_star = (__pyx_v_u_star / ((__pyx_v_p_lr / __pyx_v_cl) + (1. / __pyx_v_cr)));

    /* "phd/riemann/riemann.pyx":1002
 *             u_star = (p_lr*ul/cl + ur/cr + 2.*(p_lr - 1.)/(gamma - 1.))
 *             u_star = u_star/(p_lr/cl + 1./cr)
 *             p_tl   = pow(1. + (gamma - 1.)*(ul - u_star)/(2.*cl), 2.*gamma/(gamma - 1.))             # <<<<<<<<<<<<<<
 *             p_tr   = pow(1. + (gamma - 1.)*(u_star - ur)/(2.*cr), 2.*gamma/(gamma - 1.))
 *             p0 = .5*(pl*p_tl + pr*p_tr)
 */
    __pyx_v_p_tl = pow((1. + (((__pyx_v_gamma - 1.) * (__pyx_v_ul - __pyx_v_u_star)) / (2. * __pyx_v_cl))), ((2. * __pyx_v_gamma) / (__pyx_v_gamma - 1.)));

    /* "phd/riemann/riemann.pyx":1003
 *             u_star = u_star/(p_lr/cl + 1./cr)
 *             p_tl   = pow(1. + (gamma - 1.)*(ul - u_star)/(2.*cl), 2.*gamma/(gamma - 1.))
 *             p_tr   = pow(1. + (gamma - 1.)*(u_star - ur)/(2.*cr), 2.*gamma/(gamma - 1.))             # <<<<<<<<<<<<<<
 *             p0 = .5*(pl*p_tl + pr*p_tr)
 * 
 */
    __pyx_v_p_tr = pow((1. + (((__pyx_v_gamma - 1.) * (__pyx_v_u_star - __pyx_v_ur)) / (2. * __pyx_v_cr))), ((2. * __pyx_v_gamma) / (__pyx_v_gamma - 1.)));

    /* "phd/riemann/riemann.pyx":1004
 *             p_tl   = pow(1. + (gamma - 1.)*(ul - u_star)/(2.*cl), 2.*gamma/(gamma - 1.))
 *             p_tr   = pow(1. + (gamma - 1.)*(u_star - ur)/(2.*cr), 2.*gamma/(gamma - 1.))
 *             p0 = .5*(pl*p_tl + pr*p_tr)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_v_p0 = (.5 * ((__pyx_v_pl * __pyx_v_p_tl) + (__pyx_v_pr * __pyx_v_p_tr)));

    /* "phd/riemann/riemann.pyx":998
 *             p0 = ppv
 * 
 *         elif (ppv <= p_min):             # <<<<<<<<<<<<<<
 *             p_lr   = pow(pl/pr, (gamma - 1.)/(2.*gamma))
 *             u_star = (p_lr*ul/cl + ur/cr + 2.*(p_lr - 1.)/(gamma - 1.))
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1007
 * 
 *         else:
 *             gl = sqrt((2./(dl*(gamma + 1.)))/((gamma - 1.)*pl/(gamma + 1.) + ppv))             # <<<<<<<<<<<<<<
 *             gr = sqrt((2./(dr*(gamma + 1.)))/((gamma - 1.)*pr/(gamma + 1.) + ppv))
 *             p0 = (gl*pl + gr*pr - (ur - ul))/(gr + gl)
 */
  /*else*/ {
    __pyx_v_gl = sqrt(((2. / (__pyx_v_dl * (__pyx_v_gamma + 1.))) / ((((__pyx_v_gamma - 1.) * __pyx_v_pl) / (__pyx_v_gamma + 1.)) + __pyx_v_ppv)));

    /* "phd/riemann/riemann.pyx":1008
 *         else:
 *             gl = sqrt((2./(dl*(gamma + 1.)))/((gamma - 1.)*pl/(gamma + 1.) + ppv))
 *             gr = sqrt((2./(dr*(gamma + 1.)))/((gamma - 1.)*pr/(gamma + 1.) + ppv))             # <<<<<<<<<<<<<<
 *             p0 = (gl*pl + gr*pr - (ur - ul))/(gr + gl)
 * 
 */
    __pyx_v_gr = sqrt(((2. / (__pyx_v_dr * (__pyx_v_gamma + 1.))) / ((((__pyx_v_gamma - 1.) * __pyx_v_pr) / (__pyx_v_gamma + 1.)) + __pyx_v_ppv)));

    /* "phd/riemann/riemann.pyx":1009
 *             gl = sqrt((2./(dl*(gamma + 1.)))/((gamma - 1.)*pl/(gamma + 1.) + ppv))
 *             gr = sqrt((2./(dr*(gamma + 1.)))/((gamma - 1.)*pr/(gamma + 1.) + ppv))
 *             p0 = (gl*pl + gr*pr - (ur - ul))/(gr + gl)             # <<<<<<<<<<<<<<
 * 
 *         return p0
 */
    __pyx_v_p0 = ((((__pyx_v_gl * __pyx_v_pl) + (__pyx_v_gr * __pyx_v_pr)) - (__pyx_v_ur - __pyx_v_ul)) / (__pyx_v_gr + __pyx_v_gl));
  }
  __pyx_L3:;

  /* "phd/riemann/riemann.pyx":1011
 *             p0 = (gl*pl + gr*pr - (ur - ul))/(gr + gl)
 * 
 *         return p0             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_p0;
  goto __pyx_L0;

  /* "phd/riemann/riemann.pyx":975
 * 
 *     @cython.cdivision(True)
 *     cdef inline double p_guess(self, double dl, double ul, double pl, double cl,             # <<<<<<<<<<<<<<
 *             double dr, double ur, double pr, double cr, double gamma) nogil:
 *         """Calculate starting pressure for iterative exact scheme. This is taken
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":1014
 * 
 *     @cython.cdivision(True)
 *     cdef inline double p_func(self, double d, double u, double p,             # <<<<<<<<<<<<<<
 *             double c, double gamma, double p_old) nogil:
 *         """
 */

static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_p_func(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, double __pyx_v_d, CYTHON_UNUSED double __pyx_v_u, double __pyx_v_p, double __pyx_v_c, double __pyx_v_gamma, double __pyx_v_p_old) {
  double __pyx_v_f;
  double __pyx_v_Ak;
  double __pyx_v_Bk;
  double __pyx_r;
  int __pyx_t_1;

  /* "phd/riemann/riemann.pyx":1023
 * 
 *         # rarefaction wave Eq: 4.6b and Eq. 4.7b
 *         if (p_old <= p):             # <<<<<<<<<<<<<<
 *             f = 2.*c/(gamma - 1.)*(pow(p_old/p, (gamma - 1.)/(2.*gamma)) - 1.)
 * 
 */
  __pyx_t_1 = ((__pyx_v_p_old <= __pyx_v_p) != 0);
  if (__pyx_t_1) {

    /* "phd/riemann/riemann.pyx":1024
 *         # rarefaction wave Eq: 4.6b and Eq. 4.7b
 *         if (p_old <= p):
 *             f = 2.*c/(gamma - 1.)*(pow(p_old/p, (gamma - 1.)/(2.*gamma)) - 1.)             # <<<<<<<<<<<<<<
 * 
 *         # shock wave Eq. 4.6a and Eq. 4.7a
 */
    __pyx_v_f = (((2. * __pyx_v_c) / (__pyx_v_gamma - 1.)) * (pow((__pyx_v_p_old / __pyx_v_p), ((__pyx_v_gamma - 1.) / (2. * __pyx_v_gamma))) - 1.));

    /* "phd/riemann/riemann.pyx":1023
 * 
 *         # rarefaction wave Eq: 4.6b and Eq. 4.7b
 *         if (p_old <= p):             # <<<<<<<<<<<<<<
 *             f = 2.*c/(gamma - 1.)*(pow(p_old/p, (gamma - 1.)/(2.*gamma)) - 1.)
 * 
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1028
 *         # shock wave Eq. 4.6a and Eq. 4.7a
 *         else:
 *             Ak = 2./(d*(gamma + 1.))             # <<<<<<<<<<<<<<
 *             Bk = p*(gamma - 1.)/(gamma + 1.)
 *             f = (p_old - p)*sqrt(Ak/(p_old + Bk))
 */
  /*else*/ {
    __pyx_v_Ak = (2. / (__pyx_v_d * (__pyx_v_gamma + 1.)));

    /* "phd/riemann/riemann.pyx":1029
 *         else:
 *             Ak = 2./(d*(gamma + 1.))
 *             Bk = p*(gamma - 1.)/(gamma + 1.)             # <<<<<<<<<<<<<<
 *             f = (p_old - p)*sqrt(Ak/(p_old + Bk))
 * 
 */
    __pyx_v_Bk = ((__pyx_v_p * (__pyx_v_gamma - 1.)) / (__pyx_v_gamma + 1.));

    /* "phd/riemann/riemann.pyx":1030
 *             Ak = 2./(d*(gamma + 1.))
 *             Bk = p*(gamma - 1.)/(gamma + 1.)
 *             f = (p_old - p)*sqrt(Ak/(p_old + Bk))             # <<<<<<<<<<<<<<
 * 
 *         return f
 */
    __pyx_v_f = ((__pyx_v_p_old - __pyx_v_p) * sqrt((__pyx_v_Ak / (__pyx_v_p_old + __pyx_v_Bk))));
  }
  __pyx_L3:;

  /* "phd/riemann/riemann.pyx":1032
 *             f = (p_old - p)*sqrt(Ak/(p_old + Bk))
 * 
 *         return f             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "phd/riemann/riemann.pyx":1014
 * 
 *     @cython.cdivision(True)
 *     cdef inline double p_func(self, double d, double u, double p,             # <<<<<<<<<<<<<<
 *             double c, double gamma, double p_old) nogil:
 *         """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":1035
 * 
 *     @cython.cdivision(True)
 *     cdef inline double p_func_deriv(self, double d, double u, double p,             # <<<<<<<<<<<<<<
 *             double c, double gamma, double p_old) nogil:
 *         """Calculate the derivative of the jump across the wave. This was
 */

static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_p_func_deriv(CYTHON_UNUSED struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, double __pyx_v_d, CYTHON_UNUSED double __pyx_v_u, double __pyx_v_p, double __pyx_v_c, double __pyx_v_gamma, double __pyx_v_p_old) {
  double __pyx_v_df;
  double __pyx_v_Ak;
  double __pyx_v_Bk;
  double __pyx_r;
  int __pyx_t_1;

  /* "phd/riemann/riemann.pyx":1044
 * 
 *         # derivative for rarefaction wave Eq. 4.37
 *         if (p_old <= p):             # <<<<<<<<<<<<<<
 *             df = pow(p_old/p, -(gamma + 1.)/(2.*gamma))/(c*d)
 * 
 */
  __pyx_t_1 = ((__pyx_v_p_old <= __pyx_v_p) != 0);
  if (__pyx_t_1) {

    /* "phd/riemann/riemann.pyx":1045
 *         # derivative for rarefaction wave Eq. 4.37
 *         if (p_old <= p):
 *             df = pow(p_old/p, -(gamma + 1.)/(2.*gamma))/(c*d)             # <<<<<<<<<<<<<<
 * 
 *         # derivative for shock wave
 */
    __pyx_v_df = (pow((__pyx_v_p_old / __pyx_v_p), ((-(__pyx_v_gamma + 1.)) / (2. * __pyx_v_gamma))) / (__pyx_v_c * __pyx_v_d));

    /* "phd/riemann/riemann.pyx":1044
 * 
 *         # derivative for rarefaction wave Eq. 4.37
 *         if (p_old <= p):             # <<<<<<<<<<<<<<
 *             df = pow(p_old/p, -(gamma + 1.)/(2.*gamma))/(c*d)
 * 
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1050
 *         else:
 *             # Eq: 4.8 and Eq. 4.37
 *             Ak = 2./(d*(gamma + 1.))             # <<<<<<<<<<<<<<
 *             Bk = p*(gamma - 1.)/(gamma + 1.)
 *             df = sqrt(Ak/(p_old + Bk))*(1. - .5*(p_old - p)/(Bk + p_old))
 */
  /*else*/ {
    __pyx_v_Ak = (2. / (__pyx_v_d * (__pyx_v_gamma + 1.)));

    /* "phd/riemann/riemann.pyx":1051
 *             # Eq: 4.8 and Eq. 4.37
 *             Ak = 2./(d*(gamma + 1.))
 *             Bk = p*(gamma - 1.)/(gamma + 1.)             # <<<<<<<<<<<<<<
 *             df = sqrt(Ak/(p_old + Bk))*(1. - .5*(p_old - p)/(Bk + p_old))
 * 
 */
    __pyx_v_Bk = ((__pyx_v_p * (__pyx_v_gamma - 1.)) / (__pyx_v_gamma + 1.));

    /* "phd/riemann/riemann.pyx":1052
 *             Ak = 2./(d*(gamma + 1.))
 *             Bk = p*(gamma - 1.)/(gamma + 1.)
 *             df = sqrt(Ak/(p_old + Bk))*(1. - .5*(p_old - p)/(Bk + p_old))             # <<<<<<<<<<<<<<
 * 
 *         return df
 */
    __pyx_v_df = (sqrt((__pyx_v_Ak / (__pyx_v_p_old + __pyx_v_Bk))) * (1. - ((.5 * (__pyx_v_p_old - __pyx_v_p)) / (__pyx_v_Bk + __pyx_v_p_old))));
  }
  __pyx_L3:;

  /* "phd/riemann/riemann.pyx":1054
 *             df = sqrt(Ak/(p_old + Bk))*(1. - .5*(p_old - p)/(Bk + p_old))
 * 
 *         return df             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_df;
  goto __pyx_L0;

  /* "phd/riemann/riemann.pyx":1035
 * 
 *     @cython.cdivision(True)
 *     cdef inline double p_func_deriv(self, double d, double u, double p,             # <<<<<<<<<<<<<<
 *             double c, double gamma, double p_old) nogil:
 *         """Calculate the derivative of the jump across the wave. This was
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":1057
 * 
 *     @cython.cdivision(True)
 *     cdef inline double get_pstar(self, double dl, double ul, double pl, double cl,             # <<<<<<<<<<<<<<
 *             double dr, double ur, double pr, double cr, double gamma) nogil:
 *         """Calculate star pressure by iteration. This was taken from Toro
 */

static CYTHON_INLINE double __pyx_f_3phd_7riemann_7riemann_5Exact_get_pstar(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, double __pyx_v_dl, double __pyx_v_ul, double __pyx_v_pl, double __pyx_v_cl, double __pyx_v_dr, double __pyx_v_ur, double __pyx_v_pr, double __pyx_v_cr, double __pyx_v_gamma) {
  double __pyx_v_TOL;
  int __pyx_v_MAX_ITER;
  int __pyx_v_i;
  double __pyx_v_p_old;
  double __pyx_v_p_new;
  double __pyx_v_fr;
  double __pyx_v_fl;
  double __pyx_v_dfl;
  double __pyx_v_dfr;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("get_pstar", 0);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif

  /* "phd/riemann/riemann.pyx":1059
 *     cdef inline double get_pstar(self, double dl, double ul, double pl, double cl,
 *             double dr, double ur, double pr, double cr, double gamma) nogil:
 *         """Calculate star pressure by iteration. This was taken from Toro             # <<<<<<<<<<<<<<
 *         Riemann Solvers and Numerical Methods for Fluid Dynamics chapter 4.
 *         """
 */
  /*try:*/ {

    /* "phd/riemann/riemann.pyx":1062
 *         Riemann Solvers and Numerical Methods for Fluid Dynamics chapter 4.
 *         """
 *         cdef double TOL = 1.0e-6             # <<<<<<<<<<<<<<
 *         cdef int MAX_ITER = 1000
 * 
 */
    __pyx_v_TOL = 1.0e-6;

    /* "phd/riemann/riemann.pyx":1063
 *         """
 *         cdef double TOL = 1.0e-6
 *         cdef int MAX_ITER = 1000             # <<<<<<<<<<<<<<
 * 
 *         cdef int i = 0
 */
    __pyx_v_MAX_ITER = 0x3E8;

    /* "phd/riemann/riemann.pyx":1065
 *         cdef int MAX_ITER = 1000
 * 
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef double p_old, p_new, p
 *         cdef double fr, fl, df_r, df_l
 */
    __pyx_v_i = 0;

    /* "phd/riemann/riemann.pyx":1069
 *         cdef double fr, fl, df_r, df_l
 * 
 *         p_old = self.p_guess(dl, ul, pl, cl, dr, ur, pr, cr, gamma)             # <<<<<<<<<<<<<<
 *         while(i < MAX_ITER):
 * 
 */
    __pyx_v_p_old = __pyx_f_3phd_7riemann_7riemann_5Exact_p_guess(__pyx_v_self, __pyx_v_dl, __pyx_v_ul, __pyx_v_pl, __pyx_v_cl, __pyx_v_dr, __pyx_v_ur, __pyx_v_pr, __pyx_v_cr, __pyx_v_gamma);

    /* "phd/riemann/riemann.pyx":1070
 * 
 *         p_old = self.p_guess(dl, ul, pl, cl, dr, ur, pr, cr, gamma)
 *         while(i < MAX_ITER):             # <<<<<<<<<<<<<<
 * 
 *             fl  = self.p_func(dl, ul, pl, cl, gamma, p_old)
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_MAX_ITER) != 0);
      if (!__pyx_t_1) break;

      /* "phd/riemann/riemann.pyx":1072
 *         while(i < MAX_ITER):
 * 
 *             fl  = self.p_func(dl, ul, pl, cl, gamma, p_old)             # <<<<<<<<<<<<<<
 *             fr  = self.p_func(dr, ur, pr, cr, gamma, p_old)
 *             dfl = self.p_func_deriv(dl, ul, pl, cl, gamma, p_old)
 */
      __pyx_v_fl = __pyx_f_3phd_7riemann_7riemann_5Exact_p_func(__pyx_v_self, __pyx_v_dl, __pyx_v_ul, __pyx_v_pl, __pyx_v_cl, __pyx_v_gamma, __pyx_v_p_old);

      /* "phd/riemann/riemann.pyx":1073
 * 
 *             fl  = self.p_func(dl, ul, pl, cl, gamma, p_old)
 *             fr  = self.p_func(dr, ur, pr, cr, gamma, p_old)             # <<<<<<<<<<<<<<
 *             dfl = self.p_func_deriv(dl, ul, pl, cl, gamma, p_old)
 *             dfr = self.p_func_deriv(dr, ur, pr, cr, gamma, p_old)
 */
      __pyx_v_fr = __pyx_f_3phd_7riemann_7riemann_5Exact_p_func(__pyx_v_self, __pyx_v_dr, __pyx_v_ur, __pyx_v_pr, __pyx_v_cr, __pyx_v_gamma, __pyx_v_p_old);

      /* "phd/riemann/riemann.pyx":1074
 *             fl  = self.p_func(dl, ul, pl, cl, gamma, p_old)
 *             fr  = self.p_func(dr, ur, pr, cr, gamma, p_old)
 *             dfl = self.p_func_deriv(dl, ul, pl, cl, gamma, p_old)             # <<<<<<<<<<<<<<
 *             dfr = self.p_func_deriv(dr, ur, pr, cr, gamma, p_old)
 * 
 */
      __pyx_v_dfl = __pyx_f_3phd_7riemann_7riemann_5Exact_p_func_deriv(__pyx_v_self, __pyx_v_dl, __pyx_v_ul, __pyx_v_pl, __pyx_v_cl, __pyx_v_gamma, __pyx_v_p_old);

      /* "phd/riemann/riemann.pyx":1075
 *             fr  = self.p_func(dr, ur, pr, cr, gamma, p_old)
 *             dfl = self.p_func_deriv(dl, ul, pl, cl, gamma, p_old)
 *             dfr = self.p_func_deriv(dr, ur, pr, cr, gamma, p_old)             # <<<<<<<<<<<<<<
 * 
 *             p_new = p_old - (fl + fr + ur - ul)/(dfl + dfr)
 */
      __pyx_v_dfr = __pyx_f_3phd_7riemann_7riemann_5Exact_p_func_deriv(__pyx_v_self, __pyx_v_dr, __pyx_v_ur, __pyx_v_pr, __pyx_v_cr, __pyx_v_gamma, __pyx_v_p_old);

      /* "phd/riemann/riemann.pyx":1077
 *             dfr = self.p_func_deriv(dr, ur, pr, cr, gamma, p_old)
 * 
 *             p_new = p_old - (fl + fr + ur - ul)/(dfl + dfr)             # <<<<<<<<<<<<<<
 * 
 *             if ( 2.*fabs((p_new - p_old)/(p_new + p_old)) ) <= TOL:
 */
      __pyx_v_p_new = (__pyx_v_p_old - ((((__pyx_v_fl + __pyx_v_fr) + __pyx_v_ur) - __pyx_v_ul) / (__pyx_v_dfl + __pyx_v_dfr)));

      /* "phd/riemann/riemann.pyx":1079
 *             p_new = p_old - (fl + fr + ur - ul)/(dfl + dfr)
 * 
 *             if ( 2.*fabs((p_new - p_old)/(p_new + p_old)) ) <= TOL:             # <<<<<<<<<<<<<<
 *                 return p_new
 * 
 */
      __pyx_t_1 = (((2. * fabs(((__pyx_v_p_new - __pyx_v_p_old) / (__pyx_v_p_new + __pyx_v_p_old)))) <= __pyx_v_TOL) != 0);
      if (__pyx_t_1) {

        /* "phd/riemann/riemann.pyx":1080
 * 
 *             if ( 2.*fabs((p_new - p_old)/(p_new + p_old)) ) <= TOL:
 *                 return p_new             # <<<<<<<<<<<<<<
 * 
 *             if (p_new < 0.):
 */
        __pyx_r = __pyx_v_p_new;
        goto __pyx_L3_return;

        /* "phd/riemann/riemann.pyx":1079
 *             p_new = p_old - (fl + fr + ur - ul)/(dfl + dfr)
 * 
 *             if ( 2.*fabs((p_new - p_old)/(p_new + p_old)) ) <= TOL:             # <<<<<<<<<<<<<<
 *                 return p_new
 * 
 */
      }

      /* "phd/riemann/riemann.pyx":1082
 *                 return p_new
 * 
 *             if (p_new < 0.):             # <<<<<<<<<<<<<<
 *                 p_new = TOL
 * 
 */
      __pyx_t_1 = ((__pyx_v_p_new < 0.) != 0);
      if (__pyx_t_1) {

        /* "phd/riemann/riemann.pyx":1083
 * 
 *             if (p_new < 0.):
 *                 p_new = TOL             # <<<<<<<<<<<<<<
 * 
 *             p_old = p_new
 */
        __pyx_v_p_new = __pyx_v_TOL;

        /* "phd/riemann/riemann.pyx":1082
 *                 return p_new
 * 
 *             if (p_new < 0.):             # <<<<<<<<<<<<<<
 *                 p_new = TOL
 * 
 */
      }

      /* "phd/riemann/riemann.pyx":1085
 *                 p_new = TOL
 * 
 *             p_old = p_new             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
      __pyx_v_p_old = __pyx_v_p_new;

      /* "phd/riemann/riemann.pyx":1086
 * 
 *             p_old = p_new
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         # failed to converge
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "phd/riemann/riemann.pyx":1089
 * 
 *         # failed to converge
 *         with gil:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('No convergence in Exact Riemann Solver')
 * 
 */
    {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        /*try:*/ {

          /* "phd/riemann/riemann.pyx":1090
 *         # failed to converge
 *         with gil:
 *             raise RuntimeError('No convergence in Exact Riemann Solver')             # <<<<<<<<<<<<<<
 * 
 * cdef inline void vacuum(
 */
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1090, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __PYX_ERR(0, 1090, __pyx_L11_error)
        }

        /* "phd/riemann/riemann.pyx":1089
 * 
 *         # failed to converge
 *         with gil:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('No convergence in Exact Riemann Solver')
 * 
 */
        /*finally:*/ {
          __pyx_L11_error: {
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            goto __pyx_L4_error;
          }
        }
    }
  }

  /* "phd/riemann/riemann.pyx":1059
 *     cdef inline double get_pstar(self, double dl, double ul, double pl, double cl,
 *             double dr, double ur, double pr, double cr, double gamma) nogil:
 *         """Calculate star pressure by iteration. This was taken from Toro             # <<<<<<<<<<<<<<
 *         Riemann Solvers and Numerical Methods for Fluid Dynamics chapter 4.
 *         """
 */
  /*finally:*/ {
    __pyx_L3_return: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L0;
    }
    __pyx_L4_error: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L1_error;
    }
  }

  /* "phd/riemann/riemann.pyx":1057
 * 
 *     @cython.cdivision(True)
 *     cdef inline double get_pstar(self, double dl, double ul, double pl, double cl,             # <<<<<<<<<<<<<<
 *             double dr, double ur, double pr, double cr, double gamma) nogil:
 *         """Calculate star pressure by iteration. This was taken from Toro
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("phd.riemann.riemann.Exact.get_pstar", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "phd/riemann/riemann.pxd":36
 * 
 * cdef class Exact(RiemannBase):
 *     cdef public bint boost             # <<<<<<<<<<<<<<
 * 
 *     cdef inline double p_guess(self, double dl, double ul, double pl, double cl,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_5Exact_5boost_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_5Exact_5boost_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_5Exact_5boost___get__(((struct __pyx_obj_3phd_7riemann_7riemann_Exact *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_5Exact_5boost___get__(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->boost); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.Exact.boost.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7riemann_7riemann_5Exact_5boost_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7riemann_7riemann_5Exact_5boost_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_5Exact_5boost_2__set__(((struct __pyx_obj_3phd_7riemann_7riemann_Exact *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7riemann_7riemann_5Exact_5boost_2__set__(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 36, __pyx_L1_error)
  __pyx_v_self->boost = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.riemann.riemann.Exact.boost.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_5Exact_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_5Exact_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_5Exact_2__reduce_cython__(((struct __pyx_obj_3phd_7riemann_7riemann_Exact *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_5Exact_2__reduce_cython__(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->boost); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.cfl); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.fields_registered); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.flux_field_groups);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.flux_field_groups);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_self->__pyx_base.flux_field_groups);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.flux_fields);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.flux_fields);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_v_self->__pyx_base.flux_fields);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.fluxes));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.fluxes));
  PyTuple_SET_ITEM(__pyx_t_4, 5, ((PyObject *)__pyx_v_self->__pyx_base.fluxes));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.boost, self.cfl, self.fields_registered, self.flux_field_groups, self.flux_fields, self.fluxes)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Exact, (type(self), 0xcaafa99, None), state
 */
  /*else*/ {
    __pyx_t_5 = (__pyx_v_self->__pyx_base.flux_field_groups != ((PyObject*)Py_None));
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_v_self->__pyx_base.flux_fields != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base.fluxes) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Exact, (type(self), 0xcaafa99, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Exact, (type(self), 0xcaafa99, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Exact, (type(self), 0xcaafa99, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_Exact); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_212531865);
    __Pyx_GIVEREF(__pyx_int_212531865);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_212531865);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.flux_field_groups is not None or self.flux_fields is not None or self.fluxes is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Exact, (type(self), 0xcaafa99, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Exact, (type(self), 0xcaafa99, None), state
 *     else:
 *         return __pyx_unpickle_Exact, (type(self), 0xcaafa99, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Exact__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_Exact); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_212531865);
    __Pyx_GIVEREF(__pyx_int_212531865);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_212531865);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phd.riemann.riemann.Exact.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Exact, (type(self), 0xcaafa99, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Exact__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_5Exact_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3phd_7riemann_7riemann_5Exact_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_5Exact_4__setstate_cython__(((struct __pyx_obj_3phd_7riemann_7riemann_Exact *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_5Exact_4__setstate_cython__(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Exact, (type(self), 0xcaafa99, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Exact__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_3phd_7riemann_7riemann___pyx_unpickle_Exact__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Exact, (type(self), 0xcaafa99, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Exact__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.riemann.riemann.Exact.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/riemann/riemann.pyx":1092
 *             raise RuntimeError('No convergence in Exact Riemann Solver')
 * 
 * cdef inline void vacuum(             # <<<<<<<<<<<<<<
 *         double dl, double vl[3], double pl, double vnl, double cl,
 *         double dr, double vr[3], double pr, double vnr, double cr,
 */

static CYTHON_INLINE void __pyx_f_3phd_7riemann_7riemann_vacuum(double __pyx_v_dl, double *__pyx_v_vl, double __pyx_v_pl, double __pyx_v_vnl, double __pyx_v_cl, double __pyx_v_dr, double *__pyx_v_vr, double __pyx_v_pr, double __pyx_v_vnr, double __pyx_v_cr, double *__pyx_v_d, double *__pyx_v_v, double *__pyx_v_p, double *__pyx_v_vn, double *__pyx_v_vsq, double __pyx_v_gamma, double *__pyx_v_n, int __pyx_v_dim) {
  int __pyx_v_i;
  double __pyx_v_c;
  double __pyx_v_u_tmp;
  double __pyx_v_sl;
  double __pyx_v_sr;
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "phd/riemann/riemann.pyx":1103
 *     cdef double c, u_tmp
 * 
 *     cdef double sl = vnl + 2.*cl/(gamma-1.)             # <<<<<<<<<<<<<<
 *     cdef double sr = vnr - 2.*cr/(gamma-1.)
 * 
 */
  __pyx_t_1 = (2. * __pyx_v_cl);
  __pyx_t_2 = (__pyx_v_gamma - 1.);
  if (unlikely(__pyx_t_2 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1103, __pyx_L1_error)
  }
  __pyx_v_sl = (__pyx_v_vnl + (__pyx_t_1 / __pyx_t_2));

  /* "phd/riemann/riemann.pyx":1104
 * 
 *     cdef double sl = vnl + 2.*cl/(gamma-1.)
 *     cdef double sr = vnr - 2.*cr/(gamma-1.)             # <<<<<<<<<<<<<<
 * 
 *     # one of the states are zero
 */
  __pyx_t_2 = (2. * __pyx_v_cr);
  __pyx_t_1 = (__pyx_v_gamma - 1.);
  if (unlikely(__pyx_t_1 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1104, __pyx_L1_error)
  }
  __pyx_v_sr = (__pyx_v_vnr - (__pyx_t_2 / __pyx_t_1));

  /* "phd/riemann/riemann.pyx":1108
 *     # one of the states are zero
 * 
 *     if(dr == 0): # right vacuum Eq 4.77             # <<<<<<<<<<<<<<
 *         if(0. <= vnl - cl): # left state
 *             d[0] = dl
 */
  __pyx_t_3 = ((__pyx_v_dr == 0.0) != 0);
  if (__pyx_t_3) {

    /* "phd/riemann/riemann.pyx":1109
 * 
 *     if(dr == 0): # right vacuum Eq 4.77
 *         if(0. <= vnl - cl): # left state             # <<<<<<<<<<<<<<
 *             d[0] = dl
 *             p[0] = pl
 */
    __pyx_t_3 = ((0. <= (__pyx_v_vnl - __pyx_v_cl)) != 0);
    if (__pyx_t_3) {

      /* "phd/riemann/riemann.pyx":1110
 *     if(dr == 0): # right vacuum Eq 4.77
 *         if(0. <= vnl - cl): # left state
 *             d[0] = dl             # <<<<<<<<<<<<<<
 *             p[0] = pl
 * 
 */
      (__pyx_v_d[0]) = __pyx_v_dl;

      /* "phd/riemann/riemann.pyx":1111
 *         if(0. <= vnl - cl): # left state
 *             d[0] = dl
 *             p[0] = pl             # <<<<<<<<<<<<<<
 * 
 *             vn[0] = vsq[0] = 0.
 */
      (__pyx_v_p[0]) = __pyx_v_pl;

      /* "phd/riemann/riemann.pyx":1113
 *             p[0] = pl
 * 
 *             vn[0] = vsq[0] = 0.             # <<<<<<<<<<<<<<
 *             for i in range(dim):
 *                 v[i]    = vl[i]
 */
      (__pyx_v_vn[0]) = 0.;
      (__pyx_v_vsq[0]) = 0.;

      /* "phd/riemann/riemann.pyx":1114
 * 
 *             vn[0] = vsq[0] = 0.
 *             for i in range(dim):             # <<<<<<<<<<<<<<
 *                 v[i]    = vl[i]
 *                 vn[0]  += v[i]*n[i]
 */
      __pyx_t_4 = __pyx_v_dim;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "phd/riemann/riemann.pyx":1115
 *             vn[0] = vsq[0] = 0.
 *             for i in range(dim):
 *                 v[i]    = vl[i]             # <<<<<<<<<<<<<<
 *                 vn[0]  += v[i]*n[i]
 *                 vsq[0] += v[i]*v[i]
 */
        (__pyx_v_v[__pyx_v_i]) = (__pyx_v_vl[__pyx_v_i]);

        /* "phd/riemann/riemann.pyx":1116
 *             for i in range(dim):
 *                 v[i]    = vl[i]
 *                 vn[0]  += v[i]*n[i]             # <<<<<<<<<<<<<<
 *                 vsq[0] += v[i]*v[i]
 * 
 */
        __pyx_t_7 = 0;
        (__pyx_v_vn[__pyx_t_7]) = ((__pyx_v_vn[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_n[__pyx_v_i])));

        /* "phd/riemann/riemann.pyx":1117
 *                 v[i]    = vl[i]
 *                 vn[0]  += v[i]*n[i]
 *                 vsq[0] += v[i]*v[i]             # <<<<<<<<<<<<<<
 * 
 *         elif(0. < sl): # left fan
 */
        __pyx_t_7 = 0;
        (__pyx_v_vsq[__pyx_t_7]) = ((__pyx_v_vsq[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_v[__pyx_v_i])));
      }

      /* "phd/riemann/riemann.pyx":1109
 * 
 *     if(dr == 0): # right vacuum Eq 4.77
 *         if(0. <= vnl - cl): # left state             # <<<<<<<<<<<<<<
 *             d[0] = dl
 *             p[0] = pl
 */
      goto __pyx_L4;
    }

    /* "phd/riemann/riemann.pyx":1119
 *                 vsq[0] += v[i]*v[i]
 * 
 *         elif(0. < sl): # left fan             # <<<<<<<<<<<<<<
 *             c    = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl)
 *             d[0] = dl*pow(c/cl, 2./(gamma - 1.))
 */
    __pyx_t_3 = ((0. < __pyx_v_sl) != 0);
    if (__pyx_t_3) {

      /* "phd/riemann/riemann.pyx":1120
 * 
 *         elif(0. < sl): # left fan
 *             c    = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl)             # <<<<<<<<<<<<<<
 *             d[0] = dl*pow(c/cl, 2./(gamma - 1.))
 *             p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))
 */
      __pyx_t_1 = (__pyx_v_gamma + 1.);
      if (unlikely(__pyx_t_1 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1120, __pyx_L1_error)
      }
      __pyx_v_c = ((2. / __pyx_t_1) * (__pyx_v_cl + ((.5 * (__pyx_v_gamma - 1.)) * __pyx_v_vnl)));

      /* "phd/riemann/riemann.pyx":1121
 *         elif(0. < sl): # left fan
 *             c    = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl)
 *             d[0] = dl*pow(c/cl, 2./(gamma - 1.))             # <<<<<<<<<<<<<<
 *             p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))
 * 
 */
      if (unlikely(__pyx_v_cl == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1121, __pyx_L1_error)
      }
      __pyx_t_1 = (__pyx_v_gamma - 1.);
      if (unlikely(__pyx_t_1 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1121, __pyx_L1_error)
      }
      (__pyx_v_d[0]) = (__pyx_v_dl * pow((__pyx_v_c / __pyx_v_cl), (2. / __pyx_t_1)));

      /* "phd/riemann/riemann.pyx":1122
 *             c    = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl)
 *             d[0] = dl*pow(c/cl, 2./(gamma - 1.))
 *             p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))             # <<<<<<<<<<<<<<
 * 
 *             vn[0] = vsq[0] = 0.
 */
      if (unlikely(__pyx_v_cl == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1122, __pyx_L1_error)
      }
      __pyx_t_1 = (2. * __pyx_v_gamma);
      __pyx_t_2 = (__pyx_v_gamma - 1.);
      if (unlikely(__pyx_t_2 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1122, __pyx_L1_error)
      }
      (__pyx_v_p[0]) = (__pyx_v_pl * pow((__pyx_v_c / __pyx_v_cl), (__pyx_t_1 / __pyx_t_2)));

      /* "phd/riemann/riemann.pyx":1124
 *             p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))
 * 
 *             vn[0] = vsq[0] = 0.             # <<<<<<<<<<<<<<
 *             for i in range(dim):
 *                 v[i]    = vl[i] + (c - vnl)*n[i]
 */
      (__pyx_v_vn[0]) = 0.;
      (__pyx_v_vsq[0]) = 0.;

      /* "phd/riemann/riemann.pyx":1125
 * 
 *             vn[0] = vsq[0] = 0.
 *             for i in range(dim):             # <<<<<<<<<<<<<<
 *                 v[i]    = vl[i] + (c - vnl)*n[i]
 *                 vn[0]  += v[i]*n[i]
 */
      __pyx_t_4 = __pyx_v_dim;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "phd/riemann/riemann.pyx":1126
 *             vn[0] = vsq[0] = 0.
 *             for i in range(dim):
 *                 v[i]    = vl[i] + (c - vnl)*n[i]             # <<<<<<<<<<<<<<
 *                 vn[0]  += v[i]*n[i]
 *                 vsq[0] += v[i]*v[i]
 */
        (__pyx_v_v[__pyx_v_i]) = ((__pyx_v_vl[__pyx_v_i]) + ((__pyx_v_c - __pyx_v_vnl) * (__pyx_v_n[__pyx_v_i])));

        /* "phd/riemann/riemann.pyx":1127
 *             for i in range(dim):
 *                 v[i]    = vl[i] + (c - vnl)*n[i]
 *                 vn[0]  += v[i]*n[i]             # <<<<<<<<<<<<<<
 *                 vsq[0] += v[i]*v[i]
 * 
 */
        __pyx_t_7 = 0;
        (__pyx_v_vn[__pyx_t_7]) = ((__pyx_v_vn[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_n[__pyx_v_i])));

        /* "phd/riemann/riemann.pyx":1128
 *                 v[i]    = vl[i] + (c - vnl)*n[i]
 *                 vn[0]  += v[i]*n[i]
 *                 vsq[0] += v[i]*v[i]             # <<<<<<<<<<<<<<
 * 
 *         else: # right vacuum
 */
        __pyx_t_7 = 0;
        (__pyx_v_vsq[__pyx_t_7]) = ((__pyx_v_vsq[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_v[__pyx_v_i])));
      }

      /* "phd/riemann/riemann.pyx":1119
 *                 vsq[0] += v[i]*v[i]
 * 
 *         elif(0. < sl): # left fan             # <<<<<<<<<<<<<<
 *             c    = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl)
 *             d[0] = dl*pow(c/cl, 2./(gamma - 1.))
 */
      goto __pyx_L4;
    }

    /* "phd/riemann/riemann.pyx":1131
 * 
 *         else: # right vacuum
 *             d[0] = 0.             # <<<<<<<<<<<<<<
 *             p[0] = 0.
 * 
 */
    /*else*/ {
      (__pyx_v_d[0]) = 0.;

      /* "phd/riemann/riemann.pyx":1132
 *         else: # right vacuum
 *             d[0] = 0.
 *             p[0] = 0.             # <<<<<<<<<<<<<<
 * 
 *             vn[0] = vsq[0] = 0
 */
      (__pyx_v_p[0]) = 0.;

      /* "phd/riemann/riemann.pyx":1134
 *             p[0] = 0.
 * 
 *             vn[0] = vsq[0] = 0             # <<<<<<<<<<<<<<
 *             for i in range(dim):
 *                 v[i] = 0.
 */
      (__pyx_v_vn[0]) = 0.0;
      (__pyx_v_vsq[0]) = 0.0;

      /* "phd/riemann/riemann.pyx":1135
 * 
 *             vn[0] = vsq[0] = 0
 *             for i in range(dim):             # <<<<<<<<<<<<<<
 *                 v[i] = 0.
 * 
 */
      __pyx_t_4 = __pyx_v_dim;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "phd/riemann/riemann.pyx":1136
 *             vn[0] = vsq[0] = 0
 *             for i in range(dim):
 *                 v[i] = 0.             # <<<<<<<<<<<<<<
 * 
 *     elif(dl == 0): # left vacuum
 */
        (__pyx_v_v[__pyx_v_i]) = 0.;
      }
    }
    __pyx_L4:;

    /* "phd/riemann/riemann.pyx":1108
 *     # one of the states are zero
 * 
 *     if(dr == 0): # right vacuum Eq 4.77             # <<<<<<<<<<<<<<
 *         if(0. <= vnl - cl): # left state
 *             d[0] = dl
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1138
 *                 v[i] = 0.
 * 
 *     elif(dl == 0): # left vacuum             # <<<<<<<<<<<<<<
 *         if 0. <= sr: # left vacuum
 *             d[0] = 0.
 */
  __pyx_t_3 = ((__pyx_v_dl == 0.0) != 0);
  if (__pyx_t_3) {

    /* "phd/riemann/riemann.pyx":1139
 * 
 *     elif(dl == 0): # left vacuum
 *         if 0. <= sr: # left vacuum             # <<<<<<<<<<<<<<
 *             d[0] = 0.
 *             p[0] = 0.
 */
    __pyx_t_3 = ((0. <= __pyx_v_sr) != 0);
    if (__pyx_t_3) {

      /* "phd/riemann/riemann.pyx":1140
 *     elif(dl == 0): # left vacuum
 *         if 0. <= sr: # left vacuum
 *             d[0] = 0.             # <<<<<<<<<<<<<<
 *             p[0] = 0.
 * 
 */
      (__pyx_v_d[0]) = 0.;

      /* "phd/riemann/riemann.pyx":1141
 *         if 0. <= sr: # left vacuum
 *             d[0] = 0.
 *             p[0] = 0.             # <<<<<<<<<<<<<<
 * 
 *             vn[0] = vsq[0] = 0.
 */
      (__pyx_v_p[0]) = 0.;

      /* "phd/riemann/riemann.pyx":1143
 *             p[0] = 0.
 * 
 *             vn[0] = vsq[0] = 0.             # <<<<<<<<<<<<<<
 *             for i in range(dim):
 *                 v[i] = 0.
 */
      (__pyx_v_vn[0]) = 0.;
      (__pyx_v_vsq[0]) = 0.;

      /* "phd/riemann/riemann.pyx":1144
 * 
 *             vn[0] = vsq[0] = 0.
 *             for i in range(dim):             # <<<<<<<<<<<<<<
 *                 v[i] = 0.
 * 
 */
      __pyx_t_4 = __pyx_v_dim;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "phd/riemann/riemann.pyx":1145
 *             vn[0] = vsq[0] = 0.
 *             for i in range(dim):
 *                 v[i] = 0.             # <<<<<<<<<<<<<<
 * 
 *         elif(0. < vnr + cr): # right fan
 */
        (__pyx_v_v[__pyx_v_i]) = 0.;
      }

      /* "phd/riemann/riemann.pyx":1139
 * 
 *     elif(dl == 0): # left vacuum
 *         if 0. <= sr: # left vacuum             # <<<<<<<<<<<<<<
 *             d[0] = 0.
 *             p[0] = 0.
 */
      goto __pyx_L11;
    }

    /* "phd/riemann/riemann.pyx":1147
 *                 v[i] = 0.
 * 
 *         elif(0. < vnr + cr): # right fan             # <<<<<<<<<<<<<<
 *             # sampled point is inside right fan
 *             c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*vnr)
 */
    __pyx_t_3 = ((0. < (__pyx_v_vnr + __pyx_v_cr)) != 0);
    if (__pyx_t_3) {

      /* "phd/riemann/riemann.pyx":1149
 *         elif(0. < vnr + cr): # right fan
 *             # sampled point is inside right fan
 *             c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*vnr)             # <<<<<<<<<<<<<<
 *             u_tmp = (2./(gamma + 1.))*(-cr + .5*(gamma-1.)*vnr)
 * 
 */
      __pyx_t_2 = (__pyx_v_gamma + 1.);
      if (unlikely(__pyx_t_2 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1149, __pyx_L1_error)
      }
      __pyx_v_c = ((2. / __pyx_t_2) * (__pyx_v_cr - ((.5 * (__pyx_v_gamma - 1.)) * __pyx_v_vnr)));

      /* "phd/riemann/riemann.pyx":1150
 *             # sampled point is inside right fan
 *             c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*vnr)
 *             u_tmp = (2./(gamma + 1.))*(-cr + .5*(gamma-1.)*vnr)             # <<<<<<<<<<<<<<
 * 
 *             d[0] = dr*pow(c/cr, 2./(gamma - 1.))
 */
      __pyx_t_2 = (__pyx_v_gamma + 1.);
      if (unlikely(__pyx_t_2 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1150, __pyx_L1_error)
      }
      __pyx_v_u_tmp = ((2. / __pyx_t_2) * ((-__pyx_v_cr) + ((.5 * (__pyx_v_gamma - 1.)) * __pyx_v_vnr)));

      /* "phd/riemann/riemann.pyx":1152
 *             u_tmp = (2./(gamma + 1.))*(-cr + .5*(gamma-1.)*vnr)
 * 
 *             d[0] = dr*pow(c/cr, 2./(gamma - 1.))             # <<<<<<<<<<<<<<
 *             p[0] = pr*pow(c/cr, 2.*gamma/(gamma - 1.))
 * 
 */
      if (unlikely(__pyx_v_cr == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1152, __pyx_L1_error)
      }
      __pyx_t_2 = (__pyx_v_gamma - 1.);
      if (unlikely(__pyx_t_2 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1152, __pyx_L1_error)
      }
      (__pyx_v_d[0]) = (__pyx_v_dr * pow((__pyx_v_c / __pyx_v_cr), (2. / __pyx_t_2)));

      /* "phd/riemann/riemann.pyx":1153
 * 
 *             d[0] = dr*pow(c/cr, 2./(gamma - 1.))
 *             p[0] = pr*pow(c/cr, 2.*gamma/(gamma - 1.))             # <<<<<<<<<<<<<<
 * 
 *             vn[0] = vsq[0] = 0
 */
      if (unlikely(__pyx_v_cr == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1153, __pyx_L1_error)
      }
      __pyx_t_2 = (2. * __pyx_v_gamma);
      __pyx_t_1 = (__pyx_v_gamma - 1.);
      if (unlikely(__pyx_t_1 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1153, __pyx_L1_error)
      }
      (__pyx_v_p[0]) = (__pyx_v_pr * pow((__pyx_v_c / __pyx_v_cr), (__pyx_t_2 / __pyx_t_1)));

      /* "phd/riemann/riemann.pyx":1155
 *             p[0] = pr*pow(c/cr, 2.*gamma/(gamma - 1.))
 * 
 *             vn[0] = vsq[0] = 0             # <<<<<<<<<<<<<<
 *             for i in range(dim):
 *                 v[i]    = vr[i] + (u_tmp - vnr)*n[i]
 */
      (__pyx_v_vn[0]) = 0.0;
      (__pyx_v_vsq[0]) = 0.0;

      /* "phd/riemann/riemann.pyx":1156
 * 
 *             vn[0] = vsq[0] = 0
 *             for i in range(dim):             # <<<<<<<<<<<<<<
 *                 v[i]    = vr[i] + (u_tmp - vnr)*n[i]
 *                 vn[0]  += v[i]*n[i]
 */
      __pyx_t_4 = __pyx_v_dim;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "phd/riemann/riemann.pyx":1157
 *             vn[0] = vsq[0] = 0
 *             for i in range(dim):
 *                 v[i]    = vr[i] + (u_tmp - vnr)*n[i]             # <<<<<<<<<<<<<<
 *                 vn[0]  += v[i]*n[i]
 *                 vsq[0] += v[i]*v[i]
 */
        (__pyx_v_v[__pyx_v_i]) = ((__pyx_v_vr[__pyx_v_i]) + ((__pyx_v_u_tmp - __pyx_v_vnr) * (__pyx_v_n[__pyx_v_i])));

        /* "phd/riemann/riemann.pyx":1158
 *             for i in range(dim):
 *                 v[i]    = vr[i] + (u_tmp - vnr)*n[i]
 *                 vn[0]  += v[i]*n[i]             # <<<<<<<<<<<<<<
 *                 vsq[0] += v[i]*v[i]
 * 
 */
        __pyx_t_7 = 0;
        (__pyx_v_vn[__pyx_t_7]) = ((__pyx_v_vn[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_n[__pyx_v_i])));

        /* "phd/riemann/riemann.pyx":1159
 *                 v[i]    = vr[i] + (u_tmp - vnr)*n[i]
 *                 vn[0]  += v[i]*n[i]
 *                 vsq[0] += v[i]*v[i]             # <<<<<<<<<<<<<<
 * 
 *         else: # right state
 */
        __pyx_t_7 = 0;
        (__pyx_v_vsq[__pyx_t_7]) = ((__pyx_v_vsq[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_v[__pyx_v_i])));
      }

      /* "phd/riemann/riemann.pyx":1147
 *                 v[i] = 0.
 * 
 *         elif(0. < vnr + cr): # right fan             # <<<<<<<<<<<<<<
 *             # sampled point is inside right fan
 *             c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*vnr)
 */
      goto __pyx_L11;
    }

    /* "phd/riemann/riemann.pyx":1162
 * 
 *         else: # right state
 *             d[0] = dr             # <<<<<<<<<<<<<<
 *             p[0] = pr
 * 
 */
    /*else*/ {
      (__pyx_v_d[0]) = __pyx_v_dr;

      /* "phd/riemann/riemann.pyx":1163
 *         else: # right state
 *             d[0] = dr
 *             p[0] = pr             # <<<<<<<<<<<<<<
 * 
 *             vn[0] = vsq[0] = 0
 */
      (__pyx_v_p[0]) = __pyx_v_pr;

      /* "phd/riemann/riemann.pyx":1165
 *             p[0] = pr
 * 
 *             vn[0] = vsq[0] = 0             # <<<<<<<<<<<<<<
 *             for i in range(dim):
 *                 v[i]    = vr[i]
 */
      (__pyx_v_vn[0]) = 0.0;
      (__pyx_v_vsq[0]) = 0.0;

      /* "phd/riemann/riemann.pyx":1166
 * 
 *             vn[0] = vsq[0] = 0
 *             for i in range(dim):             # <<<<<<<<<<<<<<
 *                 v[i]    = vr[i]
 *                 vn[0]  += v[i]*n[i]
 */
      __pyx_t_4 = __pyx_v_dim;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "phd/riemann/riemann.pyx":1167
 *             vn[0] = vsq[0] = 0
 *             for i in range(dim):
 *                 v[i]    = vr[i]             # <<<<<<<<<<<<<<
 *                 vn[0]  += v[i]*n[i]
 *                 vsq[0] += v[i]*v[i]
 */
        (__pyx_v_v[__pyx_v_i]) = (__pyx_v_vr[__pyx_v_i]);

        /* "phd/riemann/riemann.pyx":1168
 *             for i in range(dim):
 *                 v[i]    = vr[i]
 *                 vn[0]  += v[i]*n[i]             # <<<<<<<<<<<<<<
 *                 vsq[0] += v[i]*v[i]
 * 
 */
        __pyx_t_7 = 0;
        (__pyx_v_vn[__pyx_t_7]) = ((__pyx_v_vn[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_n[__pyx_v_i])));

        /* "phd/riemann/riemann.pyx":1169
 *                 v[i]    = vr[i]
 *                 vn[0]  += v[i]*n[i]
 *                 vsq[0] += v[i]*v[i]             # <<<<<<<<<<<<<<
 * 
 *     else: # vacuum generation
 */
        __pyx_t_7 = 0;
        (__pyx_v_vsq[__pyx_t_7]) = ((__pyx_v_vsq[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_v[__pyx_v_i])));
      }
    }
    __pyx_L11:;

    /* "phd/riemann/riemann.pyx":1138
 *                 v[i] = 0.
 * 
 *     elif(dl == 0): # left vacuum             # <<<<<<<<<<<<<<
 *         if 0. <= sr: # left vacuum
 *             d[0] = 0.
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1173
 *     else: # vacuum generation
 * 
 *         if(sl < 0.) and (0. < sr): # vacuum             # <<<<<<<<<<<<<<
 *             d[0] = 0.
 *             p[0] = 0.
 */
  /*else*/ {
    __pyx_t_8 = ((__pyx_v_sl < 0.) != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_3 = __pyx_t_8;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_8 = ((0. < __pyx_v_sr) != 0);
    __pyx_t_3 = __pyx_t_8;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_3) {

      /* "phd/riemann/riemann.pyx":1174
 * 
 *         if(sl < 0.) and (0. < sr): # vacuum
 *             d[0] = 0.             # <<<<<<<<<<<<<<
 *             p[0] = 0.
 * 
 */
      (__pyx_v_d[0]) = 0.;

      /* "phd/riemann/riemann.pyx":1175
 *         if(sl < 0.) and (0. < sr): # vacuum
 *             d[0] = 0.
 *             p[0] = 0.             # <<<<<<<<<<<<<<
 * 
 *             vn[0] = vsq[0] = 0
 */
      (__pyx_v_p[0]) = 0.;

      /* "phd/riemann/riemann.pyx":1177
 *             p[0] = 0.
 * 
 *             vn[0] = vsq[0] = 0             # <<<<<<<<<<<<<<
 *             for i in range(dim):
 *                 v[i] = 0.
 */
      (__pyx_v_vn[0]) = 0.0;
      (__pyx_v_vsq[0]) = 0.0;

      /* "phd/riemann/riemann.pyx":1178
 * 
 *             vn[0] = vsq[0] = 0
 *             for i in range(dim):             # <<<<<<<<<<<<<<
 *                 v[i] = 0.
 * 
 */
      __pyx_t_4 = __pyx_v_dim;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "phd/riemann/riemann.pyx":1179
 *             vn[0] = vsq[0] = 0
 *             for i in range(dim):
 *                 v[i] = 0.             # <<<<<<<<<<<<<<
 * 
 *         elif(0. <= sl):
 */
        (__pyx_v_v[__pyx_v_i]) = 0.;
      }

      /* "phd/riemann/riemann.pyx":1173
 *     else: # vacuum generation
 * 
 *         if(sl < 0.) and (0. < sr): # vacuum             # <<<<<<<<<<<<<<
 *             d[0] = 0.
 *             p[0] = 0.
 */
      goto __pyx_L18;
    }

    /* "phd/riemann/riemann.pyx":1181
 *                 v[i] = 0.
 * 
 *         elif(0. <= sl):             # <<<<<<<<<<<<<<
 *             if 0. <= vnl - cl: # left state
 *                 d[0] = dl
 */
    __pyx_t_3 = ((0. <= __pyx_v_sl) != 0);
    if (__pyx_t_3) {

      /* "phd/riemann/riemann.pyx":1182
 * 
 *         elif(0. <= sl):
 *             if 0. <= vnl - cl: # left state             # <<<<<<<<<<<<<<
 *                 d[0] = dl
 *                 p[0] = pl
 */
      __pyx_t_3 = ((0. <= (__pyx_v_vnl - __pyx_v_cl)) != 0);
      if (__pyx_t_3) {

        /* "phd/riemann/riemann.pyx":1183
 *         elif(0. <= sl):
 *             if 0. <= vnl - cl: # left state
 *                 d[0] = dl             # <<<<<<<<<<<<<<
 *                 p[0] = pl
 * 
 */
        (__pyx_v_d[0]) = __pyx_v_dl;

        /* "phd/riemann/riemann.pyx":1184
 *             if 0. <= vnl - cl: # left state
 *                 d[0] = dl
 *                 p[0] = pl             # <<<<<<<<<<<<<<
 * 
 *                 vn[0] = vsq[0] = 0.
 */
        (__pyx_v_p[0]) = __pyx_v_pl;

        /* "phd/riemann/riemann.pyx":1186
 *                 p[0] = pl
 * 
 *                 vn[0] = vsq[0] = 0.             # <<<<<<<<<<<<<<
 *                 for i in range(dim):
 *                     v[i]    = vl[i]
 */
        (__pyx_v_vn[0]) = 0.;
        (__pyx_v_vsq[0]) = 0.;

        /* "phd/riemann/riemann.pyx":1187
 * 
 *                 vn[0] = vsq[0] = 0.
 *                 for i in range(dim):             # <<<<<<<<<<<<<<
 *                     v[i]    = vl[i]
 *                     vn[0]  += v[i]*n[i]
 */
        __pyx_t_4 = __pyx_v_dim;
        __pyx_t_5 = __pyx_t_4;
        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
          __pyx_v_i = __pyx_t_6;

          /* "phd/riemann/riemann.pyx":1188
 *                 vn[0] = vsq[0] = 0.
 *                 for i in range(dim):
 *                     v[i]    = vl[i]             # <<<<<<<<<<<<<<
 *                     vn[0]  += v[i]*n[i]
 *                     vsq[0] += v[i]*v[i]
 */
          (__pyx_v_v[__pyx_v_i]) = (__pyx_v_vl[__pyx_v_i]);

          /* "phd/riemann/riemann.pyx":1189
 *                 for i in range(dim):
 *                     v[i]    = vl[i]
 *                     vn[0]  += v[i]*n[i]             # <<<<<<<<<<<<<<
 *                     vsq[0] += v[i]*v[i]
 * 
 */
          __pyx_t_7 = 0;
          (__pyx_v_vn[__pyx_t_7]) = ((__pyx_v_vn[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_n[__pyx_v_i])));

          /* "phd/riemann/riemann.pyx":1190
 *                     v[i]    = vl[i]
 *                     vn[0]  += v[i]*n[i]
 *                     vsq[0] += v[i]*v[i]             # <<<<<<<<<<<<<<
 * 
 *             else: # left fan
 */
          __pyx_t_7 = 0;
          (__pyx_v_vsq[__pyx_t_7]) = ((__pyx_v_vsq[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_v[__pyx_v_i])));
        }

        /* "phd/riemann/riemann.pyx":1182
 * 
 *         elif(0. <= sl):
 *             if 0. <= vnl - cl: # left state             # <<<<<<<<<<<<<<
 *                 d[0] = dl
 *                 p[0] = pl
 */
        goto __pyx_L23;
      }

      /* "phd/riemann/riemann.pyx":1193
 * 
 *             else: # left fan
 *                 c    = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl)             # <<<<<<<<<<<<<<
 *                 d[0] = dl*pow(c/cl, 2./(gamma - 1.))
 *                 p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))
 */
      /*else*/ {
        __pyx_t_1 = (__pyx_v_gamma + 1.);
        if (unlikely(__pyx_t_1 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1193, __pyx_L1_error)
        }
        __pyx_v_c = ((2. / __pyx_t_1) * (__pyx_v_cl + ((.5 * (__pyx_v_gamma - 1.)) * __pyx_v_vnl)));

        /* "phd/riemann/riemann.pyx":1194
 *             else: # left fan
 *                 c    = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl)
 *                 d[0] = dl*pow(c/cl, 2./(gamma - 1.))             # <<<<<<<<<<<<<<
 *                 p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))
 * 
 */
        if (unlikely(__pyx_v_cl == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1194, __pyx_L1_error)
        }
        __pyx_t_1 = (__pyx_v_gamma - 1.);
        if (unlikely(__pyx_t_1 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1194, __pyx_L1_error)
        }
        (__pyx_v_d[0]) = (__pyx_v_dl * pow((__pyx_v_c / __pyx_v_cl), (2. / __pyx_t_1)));

        /* "phd/riemann/riemann.pyx":1195
 *                 c    = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl)
 *                 d[0] = dl*pow(c/cl, 2./(gamma - 1.))
 *                 p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))             # <<<<<<<<<<<<<<
 * 
 *                 vn[0] = vsq[0] = 0.
 */
        if (unlikely(__pyx_v_cl == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1195, __pyx_L1_error)
        }
        __pyx_t_1 = (2. * __pyx_v_gamma);
        __pyx_t_2 = (__pyx_v_gamma - 1.);
        if (unlikely(__pyx_t_2 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1195, __pyx_L1_error)
        }
        (__pyx_v_p[0]) = (__pyx_v_pl * pow((__pyx_v_c / __pyx_v_cl), (__pyx_t_1 / __pyx_t_2)));

        /* "phd/riemann/riemann.pyx":1197
 *                 p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))
 * 
 *                 vn[0] = vsq[0] = 0.             # <<<<<<<<<<<<<<
 *                 for i in range(dim):
 *                     v[i]    = vl[i] + (c - vnl)*n[i]
 */
        (__pyx_v_vn[0]) = 0.;
        (__pyx_v_vsq[0]) = 0.;

        /* "phd/riemann/riemann.pyx":1198
 * 
 *                 vn[0] = vsq[0] = 0.
 *                 for i in range(dim):             # <<<<<<<<<<<<<<
 *                     v[i]    = vl[i] + (c - vnl)*n[i]
 *                     vn[0]  += v[i]*n[i]
 */
        __pyx_t_4 = __pyx_v_dim;
        __pyx_t_5 = __pyx_t_4;
        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
          __pyx_v_i = __pyx_t_6;

          /* "phd/riemann/riemann.pyx":1199
 *                 vn[0] = vsq[0] = 0.
 *                 for i in range(dim):
 *                     v[i]    = vl[i] + (c - vnl)*n[i]             # <<<<<<<<<<<<<<
 *                     vn[0]  += v[i]*n[i]
 *                     vsq[0] += v[i]*v[i]
 */
          (__pyx_v_v[__pyx_v_i]) = ((__pyx_v_vl[__pyx_v_i]) + ((__pyx_v_c - __pyx_v_vnl) * (__pyx_v_n[__pyx_v_i])));

          /* "phd/riemann/riemann.pyx":1200
 *                 for i in range(dim):
 *                     v[i]    = vl[i] + (c - vnl)*n[i]
 *                     vn[0]  += v[i]*n[i]             # <<<<<<<<<<<<<<
 *                     vsq[0] += v[i]*v[i]
 * 
 */
          __pyx_t_7 = 0;
          (__pyx_v_vn[__pyx_t_7]) = ((__pyx_v_vn[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_n[__pyx_v_i])));

          /* "phd/riemann/riemann.pyx":1201
 *                     v[i]    = vl[i] + (c - vnl)*n[i]
 *                     vn[0]  += v[i]*n[i]
 *                     vsq[0] += v[i]*v[i]             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
          __pyx_t_7 = 0;
          (__pyx_v_vsq[__pyx_t_7]) = ((__pyx_v_vsq[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_v[__pyx_v_i])));
        }
      }
      __pyx_L23:;

      /* "phd/riemann/riemann.pyx":1181
 *                 v[i] = 0.
 * 
 *         elif(0. <= sl):             # <<<<<<<<<<<<<<
 *             if 0. <= vnl - cl: # left state
 *                 d[0] = dl
 */
      goto __pyx_L18;
    }

    /* "phd/riemann/riemann.pyx":1204
 * 
 *         else:
 *             if(0. < vnr + cr): # right fan             # <<<<<<<<<<<<<<
 *                 # sample inside right fan
 *                 c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*vnr)
 */
    /*else*/ {
      __pyx_t_3 = ((0. < (__pyx_v_vnr + __pyx_v_cr)) != 0);
      if (__pyx_t_3) {

        /* "phd/riemann/riemann.pyx":1206
 *             if(0. < vnr + cr): # right fan
 *                 # sample inside right fan
 *                 c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*vnr)             # <<<<<<<<<<<<<<
 *                 u_tmp = (2./(gamma + 1.))*(-cr + .5*(gamma-1.)*vnr)
 * 
 */
        __pyx_t_2 = (__pyx_v_gamma + 1.);
        if (unlikely(__pyx_t_2 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1206, __pyx_L1_error)
        }
        __pyx_v_c = ((2. / __pyx_t_2) * (__pyx_v_cr - ((.5 * (__pyx_v_gamma - 1.)) * __pyx_v_vnr)));

        /* "phd/riemann/riemann.pyx":1207
 *                 # sample inside right fan
 *                 c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*vnr)
 *                 u_tmp = (2./(gamma + 1.))*(-cr + .5*(gamma-1.)*vnr)             # <<<<<<<<<<<<<<
 * 
 *                 d[0] = dr*pow(c/cr, 2./(gamma - 1.))
 */
        __pyx_t_2 = (__pyx_v_gamma + 1.);
        if (unlikely(__pyx_t_2 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1207, __pyx_L1_error)
        }
        __pyx_v_u_tmp = ((2. / __pyx_t_2) * ((-__pyx_v_cr) + ((.5 * (__pyx_v_gamma - 1.)) * __pyx_v_vnr)));

        /* "phd/riemann/riemann.pyx":1209
 *                 u_tmp = (2./(gamma + 1.))*(-cr + .5*(gamma-1.)*vnr)
 * 
 *                 d[0] = dr*pow(c/cr, 2./(gamma - 1.))             # <<<<<<<<<<<<<<
 *                 p[0] = pr*pow(c/cr, 2.*gamma/(gamma - 1.))
 * 
 */
        if (unlikely(__pyx_v_cr == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1209, __pyx_L1_error)
        }
        __pyx_t_2 = (__pyx_v_gamma - 1.);
        if (unlikely(__pyx_t_2 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1209, __pyx_L1_error)
        }
        (__pyx_v_d[0]) = (__pyx_v_dr * pow((__pyx_v_c / __pyx_v_cr), (2. / __pyx_t_2)));

        /* "phd/riemann/riemann.pyx":1210
 * 
 *                 d[0] = dr*pow(c/cr, 2./(gamma - 1.))
 *                 p[0] = pr*pow(c/cr, 2.*gamma/(gamma - 1.))             # <<<<<<<<<<<<<<
 * 
 *                 vn[0] = vsq[0] = 0.
 */
        if (unlikely(__pyx_v_cr == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1210, __pyx_L1_error)
        }
        __pyx_t_2 = (2. * __pyx_v_gamma);
        __pyx_t_1 = (__pyx_v_gamma - 1.);
        if (unlikely(__pyx_t_1 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1210, __pyx_L1_error)
        }
        (__pyx_v_p[0]) = (__pyx_v_pr * pow((__pyx_v_c / __pyx_v_cr), (__pyx_t_2 / __pyx_t_1)));

        /* "phd/riemann/riemann.pyx":1212
 *                 p[0] = pr*pow(c/cr, 2.*gamma/(gamma - 1.))
 * 
 *                 vn[0] = vsq[0] = 0.             # <<<<<<<<<<<<<<
 *                 for i in range(dim):
 *                     v[i]    = vr[i] + (u_tmp - vnr)*n[i]
 */
        (__pyx_v_vn[0]) = 0.;
        (__pyx_v_vsq[0]) = 0.;

        /* "phd/riemann/riemann.pyx":1213
 * 
 *                 vn[0] = vsq[0] = 0.
 *                 for i in range(dim):             # <<<<<<<<<<<<<<
 *                     v[i]    = vr[i] + (u_tmp - vnr)*n[i]
 *                     vn[0]  += v[i]*n[i]
 */
        __pyx_t_4 = __pyx_v_dim;
        __pyx_t_5 = __pyx_t_4;
        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
          __pyx_v_i = __pyx_t_6;

          /* "phd/riemann/riemann.pyx":1214
 *                 vn[0] = vsq[0] = 0.
 *                 for i in range(dim):
 *                     v[i]    = vr[i] + (u_tmp - vnr)*n[i]             # <<<<<<<<<<<<<<
 *                     vn[0]  += v[i]*n[i]
 *                     vsq[0] += v[i]*v[i]
 */
          (__pyx_v_v[__pyx_v_i]) = ((__pyx_v_vr[__pyx_v_i]) + ((__pyx_v_u_tmp - __pyx_v_vnr) * (__pyx_v_n[__pyx_v_i])));

          /* "phd/riemann/riemann.pyx":1215
 *                 for i in range(dim):
 *                     v[i]    = vr[i] + (u_tmp - vnr)*n[i]
 *                     vn[0]  += v[i]*n[i]             # <<<<<<<<<<<<<<
 *                     vsq[0] += v[i]*v[i]
 * 
 */
          __pyx_t_7 = 0;
          (__pyx_v_vn[__pyx_t_7]) = ((__pyx_v_vn[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_n[__pyx_v_i])));

          /* "phd/riemann/riemann.pyx":1216
 *                     v[i]    = vr[i] + (u_tmp - vnr)*n[i]
 *                     vn[0]  += v[i]*n[i]
 *                     vsq[0] += v[i]*v[i]             # <<<<<<<<<<<<<<
 * 
 *             else: # right state
 */
          __pyx_t_7 = 0;
          (__pyx_v_vsq[__pyx_t_7]) = ((__pyx_v_vsq[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_v[__pyx_v_i])));
        }

        /* "phd/riemann/riemann.pyx":1204
 * 
 *         else:
 *             if(0. < vnr + cr): # right fan             # <<<<<<<<<<<<<<
 *                 # sample inside right fan
 *                 c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*vnr)
 */
        goto __pyx_L28;
      }

      /* "phd/riemann/riemann.pyx":1219
 * 
 *             else: # right state
 *                 d[0] = dr             # <<<<<<<<<<<<<<
 *                 p[0] = pr
 * 
 */
      /*else*/ {
        (__pyx_v_d[0]) = __pyx_v_dr;

        /* "phd/riemann/riemann.pyx":1220
 *             else: # right state
 *                 d[0] = dr
 *                 p[0] = pr             # <<<<<<<<<<<<<<
 * 
 *                 vn[0] = vsq[0] = 0.
 */
        (__pyx_v_p[0]) = __pyx_v_pr;

        /* "phd/riemann/riemann.pyx":1222
 *                 p[0] = pr
 * 
 *                 vn[0] = vsq[0] = 0.             # <<<<<<<<<<<<<<
 *                 for i in range(dim):
 *                     v[i]    = vr[i]
 */
        (__pyx_v_vn[0]) = 0.;
        (__pyx_v_vsq[0]) = 0.;

        /* "phd/riemann/riemann.pyx":1223
 * 
 *                 vn[0] = vsq[0] = 0.
 *                 for i in range(dim):             # <<<<<<<<<<<<<<
 *                     v[i]    = vr[i]
 *                     vn[0]  += v[i]*n[i]
 */
        __pyx_t_4 = __pyx_v_dim;
        __pyx_t_5 = __pyx_t_4;
        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
          __pyx_v_i = __pyx_t_6;

          /* "phd/riemann/riemann.pyx":1224
 *                 vn[0] = vsq[0] = 0.
 *                 for i in range(dim):
 *                     v[i]    = vr[i]             # <<<<<<<<<<<<<<
 *                     vn[0]  += v[i]*n[i]
 *                     vsq[0] += v[i]*v[i]
 */
          (__pyx_v_v[__pyx_v_i]) = (__pyx_v_vr[__pyx_v_i]);

          /* "phd/riemann/riemann.pyx":1225
 *                 for i in range(dim):
 *                     v[i]    = vr[i]
 *                     vn[0]  += v[i]*n[i]             # <<<<<<<<<<<<<<
 *                     vsq[0] += v[i]*v[i]
 * 
 */
          __pyx_t_7 = 0;
          (__pyx_v_vn[__pyx_t_7]) = ((__pyx_v_vn[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_n[__pyx_v_i])));

          /* "phd/riemann/riemann.pyx":1226
 *                     v[i]    = vr[i]
 *                     vn[0]  += v[i]*n[i]
 *                     vsq[0] += v[i]*v[i]             # <<<<<<<<<<<<<<
 * 
 * cdef inline void vacuum_right(
 */
          __pyx_t_7 = 0;
          (__pyx_v_vsq[__pyx_t_7]) = ((__pyx_v_vsq[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_v[__pyx_v_i])));
        }
      }
      __pyx_L28:;
    }
    __pyx_L18:;
  }
  __pyx_L3:;

  /* "phd/riemann/riemann.pyx":1092
 *             raise RuntimeError('No convergence in Exact Riemann Solver')
 * 
 * cdef inline void vacuum(             # <<<<<<<<<<<<<<
 *         double dl, double vl[3], double pl, double vnl, double cl,
 *         double dr, double vr[3], double pr, double vnr, double cr,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("phd.riemann.riemann.vacuum", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "phd/riemann/riemann.pyx":1228
 *                     vsq[0] += v[i]*v[i]
 * 
 * cdef inline void vacuum_right(             # <<<<<<<<<<<<<<
 *         double dl, double vl[3], double pl, double vnl, double cl,
 *         double *d, double  v[3], double *p, double *vn, double *vsq,
 */

static CYTHON_INLINE void __pyx_f_3phd_7riemann_7riemann_vacuum_right(double __pyx_v_dl, double *__pyx_v_vl, double __pyx_v_pl, double __pyx_v_vnl, double __pyx_v_cl, double *__pyx_v_d, double *__pyx_v_v, double *__pyx_v_p, double *__pyx_v_vn, double *__pyx_v_vsq, double __pyx_v_gamma, double __pyx_v_wn, double *__pyx_v_n, int __pyx_v_dim) {
  int __pyx_v_i;
  double __pyx_v_c;
  double __pyx_v_u;
  double __pyx_v_sl;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("vacuum_right", 0);

  /* "phd/riemann/riemann.pyx":1237
 *     cdef int i
 *     cdef double c, u
 *     cdef double sl = vnl + 2.*cl/(gamma-1.)             # <<<<<<<<<<<<<<
 * 
 *     if(wn <= vnl - cl): # left state
 */
  __pyx_t_1 = (2. * __pyx_v_cl);
  __pyx_t_2 = (__pyx_v_gamma - 1.);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1237, __pyx_L1_error)
  }
  __pyx_v_sl = (__pyx_v_vnl + (__pyx_t_1 / __pyx_t_2));

  /* "phd/riemann/riemann.pyx":1239
 *     cdef double sl = vnl + 2.*cl/(gamma-1.)
 * 
 *     if(wn <= vnl - cl): # left state             # <<<<<<<<<<<<<<
 *         d[0] = dl
 *         p[0] = pl
 */
  __pyx_t_3 = ((__pyx_v_wn <= (__pyx_v_vnl - __pyx_v_cl)) != 0);
  if (__pyx_t_3) {

    /* "phd/riemann/riemann.pyx":1240
 * 
 *     if(wn <= vnl - cl): # left state
 *         d[0] = dl             # <<<<<<<<<<<<<<
 *         p[0] = pl
 *         u = vnl
 */
    (__pyx_v_d[0]) = __pyx_v_dl;

    /* "phd/riemann/riemann.pyx":1241
 *     if(wn <= vnl - cl): # left state
 *         d[0] = dl
 *         p[0] = pl             # <<<<<<<<<<<<<<
 *         u = vnl
 * 
 */
    (__pyx_v_p[0]) = __pyx_v_pl;

    /* "phd/riemann/riemann.pyx":1242
 *         d[0] = dl
 *         p[0] = pl
 *         u = vnl             # <<<<<<<<<<<<<<
 * 
 *     elif(wn < sl): # left fan
 */
    __pyx_v_u = __pyx_v_vnl;

    /* "phd/riemann/riemann.pyx":1239
 *     cdef double sl = vnl + 2.*cl/(gamma-1.)
 * 
 *     if(wn <= vnl - cl): # left state             # <<<<<<<<<<<<<<
 *         d[0] = dl
 *         p[0] = pl
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1244
 *         u = vnl
 * 
 *     elif(wn < sl): # left fan             # <<<<<<<<<<<<<<
 *         c = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*(vnl - wn))
 *         u = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl + wn)
 */
  __pyx_t_3 = ((__pyx_v_wn < __pyx_v_sl) != 0);
  if (__pyx_t_3) {

    /* "phd/riemann/riemann.pyx":1245
 * 
 *     elif(wn < sl): # left fan
 *         c = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*(vnl - wn))             # <<<<<<<<<<<<<<
 *         u = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl + wn)
 *         d[0] = dl*pow(c/cl, 2./(gamma - 1.))
 */
    __pyx_t_2 = (__pyx_v_gamma + 1.);
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1245, __pyx_L1_error)
    }
    __pyx_v_c = ((2. / __pyx_t_2) * (__pyx_v_cl + ((.5 * (__pyx_v_gamma - 1.)) * (__pyx_v_vnl - __pyx_v_wn))));

    /* "phd/riemann/riemann.pyx":1246
 *     elif(wn < sl): # left fan
 *         c = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*(vnl - wn))
 *         u = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl + wn)             # <<<<<<<<<<<<<<
 *         d[0] = dl*pow(c/cl, 2./(gamma - 1.))
 *         p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))
 */
    __pyx_t_2 = (__pyx_v_gamma + 1.);
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1246, __pyx_L1_error)
    }
    __pyx_v_u = ((2. / __pyx_t_2) * ((__pyx_v_cl + ((.5 * (__pyx_v_gamma - 1.)) * __pyx_v_vnl)) + __pyx_v_wn));

    /* "phd/riemann/riemann.pyx":1247
 *         c = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*(vnl - wn))
 *         u = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl + wn)
 *         d[0] = dl*pow(c/cl, 2./(gamma - 1.))             # <<<<<<<<<<<<<<
 *         p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))
 * 
 */
    if (unlikely(__pyx_v_cl == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1247, __pyx_L1_error)
    }
    __pyx_t_2 = (__pyx_v_gamma - 1.);
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1247, __pyx_L1_error)
    }
    (__pyx_v_d[0]) = (__pyx_v_dl * pow((__pyx_v_c / __pyx_v_cl), (2. / __pyx_t_2)));

    /* "phd/riemann/riemann.pyx":1248
 *         u = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl + wn)
 *         d[0] = dl*pow(c/cl, 2./(gamma - 1.))
 *         p[0] = pl*pow(c/cl, 2.*gamma/(gamma - 1.))             # <<<<<<<<<<<<<<
 * 
 *     else: # right vacuum
 */
    if (unlikely(__pyx_v_cl == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1248, __pyx_L1_error)
    }
    __pyx_t_2 = (2. * __pyx_v_gamma);
    __pyx_t_1 = (__pyx_v_gamma - 1.);
    if (unlikely(__pyx_t_1 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1248, __pyx_L1_error)
    }
    (__pyx_v_p[0]) = (__pyx_v_pl * pow((__pyx_v_c / __pyx_v_cl), (__pyx_t_2 / __pyx_t_1)));

    /* "phd/riemann/riemann.pyx":1244
 *         u = vnl
 * 
 *     elif(wn < sl): # left fan             # <<<<<<<<<<<<<<
 *         c = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*(vnl - wn))
 *         u = (2./(gamma + 1.))*(cl + .5*(gamma - 1.)*vnl + wn)
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1251
 * 
 *     else: # right vacuum
 *         d[0] = 0.             # <<<<<<<<<<<<<<
 *         p[0] = 0.
 *         u = sl
 */
  /*else*/ {
    (__pyx_v_d[0]) = 0.;

    /* "phd/riemann/riemann.pyx":1252
 *     else: # right vacuum
 *         d[0] = 0.
 *         p[0] = 0.             # <<<<<<<<<<<<<<
 *         u = sl
 * 
 */
    (__pyx_v_p[0]) = 0.;

    /* "phd/riemann/riemann.pyx":1253
 *         d[0] = 0.
 *         p[0] = 0.
 *         u = sl             # <<<<<<<<<<<<<<
 * 
 *     vn[0] = vsq[0] = 0.
 */
    __pyx_v_u = __pyx_v_sl;
  }
  __pyx_L3:;

  /* "phd/riemann/riemann.pyx":1255
 *         u = sl
 * 
 *     vn[0] = vsq[0] = 0.             # <<<<<<<<<<<<<<
 *     for i in range(dim):
 *         v[i] = vl[i] + (u - vnl)*n[i]
 */
  (__pyx_v_vn[0]) = 0.;
  (__pyx_v_vsq[0]) = 0.;

  /* "phd/riemann/riemann.pyx":1256
 * 
 *     vn[0] = vsq[0] = 0.
 *     for i in range(dim):             # <<<<<<<<<<<<<<
 *         v[i] = vl[i] + (u - vnl)*n[i]
 *         vn[0] += v[i]*n[i]
 */
  __pyx_t_4 = __pyx_v_dim;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/riemann/riemann.pyx":1257
 *     vn[0] = vsq[0] = 0.
 *     for i in range(dim):
 *         v[i] = vl[i] + (u - vnl)*n[i]             # <<<<<<<<<<<<<<
 *         vn[0] += v[i]*n[i]
 *         vsq[0] += v[i]*v[i]
 */
    (__pyx_v_v[__pyx_v_i]) = ((__pyx_v_vl[__pyx_v_i]) + ((__pyx_v_u - __pyx_v_vnl) * (__pyx_v_n[__pyx_v_i])));

    /* "phd/riemann/riemann.pyx":1258
 *     for i in range(dim):
 *         v[i] = vl[i] + (u - vnl)*n[i]
 *         vn[0] += v[i]*n[i]             # <<<<<<<<<<<<<<
 *         vsq[0] += v[i]*v[i]
 * 
 */
    __pyx_t_7 = 0;
    (__pyx_v_vn[__pyx_t_7]) = ((__pyx_v_vn[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_n[__pyx_v_i])));

    /* "phd/riemann/riemann.pyx":1259
 *         v[i] = vl[i] + (u - vnl)*n[i]
 *         vn[0] += v[i]*n[i]
 *         vsq[0] += v[i]*v[i]             # <<<<<<<<<<<<<<
 * 
 * cdef inline void vacuum_left(
 */
    __pyx_t_7 = 0;
    (__pyx_v_vsq[__pyx_t_7]) = ((__pyx_v_vsq[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_v[__pyx_v_i])));
  }

  /* "phd/riemann/riemann.pyx":1228
 *                     vsq[0] += v[i]*v[i]
 * 
 * cdef inline void vacuum_right(             # <<<<<<<<<<<<<<
 *         double dl, double vl[3], double pl, double vnl, double cl,
 *         double *d, double  v[3], double *p, double *vn, double *vsq,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("phd.riemann.riemann.vacuum_right", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "phd/riemann/riemann.pyx":1261
 *         vsq[0] += v[i]*v[i]
 * 
 * cdef inline void vacuum_left(             # <<<<<<<<<<<<<<
 *         double dr, double vr[3], double pr, double vnr, double cr,
 *         double *d, double  v[3], double *p, double *vn, double *vsq,
 */

static CYTHON_INLINE void __pyx_f_3phd_7riemann_7riemann_vacuum_left(double __pyx_v_dr, double *__pyx_v_vr, double __pyx_v_pr, double __pyx_v_vnr, double __pyx_v_cr, double *__pyx_v_d, double *__pyx_v_v, double *__pyx_v_p, double *__pyx_v_vn, double *__pyx_v_vsq, double __pyx_v_gamma, double __pyx_v_wn, double *__pyx_v_n, int __pyx_v_dim) {
  int __pyx_v_i;
  double __pyx_v_c;
  double __pyx_v_u;
  double __pyx_v_sr;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("vacuum_left", 0);

  /* "phd/riemann/riemann.pyx":1270
 *     cdef int i
 *     cdef double c, u
 *     cdef double sr = vnr - 2.*cr/(gamma-1.)             # <<<<<<<<<<<<<<
 * 
 *     if wn <= sr: # left vacuum
 */
  __pyx_t_1 = (2. * __pyx_v_cr);
  __pyx_t_2 = (__pyx_v_gamma - 1.);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1270, __pyx_L1_error)
  }
  __pyx_v_sr = (__pyx_v_vnr - (__pyx_t_1 / __pyx_t_2));

  /* "phd/riemann/riemann.pyx":1272
 *     cdef double sr = vnr - 2.*cr/(gamma-1.)
 * 
 *     if wn <= sr: # left vacuum             # <<<<<<<<<<<<<<
 *         d[0] = 0.
 *         p[0] = 0.
 */
  __pyx_t_3 = ((__pyx_v_wn <= __pyx_v_sr) != 0);
  if (__pyx_t_3) {

    /* "phd/riemann/riemann.pyx":1273
 * 
 *     if wn <= sr: # left vacuum
 *         d[0] = 0.             # <<<<<<<<<<<<<<
 *         p[0] = 0.
 *         u = sr
 */
    (__pyx_v_d[0]) = 0.;

    /* "phd/riemann/riemann.pyx":1274
 *     if wn <= sr: # left vacuum
 *         d[0] = 0.
 *         p[0] = 0.             # <<<<<<<<<<<<<<
 *         u = sr
 * 
 */
    (__pyx_v_p[0]) = 0.;

    /* "phd/riemann/riemann.pyx":1275
 *         d[0] = 0.
 *         p[0] = 0.
 *         u = sr             # <<<<<<<<<<<<<<
 * 
 *     elif(wn < vnr + cr): # right fan
 */
    __pyx_v_u = __pyx_v_sr;

    /* "phd/riemann/riemann.pyx":1272
 *     cdef double sr = vnr - 2.*cr/(gamma-1.)
 * 
 *     if wn <= sr: # left vacuum             # <<<<<<<<<<<<<<
 *         d[0] = 0.
 *         p[0] = 0.
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1277
 *         u = sr
 * 
 *     elif(wn < vnr + cr): # right fan             # <<<<<<<<<<<<<<
 *         # sampled point is inside right fan
 *         c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*(vnr - wn))
 */
  __pyx_t_3 = ((__pyx_v_wn < (__pyx_v_vnr + __pyx_v_cr)) != 0);
  if (__pyx_t_3) {

    /* "phd/riemann/riemann.pyx":1279
 *     elif(wn < vnr + cr): # right fan
 *         # sampled point is inside right fan
 *         c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*(vnr - wn))             # <<<<<<<<<<<<<<
 *         u = (2./(gamma + 1.))*(-cr + .5*(gamma-1.)*vnr + wn)
 *         d[0] = dr*pow(c/cr, 2./(gamma - 1.))
 */
    __pyx_t_2 = (__pyx_v_gamma + 1.);
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1279, __pyx_L1_error)
    }
    __pyx_v_c = ((2. / __pyx_t_2) * (__pyx_v_cr - ((.5 * (__pyx_v_gamma - 1.)) * (__pyx_v_vnr - __pyx_v_wn))));

    /* "phd/riemann/riemann.pyx":1280
 *         # sampled point is inside right fan
 *         c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*(vnr - wn))
 *         u = (2./(gamma + 1.))*(-cr + .5*(gamma-1.)*vnr + wn)             # <<<<<<<<<<<<<<
 *         d[0] = dr*pow(c/cr, 2./(gamma - 1.))
 *         p[0] = pr*pow(c/cr, 2.*gamma/(gamma - 1.))
 */
    __pyx_t_2 = (__pyx_v_gamma + 1.);
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1280, __pyx_L1_error)
    }
    __pyx_v_u = ((2. / __pyx_t_2) * (((-__pyx_v_cr) + ((.5 * (__pyx_v_gamma - 1.)) * __pyx_v_vnr)) + __pyx_v_wn));

    /* "phd/riemann/riemann.pyx":1281
 *         c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*(vnr - wn))
 *         u = (2./(gamma + 1.))*(-cr + .5*(gamma-1.)*vnr + wn)
 *         d[0] = dr*pow(c/cr, 2./(gamma - 1.))             # <<<<<<<<<<<<<<
 *         p[0] = pr*pow(c/cr, 2.*gamma/(gamma - 1.))
 * 
 */
    if (unlikely(__pyx_v_cr == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1281, __pyx_L1_error)
    }
    __pyx_t_2 = (__pyx_v_gamma - 1.);
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1281, __pyx_L1_error)
    }
    (__pyx_v_d[0]) = (__pyx_v_dr * pow((__pyx_v_c / __pyx_v_cr), (2. / __pyx_t_2)));

    /* "phd/riemann/riemann.pyx":1282
 *         u = (2./(gamma + 1.))*(-cr + .5*(gamma-1.)*vnr + wn)
 *         d[0] = dr*pow(c/cr, 2./(gamma - 1.))
 *         p[0] = pr*pow(c/cr, 2.*gamma/(gamma - 1.))             # <<<<<<<<<<<<<<
 * 
 *     else: # right state
 */
    if (unlikely(__pyx_v_cr == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1282, __pyx_L1_error)
    }
    __pyx_t_2 = (2. * __pyx_v_gamma);
    __pyx_t_1 = (__pyx_v_gamma - 1.);
    if (unlikely(__pyx_t_1 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1282, __pyx_L1_error)
    }
    (__pyx_v_p[0]) = (__pyx_v_pr * pow((__pyx_v_c / __pyx_v_cr), (__pyx_t_2 / __pyx_t_1)));

    /* "phd/riemann/riemann.pyx":1277
 *         u = sr
 * 
 *     elif(wn < vnr + cr): # right fan             # <<<<<<<<<<<<<<
 *         # sampled point is inside right fan
 *         c = (2./(gamma + 1.))*(cr - .5*(gamma - 1.)*(vnr - wn))
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1285
 * 
 *     else: # right state
 *         d[0] = dr             # <<<<<<<<<<<<<<
 *         p[0] = pr
 *         u = vnr
 */
  /*else*/ {
    (__pyx_v_d[0]) = __pyx_v_dr;

    /* "phd/riemann/riemann.pyx":1286
 *     else: # right state
 *         d[0] = dr
 *         p[0] = pr             # <<<<<<<<<<<<<<
 *         u = vnr
 * 
 */
    (__pyx_v_p[0]) = __pyx_v_pr;

    /* "phd/riemann/riemann.pyx":1287
 *         d[0] = dr
 *         p[0] = pr
 *         u = vnr             # <<<<<<<<<<<<<<
 * 
 *     vn[0] = vsq[0] = 0.
 */
    __pyx_v_u = __pyx_v_vnr;
  }
  __pyx_L3:;

  /* "phd/riemann/riemann.pyx":1289
 *         u = vnr
 * 
 *     vn[0] = vsq[0] = 0.             # <<<<<<<<<<<<<<
 *     for i in range(dim):
 *         v[i] = vr[i] + (u - vnr)*n[i]
 */
  (__pyx_v_vn[0]) = 0.;
  (__pyx_v_vsq[0]) = 0.;

  /* "phd/riemann/riemann.pyx":1290
 * 
 *     vn[0] = vsq[0] = 0.
 *     for i in range(dim):             # <<<<<<<<<<<<<<
 *         v[i] = vr[i] + (u - vnr)*n[i]
 *         vn[0] += v[i]*n[i]
 */
  __pyx_t_4 = __pyx_v_dim;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/riemann/riemann.pyx":1291
 *     vn[0] = vsq[0] = 0.
 *     for i in range(dim):
 *         v[i] = vr[i] + (u - vnr)*n[i]             # <<<<<<<<<<<<<<
 *         vn[0] += v[i]*n[i]
 *         vsq[0] += v[i]*v[i]
 */
    (__pyx_v_v[__pyx_v_i]) = ((__pyx_v_vr[__pyx_v_i]) + ((__pyx_v_u - __pyx_v_vnr) * (__pyx_v_n[__pyx_v_i])));

    /* "phd/riemann/riemann.pyx":1292
 *     for i in range(dim):
 *         v[i] = vr[i] + (u - vnr)*n[i]
 *         vn[0] += v[i]*n[i]             # <<<<<<<<<<<<<<
 *         vsq[0] += v[i]*v[i]
 * 
 */
    __pyx_t_7 = 0;
    (__pyx_v_vn[__pyx_t_7]) = ((__pyx_v_vn[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_n[__pyx_v_i])));

    /* "phd/riemann/riemann.pyx":1293
 *         v[i] = vr[i] + (u - vnr)*n[i]
 *         vn[0] += v[i]*n[i]
 *         vsq[0] += v[i]*v[i]             # <<<<<<<<<<<<<<
 * 
 * cdef inline void vacuum_generation(
 */
    __pyx_t_7 = 0;
    (__pyx_v_vsq[__pyx_t_7]) = ((__pyx_v_vsq[__pyx_t_7]) + ((__pyx_v_v[__pyx_v_i]) * (__pyx_v_v[__pyx_v_i])));
  }

  /* "phd/riemann/riemann.pyx":1261
 *         vsq[0] += v[i]*v[i]
 * 
 * cdef inline void vacuum_left(             # <<<<<<<<<<<<<<
 *         double dr, double vr[3], double pr, double vnr, double cr,
 *         double *d, double  v[3], double *p, double *vn, double *vsq,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("phd.riemann.riemann.vacuum_left", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "phd/riemann/riemann.pyx":1295
 *         vsq[0] += v[i]*v[i]
 * 
 * cdef inline void vacuum_generation(             # <<<<<<<<<<<<<<
 *         double dl, double vl[3], double pl, double vnl, double cl,
 *         double dr, double vr[3], double pr, double vnr, double cr,
 */

static CYTHON_INLINE void __pyx_f_3phd_7riemann_7riemann_vacuum_generation(double __pyx_v_dl, double *__pyx_v_vl, double __pyx_v_pl, double __pyx_v_vnl, double __pyx_v_cl, double __pyx_v_dr, double *__pyx_v_vr, double __pyx_v_pr, double __pyx_v_vnr, double __pyx_v_cr, double *__pyx_v_d, double *__pyx_v_v, double *__pyx_v_p, double *__pyx_v_vn, double *__pyx_v_vsq, double __pyx_v_gamma, double __pyx_v_wn, double *__pyx_v_n, int __pyx_v_dim) {
  int __pyx_v_i;
  double __pyx_v_sl;
  double __pyx_v_sr;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("vacuum_generation", 0);

  /* "phd/riemann/riemann.pyx":1304
 *     """
 *     cdef int i
 *     cdef double sl = vnl + 2.*cl/(gamma-1.)             # <<<<<<<<<<<<<<
 *     cdef double sr = vnr - 2.*cr/(gamma-1.)
 * 
 */
  __pyx_t_1 = (2. * __pyx_v_cl);
  __pyx_t_2 = (__pyx_v_gamma - 1.);
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1304, __pyx_L1_error)
  }
  __pyx_v_sl = (__pyx_v_vnl + (__pyx_t_1 / __pyx_t_2));

  /* "phd/riemann/riemann.pyx":1305
 *     cdef int i
 *     cdef double sl = vnl + 2.*cl/(gamma-1.)
 *     cdef double sr = vnr - 2.*cr/(gamma-1.)             # <<<<<<<<<<<<<<
 * 
 *     # one of the states are zero
 */
  __pyx_t_2 = (2. * __pyx_v_cr);
  __pyx_t_1 = (__pyx_v_gamma - 1.);
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1305, __pyx_L1_error)
  }
  __pyx_v_sr = (__pyx_v_vnr - (__pyx_t_2 / __pyx_t_1));

  /* "phd/riemann/riemann.pyx":1308
 * 
 *     # one of the states are zero
 *     if(wn < sl):             # <<<<<<<<<<<<<<
 *         vacuum_right(dl, vl, pl, vnl, cl,\
 *                 d, v, p, vn, vsq,\
 */
  __pyx_t_3 = ((__pyx_v_wn < __pyx_v_sl) != 0);
  if (__pyx_t_3) {

    /* "phd/riemann/riemann.pyx":1309
 *     # one of the states are zero
 *     if(wn < sl):
 *         vacuum_right(dl, vl, pl, vnl, cl,\             # <<<<<<<<<<<<<<
 *                 d, v, p, vn, vsq,\
 *                 gamma, wn, n, dim)
 */
    __pyx_f_3phd_7riemann_7riemann_vacuum_right(__pyx_v_dl, __pyx_v_vl, __pyx_v_pl, __pyx_v_vnl, __pyx_v_cl, __pyx_v_d, __pyx_v_v, __pyx_v_p, __pyx_v_vn, __pyx_v_vsq, __pyx_v_gamma, __pyx_v_wn, __pyx_v_n, __pyx_v_dim);

    /* "phd/riemann/riemann.pyx":1312
 *                 d, v, p, vn, vsq,\
 *                 gamma, wn, n, dim)
 *         print 'right'             # <<<<<<<<<<<<<<
 * 
 *     elif(wn > sr):
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_right) < 0) __PYX_ERR(0, 1312, __pyx_L1_error)

    /* "phd/riemann/riemann.pyx":1308
 * 
 *     # one of the states are zero
 *     if(wn < sl):             # <<<<<<<<<<<<<<
 *         vacuum_right(dl, vl, pl, vnl, cl,\
 *                 d, v, p, vn, vsq,\
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1314
 *         print 'right'
 * 
 *     elif(wn > sr):             # <<<<<<<<<<<<<<
 *         print 'left'
 *         vacuum_left(dr, vr, pr, vnr, cr,\
 */
  __pyx_t_3 = ((__pyx_v_wn > __pyx_v_sr) != 0);
  if (__pyx_t_3) {

    /* "phd/riemann/riemann.pyx":1315
 * 
 *     elif(wn > sr):
 *         print 'left'             # <<<<<<<<<<<<<<
 *         vacuum_left(dr, vr, pr, vnr, cr,\
 *                 d, v, p, vn, vsq,\
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_left) < 0) __PYX_ERR(0, 1315, __pyx_L1_error)

    /* "phd/riemann/riemann.pyx":1316
 *     elif(wn > sr):
 *         print 'left'
 *         vacuum_left(dr, vr, pr, vnr, cr,\             # <<<<<<<<<<<<<<
 *                 d, v, p, vn, vsq,\
 *                 gamma, wn, n, dim)
 */
    __pyx_f_3phd_7riemann_7riemann_vacuum_left(__pyx_v_dr, __pyx_v_vr, __pyx_v_pr, __pyx_v_vnr, __pyx_v_cr, __pyx_v_d, __pyx_v_v, __pyx_v_p, __pyx_v_vn, __pyx_v_vsq, __pyx_v_gamma, __pyx_v_wn, __pyx_v_n, __pyx_v_dim);

    /* "phd/riemann/riemann.pyx":1314
 *         print 'right'
 * 
 *     elif(wn > sr):             # <<<<<<<<<<<<<<
 *         print 'left'
 *         vacuum_left(dr, vr, pr, vnr, cr,\
 */
    goto __pyx_L3;
  }

  /* "phd/riemann/riemann.pyx":1321
 * 
 *     else:
 *         print 'zero'             # <<<<<<<<<<<<<<
 *         d[0] = 0.
 *         p[0] = 0.
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_n_s_zero) < 0) __PYX_ERR(0, 1321, __pyx_L1_error)

    /* "phd/riemann/riemann.pyx":1322
 *     else:
 *         print 'zero'
 *         d[0] = 0.             # <<<<<<<<<<<<<<
 *         p[0] = 0.
 * 
 */
    (__pyx_v_d[0]) = 0.;

    /* "phd/riemann/riemann.pyx":1323
 *         print 'zero'
 *         d[0] = 0.
 *         p[0] = 0.             # <<<<<<<<<<<<<<
 * 
 *         vn[0] = vsq[0] = 0
 */
    (__pyx_v_p[0]) = 0.;

    /* "phd/riemann/riemann.pyx":1325
 *         p[0] = 0.
 * 
 *         vn[0] = vsq[0] = 0             # <<<<<<<<<<<<<<
 *         for i in range(dim):
 *             v[i] = 0.
 */
    (__pyx_v_vn[0]) = 0.0;
    (__pyx_v_vsq[0]) = 0.0;

    /* "phd/riemann/riemann.pyx":1326
 * 
 *         vn[0] = vsq[0] = 0
 *         for i in range(dim):             # <<<<<<<<<<<<<<
 *             v[i] = 0.
 * 
 */
    __pyx_t_4 = __pyx_v_dim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "phd/riemann/riemann.pyx":1327
 *         vn[0] = vsq[0] = 0
 *         for i in range(dim):
 *             v[i] = 0.             # <<<<<<<<<<<<<<
 * 
 * #            # hack - delete later >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 */
      (__pyx_v_v[__pyx_v_i]) = 0.;
    }
  }
  __pyx_L3:;

  /* "phd/riemann/riemann.pyx":1295
 *         vsq[0] += v[i]*v[i]
 * 
 * cdef inline void vacuum_generation(             # <<<<<<<<<<<<<<
 *         double dl, double vl[3], double pl, double vnl, double cl,
 *         double dr, double vr[3], double pr, double vnr, double cr,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("phd.riemann.riemann.vacuum_generation", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __pyx_unpickle_RiemannBase(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_1__pyx_unpickle_RiemannBase(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3phd_7riemann_7riemann_1__pyx_unpickle_RiemannBase = {"__pyx_unpickle_RiemannBase", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_7riemann_7riemann_1__pyx_unpickle_RiemannBase, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3phd_7riemann_7riemann_1__pyx_unpickle_RiemannBase(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_RiemannBase (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RiemannBase", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RiemannBase", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_RiemannBase") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RiemannBase", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_RiemannBase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann___pyx_unpickle_RiemannBase(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann___pyx_unpickle_RiemannBase(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RiemannBase", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x68d4d25:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x68d4d25 = (cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x68d4d25) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x68d4d25:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x68d4d25 = (cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = RiemannBase.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x68d4d25:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x68d4d25 = (cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = RiemannBase.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x68, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x68d4d25:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x68d4d25 = (cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x68d4d25 = (cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = RiemannBase.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RiemannBase__set_state(<RiemannBase> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_3phd_7riemann_7riemann_RiemannBase), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x68d4d25 = (cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = RiemannBase.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RiemannBase__set_state(<RiemannBase> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = RiemannBase.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RiemannBase__set_state(<RiemannBase> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_RiemannBase__set_state(RiemannBase __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_3phd_7riemann_7riemann___pyx_unpickle_RiemannBase__set_state(((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x68d4d25 = (cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = RiemannBase.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RiemannBase__set_state(<RiemannBase> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RiemannBase__set_state(<RiemannBase> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_RiemannBase__set_state(RiemannBase __pyx_result, tuple __pyx_state):
 *     __pyx_result.cfl = __pyx_state[0]; __pyx_result.fields_registered = __pyx_state[1]; __pyx_result.flux_field_groups = __pyx_state[2]; __pyx_result.flux_fields = __pyx_state[3]; __pyx_result.fluxes = __pyx_state[4]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RiemannBase(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_RiemannBase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_RiemannBase__set_state(<RiemannBase> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RiemannBase__set_state(RiemannBase __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.cfl = __pyx_state[0]; __pyx_result.fields_registered = __pyx_state[1]; __pyx_result.flux_field_groups = __pyx_state[2]; __pyx_result.flux_fields = __pyx_state[3]; __pyx_result.fluxes = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_3phd_7riemann_7riemann___pyx_unpickle_RiemannBase__set_state(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RiemannBase__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_RiemannBase__set_state(RiemannBase __pyx_result, tuple __pyx_state):
 *     __pyx_result.cfl = __pyx_state[0]; __pyx_result.fields_registered = __pyx_state[1]; __pyx_result.flux_field_groups = __pyx_state[2]; __pyx_result.flux_fields = __pyx_state[3]; __pyx_result.fluxes = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->cfl = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->fields_registered = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->flux_field_groups);
  __Pyx_DECREF(__pyx_v___pyx_result->flux_field_groups);
  __pyx_v___pyx_result->flux_field_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->flux_fields);
  __Pyx_DECREF(__pyx_v___pyx_result->flux_fields);
  __pyx_v___pyx_result->flux_fields = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->fluxes);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->fluxes));
  __pyx_v___pyx_result->fluxes = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_RiemannBase__set_state(RiemannBase __pyx_result, tuple __pyx_state):
 *     __pyx_result.cfl = __pyx_state[0]; __pyx_result.fields_registered = __pyx_state[1]; __pyx_result.flux_field_groups = __pyx_state[2]; __pyx_result.flux_fields = __pyx_state[3]; __pyx_result.fluxes = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 5) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.cfl = __pyx_state[0]; __pyx_result.fields_registered = __pyx_state[1]; __pyx_result.flux_field_groups = __pyx_state[2]; __pyx_result.flux_fields = __pyx_state[3]; __pyx_result.fluxes = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_RiemannBase__set_state(RiemannBase __pyx_result, tuple __pyx_state):
 *     __pyx_result.cfl = __pyx_state[0]; __pyx_result.fields_registered = __pyx_state[1]; __pyx_result.flux_field_groups = __pyx_state[2]; __pyx_result.flux_fields = __pyx_state[3]; __pyx_result.fluxes = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_RiemannBase__set_state(<RiemannBase> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RiemannBase__set_state(RiemannBase __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.cfl = __pyx_state[0]; __pyx_result.fields_registered = __pyx_state[1]; __pyx_result.flux_field_groups = __pyx_state[2]; __pyx_result.flux_fields = __pyx_state[3]; __pyx_result.fluxes = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_RiemannBase__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_HLL(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_3__pyx_unpickle_HLL(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3phd_7riemann_7riemann_3__pyx_unpickle_HLL = {"__pyx_unpickle_HLL", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_7riemann_7riemann_3__pyx_unpickle_HLL, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3phd_7riemann_7riemann_3__pyx_unpickle_HLL(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_HLL (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_HLL", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_HLL", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_HLL") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_HLL", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_HLL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_2__pyx_unpickle_HLL(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_2__pyx_unpickle_HLL(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_HLL", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xcaafa99:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xcaafa99) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xcaafa99:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = HLL.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xcaafa99:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = HLL.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xca, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xcaafa99:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = HLL.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_HLL__set_state(<HLL> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_3phd_7riemann_7riemann_HLL), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = HLL.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_HLL__set_state(<HLL> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = HLL.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_HLL__set_state(<HLL> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_HLL__set_state(HLL __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_3phd_7riemann_7riemann___pyx_unpickle_HLL__set_state(((struct __pyx_obj_3phd_7riemann_7riemann_HLL *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = HLL.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_HLL__set_state(<HLL> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_HLL__set_state(<HLL> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_HLL__set_state(HLL __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_HLL(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_HLL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_HLL__set_state(<HLL> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_HLL__set_state(HLL __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_3phd_7riemann_7riemann___pyx_unpickle_HLL__set_state(struct __pyx_obj_3phd_7riemann_7riemann_HLL *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_HLL__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_HLL__set_state(HLL __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->boost = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.cfl = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.fields_registered = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.flux_field_groups);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.flux_field_groups);
  __pyx_v___pyx_result->__pyx_base.flux_field_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.flux_fields);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.flux_fields);
  __pyx_v___pyx_result->__pyx_base.flux_fields = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.fluxes);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.fluxes));
  __pyx_v___pyx_result->__pyx_base.fluxes = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_HLL__set_state(HLL __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 6) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_HLL__set_state(HLL __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_HLL__set_state(<HLL> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_HLL__set_state(HLL __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_HLL__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_HLLC(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_5__pyx_unpickle_HLLC(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3phd_7riemann_7riemann_5__pyx_unpickle_HLLC = {"__pyx_unpickle_HLLC", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_7riemann_7riemann_5__pyx_unpickle_HLLC, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3phd_7riemann_7riemann_5__pyx_unpickle_HLLC(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_HLLC (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_HLLC", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_HLLC", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_HLLC") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_HLLC", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_HLLC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_4__pyx_unpickle_HLLC(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_4__pyx_unpickle_HLLC(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_HLLC", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xcaafa99:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xcaafa99) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xcaafa99:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = HLLC.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xcaafa99:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = HLLC.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xca, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xcaafa99:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = HLLC.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_HLLC__set_state(<HLLC> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_3phd_7riemann_7riemann_HLLC), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = HLLC.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_HLLC__set_state(<HLLC> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = HLLC.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_HLLC__set_state(<HLLC> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_HLLC__set_state(HLLC __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_3phd_7riemann_7riemann___pyx_unpickle_HLLC__set_state(((struct __pyx_obj_3phd_7riemann_7riemann_HLLC *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = HLLC.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_HLLC__set_state(<HLLC> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_HLLC__set_state(<HLLC> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_HLLC__set_state(HLLC __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_HLLC(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_HLLC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_HLLC__set_state(<HLLC> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_HLLC__set_state(HLLC __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_3phd_7riemann_7riemann___pyx_unpickle_HLLC__set_state(struct __pyx_obj_3phd_7riemann_7riemann_HLLC *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_HLLC__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_HLLC__set_state(HLLC __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.boost = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base.cfl = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base.fields_registered = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.flux_field_groups);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.flux_field_groups);
  __pyx_v___pyx_result->__pyx_base.__pyx_base.flux_field_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.flux_fields);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.flux_fields);
  __pyx_v___pyx_result->__pyx_base.__pyx_base.flux_fields = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.__pyx_base.fluxes);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base.fluxes));
  __pyx_v___pyx_result->__pyx_base.__pyx_base.fluxes = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_HLLC__set_state(HLLC __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 6) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_HLLC__set_state(HLLC __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_HLLC__set_state(<HLLC> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_HLLC__set_state(HLLC __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_HLLC__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Exact(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7riemann_7riemann_7__pyx_unpickle_Exact(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3phd_7riemann_7riemann_7__pyx_unpickle_Exact = {"__pyx_unpickle_Exact", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_7riemann_7riemann_7__pyx_unpickle_Exact, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3phd_7riemann_7riemann_7__pyx_unpickle_Exact(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Exact (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Exact", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Exact", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Exact") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Exact", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_Exact", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3phd_7riemann_7riemann_6__pyx_unpickle_Exact(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7riemann_7riemann_6__pyx_unpickle_Exact(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Exact", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xcaafa99:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xcaafa99) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xcaafa99:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = Exact.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xcaafa99:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Exact.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xca, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xcaafa99:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = Exact.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Exact__set_state(<Exact> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_3phd_7riemann_7riemann_Exact), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = Exact.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Exact__set_state(<Exact> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Exact.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Exact__set_state(<Exact> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Exact__set_state(Exact __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_3phd_7riemann_7riemann___pyx_unpickle_Exact__set_state(((struct __pyx_obj_3phd_7riemann_7riemann_Exact *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcaafa99 = (boost, cfl, fields_registered, flux_field_groups, flux_fields, fluxes))" % __pyx_checksum)
 *     __pyx_result = Exact.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Exact__set_state(<Exact> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Exact__set_state(<Exact> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Exact__set_state(Exact __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Exact(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_Exact", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Exact__set_state(<Exact> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Exact__set_state(Exact __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_3phd_7riemann_7riemann___pyx_unpickle_Exact__set_state(struct __pyx_obj_3phd_7riemann_7riemann_Exact *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Exact__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Exact__set_state(Exact __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->boost = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.cfl = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.fields_registered = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.flux_field_groups);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.flux_field_groups);
  __pyx_v___pyx_result->__pyx_base.flux_field_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.flux_fields);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.flux_fields);
  __pyx_v___pyx_result->__pyx_base.flux_fields = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.fluxes);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.fluxes));
  __pyx_v___pyx_result->__pyx_base.fluxes = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Exact__set_state(Exact __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 6) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Exact__set_state(Exact __pyx_result, tuple __pyx_state):
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Exact__set_state(<Exact> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Exact__set_state(Exact __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.riemann.riemann.__pyx_unpickle_Exact__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":869
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":870
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":873
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":875
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":876
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":882
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 882, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":883
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 883, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 884, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 884, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":888
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 888, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":889
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 889, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 890, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 890, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":894
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 894, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":895
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 895, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":896
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 896, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase __pyx_vtable_3phd_7riemann_7riemann_RiemannBase;

static PyObject *__pyx_tp_new_3phd_7riemann_7riemann_RiemannBase(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)o);
  p->__pyx_vtab = __pyx_vtabptr_3phd_7riemann_7riemann_RiemannBase;
  p->flux_fields = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->flux_field_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->fluxes = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_3phd_7riemann_7riemann_RiemannBase(PyObject *o) {
  struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *p = (struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->flux_fields);
  Py_CLEAR(p->flux_field_groups);
  Py_CLEAR(p->fluxes);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3phd_7riemann_7riemann_RiemannBase(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *p = (struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)o;
  if (p->flux_fields) {
    e = (*v)(p->flux_fields, a); if (e) return e;
  }
  if (p->flux_field_groups) {
    e = (*v)(p->flux_field_groups, a); if (e) return e;
  }
  if (p->fluxes) {
    e = (*v)(((PyObject *)p->fluxes), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3phd_7riemann_7riemann_RiemannBase(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *p = (struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *)o;
  tmp = ((PyObject*)p->flux_fields);
  p->flux_fields = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->flux_field_groups);
  p->flux_field_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fluxes);
  p->fluxes = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3phd_7riemann_7riemann_11RiemannBase_cfl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_3cfl_1__get__(o);
}

static int __pyx_setprop_3phd_7riemann_7riemann_11RiemannBase_cfl(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_3cfl_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_7riemann_7riemann_11RiemannBase_fluxes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_6fluxes_1__get__(o);
}

static int __pyx_setprop_3phd_7riemann_7riemann_11RiemannBase_fluxes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_6fluxes_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_6fluxes_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_3phd_7riemann_7riemann_RiemannBase[] = {
  {"initialize", (PyCFunction)__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_3initialize, METH_NOARGS, __pyx_doc_3phd_7riemann_7riemann_11RiemannBase_2initialize},
  {"add_fields", (PyCFunction)__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_5add_fields, METH_O, __pyx_doc_3phd_7riemann_7riemann_11RiemannBase_4add_fields},
  {"compute_fluxes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_7compute_fluxes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_7riemann_7riemann_11RiemannBase_6compute_fluxes},
  {"compute_time_step", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_9compute_time_step, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_7riemann_7riemann_11RiemannBase_8compute_time_step},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3phd_7riemann_7riemann_11RiemannBase_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3phd_7riemann_7riemann_RiemannBase[] = {
  {(char *)"cfl", __pyx_getprop_3phd_7riemann_7riemann_11RiemannBase_cfl, __pyx_setprop_3phd_7riemann_7riemann_11RiemannBase_cfl, (char *)0, 0},
  {(char *)"fluxes", __pyx_getprop_3phd_7riemann_7riemann_11RiemannBase_fluxes, __pyx_setprop_3phd_7riemann_7riemann_11RiemannBase_fluxes, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3phd_7riemann_7riemann_RiemannBase = {
  PyVarObject_HEAD_INIT(0, 0)
  "phd.riemann.riemann.RiemannBase", /*tp_name*/
  sizeof(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3phd_7riemann_7riemann_RiemannBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Riemann base that all riemann solvers need to inherit.\n\n    Attributes\n    ----------\n    cfl : float\n        The Courant Friedrichs Lewy condition.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_3phd_7riemann_7riemann_RiemannBase, /*tp_traverse*/
  __pyx_tp_clear_3phd_7riemann_7riemann_RiemannBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3phd_7riemann_7riemann_RiemannBase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3phd_7riemann_7riemann_RiemannBase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3phd_7riemann_7riemann_11RiemannBase_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3phd_7riemann_7riemann_RiemannBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLL __pyx_vtable_3phd_7riemann_7riemann_HLL;

static PyObject *__pyx_tp_new_3phd_7riemann_7riemann_HLL(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3phd_7riemann_7riemann_HLL *p;
  PyObject *o = __pyx_tp_new_3phd_7riemann_7riemann_RiemannBase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3phd_7riemann_7riemann_HLL *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase*)__pyx_vtabptr_3phd_7riemann_7riemann_HLL;
  return o;
}

static PyObject *__pyx_getprop_3phd_7riemann_7riemann_3HLL_boost(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7riemann_7riemann_3HLL_5boost_1__get__(o);
}

static int __pyx_setprop_3phd_7riemann_7riemann_3HLL_boost(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7riemann_7riemann_3HLL_5boost_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_3phd_7riemann_7riemann_HLL[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3phd_7riemann_7riemann_3HLL_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3phd_7riemann_7riemann_3HLL_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3phd_7riemann_7riemann_HLL[] = {
  {(char *)"boost", __pyx_getprop_3phd_7riemann_7riemann_3HLL_boost, __pyx_setprop_3phd_7riemann_7riemann_3HLL_boost, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3phd_7riemann_7riemann_HLL = {
  PyVarObject_HEAD_INIT(0, 0)
  "phd.riemann.riemann.HLL", /*tp_name*/
  sizeof(struct __pyx_obj_3phd_7riemann_7riemann_HLL), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3phd_7riemann_7riemann_RiemannBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "HLL implementation of solving the riemann problem. This is taken\n    from Toro Riemann Solvers and Numerical Methods for Fluid Dynamics\n    chapter 10.\n\n    Attributes\n    ----------\n    cfl : float\n        The Courant Friedrichs Lewy condition.\n\n    boost : boolean\n        Flag indicating to boost to face frame if true\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_3phd_7riemann_7riemann_RiemannBase, /*tp_traverse*/
  __pyx_tp_clear_3phd_7riemann_7riemann_RiemannBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3phd_7riemann_7riemann_HLL, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3phd_7riemann_7riemann_HLL, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3phd_7riemann_7riemann_3HLL_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3phd_7riemann_7riemann_HLL, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLLC __pyx_vtable_3phd_7riemann_7riemann_HLLC;

static PyObject *__pyx_tp_new_3phd_7riemann_7riemann_HLLC(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3phd_7riemann_7riemann_HLLC *p;
  PyObject *o = __pyx_tp_new_3phd_7riemann_7riemann_HLL(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3phd_7riemann_7riemann_HLLC *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase*)__pyx_vtabptr_3phd_7riemann_7riemann_HLLC;
  return o;
}

static PyMethodDef __pyx_methods_3phd_7riemann_7riemann_HLLC[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3phd_7riemann_7riemann_4HLLC_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3phd_7riemann_7riemann_4HLLC_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3phd_7riemann_7riemann_HLLC = {
  PyVarObject_HEAD_INIT(0, 0)
  "phd.riemann.riemann.HLLC", /*tp_name*/
  sizeof(struct __pyx_obj_3phd_7riemann_7riemann_HLLC), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3phd_7riemann_7riemann_RiemannBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "HLLC implementation of solving the riemann problem. This is taken\n    from Toro Riemann Solvers and Numerical Methods for Fluid Dynamics\n    chapter 10.\n\n    Attributes\n    ----------\n    cfl : float\n        The Courant Friedrichs Lewy condition.\n\n    boost : boolean\n        Flag indicating to boost to face frame if true\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_3phd_7riemann_7riemann_RiemannBase, /*tp_traverse*/
  __pyx_tp_clear_3phd_7riemann_7riemann_RiemannBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3phd_7riemann_7riemann_HLLC, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_3phd_7riemann_7riemann_3HLL_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_3phd_7riemann_7riemann_HLLC, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_Exact __pyx_vtable_3phd_7riemann_7riemann_Exact;

static PyObject *__pyx_tp_new_3phd_7riemann_7riemann_Exact(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3phd_7riemann_7riemann_Exact *p;
  PyObject *o = __pyx_tp_new_3phd_7riemann_7riemann_RiemannBase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3phd_7riemann_7riemann_Exact *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase*)__pyx_vtabptr_3phd_7riemann_7riemann_Exact;
  return o;
}

static PyObject *__pyx_getprop_3phd_7riemann_7riemann_5Exact_boost(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7riemann_7riemann_5Exact_5boost_1__get__(o);
}

static int __pyx_setprop_3phd_7riemann_7riemann_5Exact_boost(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7riemann_7riemann_5Exact_5boost_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_3phd_7riemann_7riemann_Exact[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3phd_7riemann_7riemann_5Exact_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3phd_7riemann_7riemann_5Exact_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3phd_7riemann_7riemann_Exact[] = {
  {(char *)"boost", __pyx_getprop_3phd_7riemann_7riemann_5Exact_boost, __pyx_setprop_3phd_7riemann_7riemann_5Exact_boost, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3phd_7riemann_7riemann_Exact = {
  PyVarObject_HEAD_INIT(0, 0)
  "phd.riemann.riemann.Exact", /*tp_name*/
  sizeof(struct __pyx_obj_3phd_7riemann_7riemann_Exact), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3phd_7riemann_7riemann_RiemannBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Exact implementation of solving the riemann problem. This is taken\n    from Toro Riemann Solvers and Numerical Methods for Fluid Dynamics\n    chapter 9.\n\n    Attributes\n    ----------\n    cfl : float\n        The Courant Friedrichs Lewy condition.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_3phd_7riemann_7riemann_RiemannBase, /*tp_traverse*/
  __pyx_tp_clear_3phd_7riemann_7riemann_RiemannBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3phd_7riemann_7riemann_Exact, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3phd_7riemann_7riemann_Exact, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3phd_7riemann_7riemann_5Exact_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3phd_7riemann_7riemann_Exact, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_riemann(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_riemann},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "riemann",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_ERROR_Missing_fields_in_particle, __pyx_k_ERROR_Missing_fields_in_particle, sizeof(__pyx_k_ERROR_Missing_fields_in_particle), 0, 0, 1, 0},
  {&__pyx_n_s_Exact, __pyx_k_Exact, sizeof(__pyx_k_Exact), 0, 0, 1, 1},
  {&__pyx_kp_s_Exact_Starting_riemann, __pyx_k_Exact_Starting_riemann, sizeof(__pyx_k_Exact_Starting_riemann), 0, 0, 1, 0},
  {&__pyx_n_s_HLL, __pyx_k_HLL, sizeof(__pyx_k_HLL), 0, 0, 1, 1},
  {&__pyx_n_s_HLLC, __pyx_k_HLLC, sizeof(__pyx_k_HLLC), 0, 0, 1, 1},
  {&__pyx_kp_s_HLLC_Starting_riemann, __pyx_k_HLLC_Starting_riemann, sizeof(__pyx_k_HLLC_Starting_riemann), 0, 0, 1, 0},
  {&__pyx_kp_s_HLL_Starting_riemann, __pyx_k_HLL_Starting_riemann, sizeof(__pyx_k_HLL_Starting_riemann), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x68, __pyx_k_Incompatible_checksums_s_vs_0x68, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x68), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xca, __pyx_k_Incompatible_checksums_s_vs_0xca, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xca), 0, 0, 1, 0},
  {&__pyx_kp_s_No_convergence_in_Exact_Riemann, __pyx_k_No_convergence_in_Exact_Riemann, sizeof(__pyx_k_No_convergence_in_Exact_Riemann), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_ParticleTAGS, __pyx_k_ParticleTAGS, sizeof(__pyx_k_ParticleTAGS), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_Real, __pyx_k_Real, sizeof(__pyx_k_Real), 0, 0, 1, 1},
  {&__pyx_n_s_RiemannBase, __pyx_k_RiemannBase, sizeof(__pyx_k_RiemannBase), 0, 0, 1, 1},
  {&__pyx_kp_s_RiemannBase_riemann_solver_calle, __pyx_k_RiemannBase_riemann_solver_calle, sizeof(__pyx_k_RiemannBase_riemann_solver_calle), 0, 0, 1, 0},
  {&__pyx_kp_s_Riemann_did_not_set_fields_for_f, __pyx_k_Riemann_did_not_set_fields_for_f, sizeof(__pyx_k_Riemann_did_not_set_fields_for_f), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_boost, __pyx_k_boost, sizeof(__pyx_k_boost), 0, 0, 1, 1},
  {&__pyx_n_s_carrays_to_register, __pyx_k_carrays_to_register, sizeof(__pyx_k_carrays_to_register), 0, 0, 1, 1},
  {&__pyx_n_s_cfl, __pyx_k_cfl, sizeof(__pyx_k_cfl), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_compute_fluxes, __pyx_k_compute_fluxes, sizeof(__pyx_k_compute_fluxes), 0, 0, 1, 1},
  {&__pyx_n_s_compute_time_step, __pyx_k_compute_time_step, sizeof(__pyx_k_compute_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_conservative, __pyx_k_conservative, sizeof(__pyx_k_conservative), 0, 0, 1, 1},
  {&__pyx_n_s_density, __pyx_k_density, sizeof(__pyx_k_density), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_energy, __pyx_k_energy, sizeof(__pyx_k_energy), 0, 0, 1, 1},
  {&__pyx_n_s_eos, __pyx_k_eos, sizeof(__pyx_k_eos), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mass, __pyx_k_mass, sizeof(__pyx_k_mass), 0, 0, 1, 1},
  {&__pyx_n_s_mesh, __pyx_k_mesh, sizeof(__pyx_k_mesh), 0, 0, 1, 1},
  {&__pyx_n_s_momentum, __pyx_k_momentum, sizeof(__pyx_k_momentum), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_normal, __pyx_k_normal, sizeof(__pyx_k_normal), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_particles, __pyx_k_particles, sizeof(__pyx_k_particles), 0, 0, 1, 1},
  {&__pyx_n_s_phd, __pyx_k_phd, sizeof(__pyx_k_phd), 0, 0, 1, 1},
  {&__pyx_n_s_phdLogger, __pyx_k_phdLogger, sizeof(__pyx_k_phdLogger), 0, 0, 1, 1},
  {&__pyx_n_s_phd_riemann_riemann, __pyx_k_phd_riemann_riemann, sizeof(__pyx_k_phd_riemann_riemann), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_pressure, __pyx_k_pressure, sizeof(__pyx_k_pressure), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Exact, __pyx_k_pyx_unpickle_Exact, sizeof(__pyx_k_pyx_unpickle_Exact), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_HLL, __pyx_k_pyx_unpickle_HLL, sizeof(__pyx_k_pyx_unpickle_HLL), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_HLLC, __pyx_k_pyx_unpickle_HLLC, sizeof(__pyx_k_pyx_unpickle_HLLC), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_RiemannBase, __pyx_k_pyx_unpickle_RiemannBase, sizeof(__pyx_k_pyx_unpickle_RiemannBase), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reconstruction, __pyx_k_reconstruction, sizeof(__pyx_k_reconstruction), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_utils_particle_tags, __pyx_k_utils_particle_tags, sizeof(__pyx_k_utils_particle_tags), 0, 0, 1, 1},
  {&__pyx_n_s_velocity, __pyx_k_velocity, sizeof(__pyx_k_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
  {&__pyx_n_s_zero, __pyx_k_zero, sizeof(__pyx_k_zero), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 41, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 118, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 884, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "phd/riemann/riemann.pyx":41
 *         """
 *         if not self.fields_registered:
 *             raise RuntimeError("Riemann did not set fields for flux!")             # <<<<<<<<<<<<<<
 * 
 *         self.fluxes = CarrayContainer(carrays_to_register=self.flux_fields)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Riemann_did_not_set_fields_for_f); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "phd/riemann/riemann.pyx":60
 *         if "conservative" not in particles.carray_named_groups or\
 *                 "momentum" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")             # <<<<<<<<<<<<<<
 * 
 *         # add standard primitive fields
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Missing_fields_in_particle); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "phd/riemann/riemann.pyx":1090
 *         # failed to converge
 *         with gil:
 *             raise RuntimeError('No convergence in Exact Riemann Solver')             # <<<<<<<<<<<<<<
 * 
 * cdef inline void vacuum(
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_No_convergence_in_Exact_Riemann); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(3, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(3, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "phd/riemann/riemann.pyx":11
 * from ..utils.carray cimport DoubleArray, IntArray
 * 
 * phdLogger = logging.getLogger("phd")             # <<<<<<<<<<<<<<
 * 
 * cdef int REAL = ParticleTAGS.Real
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_s_phd); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":1
 * def __pyx_unpickle_RiemannBase(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__7 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_RiemannBase, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__9 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_HLL, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__11 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_HLLC, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__13 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Exact, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_4_0 = PyFloat_FromDouble(4.0); if (unlikely(!__pyx_float_4_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_109923621 = PyInt_FromLong(109923621L); if (unlikely(!__pyx_int_109923621)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_212531865 = PyInt_FromLong(212531865L); if (unlikely(!__pyx_int_212531865)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("vacuum_right", (void (*)(void))__pyx_f_3phd_7riemann_7riemann_vacuum_right, "void (double, double *, double, double, double, double *, double *, double *, double *, double *, double, double, double *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("vacuum_left", (void (*)(void))__pyx_f_3phd_7riemann_7riemann_vacuum_left, "void (double, double *, double, double, double, double *, double *, double *, double *, double *, double, double, double *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("vacuum_generation", (void (*)(void))__pyx_f_3phd_7riemann_7riemann_vacuum_generation, "void (double, double *, double, double, double, double, double *, double, double, double, double *, double *, double *, double *, double *, double, double, double *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_3phd_7riemann_7riemann_RiemannBase = &__pyx_vtable_3phd_7riemann_7riemann_RiemannBase;
  __pyx_vtable_3phd_7riemann_7riemann_RiemannBase.compute_fluxes = (PyObject *(*)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, int __pyx_skip_dispatch))__pyx_f_3phd_7riemann_7riemann_11RiemannBase_compute_fluxes;
  __pyx_vtable_3phd_7riemann_7riemann_RiemannBase.riemann_solver = (PyObject *(*)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, double, int))__pyx_f_3phd_7riemann_7riemann_11RiemannBase_riemann_solver;
  __pyx_vtable_3phd_7riemann_7riemann_RiemannBase.compute_time_step = (double (*)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, int __pyx_skip_dispatch))__pyx_f_3phd_7riemann_7riemann_11RiemannBase_compute_time_step;
  __pyx_vtable_3phd_7riemann_7riemann_RiemannBase.deboost = (PyObject *(*)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int))__pyx_f_3phd_7riemann_7riemann_11RiemannBase_deboost;
  if (PyType_Ready(&__pyx_type_3phd_7riemann_7riemann_RiemannBase) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3phd_7riemann_7riemann_RiemannBase.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3phd_7riemann_7riemann_RiemannBase.tp_dictoffset && __pyx_type_3phd_7riemann_7riemann_RiemannBase.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3phd_7riemann_7riemann_RiemannBase.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_3phd_7riemann_7riemann_RiemannBase, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 15, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_3phd_7riemann_7riemann_11RiemannBase___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_3phd_7riemann_7riemann_11RiemannBase___init__.doc = __pyx_doc_3phd_7riemann_7riemann_11RiemannBase___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_3phd_7riemann_7riemann_11RiemannBase___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_3phd_7riemann_7riemann_RiemannBase.tp_dict, __pyx_vtabptr_3phd_7riemann_7riemann_RiemannBase) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RiemannBase, (PyObject *)&__pyx_type_3phd_7riemann_7riemann_RiemannBase) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3phd_7riemann_7riemann_RiemannBase) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_ptype_3phd_7riemann_7riemann_RiemannBase = &__pyx_type_3phd_7riemann_7riemann_RiemannBase;
  __pyx_vtabptr_3phd_7riemann_7riemann_HLL = &__pyx_vtable_3phd_7riemann_7riemann_HLL;
  __pyx_vtable_3phd_7riemann_7riemann_HLL.__pyx_base = *__pyx_vtabptr_3phd_7riemann_7riemann_RiemannBase;
  __pyx_vtable_3phd_7riemann_7riemann_HLL.__pyx_base.riemann_solver = (PyObject *(*)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, double, int))__pyx_f_3phd_7riemann_7riemann_3HLL_riemann_solver;
  __pyx_vtable_3phd_7riemann_7riemann_HLL.get_waves = (void (*)(struct __pyx_obj_3phd_7riemann_7riemann_HLL *, double, double, double, double, double, double, double, double *, double *, double *))__pyx_f_3phd_7riemann_7riemann_3HLL_get_waves;
  __pyx_type_3phd_7riemann_7riemann_HLL.tp_base = __pyx_ptype_3phd_7riemann_7riemann_RiemannBase;
  if (PyType_Ready(&__pyx_type_3phd_7riemann_7riemann_HLL) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3phd_7riemann_7riemann_HLL.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3phd_7riemann_7riemann_HLL.tp_dictoffset && __pyx_type_3phd_7riemann_7riemann_HLL.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3phd_7riemann_7riemann_HLL.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3phd_7riemann_7riemann_HLL.tp_dict, __pyx_vtabptr_3phd_7riemann_7riemann_HLL) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HLL, (PyObject *)&__pyx_type_3phd_7riemann_7riemann_HLL) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3phd_7riemann_7riemann_HLL) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_ptype_3phd_7riemann_7riemann_HLL = &__pyx_type_3phd_7riemann_7riemann_HLL;
  __pyx_vtabptr_3phd_7riemann_7riemann_HLLC = &__pyx_vtable_3phd_7riemann_7riemann_HLLC;
  __pyx_vtable_3phd_7riemann_7riemann_HLLC.__pyx_base = *__pyx_vtabptr_3phd_7riemann_7riemann_HLL;
  __pyx_vtable_3phd_7riemann_7riemann_HLLC.__pyx_base.__pyx_base.riemann_solver = (PyObject *(*)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, double, int))__pyx_f_3phd_7riemann_7riemann_4HLLC_riemann_solver;
  __pyx_type_3phd_7riemann_7riemann_HLLC.tp_base = __pyx_ptype_3phd_7riemann_7riemann_HLL;
  if (PyType_Ready(&__pyx_type_3phd_7riemann_7riemann_HLLC) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3phd_7riemann_7riemann_HLLC.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3phd_7riemann_7riemann_HLLC.tp_dictoffset && __pyx_type_3phd_7riemann_7riemann_HLLC.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3phd_7riemann_7riemann_HLLC.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3phd_7riemann_7riemann_HLLC.tp_dict, __pyx_vtabptr_3phd_7riemann_7riemann_HLLC) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HLLC, (PyObject *)&__pyx_type_3phd_7riemann_7riemann_HLLC) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3phd_7riemann_7riemann_HLLC) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  __pyx_ptype_3phd_7riemann_7riemann_HLLC = &__pyx_type_3phd_7riemann_7riemann_HLLC;
  __pyx_vtabptr_3phd_7riemann_7riemann_Exact = &__pyx_vtable_3phd_7riemann_7riemann_Exact;
  __pyx_vtable_3phd_7riemann_7riemann_Exact.__pyx_base = *__pyx_vtabptr_3phd_7riemann_7riemann_RiemannBase;
  __pyx_vtable_3phd_7riemann_7riemann_Exact.__pyx_base.riemann_solver = (PyObject *(*)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, double, int))__pyx_f_3phd_7riemann_7riemann_5Exact_riemann_solver;
  __pyx_vtable_3phd_7riemann_7riemann_Exact.p_guess = (double (*)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double, double, double, double))__pyx_f_3phd_7riemann_7riemann_5Exact_p_guess;
  __pyx_vtable_3phd_7riemann_7riemann_Exact.p_func = (double (*)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double))__pyx_f_3phd_7riemann_7riemann_5Exact_p_func;
  __pyx_vtable_3phd_7riemann_7riemann_Exact.p_func_deriv = (double (*)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double))__pyx_f_3phd_7riemann_7riemann_5Exact_p_func_deriv;
  __pyx_vtable_3phd_7riemann_7riemann_Exact.get_pstar = (double (*)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double, double, double, double))__pyx_f_3phd_7riemann_7riemann_5Exact_get_pstar;
  __pyx_type_3phd_7riemann_7riemann_Exact.tp_base = __pyx_ptype_3phd_7riemann_7riemann_RiemannBase;
  if (PyType_Ready(&__pyx_type_3phd_7riemann_7riemann_Exact) < 0) __PYX_ERR(0, 684, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3phd_7riemann_7riemann_Exact.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3phd_7riemann_7riemann_Exact.tp_dictoffset && __pyx_type_3phd_7riemann_7riemann_Exact.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3phd_7riemann_7riemann_Exact.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3phd_7riemann_7riemann_Exact.tp_dict, __pyx_vtabptr_3phd_7riemann_7riemann_Exact) < 0) __PYX_ERR(0, 684, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Exact, (PyObject *)&__pyx_type_3phd_7riemann_7riemann_Exact) < 0) __PYX_ERR(0, 684, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3phd_7riemann_7riemann_Exact) < 0) __PYX_ERR(0, 684, __pyx_L1_error)
  __pyx_ptype_3phd_7riemann_7riemann_Exact = &__pyx_type_3phd_7riemann_7riemann_Exact;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.utils.carray"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_5utils_6carray_BaseArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "BaseArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_BaseArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_BaseArray) __PYX_ERR(5, 5, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_BaseArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_BaseArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_BaseArray)) __PYX_ERR(5, 5, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_BaseArrayIter = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "BaseArrayIter", sizeof(struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_BaseArrayIter) __PYX_ERR(5, 7, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_DoubleArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "DoubleArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_DoubleArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_DoubleArray) __PYX_ERR(5, 31, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_DoubleArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_DoubleArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_DoubleArray)) __PYX_ERR(5, 31, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_IntArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "IntArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_IntArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_IntArray) __PYX_ERR(5, 54, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_IntArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_IntArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_IntArray)) __PYX_ERR(5, 54, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_LongArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "LongArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_LongArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_LongArray) __PYX_ERR(5, 77, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_LongArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_LongArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_LongArray)) __PYX_ERR(5, 77, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_LongLongArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "LongLongArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_LongLongArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_LongLongArray) __PYX_ERR(5, 100, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_LongLongArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_LongLongArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_LongLongArray)) __PYX_ERR(5, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.containers.containers"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_10containers_10containers_CarrayContainer = __Pyx_ImportType(__pyx_t_1, "phd.containers.containers", "CarrayContainer", sizeof(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_10containers_10containers_CarrayContainer) __PYX_ERR(6, 5, __pyx_L1_error)
  __pyx_vtabptr_3phd_10containers_10containers_CarrayContainer = (struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer*)__Pyx_GetVtable(__pyx_ptype_3phd_10containers_10containers_CarrayContainer->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_10containers_10containers_CarrayContainer)) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.domain.boundary"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "BoundaryConditionBase", sizeof(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase = (struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase)) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_ptype_3phd_6domain_8boundary_Reflective = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "Reflective", sizeof(struct __pyx_obj_3phd_6domain_8boundary_Reflective), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_Reflective) __PYX_ERR(7, 29, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_Reflective = (struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_Reflective->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_Reflective)) __PYX_ERR(7, 29, __pyx_L1_error)
  __pyx_ptype_3phd_6domain_8boundary_Periodic = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "Periodic", sizeof(struct __pyx_obj_3phd_6domain_8boundary_Periodic), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_Periodic) __PYX_ERR(7, 32, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_Periodic = (struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_Periodic->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_Periodic)) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.load_balance.tree"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.tree", "TreeMemoryPool", sizeof(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool) __PYX_ERR(8, 37, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool = (struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool)) __PYX_ERR(8, 37, __pyx_L1_error)
  __pyx_ptype_3phd_12load_balance_4tree_Tree = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.tree", "Tree", sizeof(struct __pyx_obj_3phd_12load_balance_4tree_Tree), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_4tree_Tree) __PYX_ERR(8, 50, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_4tree_Tree = (struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_4tree_Tree->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_4tree_Tree)) __PYX_ERR(8, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.load_balance.load_balance"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.load_balance", "LoadBalance", sizeof(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance) __PYX_ERR(9, 9, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance = (struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance)) __PYX_ERR(9, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.domain.domain_manager"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_6domain_14domain_manager_DomainManager = __Pyx_ImportType(__pyx_t_1, "phd.domain.domain_manager", "DomainManager", sizeof(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_14domain_manager_DomainManager) __PYX_ERR(10, 45, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager = (struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_14domain_manager_DomainManager->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager)) __PYX_ERR(10, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.mesh.pytess"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_4mesh_6pytess_PyTess = __Pyx_ImportType(__pyx_t_1, "phd.mesh.pytess", "PyTess", sizeof(struct __pyx_obj_3phd_4mesh_6pytess_PyTess), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_4mesh_6pytess_PyTess) __PYX_ERR(11, 34, __pyx_L1_error)
  __pyx_vtabptr_3phd_4mesh_6pytess_PyTess = (struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess*)__Pyx_GetVtable(__pyx_ptype_3phd_4mesh_6pytess_PyTess->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_4mesh_6pytess_PyTess)) __PYX_ERR(11, 34, __pyx_L1_error)
  __pyx_ptype_3phd_4mesh_6pytess_PyTess2d = __Pyx_ImportType(__pyx_t_1, "phd.mesh.pytess", "PyTess2d", sizeof(struct __pyx_obj_3phd_4mesh_6pytess_PyTess2d), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_4mesh_6pytess_PyTess2d) __PYX_ERR(11, 46, __pyx_L1_error)
  __pyx_vtabptr_3phd_4mesh_6pytess_PyTess2d = (struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess2d*)__Pyx_GetVtable(__pyx_ptype_3phd_4mesh_6pytess_PyTess2d->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_4mesh_6pytess_PyTess2d)) __PYX_ERR(11, 46, __pyx_L1_error)
  __pyx_ptype_3phd_4mesh_6pytess_PyTess3d = __Pyx_ImportType(__pyx_t_1, "phd.mesh.pytess", "PyTess3d", sizeof(struct __pyx_obj_3phd_4mesh_6pytess_PyTess3d), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_4mesh_6pytess_PyTess3d) __PYX_ERR(11, 49, __pyx_L1_error)
  __pyx_vtabptr_3phd_4mesh_6pytess_PyTess3d = (struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess3d*)__Pyx_GetVtable(__pyx_ptype_3phd_4mesh_6pytess_PyTess3d->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_4mesh_6pytess_PyTess3d)) __PYX_ERR(11, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.equation_state.equation_state"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_14equation_state_14equation_state_EquationStateBase = __Pyx_ImportType(__pyx_t_1, "phd.equation_state.equation_state", "EquationStateBase", sizeof(struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_14equation_state_14equation_state_EquationStateBase) __PYX_ERR(12, 5, __pyx_L1_error)
  __pyx_vtabptr_3phd_14equation_state_14equation_state_EquationStateBase = (struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase*)__Pyx_GetVtable(__pyx_ptype_3phd_14equation_state_14equation_state_EquationStateBase->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_14equation_state_14equation_state_EquationStateBase)) __PYX_ERR(12, 5, __pyx_L1_error)
  __pyx_ptype_3phd_14equation_state_14equation_state_IdealGas = __Pyx_ImportType(__pyx_t_1, "phd.equation_state.equation_state", "IdealGas", sizeof(struct __pyx_obj_3phd_14equation_state_14equation_state_IdealGas), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_14equation_state_14equation_state_IdealGas) __PYX_ERR(12, 13, __pyx_L1_error)
  __pyx_vtabptr_3phd_14equation_state_14equation_state_IdealGas = (struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_IdealGas*)__Pyx_GetVtable(__pyx_ptype_3phd_14equation_state_14equation_state_IdealGas->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_14equation_state_14equation_state_IdealGas)) __PYX_ERR(12, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.mesh.mesh"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_4mesh_4mesh_Mesh = __Pyx_ImportType(__pyx_t_1, "phd.mesh.mesh", "Mesh", sizeof(struct __pyx_obj_3phd_4mesh_4mesh_Mesh), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_4mesh_4mesh_Mesh) __PYX_ERR(13, 15, __pyx_L1_error)
  __pyx_vtabptr_3phd_4mesh_4mesh_Mesh = (struct __pyx_vtabstruct_3phd_4mesh_4mesh_Mesh*)__Pyx_GetVtable(__pyx_ptype_3phd_4mesh_4mesh_Mesh->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_4mesh_4mesh_Mesh)) __PYX_ERR(13, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.reconstruction.reconstruction"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_14reconstruction_14reconstruction_ReconstructionBase = __Pyx_ImportType(__pyx_t_1, "phd.reconstruction.reconstruction", "ReconstructionBase", sizeof(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_14reconstruction_14reconstruction_ReconstructionBase) __PYX_ERR(14, 9, __pyx_L1_error)
  __pyx_vtabptr_3phd_14reconstruction_14reconstruction_ReconstructionBase = (struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase*)__Pyx_GetVtable(__pyx_ptype_3phd_14reconstruction_14reconstruction_ReconstructionBase->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_14reconstruction_14reconstruction_ReconstructionBase)) __PYX_ERR(14, 9, __pyx_L1_error)
  __pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseConstant = __Pyx_ImportType(__pyx_t_1, "phd.reconstruction.reconstruction", "PieceWiseConstant", sizeof(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseConstant) __PYX_ERR(14, 41, __pyx_L1_error)
  __pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseConstant = (struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseConstant*)__Pyx_GetVtable(__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseConstant->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseConstant)) __PYX_ERR(14, 41, __pyx_L1_error)
  __pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseLinear = __Pyx_ImportType(__pyx_t_1, "phd.reconstruction.reconstruction", "PieceWiseLinear", sizeof(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseLinear) __PYX_ERR(14, 44, __pyx_L1_error)
  __pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseLinear = (struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseLinear*)__Pyx_GetVtable(__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseLinear->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseLinear)) __PYX_ERR(14, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initriemann(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initriemann(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_riemann(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_riemann(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_riemann(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'riemann' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_riemann(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("riemann", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_phd__riemann__riemann) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "phd.riemann.riemann")) {
      if (unlikely(PyDict_SetItemString(modules, "phd.riemann.riemann", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "phd/riemann/riemann.pyx":1
 * import logging             # <<<<<<<<<<<<<<
 * import numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":2
 * import logging
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":8
 * from libc.math cimport sqrt, pow, fmin, fmax, fabs
 * 
 * from ..utils.particle_tags import ParticleTAGS             # <<<<<<<<<<<<<<
 * from ..utils.carray cimport DoubleArray, IntArray
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ParticleTAGS);
  __Pyx_GIVEREF(__pyx_n_s_ParticleTAGS);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ParticleTAGS);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_utils_particle_tags, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParticleTAGS, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/riemann/riemann.pyx":11
 * from ..utils.carray cimport DoubleArray, IntArray
 * 
 * phdLogger = logging.getLogger("phd")             # <<<<<<<<<<<<<<
 * 
 * cdef int REAL = ParticleTAGS.Real
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_phdLogger, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/riemann/riemann.pyx":13
 * phdLogger = logging.getLogger("phd")
 * 
 * cdef int REAL = ParticleTAGS.Real             # <<<<<<<<<<<<<<
 * 
 * cdef class RiemannBase:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Real); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3phd_7riemann_7riemann_REAL = __pyx_t_3;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RiemannBase(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3phd_7riemann_7riemann_1__pyx_unpickle_RiemannBase, NULL, __pyx_n_s_phd_riemann_riemann); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_RiemannBase, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_RiemannBase__set_state(<RiemannBase> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RiemannBase__set_state(RiemannBase __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.cfl = __pyx_state[0]; __pyx_result.fields_registered = __pyx_state[1]; __pyx_result.flux_field_groups = __pyx_state[2]; __pyx_result.flux_fields = __pyx_state[3]; __pyx_result.fluxes = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3phd_7riemann_7riemann_3__pyx_unpickle_HLL, NULL, __pyx_n_s_phd_riemann_riemann); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_HLL, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_HLLC(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3phd_7riemann_7riemann_5__pyx_unpickle_HLLC, NULL, __pyx_n_s_phd_riemann_riemann); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_HLLC, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_HLLC__set_state(<HLLC> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_HLLC__set_state(HLLC __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.boost = __pyx_state[0]; __pyx_result.cfl = __pyx_state[1]; __pyx_result.fields_registered = __pyx_state[2]; __pyx_result.flux_field_groups = __pyx_state[3]; __pyx_result.flux_fields = __pyx_state[4]; __pyx_result.fluxes = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3phd_7riemann_7riemann_7__pyx_unpickle_Exact, NULL, __pyx_n_s_phd_riemann_riemann); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Exact, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/riemann/riemann.pyx":1
 * import logging             # <<<<<<<<<<<<<<
 * import numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init phd.riemann.riemann", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init phd.riemann.riemann");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
