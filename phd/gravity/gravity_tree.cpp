/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "CGAL_NDEBUG",
                1
            ]
        ],
        "depends": [
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "phd/domain/particle.h"
        ],
        "include_dirs": [
            "./phd/domain",
            "phd/domain",
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include",
            "phd/utils/",
            "phd/containers/",
            "phd/domain/",
            "phd/hilbert/",
            "phd/equation_state/",
            "phd/load_balance/",
            "phd/gravity",
            "phd/riemann/",
            "phd/mesh/",
            "phd/reconstruction/",
            "phd/source_term/",
            "/opt/homebrew/Cellar/cgal/5.2/include",
            "/opt/homebrew/Cellar/boost/1.75.0_1/include"
        ],
        "language": "c++",
        "libraries": [
            "gmp",
            "m"
        ],
        "library_dirs": [
            "/opt/homebrew/Cellar/cgal/5.2/lib"
        ],
        "name": "phd.gravity.gravity_tree",
        "sources": [
            "phd/gravity/gravity_tree.pyx"
        ]
    },
    "module_name": "phd.gravity.gravity_tree"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__phd__gravity__gravity_tree
#define __PYX_HAVE_API__phd__gravity__gravity_tree
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include "stdlib.h"
#include <vector>
#include <list>
#include "particle.h"
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "phd/gravity/gravity_tree.pyx",
  "stringsource",
  "phd/gravity/gravity_tree.pxd",
  "__init__.pxd",
  "type.pxd",
  "phd/utils/carray.pxd",
  "phd/containers/containers.pxd",
  "phd/gravity/gravity_pool.pxd",
  "phd/gravity/splitter.pxd",
  "phd/gravity/interaction.pxd",
  "phd/load_balance/tree.pxd",
  "phd/load_balance/load_balance.pxd",
  "phd/domain/boundary.pxd",
  "phd/domain/domain_manager.pxd",
};

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter;
struct __pyx_obj_3phd_5utils_6carray_BaseArray;
struct __pyx_obj_3phd_5utils_6carray_DoubleArray;
struct __pyx_obj_3phd_5utils_6carray_IntArray;
struct __pyx_obj_3phd_5utils_6carray_LongArray;
struct __pyx_obj_3phd_5utils_6carray_LongLongArray;
struct __pyx_obj_3phd_10containers_10containers_CarrayContainer;
struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool;
struct __pyx_obj_3phd_7gravity_8splitter_Splitter;
struct __pyx_obj_3phd_7gravity_8splitter_BarnesHut;
struct __pyx_obj_3phd_7gravity_11interaction_Interaction;
struct __pyx_obj_3phd_7gravity_11interaction_GravityAcceleration;
struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool;
struct __pyx_obj_3phd_12load_balance_4tree_Tree;
struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance;
struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase;
struct __pyx_obj_3phd_6domain_8boundary_Reflective;
struct __pyx_obj_3phd_6domain_8boundary_Periodic;
struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager;
struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_11DoubleArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_8IntArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_9LongArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_13LongLongArray_remove;

/* "utils/carray.pxd":20
 *     cpdef np.ndarray get_npy_array(self)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 *     cpdef reset(self)
 */
struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":45
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_11DoubleArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":68
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_8IntArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":91
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_9LongArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":114
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_13LongLongArray_remove {
  int __pyx_n;
  int input_sorted;
};
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray;
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items;

/* "containers/containers.pxd":11
 *     cdef readonly dict carray_named_groups
 * 
 *     cpdef register_carray(self, int carray_size, str carray_name, str dtype=*)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int get_carray_size(self)
 */
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray {
  int __pyx_n;
  PyObject *dtype;
};

/* "containers/containers.pxd":20
 *     cpdef resize(self, int carray_size)
 *     cpdef remove_tagged_particles(self, np.int8_t tag)
 *     cpdef CarrayContainer extract_items(self, LongArray index_array, list carray_list_names=*)             # <<<<<<<<<<<<<<
 *     cpdef int append_container(self, CarrayContainer container)
 *     cpdef copy(self, CarrayContainer container, LongArray indices, list carray_list_names)
 */
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items {
  int __pyx_n;
  PyObject *carray_list_names;
};
struct __pyx_t_3phd_7gravity_12gravity_pool_Data;
union __pyx_t_3phd_7gravity_12gravity_pool_Group;
struct __pyx_t_3phd_7gravity_12gravity_pool_Node;

/* "gravity_pool.pxd":1
 * cdef struct Data:             # <<<<<<<<<<<<<<
 * 
 *     double mass         # mass of node
 */
struct __pyx_t_3phd_7gravity_12gravity_pool_Data {
  double mass;
  double com[3];
  int first_child;
  int next_sibling;
  int pid;
};

/* "gravity_pool.pxd":9
 *     int pid             # particle index
 * 
 * cdef union Group:             # <<<<<<<<<<<<<<
 * 
 *     int children[8]     # reference to children nodes
 */
union __pyx_t_3phd_7gravity_12gravity_pool_Group {
  int children[8];
  struct __pyx_t_3phd_7gravity_12gravity_pool_Data data;
};

/* "gravity_pool.pxd":14
 *     Data data           # node data struct
 * 
 * cdef struct Node:             # <<<<<<<<<<<<<<
 * 
 *     int flags           # flags
 */
struct __pyx_t_3phd_7gravity_12gravity_pool_Node {
  int flags;
  double width;
  double center[3];
  union __pyx_t_3phd_7gravity_12gravity_pool_Group group;
};
struct __pyx_opt_args_3phd_7gravity_11interaction_11Interaction_initialize_particles;

/* "interaction.pxd":25
 * 
 *     # compute calculation between particle and node
 *     cdef void initialize_particles(self, CarrayContainer pc, bint local_particles=*)             # <<<<<<<<<<<<<<
 *     cdef void interact(self, Node* node)
 * 
 */
struct __pyx_opt_args_3phd_7gravity_11interaction_11Interaction_initialize_particles {
  int __pyx_n;
  int local_particles;
};
struct __pyx_t_3phd_12load_balance_4tree_Node;

/* "load_balance/tree.pxd":6
 * from ..containers.containers cimport CarrayContainer
 * 
 * ctypedef np.int64_t (*hilbert_type)(np.int32_t, np.int32_t, np.int32_t, int)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "stdlib.h":
 */
typedef __pyx_t_5numpy_int64_t (*__pyx_t_3phd_12load_balance_4tree_hilbert_type)(__pyx_t_5numpy_int32_t, __pyx_t_5numpy_int32_t, __pyx_t_5numpy_int32_t, int);

/* "load_balance/tree.pxd":15
 * 
 * # forward decleration
 * cdef struct Node             # <<<<<<<<<<<<<<
 * 
 * cdef struct Node:
 */
struct __pyx_t_3phd_12load_balance_4tree_Node {
  __pyx_t_5numpy_int64_t sfc_key;
  __pyx_t_5numpy_int64_t sfc_start_key;
  __pyx_t_5numpy_int64_t number_sfc_keys;
  __pyx_t_5numpy_int64_t level;
  __pyx_t_5numpy_float64_t box_length;
  __pyx_t_5numpy_float64_t center[3];
  int particle_index_start;
  int number_particles;
  int number_segments;
  int leaf;
  int array_index;
  int children_start;
  int zorder_to_hilbert[8];
};

/* "domain/boundary.pxd":11
 *     FlagParticle* particle_flag_deref(cpplist[FlagParticle].iterator &it)
 * 
 * cdef enum:             # <<<<<<<<<<<<<<
 *     REFLECTIVE = 0x01
 *     PERIODIC   = 0x02
 */
enum  {
  __pyx_e_3phd_6domain_8boundary_REFLECTIVE = 0x01,
  __pyx_e_3phd_6domain_8boundary_PERIODIC = 0x02
};
struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields;

/* "domain/domain_manager.pxd":104
 *     cpdef bint ghost_complete(self)
 * 
 *     cpdef update_ghost_fields(self, CarrayContainer particles, list fields,             # <<<<<<<<<<<<<<
 *             bint apply_boundary_condition=*)
 *     cpdef update_ghost_gradients(self, CarrayContainer particles, CarrayContainer gradients)
 */
struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields {
  int __pyx_n;
  int apply_boundary_condition;
};
struct __pyx_t_3phd_7gravity_12gravity_tree_PairId;

/* "phd/gravity/gravity_tree.pxd":19
 * 
 * # tree flags
 * cdef enum:             # <<<<<<<<<<<<<<
 *     NOT_EXIST = -1
 *     ROOT = 0
 */
enum  {
  __pyx_e_3phd_7gravity_12gravity_tree_NOT_EXIST = -1L,
  __pyx_e_3phd_7gravity_12gravity_tree_ROOT = 0,
  __pyx_e_3phd_7gravity_12gravity_tree_ROOT_SIBLING = -1L,
  __pyx_e_3phd_7gravity_12gravity_tree_LEAF = 0x01,
  __pyx_e_3phd_7gravity_12gravity_tree_HAS_PARTICLE = 0x02,
  __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE = 0x04,
  __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE_LEAF = 0x08,
  __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE_LEAF_REMOTE = 0x10,
  __pyx_e_3phd_7gravity_12gravity_tree_SKIP_BRANCH = 0x20
};

/* "phd/gravity/gravity_tree.pxd":30
 *     SKIP_BRANCH = 0x20
 * 
 * cdef struct PairId:             # <<<<<<<<<<<<<<
 *     int index                                  # particle index
 *     int proc                                   # processor to export to
 */
struct __pyx_t_3phd_7gravity_12gravity_tree_PairId {
  int index;
  int proc;
};

/* "utils/carray.pxd":7
 * cdef class BaseArray
 * 
 * cdef class BaseArrayIter:             # <<<<<<<<<<<<<<
 *     cdef BaseArray arr
 *     cdef int i
 */
struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter {
  PyObject_HEAD
  struct __pyx_obj_3phd_5utils_6carray_BaseArray *arr;
  int i;
};


/* "utils/carray.pxd":5
 * 
 * # forward declaration
 * cdef class BaseArray             # <<<<<<<<<<<<<<
 * 
 * cdef class BaseArrayIter:
 */
struct __pyx_obj_3phd_5utils_6carray_BaseArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray *__pyx_vtab;
  long length;
  long alloc;
  PyArrayObject *_npy_array;
};


/* "utils/carray.pxd":31
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class DoubleArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.float64_t"""
 *     cdef np.float64_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_DoubleArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_float64_t *data;
  __pyx_t_5numpy_float64_t minimum;
  __pyx_t_5numpy_float64_t maximum;
};


/* "utils/carray.pxd":54
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class IntArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int8_t"""
 *     cdef np.int8_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_IntArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int8_t *data;
  __pyx_t_5numpy_int8_t minimum;
  __pyx_t_5numpy_int8_t maximum;
};


/* "utils/carray.pxd":77
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int32_t"""
 *     cdef np.int32_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_LongArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int32_t *data;
  __pyx_t_5numpy_int32_t minimum;
  __pyx_t_5numpy_int32_t maximum;
};


/* "utils/carray.pxd":100
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongLongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int64_t"""
 *     cdef np.int64_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_LongLongArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int64_t *data;
  __pyx_t_5numpy_int64_t minimum;
  __pyx_t_5numpy_int64_t maximum;
};


/* "containers/containers.pxd":5
 * 
 * 
 * cdef class CarrayContainer:             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly dict carrays
 */
struct __pyx_obj_3phd_10containers_10containers_CarrayContainer {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *__pyx_vtab;
  PyObject *carrays;
  PyObject *carray_dtypes;
  PyObject *carray_named_groups;
};


/* "gravity_pool.pxd":21
 *     Group group         # union of moment information and children index
 * 
 * cdef class GravityPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef int used                     # number of nodes used in the pool
 */
struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_7gravity_12gravity_pool_GravityPool *__pyx_vtab;
  int used;
  int capacity;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *array;
};


/* "splitter.pxd":7
 * 
 * 
 * cdef class Splitter:             # <<<<<<<<<<<<<<
 * 
 *     cdef int dim  # dimension of simulation
 */
struct __pyx_obj_3phd_7gravity_8splitter_Splitter {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_7gravity_8splitter_Splitter *__pyx_vtab;
  int dim;
  long idp;
};


/* "splitter.pxd":16
 *     cdef int split(self, Node* node)
 * 
 * cdef class BarnesHut(Splitter):             # <<<<<<<<<<<<<<
 * 
 *     cdef double open_angle
 */
struct __pyx_obj_3phd_7gravity_8splitter_BarnesHut {
  struct __pyx_obj_3phd_7gravity_8splitter_Splitter __pyx_base;
  double open_angle;
  __pyx_t_5numpy_float64_t *x[3];
};


/* "interaction.pxd":10
 * # ** later on this will become a generic class to hanlde
 * #    any type of calculation on the tree  **
 * cdef class Interaction:             # <<<<<<<<<<<<<<
 *     cdef int dim                    # spatial dimension of the problem
 *     cdef long current               # index of particle to compute on
 */
struct __pyx_obj_3phd_7gravity_11interaction_Interaction {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *__pyx_vtab;
  int dim;
  long current;
  long current_node;
  long num_particles;
  int particle_done;
  int local_particles;
  PyArrayObject *flag_pid;
  int particle_fields_registered;
  struct __pyx_obj_3phd_5utils_6carray_IntArray *tags;
  struct __pyx_obj_3phd_7gravity_8splitter_Splitter *splitter;
};


/* "interaction.pxd":37
 *     cdef long start_node_index(self)
 * 
 * cdef class GravityAcceleration(Interaction):             # <<<<<<<<<<<<<<
 *     cdef int calculate_potential    # flag to include gravity potential
 *     cdef double smoothing_length    # gravitational smoothing length
 */
struct __pyx_obj_3phd_7gravity_11interaction_GravityAcceleration {
  struct __pyx_obj_3phd_7gravity_11interaction_Interaction __pyx_base;
  int calculate_potential;
  double smoothing_length;
  __pyx_t_5numpy_float64_t *pot;
  __pyx_t_5numpy_float64_t *x[3];
  __pyx_t_5numpy_float64_t *a[3];
};


/* "load_balance/tree.pxd":37
 *     int zorder_to_hilbert[8]    # map zorder to hilbert
 * 
 * cdef class TreeMemoryPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef int used                       # number of nodes used in the pool
 */
struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool *__pyx_vtab;
  int used;
  int capacity;
  struct __pyx_t_3phd_12load_balance_4tree_Node *node_array;
};


/* "load_balance/tree.pxd":50
 *     cpdef int number_nodes(self)        # number of nodes in tree
 * 
 * cdef class Tree:             # <<<<<<<<<<<<<<
 * 
 *     cdef double domain_corner[3]           # corner of particle domain
 */
struct __pyx_obj_3phd_12load_balance_4tree_Tree {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *__pyx_vtab;
  double domain_corner[3];
  double domain_length;
  double domain_fac;
  int order;
  int min_in_leaf;
  double factor;
  int total_num_part;
  int number_leaves;
  int dim;
  __pyx_t_3phd_12load_balance_4tree_hilbert_type hilbert_func;
  int bounds[2][3];
  struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *mem_pool;
  struct __pyx_t_3phd_12load_balance_4tree_Node *root;
};


/* "load_balance/load_balance.pxd":9
 * 
 * 
 * cdef class LoadBalance:             # <<<<<<<<<<<<<<
 * 
 *     cdef public np.int32_t order
 */
struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance *__pyx_vtab;
  __pyx_t_5numpy_int32_t order;
  __pyx_t_5numpy_float64_t factor;
  __pyx_t_5numpy_int32_t min_in_leaf;
  int dim;
  __pyx_t_5numpy_float64_t fac;
  double bounds[2][3];
  int domain_info_added;
  double corner[3];
  __pyx_t_5numpy_float64_t box_length;
  PyObject *export_ids;
  PyObject *export_pid;
  struct __pyx_obj_3phd_12load_balance_4tree_Tree *tree;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *leaf_pid;
  __pyx_t_3phd_12load_balance_4tree_hilbert_type hilbert_func;
};


/* "domain/boundary.pxd":17
 * cdef inline bint intersect_bounds(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class BoundaryConditionBase:             # <<<<<<<<<<<<<<
 *     cdef void create_ghost_particle(self, cpplist[FlagParticle] &flagged_particles,
 *                                     DomainManager domain_manager)
 */
struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *__pyx_vtab;
};


/* "domain/boundary.pxd":29
 *     cpdef update_fields(self, CarrayContainer particles, DomainManager domain_manager)
 * 
 * cdef class Reflective(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_3phd_6domain_8boundary_Reflective {
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};


/* "domain/boundary.pxd":32
 *     pass
 * 
 * cdef class Periodic(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 */
struct __pyx_obj_3phd_6domain_8boundary_Periodic {
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};


/* "domain/domain_manager.pxd":45
 *         const GhostID &a, const GhostID &b) nogil
 * 
 * cdef class DomainManager:             # <<<<<<<<<<<<<<
 * 
 *     cdef public DoubleArray old_radius
 */
struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *__pyx_vtab;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *old_radius;
  struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *load_balance;
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *boundary_condition;
  double initial_radius;
  double search_radius_factor;
  int particle_fields_registered;
  int dim;
  PyObject *xmin;
  PyObject *xmax;
  __pyx_t_5numpy_float64_t translate[3];
  __pyx_t_5numpy_float64_t bounds[2][3];
  __pyx_t_5numpy_float64_t max_length;
  __pyx_t_5numpy_float64_t min_length;
  std::vector<BoundaryParticle>  ghost_vec;
  std::list<struct FlagParticle>  flagged_particles;
  int num_export;
  int num_real_particles;
  PyArrayObject *loc_done;
  PyArrayObject *glb_done;
  std::vector<GhostID>  export_ghost_buffer;
  std::vector<GhostID>  import_ghost_buffer;
  PyArrayObject *send_cnts;
  PyArrayObject *recv_cnts;
  PyArrayObject *send_disp;
  PyArrayObject *recv_disp;
};


/* "phd/gravity/gravity_tree.pxd":36
 * cdef int proc_compare(const void *a, const void *b)
 * 
 * cdef class GravityTree:             # <<<<<<<<<<<<<<
 * 
 *     cdef public int number_nodes                # max number of children nodes
 */
struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *__pyx_vtab;
  int number_nodes;
  int dim;
  int rank;
  int size;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *domain_manager;
  PyObject *split_type;
  struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *nodes;
  int calc_potential;
  double barnes_angle;
  struct __pyx_obj_3phd_7gravity_11interaction_Interaction *export_interaction;
  struct __pyx_obj_3phd_7gravity_8splitter_Splitter *export_splitter;
  struct __pyx_obj_3phd_7gravity_8splitter_Splitter *import_splitter;
  int calculate_potential;
  __pyx_t_5numpy_float64_t *x[3];
  __pyx_t_5numpy_float64_t *m;
  int parallel;
  std::map<int,int>  toptree_leaf_map;
  struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *load_balance;
  struct __pyx_obj_3phd_7gravity_11interaction_Interaction *import_interaction;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *toptree_leafs;
  int max_buffer_size;
  int buffer_size;
  struct __pyx_t_3phd_7gravity_12gravity_tree_PairId *buffer_ids;
  PyObject *toptree_carray_to_register;
  PyObject *toptree_carray_named_groups;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *indices;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *buffer_export;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *buffer_import;
  PyArrayObject *send_cnts;
  PyArrayObject *send_disp;
  PyArrayObject *recv_cnts;
  PyArrayObject *recv_disp;
};



/* "utils/carray.pxd":5
 * 
 * # forward declaration
 * cdef class BaseArray             # <<<<<<<<<<<<<<
 * 
 * cdef class BaseArrayIter:
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray {
  PyObject *(*reserve)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyArrayObject *(*get_npy_array)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*squeeze)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*remove)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove *__pyx_optional_args);
  PyObject *(*extend)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*reset)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*shrink)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyObject *(*align_array)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*get_c_type)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*copy_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*paste_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*add_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray *__pyx_vtabptr_3phd_5utils_6carray_BaseArray;


/* "utils/carray.pxd":31
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class DoubleArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.float64_t"""
 *     cdef np.float64_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *);
  __pyx_t_5numpy_float64_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *);
  __pyx_t_5numpy_float64_t (*get)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, long, __pyx_t_5numpy_float64_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, __pyx_t_5numpy_float64_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray *__pyx_vtabptr_3phd_5utils_6carray_DoubleArray;


/* "utils/carray.pxd":54
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class IntArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int8_t"""
 *     cdef np.int8_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_IntArray *);
  __pyx_t_5numpy_int8_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_IntArray *);
  __pyx_t_5numpy_int8_t (*get)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, long, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray *__pyx_vtabptr_3phd_5utils_6carray_IntArray;


/* "utils/carray.pxd":77
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int32_t"""
 *     cdef np.int32_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  __pyx_t_5numpy_int32_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  __pyx_t_5numpy_int32_t (*get)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, long, __pyx_t_5numpy_int32_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, __pyx_t_5numpy_int32_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *__pyx_vtabptr_3phd_5utils_6carray_LongArray;


/* "utils/carray.pxd":100
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongLongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int64_t"""
 *     cdef np.int64_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *);
  __pyx_t_5numpy_int64_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *);
  __pyx_t_5numpy_int64_t (*get)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, long, __pyx_t_5numpy_int64_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, __pyx_t_5numpy_int64_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray *__pyx_vtabptr_3phd_5utils_6carray_LongLongArray;


/* "containers/containers.pxd":5
 * 
 * 
 * cdef class CarrayContainer:             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly dict carrays
 */

struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer {
  PyObject *(*register_carray)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray *__pyx_optional_args);
  int (*get_carray_size)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*remove_items)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*extend)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int __pyx_skip_dispatch);
  void (*pointer_groups)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, __pyx_t_5numpy_float64_t **, PyObject *);
  struct __pyx_obj_3phd_5utils_6carray_BaseArray *(*get_carray)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int __pyx_skip_dispatch);
  PyObject *(*remove_tagged_particles)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *(*extract_items)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items *__pyx_optional_args);
  int (*append_container)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*copy)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*paste)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*add)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *__pyx_vtabptr_3phd_10containers_10containers_CarrayContainer;


/* "gravity_pool.pxd":21
 *     Group group         # union of moment information and children index
 * 
 * cdef class GravityPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef int used                     # number of nodes used in the pool
 */

struct __pyx_vtabstruct_3phd_7gravity_12gravity_pool_GravityPool {
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *(*get)(struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *, int);
  void (*resize)(struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *, int);
  void (*reset)(struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *);
  int (*number_leafs)(struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *, int __pyx_skip_dispatch);
  int (*number_nodes)(struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_7gravity_12gravity_pool_GravityPool *__pyx_vtabptr_3phd_7gravity_12gravity_pool_GravityPool;


/* "splitter.pxd":7
 * 
 * 
 * cdef class Splitter:             # <<<<<<<<<<<<<<
 * 
 *     cdef int dim  # dimension of simulation
 */

struct __pyx_vtabstruct_3phd_7gravity_8splitter_Splitter {
  void (*initialize_particles)(struct __pyx_obj_3phd_7gravity_8splitter_Splitter *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  void (*process_particle)(struct __pyx_obj_3phd_7gravity_8splitter_Splitter *, long);
  int (*split)(struct __pyx_obj_3phd_7gravity_8splitter_Splitter *, struct __pyx_t_3phd_7gravity_12gravity_pool_Node *);
};
static struct __pyx_vtabstruct_3phd_7gravity_8splitter_Splitter *__pyx_vtabptr_3phd_7gravity_8splitter_Splitter;


/* "splitter.pxd":16
 *     cdef int split(self, Node* node)
 * 
 * cdef class BarnesHut(Splitter):             # <<<<<<<<<<<<<<
 * 
 *     cdef double open_angle
 */

struct __pyx_vtabstruct_3phd_7gravity_8splitter_BarnesHut {
  struct __pyx_vtabstruct_3phd_7gravity_8splitter_Splitter __pyx_base;
};
static struct __pyx_vtabstruct_3phd_7gravity_8splitter_BarnesHut *__pyx_vtabptr_3phd_7gravity_8splitter_BarnesHut;


/* "interaction.pxd":10
 * # ** later on this will become a generic class to hanlde
 * #    any type of calculation on the tree  **
 * cdef class Interaction:             # <<<<<<<<<<<<<<
 *     cdef int dim                    # spatial dimension of the problem
 *     cdef long current               # index of particle to compute on
 */

struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction {
  void (*initialize_particles)(struct __pyx_obj_3phd_7gravity_11interaction_Interaction *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_opt_args_3phd_7gravity_11interaction_11Interaction_initialize_particles *__pyx_optional_args);
  void (*interact)(struct __pyx_obj_3phd_7gravity_11interaction_Interaction *, struct __pyx_t_3phd_7gravity_12gravity_pool_Node *);
  int (*process_particle)(struct __pyx_obj_3phd_7gravity_11interaction_Interaction *);
  int (*done_processing)(struct __pyx_obj_3phd_7gravity_11interaction_Interaction *);
  void (*particle_finished)(struct __pyx_obj_3phd_7gravity_11interaction_Interaction *);
  void (*particle_not_finished)(struct __pyx_obj_3phd_7gravity_11interaction_Interaction *, long);
  long (*start_node_index)(struct __pyx_obj_3phd_7gravity_11interaction_Interaction *);
};
static struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *__pyx_vtabptr_3phd_7gravity_11interaction_Interaction;


/* "interaction.pxd":37
 *     cdef long start_node_index(self)
 * 
 * cdef class GravityAcceleration(Interaction):             # <<<<<<<<<<<<<<
 *     cdef int calculate_potential    # flag to include gravity potential
 *     cdef double smoothing_length    # gravitational smoothing length
 */

struct __pyx_vtabstruct_3phd_7gravity_11interaction_GravityAcceleration {
  struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction __pyx_base;
};
static struct __pyx_vtabstruct_3phd_7gravity_11interaction_GravityAcceleration *__pyx_vtabptr_3phd_7gravity_11interaction_GravityAcceleration;


/* "load_balance/tree.pxd":37
 *     int zorder_to_hilbert[8]    # map zorder to hilbert
 * 
 * cdef class TreeMemoryPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef int used                       # number of nodes used in the pool
 */

struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool {
  struct __pyx_t_3phd_12load_balance_4tree_Node *(*get)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int);
  void (*resize)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int);
  void (*reset)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *);
  int (*number_leaves)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int __pyx_skip_dispatch);
  int (*number_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool *__pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool;


/* "load_balance/tree.pxd":50
 *     cpdef int number_nodes(self)        # number of nodes in tree
 * 
 * cdef class Tree:             # <<<<<<<<<<<<<<
 * 
 *     cdef double domain_corner[3]           # corner of particle domain
 */

struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree {
  void (*_leaves_to_array)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, int *);
  void (*_create_node_children)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *);
  void (*_fill_particles_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, __pyx_t_5numpy_int64_t *, int);
  void (*_fill_segments_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, __pyx_t_5numpy_int64_t *, __pyx_t_5numpy_int32_t *, int);
  PyObject *(*_build_local_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, PyArrayObject *, int, int __pyx_skip_dispatch);
  void (*_build_global_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, int, PyArrayObject *, PyArrayObject *, int);
  void (*construct_global_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *);
  struct __pyx_t_3phd_12load_balance_4tree_Node *(*find_leaf)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, __pyx_t_5numpy_int64_t);
  int (*get_nearest_process_neighbors)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, double *, double, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  void (*_neighbors)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, double *, double *, __pyx_t_5numpy_int32_t *, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
};
static struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *__pyx_vtabptr_3phd_12load_balance_4tree_Tree;


/* "load_balance/load_balance.pxd":9
 * 
 * 
 * cdef class LoadBalance:             # <<<<<<<<<<<<<<
 * 
 *     cdef public np.int32_t order
 */

struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance {
  void (*calculate_local_work)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyArrayObject *);
  void (*find_split_in_work)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, PyArrayObject *);
  void (*collect_particles_export)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int);
  void (*compute_hilbert_keys)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
};
static struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance *__pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance;


/* "domain/boundary.pxd":17
 * cdef inline bint intersect_bounds(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class BoundaryConditionBase:             # <<<<<<<<<<<<<<
 *     cdef void create_ghost_particle(self, cpplist[FlagParticle] &flagged_particles,
 *                                     DomainManager domain_manager)
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase {
  void (*create_ghost_particle)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*create_ghost_particle_serial)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*create_ghost_particle_parallel)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*migrate_particles)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*update_gradients)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  PyObject *(*update_fields)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *__pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase;


/* "domain/boundary.pxd":29
 *     cpdef update_fields(self, CarrayContainer particles, DomainManager domain_manager)
 * 
 * cdef class Reflective(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective {
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective *__pyx_vtabptr_3phd_6domain_8boundary_Reflective;


/* "domain/boundary.pxd":32
 *     pass
 * 
 * cdef class Periodic(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic {
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic *__pyx_vtabptr_3phd_6domain_8boundary_Periodic;


/* "domain/domain_manager.pxd":45
 *         const GhostID &a, const GhostID &b) nogil
 * 
 * cdef class DomainManager:             # <<<<<<<<<<<<<<
 * 
 *     cdef public DoubleArray old_radius
 */

struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager {
  PyObject *(*check_for_partition)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*partition)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*setup_initial_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*store_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*setup_for_ghost_creation)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*create_ghost_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*create_interior_ghost_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*update_search_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*copy_particles_serial)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*copy_particles_parallel)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*move_generators)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, double, int __pyx_skip_dispatch);
  PyObject *(*migrate_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  int (*ghost_complete)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*update_ghost_fields)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields *__pyx_optional_args);
  PyObject *(*update_ghost_gradients)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*reindex_ghost)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int);
  int (*get_nearest_intersect_process_neighbors)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double *, double, double, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
};
static struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *__pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager;


/* "phd/gravity/gravity_tree.pyx":31
 *     return 0
 * 
 * cdef class GravityTree:             # <<<<<<<<<<<<<<
 *     """Solves gravity by Barnes-Hut algorithm in serial
 *     or parallel. The algorithm heavily depends on the LoadBalance
 */

struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree {
  void (*_create_root)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *);
  int (*_get_index)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int, __pyx_t_5numpy_float64_t *);
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *(*_create_child)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int, int);
  void (*_create_children)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int);
  void (*_build_toptree)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *);
  void (*_create_toptree)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int, struct __pyx_t_3phd_12load_balance_4tree_Node *, __pyx_t_5numpy_int32_t *);
  int (*_leaf_index_toptree)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, __pyx_t_5numpy_int64_t);
  void (*_update_moments)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int, int);
  void (*_exchange_toptree_leafs)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *);
  void (*_update_toptree_moments)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int);
  void (*_serial_walk)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  void (*_parallel_walk)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  void (*_import_walk)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *);
  void (*_export_walk)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *);
};
static struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *__pyx_vtabptr_3phd_7gravity_12gravity_tree_GravityTree;
static CYTHON_INLINE void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_root(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *);
static CYTHON_INLINE int __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__get_index(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int, __pyx_t_5numpy_float64_t *);
static CYTHON_INLINE struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_child(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int, int);
static CYTHON_INLINE void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_children(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int);
static CYTHON_INLINE int __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__leaf_index_toptree(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, __pyx_t_5numpy_int64_t);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* None.proto */
static CYTHON_INLINE long __Pyx_pow_long(long, long);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int32(npy_int32 value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE int __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__get_index(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_parent_index, __pyx_t_5numpy_float64_t *__pyx_v_x); /* proto*/
static CYTHON_INLINE struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_child(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_parent_index, int __pyx_v_child_index); /* proto*/
static CYTHON_INLINE void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_children(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_parent_index); /* proto*/
static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__build_toptree(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto*/
static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_toptree(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_node_index, struct __pyx_t_3phd_12load_balance_4tree_Node *__pyx_v_load_parent, __pyx_t_5numpy_int32_t *__pyx_v_node_map); /* proto*/
static CYTHON_INLINE int __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__leaf_index_toptree(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, __pyx_t_5numpy_int64_t __pyx_v_key); /* proto*/
static CYTHON_INLINE void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_root(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto*/
static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__update_moments(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_current, int __pyx_v_sibling); /* proto*/
static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__update_toptree_moments(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_current); /* proto*/
static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__exchange_toptree_leafs(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto*/
static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__serial_walk(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *__pyx_v_interaction, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto*/
static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__import_walk(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *__pyx_v_interaction); /* proto*/
static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__export_walk(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *__pyx_v_interaction); /* proto*/
static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__parallel_walk(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_7gravity_11interaction_Interaction *__pyx_v_interaction, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'phd.utils.carray' */
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_BaseArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_BaseArrayIter = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_DoubleArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_IntArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_LongArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_LongLongArray = 0;

/* Module declarations from 'phd.containers.containers' */
static PyTypeObject *__pyx_ptype_3phd_10containers_10containers_CarrayContainer = 0;

/* Module declarations from 'phd.gravity.gravity_pool' */
static PyTypeObject *__pyx_ptype_3phd_7gravity_12gravity_pool_GravityPool = 0;

/* Module declarations from 'phd.gravity.splitter' */
static PyTypeObject *__pyx_ptype_3phd_7gravity_8splitter_Splitter = 0;
static PyTypeObject *__pyx_ptype_3phd_7gravity_8splitter_BarnesHut = 0;

/* Module declarations from 'phd.gravity.interaction' */
static PyTypeObject *__pyx_ptype_3phd_7gravity_11interaction_Interaction = 0;
static PyTypeObject *__pyx_ptype_3phd_7gravity_11interaction_GravityAcceleration = 0;

/* Module declarations from 'phd.load_balance.tree' */
static PyTypeObject *__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool = 0;
static PyTypeObject *__pyx_ptype_3phd_12load_balance_4tree_Tree = 0;

/* Module declarations from 'phd.load_balance.load_balance' */
static PyTypeObject *__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance = 0;

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'phd.domain.boundary' */
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase = 0;
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_Reflective = 0;
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_Periodic = 0;

/* Module declarations from 'phd.domain.domain_manager' */
static PyTypeObject *__pyx_ptype_3phd_6domain_14domain_manager_DomainManager = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'phd.gravity.gravity_tree' */
static PyTypeObject *__pyx_ptype_3phd_7gravity_12gravity_tree_GravityTree = 0;
static int __pyx_v_3phd_7gravity_12gravity_tree_Real;
static int __pyx_v_3phd_7gravity_12gravity_tree_Ghost;
static int __pyx_f_3phd_7gravity_12gravity_tree_proc_compare(void const *, void const *); /*proto*/
#define __Pyx_MODULE_NAME "phd.gravity.gravity_tree"
extern int __pyx_module_is_main_phd__gravity__gravity_tree;
int __pyx_module_is_main_phd__gravity__gravity_tree = 0;

/* Implementation of 'phd.gravity.gravity_tree' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_n[] = "n";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_op[] = "op";
static const char __pyx_k_INT[] = "INT";
static const char __pyx_k_MPI[] = "MPI";
static const char __pyx_k_SUM[] = "SUM";
static const char __pyx_k_com[] = "com";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_phd[] = "phd";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_xyz[] = "xyz";
static const char __pyx_k_Real[] = "Real";
static const char __pyx_k_comm[] = "_comm";
static const char __pyx_k_long[] = "long";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mass[] = "mass";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_proc[] = "proc";
static const char __pyx_k_rank[] = "_rank";
static const char __pyx_k_size[] = "_size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Ghost[] = "Ghost";
static const char __pyx_k_com_2[] = "com-";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_DOUBLE[] = "DOUBLE";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_mpi4py[] = "mpi4py";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_gravity[] = "gravity";
static const char __pyx_k_moments[] = "moments";
static const char __pyx_k_set_dim[] = "set_dim";
static const char __pyx_k_Alltoall[] = "Alltoall";
static const char __pyx_k_IN_PLACE[] = "IN_PLACE";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Allreduce[] = "Allreduce";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_Allgatherv[] = "Allgatherv";
static const char __pyx_k_barnes_hut[] = "barnes-hut";
static const char __pyx_k_initialize[] = "initialize";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_split_type[] = "split_type";
static const char __pyx_k_GravityTree[] = "GravityTree";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_in_parallel[] = "_in_parallel";
static const char __pyx_k_ParticleTAGS[] = "ParticleTAGS";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_acceleration[] = "acceleration";
static const char __pyx_k_barnes_angle[] = "barnes_angle";
static const char __pyx_k_set_splitter[] = "set_splitter";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_max_buffer_size[] = "max_buffer_size";
static const char __pyx_k_register_fields[] = "register_fields";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_smoothing_length[] = "smoothing_length";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_exchange_particles[] = "exchange_particles";
static const char __pyx_k_calculate_potential[] = "calculate_potential";
static const char __pyx_k_carrays_to_register[] = "carrays_to_register";
static const char __pyx_k_gravity_walk_export[] = "gravity-walk-export";
static const char __pyx_k_gravity_walk_import[] = "gravity-walk-import";
static const char __pyx_k_utils_particle_tags[] = "utils.particle_tags";
static const char __pyx_k_utils_exchange_particles[] = "utils.exchange_particles";
static const char __pyx_k_ERROR_DomainManager_not_set[] = "ERROR: DomainManager not set";
static const char __pyx_k_ERROR_Insufficient_memory_in_id[] = "ERROR: Insufficient memory in id buffer";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Unrecognized_splitter_in_gravity[] = "Unrecognized splitter in gravity";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self_buffer_ids_self_m_self_x_ca[] = "self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_Allgatherv;
static PyObject *__pyx_n_s_Allreduce;
static PyObject *__pyx_n_s_Alltoall;
static PyObject *__pyx_n_s_DOUBLE;
static PyObject *__pyx_kp_s_ERROR_DomainManager_not_set;
static PyObject *__pyx_kp_s_ERROR_Insufficient_memory_in_id;
static PyObject *__pyx_n_s_Ghost;
static PyObject *__pyx_n_s_GravityTree;
static PyObject *__pyx_n_s_INT;
static PyObject *__pyx_n_s_IN_PLACE;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_MPI;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_ParticleTAGS;
static PyObject *__pyx_n_s_Real;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SUM;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unrecognized_splitter_in_gravity;
static PyObject *__pyx_n_s_acceleration;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_barnes_angle;
static PyObject *__pyx_kp_s_barnes_hut;
static PyObject *__pyx_n_s_calculate_potential;
static PyObject *__pyx_n_s_carrays_to_register;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_com;
static PyObject *__pyx_kp_s_com_2;
static PyObject *__pyx_n_s_comm;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_exchange_particles;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gravity;
static PyObject *__pyx_kp_s_gravity_walk_export;
static PyObject *__pyx_kp_s_gravity_walk_import;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_parallel;
static PyObject *__pyx_n_s_initialize;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_long;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_mass;
static PyObject *__pyx_n_s_max_buffer_size;
static PyObject *__pyx_n_s_moments;
static PyObject *__pyx_n_s_mpi4py;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_op;
static PyObject *__pyx_n_s_phd;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_proc;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rank;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_register_fields;
static PyObject *__pyx_kp_s_self_buffer_ids_self_m_self_x_ca;
static PyObject *__pyx_n_s_set_dim;
static PyObject *__pyx_n_s_set_splitter;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_smoothing_length;
static PyObject *__pyx_n_s_split_type;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_utils_exchange_particles;
static PyObject *__pyx_n_s_utils_particle_tags;
static PyObject *__pyx_n_s_xyz;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree___init__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_split_type, double __pyx_v_barnes_angle, double __pyx_v_smoothing_length, int __pyx_v_calculate_potential, int __pyx_v_max_buffer_size); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_2register_fields(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4add_fields(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_6set_domain_manager(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_8initialize(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10_build_tree(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12walk(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14dump_root_node(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_16dump_data(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18dump_all_data(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_20dump_remote(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static void __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_22__dealloc__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_3dim___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_3dim_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4rank___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4rank_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4size___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4size_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10split_type___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_5nodes___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_7indices___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_7indices_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_7indices_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_3phd_7gravity_12gravity_tree_GravityTree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_10000;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
/* Late includes */

/* "phd/gravity/gravity_tree.pyx":20
 * cdef int Ghost = ParticleTAGS.Ghost
 * 
 * cdef int proc_compare(const void *a, const void *b):             # <<<<<<<<<<<<<<
 *     """
 *     Comparison function for sorting PairId struct
 */

static int __pyx_f_3phd_7gravity_12gravity_tree_proc_compare(void const *__pyx_v_a, void const *__pyx_v_b) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("proc_compare", 0);

  /* "phd/gravity/gravity_tree.pyx":25
 *     in processor order.
 *     """
 *     if( (<PairId*>a).proc < (<PairId*>b).proc ):             # <<<<<<<<<<<<<<
 *         return -1
 *     if( (<PairId*>a).proc > (<PairId*>b).proc ):
 */
  __pyx_t_1 = ((((struct __pyx_t_3phd_7gravity_12gravity_tree_PairId *)__pyx_v_a)->proc < ((struct __pyx_t_3phd_7gravity_12gravity_tree_PairId *)__pyx_v_b)->proc) != 0);
  if (__pyx_t_1) {

    /* "phd/gravity/gravity_tree.pyx":26
 *     """
 *     if( (<PairId*>a).proc < (<PairId*>b).proc ):
 *         return -1             # <<<<<<<<<<<<<<
 *     if( (<PairId*>a).proc > (<PairId*>b).proc ):
 *         return 1
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "phd/gravity/gravity_tree.pyx":25
 *     in processor order.
 *     """
 *     if( (<PairId*>a).proc < (<PairId*>b).proc ):             # <<<<<<<<<<<<<<
 *         return -1
 *     if( (<PairId*>a).proc > (<PairId*>b).proc ):
 */
  }

  /* "phd/gravity/gravity_tree.pyx":27
 *     if( (<PairId*>a).proc < (<PairId*>b).proc ):
 *         return -1
 *     if( (<PairId*>a).proc > (<PairId*>b).proc ):             # <<<<<<<<<<<<<<
 *         return 1
 *     return 0
 */
  __pyx_t_1 = ((((struct __pyx_t_3phd_7gravity_12gravity_tree_PairId *)__pyx_v_a)->proc > ((struct __pyx_t_3phd_7gravity_12gravity_tree_PairId *)__pyx_v_b)->proc) != 0);
  if (__pyx_t_1) {

    /* "phd/gravity/gravity_tree.pyx":28
 *         return -1
 *     if( (<PairId*>a).proc > (<PairId*>b).proc ):
 *         return 1             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "phd/gravity/gravity_tree.pyx":27
 *     if( (<PairId*>a).proc < (<PairId*>b).proc ):
 *         return -1
 *     if( (<PairId*>a).proc > (<PairId*>b).proc ):             # <<<<<<<<<<<<<<
 *         return 1
 *     return 0
 */
  }

  /* "phd/gravity/gravity_tree.pyx":29
 *     if( (<PairId*>a).proc > (<PairId*>b).proc ):
 *         return 1
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef class GravityTree:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "phd/gravity/gravity_tree.pyx":20
 * cdef int Ghost = ParticleTAGS.Ghost
 * 
 * cdef int proc_compare(const void *a, const void *b):             # <<<<<<<<<<<<<<
 *     """
 *     Comparison function for sorting PairId struct
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":36
 *     class if run in parallel. The algorithm works in 2d or 3d.
 *     """
 *     def __init__(self, str split_type="barnes-hut",  double barnes_angle=0.3,             # <<<<<<<<<<<<<<
 *             double smoothing_length = 1.0E-5, int calculate_potential=0,
 *             int max_buffer_size=256):
 */

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree___init__[] = "\n        Parameters\n        ----------\n        split_type : str\n            Default is 'barnes-hut'\n\n        barnes_angle : double\n            Default is 0.3\n\n        smoothing_length : double\n            Default is 1e-5\n\n        calculate_potential : int\n            Default is 0\n\n        max_buffer_size : int\n            Default is 256\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_3phd_7gravity_12gravity_tree_11GravityTree___init__;
#endif
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_split_type = 0;
  double __pyx_v_barnes_angle;
  double __pyx_v_smoothing_length;
  int __pyx_v_calculate_potential;
  int __pyx_v_max_buffer_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_split_type,&__pyx_n_s_barnes_angle,&__pyx_n_s_smoothing_length,&__pyx_n_s_calculate_potential,&__pyx_n_s_max_buffer_size,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = ((PyObject*)__pyx_kp_s_barnes_hut);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_split_type);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_barnes_angle);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_smoothing_length);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_calculate_potential);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_buffer_size);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 36, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_split_type = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_barnes_angle = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_barnes_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L3_error)
    } else {
      __pyx_v_barnes_angle = ((double)0.3);
    }
    if (values[2]) {
      __pyx_v_smoothing_length = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_smoothing_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 37, __pyx_L3_error)
    } else {
      __pyx_v_smoothing_length = ((double)1.0E-5);
    }
    if (values[3]) {
      __pyx_v_calculate_potential = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_calculate_potential == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 37, __pyx_L3_error)
    } else {
      __pyx_v_calculate_potential = ((int)0);
    }
    if (values[4]) {
      __pyx_v_max_buffer_size = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_max_buffer_size == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L3_error)
    } else {
      __pyx_v_max_buffer_size = ((int)0x100);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 36, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_split_type), (&PyString_Type), 1, "split_type", 1))) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree___init__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), __pyx_v_split_type, __pyx_v_barnes_angle, __pyx_v_smoothing_length, __pyx_v_calculate_potential, __pyx_v_max_buffer_size);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree___init__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_split_type, double __pyx_v_barnes_angle, double __pyx_v_smoothing_length, int __pyx_v_calculate_potential, int __pyx_v_max_buffer_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "phd/gravity/gravity_tree.pyx":58
 *         """
 * 
 *         self.split_type = split_type             # <<<<<<<<<<<<<<
 *         self.barnes_angle = barnes_angle
 *         self.calculate_potential = calculate_potential
 */
  __Pyx_INCREF(__pyx_v_split_type);
  __Pyx_GIVEREF(__pyx_v_split_type);
  __Pyx_GOTREF(__pyx_v_self->split_type);
  __Pyx_DECREF(__pyx_v_self->split_type);
  __pyx_v_self->split_type = __pyx_v_split_type;

  /* "phd/gravity/gravity_tree.pyx":59
 * 
 *         self.split_type = split_type
 *         self.barnes_angle = barnes_angle             # <<<<<<<<<<<<<<
 *         self.calculate_potential = calculate_potential
 * 
 */
  __pyx_v_self->barnes_angle = __pyx_v_barnes_angle;

  /* "phd/gravity/gravity_tree.pyx":60
 *         self.split_type = split_type
 *         self.barnes_angle = barnes_angle
 *         self.calculate_potential = calculate_potential             # <<<<<<<<<<<<<<
 * 
 *         self.load_balance = None
 */
  __pyx_v_self->calculate_potential = __pyx_v_calculate_potential;

  /* "phd/gravity/gravity_tree.pyx":62
 *         self.calculate_potential = calculate_potential
 * 
 *         self.load_balance = None             # <<<<<<<<<<<<<<
 *         self.domain_manager = None
 *         self.max_buffer_size = max_buffer_size
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->load_balance);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->load_balance));
  __pyx_v_self->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)Py_None);

  /* "phd/gravity/gravity_tree.pyx":63
 * 
 *         self.load_balance = None
 *         self.domain_manager = None             # <<<<<<<<<<<<<<
 *         self.max_buffer_size = max_buffer_size
 *         # criteria to open nodes
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->domain_manager);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->domain_manager));
  __pyx_v_self->domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)Py_None);

  /* "phd/gravity/gravity_tree.pyx":64
 *         self.load_balance = None
 *         self.domain_manager = None
 *         self.max_buffer_size = max_buffer_size             # <<<<<<<<<<<<<<
 *         # criteria to open nodes
 *         if self.split_type == "barnes-hut":
 */
  __pyx_v_self->max_buffer_size = __pyx_v_max_buffer_size;

  /* "phd/gravity/gravity_tree.pyx":66
 *         self.max_buffer_size = max_buffer_size
 *         # criteria to open nodes
 *         if self.split_type == "barnes-hut":             # <<<<<<<<<<<<<<
 *             self.export_splitter = BarnesHut(self.barnes_angle)
 * 
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_self->split_type, __pyx_kp_s_barnes_hut, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "phd/gravity/gravity_tree.pyx":67
 *         # criteria to open nodes
 *         if self.split_type == "barnes-hut":
 *             self.export_splitter = BarnesHut(self.barnes_angle)             # <<<<<<<<<<<<<<
 * 
 *             if phd._in_parallel:
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->barnes_angle); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_3phd_7gravity_8splitter_BarnesHut), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->export_splitter);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->export_splitter));
    __pyx_v_self->export_splitter = ((struct __pyx_obj_3phd_7gravity_8splitter_Splitter *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":69
 *             self.export_splitter = BarnesHut(self.barnes_angle)
 * 
 *             if phd._in_parallel:             # <<<<<<<<<<<<<<
 *                 self.import_splitter = BarnesHut(self.barnes_angle)
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_phd); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "phd/gravity/gravity_tree.pyx":70
 * 
 *             if phd._in_parallel:
 *                 self.import_splitter = BarnesHut(self.barnes_angle)             # <<<<<<<<<<<<<<
 *         else:
 *             raise RuntimeError("Unrecognized splitter in gravity")
 */
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->barnes_angle); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_3phd_7gravity_8splitter_BarnesHut), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 70, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_v_self->import_splitter);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->import_splitter));
      __pyx_v_self->import_splitter = ((struct __pyx_obj_3phd_7gravity_8splitter_Splitter *)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "phd/gravity/gravity_tree.pyx":69
 *             self.export_splitter = BarnesHut(self.barnes_angle)
 * 
 *             if phd._in_parallel:             # <<<<<<<<<<<<<<
 *                 self.import_splitter = BarnesHut(self.barnes_angle)
 *         else:
 */
    }

    /* "phd/gravity/gravity_tree.pyx":66
 *         self.max_buffer_size = max_buffer_size
 *         # criteria to open nodes
 *         if self.split_type == "barnes-hut":             # <<<<<<<<<<<<<<
 *             self.export_splitter = BarnesHut(self.barnes_angle)
 * 
 */
    goto __pyx_L3;
  }

  /* "phd/gravity/gravity_tree.pyx":72
 *                 self.import_splitter = BarnesHut(self.barnes_angle)
 *         else:
 *             raise RuntimeError("Unrecognized splitter in gravity")             # <<<<<<<<<<<<<<
 * 
 *         # gravity force caculator
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 72, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "phd/gravity/gravity_tree.pyx":76
 *         # gravity force caculator
 *         self.export_interaction = GravityAcceleration(
 *                 calculate_potential, smoothing_length)             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_calculate_potential); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_smoothing_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "phd/gravity/gravity_tree.pyx":75
 * 
 *         # gravity force caculator
 *         self.export_interaction = GravityAcceleration(             # <<<<<<<<<<<<<<
 *                 calculate_potential, smoothing_length)
 * 
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_7gravity_11interaction_GravityAcceleration), __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->export_interaction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->export_interaction));
  __pyx_v_self->export_interaction = ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "phd/gravity/gravity_tree.pyx":78
 *                 calculate_potential, smoothing_length)
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.import_interaction = GravityAcceleration(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_2) {

    /* "phd/gravity/gravity_tree.pyx":81
 * 
 *             self.import_interaction = GravityAcceleration(
 *                     calculate_potential, smoothing_length)             # <<<<<<<<<<<<<<
 * 
 *             self.indices = LongArray(n=self.max_buffer_size)
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_calculate_potential); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_smoothing_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "phd/gravity/gravity_tree.pyx":80
 *         if phd._in_parallel:
 * 
 *             self.import_interaction = GravityAcceleration(             # <<<<<<<<<<<<<<
 *                     calculate_potential, smoothing_length)
 * 
 */
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_7gravity_11interaction_GravityAcceleration), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->import_interaction);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->import_interaction));
    __pyx_v_self->import_interaction = ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "phd/gravity/gravity_tree.pyx":83
 *                     calculate_potential, smoothing_length)
 * 
 *             self.indices = LongArray(n=self.max_buffer_size)             # <<<<<<<<<<<<<<
 * 
 *             # particle buffers for parallel tree walk
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->max_buffer_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_n, __pyx_t_4) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_5utils_6carray_LongArray), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->indices);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->indices));
    __pyx_v_self->indices = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":86
 * 
 *             # particle buffers for parallel tree walk
 *             self.buffer_import = CarrayContainer(0)             # <<<<<<<<<<<<<<
 *             self.buffer_export = CarrayContainer(0)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_10containers_10containers_CarrayContainer), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->buffer_import);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer_import));
    __pyx_v_self->buffer_import = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":87
 *             # particle buffers for parallel tree walk
 *             self.buffer_import = CarrayContainer(0)
 *             self.buffer_export = CarrayContainer(0)             # <<<<<<<<<<<<<<
 * 
 *     def register_fields(self, CarrayContainer particles):
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_10containers_10containers_CarrayContainer), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->buffer_export);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer_export));
    __pyx_v_self->buffer_export = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":78
 *                 calculate_potential, smoothing_length)
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.import_interaction = GravityAcceleration(
 */
  }

  /* "phd/gravity/gravity_tree.pyx":36
 *     class if run in parallel. The algorithm works in 2d or 3d.
 *     """
 *     def __init__(self, str split_type="barnes-hut",  double barnes_angle=0.3,             # <<<<<<<<<<<<<<
 *             double smoothing_length = 1.0E-5, int calculate_potential=0,
 *             int max_buffer_size=256):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":89
 *             self.buffer_export = CarrayContainer(0)
 * 
 *     def register_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Register gravity fields into the particle container (i.e.
 *         accleration, potential, mpi groups etc.).
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_3register_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_2register_fields[] = "Register gravity fields into the particle container (i.e.\n        accleration, potential, mpi groups etc.).\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_3register_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("register_fields (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_2register_fields(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_2register_fields(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_v_field = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("register_fields", 0);

  /* "phd/gravity/gravity_tree.pyx":100
 *         """
 *         cdef str field
 *         self.export_interaction.register_fields(particles)             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->export_interaction), __pyx_n_s_register_fields); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_particles)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_particles));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":102
 *         self.export_interaction.register_fields(particles)
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             # hack because export already registered
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "phd/gravity/gravity_tree.pyx":105
 * 
 *             # hack because export already registered
 *             self.import_interaction.dim = self.export_interaction.dim             # <<<<<<<<<<<<<<
 *             self.import_interaction.particle_fields_registered = True
 * 
 */
    __pyx_t_5 = __pyx_v_self->export_interaction->dim;
    __pyx_v_self->import_interaction->dim = __pyx_t_5;

    /* "phd/gravity/gravity_tree.pyx":106
 *             # hack because export already registered
 *             self.import_interaction.dim = self.export_interaction.dim
 *             self.import_interaction.particle_fields_registered = True             # <<<<<<<<<<<<<<
 * 
 *             # add fields that will be communicated
 */
    __pyx_v_self->import_interaction->particle_fields_registered = 1;

    /* "phd/gravity/gravity_tree.pyx":109
 * 
 *             # add fields that will be communicated
 *             for field in particles.carray_named_groups["gravity"]:             # <<<<<<<<<<<<<<
 * 
 *                 self.buffer_export.register_carray(0, field,
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 109, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_gravity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 109, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 109, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 109, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_field, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "phd/gravity/gravity_tree.pyx":112
 * 
 *                 self.buffer_export.register_carray(0, field,
 *                         particles.carray_dtypes[field])             # <<<<<<<<<<<<<<
 * 
 *                 self.buffer_import.register_carray(0, field,
 */
      if (unlikely(__pyx_v_particles->carray_dtypes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 112, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_dtypes, __pyx_v_field); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 112, __pyx_L1_error)

      /* "phd/gravity/gravity_tree.pyx":111
 *             for field in particles.carray_named_groups["gravity"]:
 * 
 *                 self.buffer_export.register_carray(0, field,             # <<<<<<<<<<<<<<
 *                         particles.carray_dtypes[field])
 * 
 */
      __pyx_t_8.__pyx_n = 1;
      __pyx_t_8.dtype = ((PyObject*)__pyx_t_2);
      __pyx_t_3 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->buffer_export->__pyx_vtab)->register_carray(__pyx_v_self->buffer_export, 0, __pyx_v_field, 0, &__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "phd/gravity/gravity_tree.pyx":115
 * 
 *                 self.buffer_import.register_carray(0, field,
 *                         particles.carray_dtypes[field])             # <<<<<<<<<<<<<<
 * 
 *             # add name groups as well
 */
      if (unlikely(__pyx_v_particles->carray_dtypes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 115, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_dtypes, __pyx_v_field); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 115, __pyx_L1_error)

      /* "phd/gravity/gravity_tree.pyx":114
 *                         particles.carray_dtypes[field])
 * 
 *                 self.buffer_import.register_carray(0, field,             # <<<<<<<<<<<<<<
 *                         particles.carray_dtypes[field])
 * 
 */
      __pyx_t_8.__pyx_n = 1;
      __pyx_t_8.dtype = ((PyObject*)__pyx_t_3);
      __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->buffer_import->__pyx_vtab)->register_carray(__pyx_v_self->buffer_import, 0, __pyx_v_field, 0, &__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "phd/gravity/gravity_tree.pyx":109
 * 
 *             # add fields that will be communicated
 *             for field in particles.carray_named_groups["gravity"]:             # <<<<<<<<<<<<<<
 * 
 *                 self.buffer_export.register_carray(0, field,
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":119
 *             # add name groups as well
 *             self.buffer_export.carray_named_groups["acceleration"] =\
 *                     list(particles.carray_named_groups["acceleration"])             # <<<<<<<<<<<<<<
 *             self.buffer_export.carray_named_groups["position"] =\
 *                     list(particles.carray_named_groups["position"])
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 119, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_acceleration); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":118
 * 
 *             # add name groups as well
 *             self.buffer_export.carray_named_groups["acceleration"] =\             # <<<<<<<<<<<<<<
 *                     list(particles.carray_named_groups["acceleration"])
 *             self.buffer_export.carray_named_groups["position"] =\
 */
    if (unlikely(__pyx_v_self->buffer_export->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 118, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->buffer_export->carray_named_groups, __pyx_n_s_acceleration, __pyx_t_2) < 0)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/gravity/gravity_tree.pyx":121
 *                     list(particles.carray_named_groups["acceleration"])
 *             self.buffer_export.carray_named_groups["position"] =\
 *                     list(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *             self.buffer_import.carray_named_groups["acceleration"] =\
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 121, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/gravity/gravity_tree.pyx":120
 *             self.buffer_export.carray_named_groups["acceleration"] =\
 *                     list(particles.carray_named_groups["acceleration"])
 *             self.buffer_export.carray_named_groups["position"] =\             # <<<<<<<<<<<<<<
 *                     list(particles.carray_named_groups["position"])
 * 
 */
    if (unlikely(__pyx_v_self->buffer_export->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 120, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->buffer_export->carray_named_groups, __pyx_n_s_position, __pyx_t_1) < 0)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":124
 * 
 *             self.buffer_import.carray_named_groups["acceleration"] =\
 *                     list(particles.carray_named_groups["acceleration"])             # <<<<<<<<<<<<<<
 *             self.buffer_import.carray_named_groups["position"] =\
 *                     list(particles.carray_named_groups["position"])
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 124, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_acceleration); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":123
 *                     list(particles.carray_named_groups["position"])
 * 
 *             self.buffer_import.carray_named_groups["acceleration"] =\             # <<<<<<<<<<<<<<
 *                     list(particles.carray_named_groups["acceleration"])
 *             self.buffer_import.carray_named_groups["position"] =\
 */
    if (unlikely(__pyx_v_self->buffer_import->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 123, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->buffer_import->carray_named_groups, __pyx_n_s_acceleration, __pyx_t_2) < 0)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/gravity/gravity_tree.pyx":126
 *                     list(particles.carray_named_groups["acceleration"])
 *             self.buffer_import.carray_named_groups["position"] =\
 *                     list(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *     def add_fields(self, CarrayContainer particles):
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 126, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/gravity/gravity_tree.pyx":125
 *             self.buffer_import.carray_named_groups["acceleration"] =\
 *                     list(particles.carray_named_groups["acceleration"])
 *             self.buffer_import.carray_named_groups["position"] =\             # <<<<<<<<<<<<<<
 *                     list(particles.carray_named_groups["position"])
 * 
 */
    if (unlikely(__pyx_v_self->buffer_import->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 125, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->buffer_import->carray_named_groups, __pyx_n_s_position, __pyx_t_1) < 0)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":102
 *         self.export_interaction.register_fields(particles)
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             # hack because export already registered
 */
  }

  /* "phd/gravity/gravity_tree.pyx":89
 *             self.buffer_export = CarrayContainer(0)
 * 
 *     def register_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Register gravity fields into the particle container (i.e.
 *         accleration, potential, mpi groups etc.).
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.register_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":128
 *                     list(particles.carray_named_groups["position"])
 * 
 *     def add_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Setup containers for toptree nodes.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5add_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_4add_fields[] = "Setup containers for toptree nodes.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5add_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_fields (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4add_fields(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4add_fields(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_toptree_carray_to_register = 0;
  PyObject *__pyx_v_toptree_carray_named_groups = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_fields", 0);

  /* "phd/gravity/gravity_tree.pyx":138
 *         """
 *         cdef str axis
 *         cdef dict toptree_carray_to_register = {}             # <<<<<<<<<<<<<<
 *         cdef dict toptree_carray_named_groups = {}
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_toptree_carray_to_register = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":139
 *         cdef str axis
 *         cdef dict toptree_carray_to_register = {}
 *         cdef dict toptree_carray_named_groups = {}             # <<<<<<<<<<<<<<
 * 
 *         self.dim = len(particles.carray_named_groups["position"])
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_toptree_carray_named_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":141
 *         cdef dict toptree_carray_named_groups = {}
 * 
 *         self.dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 141, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->dim = __pyx_t_2;

  /* "phd/gravity/gravity_tree.pyx":143
 *         self.dim = len(particles.carray_named_groups["position"])
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             toptree_carray_to_register["map"]  = "long"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "phd/gravity/gravity_tree.pyx":145
 *         if phd._in_parallel:
 * 
 *             toptree_carray_to_register["map"]  = "long"             # <<<<<<<<<<<<<<
 *             toptree_carray_to_register["proc"] = "long"
 *             toptree_carray_to_register["mass"] = "double"
 */
    if (unlikely(PyDict_SetItem(__pyx_v_toptree_carray_to_register, __pyx_n_s_map, __pyx_n_s_long) < 0)) __PYX_ERR(0, 145, __pyx_L1_error)

    /* "phd/gravity/gravity_tree.pyx":146
 * 
 *             toptree_carray_to_register["map"]  = "long"
 *             toptree_carray_to_register["proc"] = "long"             # <<<<<<<<<<<<<<
 *             toptree_carray_to_register["mass"] = "double"
 * 
 */
    if (unlikely(PyDict_SetItem(__pyx_v_toptree_carray_to_register, __pyx_n_s_proc, __pyx_n_s_long) < 0)) __PYX_ERR(0, 146, __pyx_L1_error)

    /* "phd/gravity/gravity_tree.pyx":147
 *             toptree_carray_to_register["map"]  = "long"
 *             toptree_carray_to_register["proc"] = "long"
 *             toptree_carray_to_register["mass"] = "double"             # <<<<<<<<<<<<<<
 * 
 *             toptree_carray_named_groups["com"] = []
 */
    if (unlikely(PyDict_SetItem(__pyx_v_toptree_carray_to_register, __pyx_n_s_mass, __pyx_n_s_double) < 0)) __PYX_ERR(0, 147, __pyx_L1_error)

    /* "phd/gravity/gravity_tree.pyx":149
 *             toptree_carray_to_register["mass"] = "double"
 * 
 *             toptree_carray_named_groups["com"] = []             # <<<<<<<<<<<<<<
 *             for axis in "xyz"[:self.dim]:
 *                 toptree_carray_to_register["com-"+axis] = "double"
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_toptree_carray_named_groups, __pyx_n_s_com, __pyx_t_3) < 0)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "phd/gravity/gravity_tree.pyx":150
 * 
 *             toptree_carray_named_groups["com"] = []
 *             for axis in "xyz"[:self.dim]:             # <<<<<<<<<<<<<<
 *                 toptree_carray_to_register["com-"+axis] = "double"
 *                 toptree_carray_named_groups["com"].append("com-"+axis)
 */
    __pyx_t_3 = PySequence_GetSlice(__pyx_n_s_xyz, 0, __pyx_v_self->dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      {
        __pyx_t_3 = __pyx_t_5(__pyx_t_1);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 150, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_axis, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "phd/gravity/gravity_tree.pyx":151
 *             toptree_carray_named_groups["com"] = []
 *             for axis in "xyz"[:self.dim]:
 *                 toptree_carray_to_register["com-"+axis] = "double"             # <<<<<<<<<<<<<<
 *                 toptree_carray_named_groups["com"].append("com-"+axis)
 * 
 */
      __pyx_t_3 = PyNumber_Add(__pyx_kp_s_com_2, __pyx_v_axis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(PyDict_SetItem(__pyx_v_toptree_carray_to_register, __pyx_t_3, __pyx_n_s_double) < 0)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "phd/gravity/gravity_tree.pyx":152
 *             for axis in "xyz"[:self.dim]:
 *                 toptree_carray_to_register["com-"+axis] = "double"
 *                 toptree_carray_named_groups["com"].append("com-"+axis)             # <<<<<<<<<<<<<<
 * 
 *             toptree_carray_named_groups["moments"] = ["mass"] +\
 */
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_toptree_carray_named_groups, __pyx_n_s_com); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyNumber_Add(__pyx_kp_s_com_2, __pyx_v_axis); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_t_6); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "phd/gravity/gravity_tree.pyx":150
 * 
 *             toptree_carray_named_groups["com"] = []
 *             for axis in "xyz"[:self.dim]:             # <<<<<<<<<<<<<<
 *                 toptree_carray_to_register["com-"+axis] = "double"
 *                 toptree_carray_named_groups["com"].append("com-"+axis)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":154
 *                 toptree_carray_named_groups["com"].append("com-"+axis)
 * 
 *             toptree_carray_named_groups["moments"] = ["mass"] +\             # <<<<<<<<<<<<<<
 *                     toptree_carray_named_groups["com"]
 * 
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_mass);
    __Pyx_GIVEREF(__pyx_n_s_mass);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_mass);

    /* "phd/gravity/gravity_tree.pyx":155
 * 
 *             toptree_carray_named_groups["moments"] = ["mass"] +\
 *                     toptree_carray_named_groups["com"]             # <<<<<<<<<<<<<<
 * 
 *             self.toptree_carray_to_register = toptree_carray_to_register
 */
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_toptree_carray_named_groups, __pyx_n_s_com); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "phd/gravity/gravity_tree.pyx":154
 *                 toptree_carray_named_groups["com"].append("com-"+axis)
 * 
 *             toptree_carray_named_groups["moments"] = ["mass"] +\             # <<<<<<<<<<<<<<
 *                     toptree_carray_named_groups["com"]
 * 
 */
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_toptree_carray_named_groups, __pyx_n_s_moments, __pyx_t_3) < 0)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "phd/gravity/gravity_tree.pyx":157
 *                     toptree_carray_named_groups["com"]
 * 
 *             self.toptree_carray_to_register = toptree_carray_to_register             # <<<<<<<<<<<<<<
 *             self.toptree_carray_named_groups = toptree_carray_named_groups
 * 
 */
    __Pyx_INCREF(__pyx_v_toptree_carray_to_register);
    __Pyx_GIVEREF(__pyx_v_toptree_carray_to_register);
    __Pyx_GOTREF(__pyx_v_self->toptree_carray_to_register);
    __Pyx_DECREF(__pyx_v_self->toptree_carray_to_register);
    __pyx_v_self->toptree_carray_to_register = __pyx_v_toptree_carray_to_register;

    /* "phd/gravity/gravity_tree.pyx":158
 * 
 *             self.toptree_carray_to_register = toptree_carray_to_register
 *             self.toptree_carray_named_groups = toptree_carray_named_groups             # <<<<<<<<<<<<<<
 * 
 *     def set_domain_manager(self, DomainManager domain_manager):
 */
    __Pyx_INCREF(__pyx_v_toptree_carray_named_groups);
    __Pyx_GIVEREF(__pyx_v_toptree_carray_named_groups);
    __Pyx_GOTREF(__pyx_v_self->toptree_carray_named_groups);
    __Pyx_DECREF(__pyx_v_self->toptree_carray_named_groups);
    __pyx_v_self->toptree_carray_named_groups = __pyx_v_toptree_carray_named_groups;

    /* "phd/gravity/gravity_tree.pyx":143
 *         self.dim = len(particles.carray_named_groups["position"])
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             toptree_carray_to_register["map"]  = "long"
 */
  }

  /* "phd/gravity/gravity_tree.pyx":128
 *                     list(particles.carray_named_groups["position"])
 * 
 *     def add_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Setup containers for toptree nodes.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.add_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_axis);
  __Pyx_XDECREF(__pyx_v_toptree_carray_to_register);
  __Pyx_XDECREF(__pyx_v_toptree_carray_named_groups);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":160
 *             self.toptree_carray_named_groups = toptree_carray_named_groups
 * 
 *     def set_domain_manager(self, DomainManager domain_manager):             # <<<<<<<<<<<<<<
 *         """Set domain manager.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7set_domain_manager(PyObject *__pyx_v_self, PyObject *__pyx_v_domain_manager); /*proto*/
static char __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_6set_domain_manager[] = "Set domain manager.\n        \n        Parameters\n        ----------\n        domain_manager : DomainManager\n            Class that handles the simulation boundaries.\n        ";
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7set_domain_manager(PyObject *__pyx_v_self, PyObject *__pyx_v_domain_manager) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_domain_manager (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 160, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_6set_domain_manager(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_domain_manager));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_6set_domain_manager(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_domain_manager", 0);

  /* "phd/gravity/gravity_tree.pyx":168
 *             Class that handles the simulation boundaries.
 *         """
 *         self.domain_manager = domain_manager             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
  __Pyx_GOTREF(__pyx_v_self->domain_manager);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->domain_manager));
  __pyx_v_self->domain_manager = __pyx_v_domain_manager;

  /* "phd/gravity/gravity_tree.pyx":160
 *             self.toptree_carray_named_groups = toptree_carray_named_groups
 * 
 *     def set_domain_manager(self, DomainManager domain_manager):             # <<<<<<<<<<<<<<
 *         """Set domain manager.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":170
 *         self.domain_manager = domain_manager
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Initialize variables for the gravity tree. Tree pool and
 *         toptree nodes are allocated as well dimension of the tree.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_8initialize[] = "Initialize variables for the gravity tree. Tree pool and\n        toptree nodes are allocated as well dimension of the tree.\n        ";
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_8initialize(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_8initialize(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "phd/gravity/gravity_tree.pyx":176
 *         cdef str axis
 * 
 *         if not self.domain_manager:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("ERROR: DomainManager not set")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->domain_manager)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "phd/gravity/gravity_tree.pyx":177
 * 
 *         if not self.domain_manager:
 *             raise RuntimeError("ERROR: DomainManager not set")             # <<<<<<<<<<<<<<
 * 
 *         self.export_splitter.set_dim(self.dim)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 177, __pyx_L1_error)

    /* "phd/gravity/gravity_tree.pyx":176
 *         cdef str axis
 * 
 *         if not self.domain_manager:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("ERROR: DomainManager not set")
 * 
 */
  }

  /* "phd/gravity/gravity_tree.pyx":179
 *             raise RuntimeError("ERROR: DomainManager not set")
 * 
 *         self.export_splitter.set_dim(self.dim)             # <<<<<<<<<<<<<<
 *         self.export_interaction.set_splitter(self.export_splitter)
 *         self.export_interaction.initialize()
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->export_splitter), __pyx_n_s_set_dim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->dim); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "phd/gravity/gravity_tree.pyx":180
 * 
 *         self.export_splitter.set_dim(self.dim)
 *         self.export_interaction.set_splitter(self.export_splitter)             # <<<<<<<<<<<<<<
 *         self.export_interaction.initialize()
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->export_interaction), __pyx_n_s_set_splitter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)__pyx_v_self->export_splitter)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_self->export_splitter));
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "phd/gravity/gravity_tree.pyx":181
 *         self.export_splitter.set_dim(self.dim)
 *         self.export_interaction.set_splitter(self.export_splitter)
 *         self.export_interaction.initialize()             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->export_interaction), __pyx_n_s_initialize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "phd/gravity/gravity_tree.pyx":183
 *         self.export_interaction.initialize()
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.import_splitter.set_dim(self.dim)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "phd/gravity/gravity_tree.pyx":185
 *         if phd._in_parallel:
 * 
 *             self.import_splitter.set_dim(self.dim)             # <<<<<<<<<<<<<<
 *             self.import_interaction.set_splitter(self.import_splitter)
 *             self.import_interaction.initialize()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->import_splitter), __pyx_n_s_set_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->dim); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":186
 * 
 *             self.import_splitter.set_dim(self.dim)
 *             self.import_interaction.set_splitter(self.import_splitter)             # <<<<<<<<<<<<<<
 *             self.import_interaction.initialize()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->import_interaction), __pyx_n_s_set_splitter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, ((PyObject *)__pyx_v_self->import_splitter)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self->import_splitter));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":187
 *             self.import_splitter.set_dim(self.dim)
 *             self.import_interaction.set_splitter(self.import_splitter)
 *             self.import_interaction.initialize()             # <<<<<<<<<<<<<<
 * 
 *         self.number_nodes = 2**self.dim
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->import_interaction), __pyx_n_s_initialize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":183
 *         self.export_interaction.initialize()
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.import_splitter.set_dim(self.dim)
 */
  }

  /* "phd/gravity/gravity_tree.pyx":189
 *             self.import_interaction.initialize()
 * 
 *         self.number_nodes = 2**self.dim             # <<<<<<<<<<<<<<
 *         self.nodes = GravityPool(10000)
 * 
 */
  __pyx_v_self->number_nodes = __Pyx_pow_long(2, ((long)__pyx_v_self->dim));

  /* "phd/gravity/gravity_tree.pyx":190
 * 
 *         self.number_nodes = 2**self.dim
 *         self.nodes = GravityPool(10000)             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_7gravity_12gravity_pool_GravityPool), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->nodes);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->nodes));
  __pyx_v_self->nodes = ((struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "phd/gravity/gravity_tree.pyx":192
 *         self.nodes = GravityPool(10000)
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.load_balance = self.domain_manager.load_balance
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_phd); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "phd/gravity/gravity_tree.pyx":194
 *         if phd._in_parallel:
 * 
 *             self.load_balance = self.domain_manager.load_balance             # <<<<<<<<<<<<<<
 * 
 *             # export processor counts and displacements
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_self->domain_manager->load_balance);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->load_balance);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->load_balance));
    __pyx_v_self->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "phd/gravity/gravity_tree.pyx":197
 * 
 *             # export processor counts and displacements
 *             self.send_cnts = np.zeros(phd._size, dtype=np.int32)             # <<<<<<<<<<<<<<
 *             self.send_disp = np.zeros(phd._size, dtype=np.int32)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->send_cnts);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->send_cnts));
    __pyx_v_self->send_cnts = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "phd/gravity/gravity_tree.pyx":198
 *             # export processor counts and displacements
 *             self.send_cnts = np.zeros(phd._size, dtype=np.int32)
 *             self.send_disp = np.zeros(phd._size, dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *             # import processor counts and displacements
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_phd); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->send_disp);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->send_disp));
    __pyx_v_self->send_disp = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "phd/gravity/gravity_tree.pyx":201
 * 
 *             # import processor counts and displacements
 *             self.recv_cnts = np.zeros(phd._size, dtype=np.int32)             # <<<<<<<<<<<<<<
 *             self.recv_disp = np.zeros(phd._size, dtype=np.int32)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_phd); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->recv_cnts);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->recv_cnts));
    __pyx_v_self->recv_cnts = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":202
 *             # import processor counts and displacements
 *             self.recv_cnts = np.zeros(phd._size, dtype=np.int32)
 *             self.recv_disp = np.zeros(phd._size, dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *             # container of nodes common to all processors
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_phd); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->recv_disp);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->recv_disp));
    __pyx_v_self->recv_disp = ((PyArrayObject *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "phd/gravity/gravity_tree.pyx":206
 *             # container of nodes common to all processors
 *             self.toptree_leafs = CarrayContainer(
 *                     carrays_to_register=self.toptree_carray_to_register)             # <<<<<<<<<<<<<<
 * 
 *             self.toptree_leafs.carray_named_groups =\
 */
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_carrays_to_register, __pyx_v_self->toptree_carray_to_register) < 0) __PYX_ERR(0, 206, __pyx_L1_error)

    /* "phd/gravity/gravity_tree.pyx":205
 * 
 *             # container of nodes common to all processors
 *             self.toptree_leafs = CarrayContainer(             # <<<<<<<<<<<<<<
 *                     carrays_to_register=self.toptree_carray_to_register)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_10containers_10containers_CarrayContainer), __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->toptree_leafs);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->toptree_leafs));
    __pyx_v_self->toptree_leafs = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "phd/gravity/gravity_tree.pyx":209
 * 
 *             self.toptree_leafs.carray_named_groups =\
 *                     self.toptree_carray_named_groups             # <<<<<<<<<<<<<<
 * 
 *             # particle id and send processors buffers
 */
    __pyx_t_6 = __pyx_v_self->toptree_carray_named_groups;
    __Pyx_INCREF(__pyx_t_6);

    /* "phd/gravity/gravity_tree.pyx":208
 *                     carrays_to_register=self.toptree_carray_to_register)
 * 
 *             self.toptree_leafs.carray_named_groups =\             # <<<<<<<<<<<<<<
 *                     self.toptree_carray_named_groups
 * 
 */
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->toptree_leafs->carray_named_groups);
    __Pyx_DECREF(__pyx_v_self->toptree_leafs->carray_named_groups);
    __pyx_v_self->toptree_leafs->carray_named_groups = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "phd/gravity/gravity_tree.pyx":212
 * 
 *             # particle id and send processors buffers
 *             self.buffer_ids = <PairId*> stdlib.malloc(             # <<<<<<<<<<<<<<
 *                     self.max_buffer_size*sizeof(PairId))
 *             if self.buffer_ids == NULL:
 */
    __pyx_v_self->buffer_ids = ((struct __pyx_t_3phd_7gravity_12gravity_tree_PairId *)malloc((__pyx_v_self->max_buffer_size * (sizeof(struct __pyx_t_3phd_7gravity_12gravity_tree_PairId)))));

    /* "phd/gravity/gravity_tree.pyx":214
 *             self.buffer_ids = <PairId*> stdlib.malloc(
 *                     self.max_buffer_size*sizeof(PairId))
 *             if self.buffer_ids == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("ERROR: Insufficient memory in id buffer")
 *             self.buffer_size = 0
 */
    __pyx_t_2 = ((__pyx_v_self->buffer_ids == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "phd/gravity/gravity_tree.pyx":215
 *                     self.max_buffer_size*sizeof(PairId))
 *             if self.buffer_ids == NULL:
 *                 raise MemoryError("ERROR: Insufficient memory in id buffer")             # <<<<<<<<<<<<<<
 *             self.buffer_size = 0
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 215, __pyx_L1_error)

      /* "phd/gravity/gravity_tree.pyx":214
 *             self.buffer_ids = <PairId*> stdlib.malloc(
 *                     self.max_buffer_size*sizeof(PairId))
 *             if self.buffer_ids == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("ERROR: Insufficient memory in id buffer")
 *             self.buffer_size = 0
 */
    }

    /* "phd/gravity/gravity_tree.pyx":216
 *             if self.buffer_ids == NULL:
 *                 raise MemoryError("ERROR: Insufficient memory in id buffer")
 *             self.buffer_size = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int _get_index(self, int parent_index, np.float64_t x[3]):
 */
    __pyx_v_self->buffer_size = 0;

    /* "phd/gravity/gravity_tree.pyx":192
 *         self.nodes = GravityPool(10000)
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 * 
 *             self.load_balance = self.domain_manager.load_balance
 */
  }

  /* "phd/gravity/gravity_tree.pyx":170
 *         self.domain_manager = domain_manager
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Initialize variables for the gravity tree. Tree pool and
 *         toptree nodes are allocated as well dimension of the tree.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":218
 *             self.buffer_size = 0
 * 
 *     cdef inline int _get_index(self, int parent_index, np.float64_t x[3]):             # <<<<<<<<<<<<<<
 *         """Return index of child from parent node with node_index.
 *         Children are laid out in z-order.
 */

static CYTHON_INLINE int __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__get_index(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_parent_index, __pyx_t_5numpy_float64_t *__pyx_v_x) {
  int __pyx_v_i;
  int __pyx_v_index;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("_get_index", 0);

  /* "phd/gravity/gravity_tree.pyx":236
 * 
 *         """
 *         cdef int i, index = 0             # <<<<<<<<<<<<<<
 *         cdef Node* node = &self.nodes.array[parent_index]
 * 
 */
  __pyx_v_index = 0;

  /* "phd/gravity/gravity_tree.pyx":237
 *         """
 *         cdef int i, index = 0
 *         cdef Node* node = &self.nodes.array[parent_index]             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.dim):
 */
  __pyx_v_node = (&(__pyx_v_self->nodes->array[__pyx_v_parent_index]));

  /* "phd/gravity/gravity_tree.pyx":239
 *         cdef Node* node = &self.nodes.array[parent_index]
 * 
 *         for i in range(self.dim):             # <<<<<<<<<<<<<<
 *             if(x[i] > node.center[i]):
 *                 index += (1 << i)
 */
  __pyx_t_1 = __pyx_v_self->dim;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "phd/gravity/gravity_tree.pyx":240
 * 
 *         for i in range(self.dim):
 *             if(x[i] > node.center[i]):             # <<<<<<<<<<<<<<
 *                 index += (1 << i)
 *         return index
 */
    __pyx_t_4 = (((__pyx_v_x[__pyx_v_i]) > (__pyx_v_node->center[__pyx_v_i])) != 0);
    if (__pyx_t_4) {

      /* "phd/gravity/gravity_tree.pyx":241
 *         for i in range(self.dim):
 *             if(x[i] > node.center[i]):
 *                 index += (1 << i)             # <<<<<<<<<<<<<<
 *         return index
 * 
 */
      __pyx_v_index = (__pyx_v_index + (1 << __pyx_v_i));

      /* "phd/gravity/gravity_tree.pyx":240
 * 
 *         for i in range(self.dim):
 *             if(x[i] > node.center[i]):             # <<<<<<<<<<<<<<
 *                 index += (1 << i)
 *         return index
 */
    }
  }

  /* "phd/gravity/gravity_tree.pyx":242
 *             if(x[i] > node.center[i]):
 *                 index += (1 << i)
 *         return index             # <<<<<<<<<<<<<<
 * 
 *     cdef inline Node* _create_child(self, int parent_index, int child_index):
 */
  __pyx_r = __pyx_v_index;
  goto __pyx_L0;

  /* "phd/gravity/gravity_tree.pyx":218
 *             self.buffer_size = 0
 * 
 *     cdef inline int _get_index(self, int parent_index, np.float64_t x[3]):             # <<<<<<<<<<<<<<
 *         """Return index of child from parent node with node_index.
 *         Children are laid out in z-order.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":244
 *         return index
 * 
 *     cdef inline Node* _create_child(self, int parent_index, int child_index):             # <<<<<<<<<<<<<<
 *         """Create child node given parent index and child index. Note
 *         parent_index refers to memory pool and child_index refers to
 */

static CYTHON_INLINE struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_child(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_parent_index, int __pyx_v_child_index) {
  int __pyx_v_i;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_child;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_parent;
  double __pyx_v_width;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("_create_child", 0);

  /* "phd/gravity/gravity_tree.pyx":268
 * 
 *         # allocate child
 *         child = self.nodes.get(1)             # <<<<<<<<<<<<<<
 * 
 *         # pass parent info to child
 */
  __pyx_v_child = ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_pool_GravityPool *)__pyx_v_self->nodes->__pyx_vtab)->get(__pyx_v_self->nodes, 1);

  /* "phd/gravity/gravity_tree.pyx":271
 * 
 *         # pass parent info to child
 *         parent = &self.nodes.array[parent_index]             # <<<<<<<<<<<<<<
 *         parent.group.children[child_index] = self.nodes.used - 1
 * 
 */
  __pyx_v_parent = (&(__pyx_v_self->nodes->array[__pyx_v_parent_index]));

  /* "phd/gravity/gravity_tree.pyx":272
 *         # pass parent info to child
 *         parent = &self.nodes.array[parent_index]
 *         parent.group.children[child_index] = self.nodes.used - 1             # <<<<<<<<<<<<<<
 * 
 *         # parent no longer leaf
 */
  (__pyx_v_parent->group.children[__pyx_v_child_index]) = (__pyx_v_self->nodes->used - 1);

  /* "phd/gravity/gravity_tree.pyx":275
 * 
 *         # parent no longer leaf
 *         parent.flags &= ~LEAF             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.number_nodes):
 */
  __pyx_v_parent->flags = (__pyx_v_parent->flags & (~__pyx_e_3phd_7gravity_12gravity_tree_LEAF));

  /* "phd/gravity/gravity_tree.pyx":277
 *         parent.flags &= ~LEAF
 * 
 *         for i in range(self.number_nodes):             # <<<<<<<<<<<<<<
 *             child.group.children[i] = NOT_EXIST
 * 
 */
  __pyx_t_1 = __pyx_v_self->number_nodes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "phd/gravity/gravity_tree.pyx":278
 * 
 *         for i in range(self.number_nodes):
 *             child.group.children[i] = NOT_EXIST             # <<<<<<<<<<<<<<
 * 
 *         child.flags = LEAF
 */
    (__pyx_v_child->group.children[__pyx_v_i]) = __pyx_e_3phd_7gravity_12gravity_tree_NOT_EXIST;
  }

  /* "phd/gravity/gravity_tree.pyx":280
 *             child.group.children[i] = NOT_EXIST
 * 
 *         child.flags = LEAF             # <<<<<<<<<<<<<<
 *         width = .5*parent.width
 *         child.width = width
 */
  __pyx_v_child->flags = __pyx_e_3phd_7gravity_12gravity_tree_LEAF;

  /* "phd/gravity/gravity_tree.pyx":281
 * 
 *         child.flags = LEAF
 *         width = .5*parent.width             # <<<<<<<<<<<<<<
 *         child.width = width
 * 
 */
  __pyx_v_width = (.5 * __pyx_v_parent->width);

  /* "phd/gravity/gravity_tree.pyx":282
 *         child.flags = LEAF
 *         width = .5*parent.width
 *         child.width = width             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.dim):
 */
  __pyx_v_child->width = __pyx_v_width;

  /* "phd/gravity/gravity_tree.pyx":284
 *         child.width = width
 * 
 *         for i in range(self.dim):             # <<<<<<<<<<<<<<
 *             # create center coords for child
 *             if((child_index >> i) & 1):
 */
  __pyx_t_1 = __pyx_v_self->dim;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "phd/gravity/gravity_tree.pyx":286
 *         for i in range(self.dim):
 *             # create center coords for child
 *             if((child_index >> i) & 1):             # <<<<<<<<<<<<<<
 *                 child.center[i] = parent.center[i] + .5*width
 *             else:
 */
    __pyx_t_4 = (((__pyx_v_child_index >> __pyx_v_i) & 1) != 0);
    if (__pyx_t_4) {

      /* "phd/gravity/gravity_tree.pyx":287
 *             # create center coords for child
 *             if((child_index >> i) & 1):
 *                 child.center[i] = parent.center[i] + .5*width             # <<<<<<<<<<<<<<
 *             else:
 *                 child.center[i] = parent.center[i] - .5*width
 */
      (__pyx_v_child->center[__pyx_v_i]) = ((__pyx_v_parent->center[__pyx_v_i]) + (.5 * __pyx_v_width));

      /* "phd/gravity/gravity_tree.pyx":286
 *         for i in range(self.dim):
 *             # create center coords for child
 *             if((child_index >> i) & 1):             # <<<<<<<<<<<<<<
 *                 child.center[i] = parent.center[i] + .5*width
 *             else:
 */
      goto __pyx_L7;
    }

    /* "phd/gravity/gravity_tree.pyx":289
 *                 child.center[i] = parent.center[i] + .5*width
 *             else:
 *                 child.center[i] = parent.center[i] - .5*width             # <<<<<<<<<<<<<<
 * 
 *         return child
 */
    /*else*/ {
      (__pyx_v_child->center[__pyx_v_i]) = ((__pyx_v_parent->center[__pyx_v_i]) - (.5 * __pyx_v_width));
    }
    __pyx_L7:;
  }

  /* "phd/gravity/gravity_tree.pyx":291
 *                 child.center[i] = parent.center[i] - .5*width
 * 
 *         return child             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void _create_children(self, int parent_index):
 */
  __pyx_r = __pyx_v_child;
  goto __pyx_L0;

  /* "phd/gravity/gravity_tree.pyx":244
 *         return index
 * 
 *     cdef inline Node* _create_child(self, int parent_index, int child_index):             # <<<<<<<<<<<<<<
 *         """Create child node given parent index and child index. Note
 *         parent_index refers to memory pool and child_index refers to
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":293
 *         return child
 * 
 *     cdef inline void _create_children(self, int parent_index):             # <<<<<<<<<<<<<<
 *         """Given a parent node, subdivide node into (4-2d, 8-3d)
 *         children.
 */

static CYTHON_INLINE void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_children(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_parent_index) {
  double __pyx_v_width;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_child;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_parent;
  int __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_start_index;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("_create_children", 0);

  /* "phd/gravity/gravity_tree.pyx":308
 * 
 *         # create a block of children
 *         child = self.nodes.get(self.number_nodes)          # reference of first child             # <<<<<<<<<<<<<<
 *         start_index = self.nodes.used - self.number_nodes  # index of first child
 * 
 */
  __pyx_v_child = ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_pool_GravityPool *)__pyx_v_self->nodes->__pyx_vtab)->get(__pyx_v_self->nodes, __pyx_v_self->number_nodes);

  /* "phd/gravity/gravity_tree.pyx":309
 *         # create a block of children
 *         child = self.nodes.get(self.number_nodes)          # reference of first child
 *         start_index = self.nodes.used - self.number_nodes  # index of first child             # <<<<<<<<<<<<<<
 * 
 *         parent = &self.nodes.array[parent_index]
 */
  __pyx_v_start_index = (__pyx_v_self->nodes->used - __pyx_v_self->number_nodes);

  /* "phd/gravity/gravity_tree.pyx":311
 *         start_index = self.nodes.used - self.number_nodes  # index of first child
 * 
 *         parent = &self.nodes.array[parent_index]             # <<<<<<<<<<<<<<
 *         width = .5*parent.width                            # box width of children
 *         parent.flags &= ~LEAF                              # parent no longer leaf
 */
  __pyx_v_parent = (&(__pyx_v_self->nodes->array[__pyx_v_parent_index]));

  /* "phd/gravity/gravity_tree.pyx":312
 * 
 *         parent = &self.nodes.array[parent_index]
 *         width = .5*parent.width                            # box width of children             # <<<<<<<<<<<<<<
 *         parent.flags &= ~LEAF                              # parent no longer leaf
 * 
 */
  __pyx_v_width = (.5 * __pyx_v_parent->width);

  /* "phd/gravity/gravity_tree.pyx":313
 *         parent = &self.nodes.array[parent_index]
 *         width = .5*parent.width                            # box width of children
 *         parent.flags &= ~LEAF                              # parent no longer leaf             # <<<<<<<<<<<<<<
 * 
 *         # loop over each child and pass parent information
 */
  __pyx_v_parent->flags = (__pyx_v_parent->flags & (~__pyx_e_3phd_7gravity_12gravity_tree_LEAF));

  /* "phd/gravity/gravity_tree.pyx":316
 * 
 *         # loop over each child and pass parent information
 *         for i in range(self.number_nodes):             # <<<<<<<<<<<<<<
 * 
 *             # store child index in node array
 */
  __pyx_t_1 = __pyx_v_self->number_nodes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "phd/gravity/gravity_tree.pyx":319
 * 
 *             # store child index in node array
 *             parent.group.children[i] = start_index + i             # <<<<<<<<<<<<<<
 *             child = &self.nodes.array[start_index + i]
 * 
 */
    (__pyx_v_parent->group.children[__pyx_v_i]) = (__pyx_v_start_index + __pyx_v_i);

    /* "phd/gravity/gravity_tree.pyx":320
 *             # store child index in node array
 *             parent.group.children[i] = start_index + i
 *             child = &self.nodes.array[start_index + i]             # <<<<<<<<<<<<<<
 * 
 *             child.flags = LEAF
 */
    __pyx_v_child = (&(__pyx_v_self->nodes->array[(__pyx_v_start_index + __pyx_v_i)]));

    /* "phd/gravity/gravity_tree.pyx":322
 *             child = &self.nodes.array[start_index + i]
 * 
 *             child.flags = LEAF             # <<<<<<<<<<<<<<
 *             child.width = width
 * 
 */
    __pyx_v_child->flags = __pyx_e_3phd_7gravity_12gravity_tree_LEAF;

    /* "phd/gravity/gravity_tree.pyx":323
 * 
 *             child.flags = LEAF
 *             child.width = width             # <<<<<<<<<<<<<<
 * 
 *             # set children of children to null
 */
    __pyx_v_child->width = __pyx_v_width;

    /* "phd/gravity/gravity_tree.pyx":326
 * 
 *             # set children of children to null
 *             for k in range(self.number_nodes):             # <<<<<<<<<<<<<<
 *                 child.group.children[k] = NOT_EXIST
 * 
 */
    __pyx_t_4 = __pyx_v_self->number_nodes;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_k = __pyx_t_6;

      /* "phd/gravity/gravity_tree.pyx":327
 *             # set children of children to null
 *             for k in range(self.number_nodes):
 *                 child.group.children[k] = NOT_EXIST             # <<<<<<<<<<<<<<
 * 
 *             # create center coordinates from parent
 */
      (__pyx_v_child->group.children[__pyx_v_k]) = __pyx_e_3phd_7gravity_12gravity_tree_NOT_EXIST;
    }

    /* "phd/gravity/gravity_tree.pyx":331
 *             # create center coordinates from parent
 *             # children are put in z-order
 *             for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                 # create center coords for child
 *                 if((i >> k) & 1):
 */
    __pyx_t_4 = __pyx_v_self->dim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_k = __pyx_t_6;

      /* "phd/gravity/gravity_tree.pyx":333
 *             for k in range(self.dim):
 *                 # create center coords for child
 *                 if((i >> k) & 1):             # <<<<<<<<<<<<<<
 *                     child.center[k] = parent.center[k] + .5*width
 *                 else:
 */
      __pyx_t_7 = (((__pyx_v_i >> __pyx_v_k) & 1) != 0);
      if (__pyx_t_7) {

        /* "phd/gravity/gravity_tree.pyx":334
 *                 # create center coords for child
 *                 if((i >> k) & 1):
 *                     child.center[k] = parent.center[k] + .5*width             # <<<<<<<<<<<<<<
 *                 else:
 *                     child.center[k] = parent.center[k] - .5*width
 */
        (__pyx_v_child->center[__pyx_v_k]) = ((__pyx_v_parent->center[__pyx_v_k]) + (.5 * __pyx_v_width));

        /* "phd/gravity/gravity_tree.pyx":333
 *             for k in range(self.dim):
 *                 # create center coords for child
 *                 if((i >> k) & 1):             # <<<<<<<<<<<<<<
 *                     child.center[k] = parent.center[k] + .5*width
 *                 else:
 */
        goto __pyx_L9;
      }

      /* "phd/gravity/gravity_tree.pyx":336
 *                     child.center[k] = parent.center[k] + .5*width
 *                 else:
 *                     child.center[k] = parent.center[k] - .5*width             # <<<<<<<<<<<<<<
 * 
 *     cdef void _build_toptree(self):
 */
      /*else*/ {
        (__pyx_v_child->center[__pyx_v_k]) = ((__pyx_v_parent->center[__pyx_v_k]) - (.5 * __pyx_v_width));
      }
      __pyx_L9:;
    }
  }

  /* "phd/gravity/gravity_tree.pyx":293
 *         return child
 * 
 *     cdef inline void _create_children(self, int parent_index):             # <<<<<<<<<<<<<<
 *         """Given a parent node, subdivide node into (4-2d, 8-3d)
 *         children.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":338
 *                     child.center[k] = parent.center[k] - .5*width
 * 
 *     cdef void _build_toptree(self):             # <<<<<<<<<<<<<<
 *         """Copy the load balance tree. The tree is the starting point
 *         to add particles since this tree is common to all processors.
 */

static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__build_toptree(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_v_pid;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  struct __pyx_t_3phd_12load_balance_4tree_Node *__pyx_v_load_root;
  struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *__pyx_v_pool = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_leaf_pid = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_maps = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_proc = 0;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_3phd_12load_balance_4tree_Node *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  long __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_toptree", 0);

  /* "phd/gravity/gravity_tree.pyx":347
 * 
 *         cdef Node *node
 *         cdef LoadNode *load_root = self.load_balance.tree.root             # <<<<<<<<<<<<<<
 * 
 *         cdef Pool pool = self.load_balance.tree.mem_pool
 */
  __pyx_t_1 = __pyx_v_self->load_balance->tree->root;
  __pyx_v_load_root = __pyx_t_1;

  /* "phd/gravity/gravity_tree.pyx":349
 *         cdef LoadNode *load_root = self.load_balance.tree.root
 * 
 *         cdef Pool pool = self.load_balance.tree.mem_pool             # <<<<<<<<<<<<<<
 * 
 *         cdef LongArray leaf_pid = self.load_balance.leaf_pid
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->load_balance->tree->mem_pool);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pool = ((struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/gravity/gravity_tree.pyx":351
 *         cdef Pool pool = self.load_balance.tree.mem_pool
 * 
 *         cdef LongArray leaf_pid = self.load_balance.leaf_pid             # <<<<<<<<<<<<<<
 *         cdef LongArray maps = self.toptree_leafs.get_carray("map")
 *         cdef LongArray proc = self.toptree_leafs.get_carray("proc")
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->load_balance->leaf_pid);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_leaf_pid = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/gravity/gravity_tree.pyx":352
 * 
 *         cdef LongArray leaf_pid = self.load_balance.leaf_pid
 *         cdef LongArray maps = self.toptree_leafs.get_carray("map")             # <<<<<<<<<<<<<<
 *         cdef LongArray proc = self.toptree_leafs.get_carray("proc")
 * 
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray(__pyx_v_self->toptree_leafs, __pyx_n_s_map, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 352, __pyx_L1_error)
  __pyx_v_maps = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/gravity/gravity_tree.pyx":353
 *         cdef LongArray leaf_pid = self.load_balance.leaf_pid
 *         cdef LongArray maps = self.toptree_leafs.get_carray("map")
 *         cdef LongArray proc = self.toptree_leafs.get_carray("proc")             # <<<<<<<<<<<<<<
 * 
 *         # resize memory pool to hold tree - this only allocates available
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray(__pyx_v_self->toptree_leafs, __pyx_n_s_proc, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 353, __pyx_L1_error)
  __pyx_v_proc = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/gravity/gravity_tree.pyx":357
 *         # resize memory pool to hold tree - this only allocates available
 *         # memory it does not create nodes
 *         self.nodes.resize(pool.number_nodes())             # <<<<<<<<<<<<<<
 * 
 *         # resize container to hold load leaf data
 */
  ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_pool_GravityPool *)__pyx_v_self->nodes->__pyx_vtab)->resize(__pyx_v_self->nodes, ((struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool *)__pyx_v_pool->__pyx_vtab)->number_nodes(__pyx_v_pool, 0));

  /* "phd/gravity/gravity_tree.pyx":360
 * 
 *         # resize container to hold load leaf data
 *         self.toptree_leafs.resize(pool.number_leaves())             # <<<<<<<<<<<<<<
 * 
 *         # copy global top tree in z-order, collect load leaf index for mapping
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->resize(__pyx_v_self->toptree_leafs, ((struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool *)__pyx_v_pool->__pyx_vtab)->number_leaves(__pyx_v_pool, 0), 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/gravity/gravity_tree.pyx":363
 * 
 *         # copy global top tree in z-order, collect load leaf index for mapping
 *         self._create_toptree(ROOT, load_root, maps.get_data_ptr())             # <<<<<<<<<<<<<<
 * 
 *         # reset top tree leaf to toptree container map
 */
  ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_create_toptree(__pyx_v_self, __pyx_e_3phd_7gravity_12gravity_tree_ROOT, __pyx_v_load_root, ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_maps->__pyx_base.__pyx_vtab)->get_data_ptr(__pyx_v_maps));

  /* "phd/gravity/gravity_tree.pyx":366
 * 
 *         # reset top tree leaf to toptree container map
 *         self.toptree_leaf_map.clear()             # <<<<<<<<<<<<<<
 * 
 *         # top tree leafs are in load balance order, hilbert and processor,
 */
  __pyx_v_self->toptree_leaf_map.clear();

  /* "phd/gravity/gravity_tree.pyx":370
 *         # top tree leafs are in load balance order, hilbert and processor,
 *         # this allows for easy communication.
 *         for i in range(phd._size):             # <<<<<<<<<<<<<<
 *             self.send_cnts[i] = 0
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_4 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/gravity/gravity_tree.pyx":371
 *         # this allows for easy communication.
 *         for i in range(phd._size):
 *             self.send_cnts[i] = 0             # <<<<<<<<<<<<<<
 * 
 *         # loop over load leafs
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_cnts), __pyx_v_i, __pyx_int_0, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 371, __pyx_L1_error)
  }

  /* "phd/gravity/gravity_tree.pyx":374
 * 
 *         # loop over load leafs
 *         for i in range(leaf_pid.length):             # <<<<<<<<<<<<<<
 * 
 *             pid = leaf_pid.data[i]     # processor that owns leaf
 */
  __pyx_t_4 = __pyx_v_leaf_pid->__pyx_base.length;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/gravity/gravity_tree.pyx":376
 *         for i in range(leaf_pid.length):
 * 
 *             pid = leaf_pid.data[i]     # processor that owns leaf             # <<<<<<<<<<<<<<
 *             proc.data[i] = pid         # store processor info
 * 
 */
    __pyx_v_pid = (__pyx_v_leaf_pid->data[__pyx_v_i]);

    /* "phd/gravity/gravity_tree.pyx":377
 * 
 *             pid = leaf_pid.data[i]     # processor that owns leaf
 *             proc.data[i] = pid         # store processor info             # <<<<<<<<<<<<<<
 * 
 *             # bin leafs to processor - our processor is bined
 */
    (__pyx_v_proc->data[__pyx_v_i]) = __pyx_v_pid;

    /* "phd/gravity/gravity_tree.pyx":381
 *             # bin leafs to processor - our processor is bined
 *             # because we comunicate IN_PLACE in mpi
 *             self.send_cnts[pid] += 1             # <<<<<<<<<<<<<<
 * 
 *             # mapping toptree leaf index -> toptree leaf container
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
    __pyx_t_7 = __pyx_v_self->send_cnts;
    __pyx_t_8 = __pyx_v_pid;
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_t_7), __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_t_7), __pyx_t_8, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;

    /* "phd/gravity/gravity_tree.pyx":384
 * 
 *             # mapping toptree leaf index -> toptree leaf container
 *             self.toptree_leaf_map[maps.data[i]] = i             # <<<<<<<<<<<<<<
 * 
 *             # flag leafs that don't belong to this processor
 */
    (__pyx_v_self->toptree_leaf_map[(__pyx_v_maps->data[__pyx_v_i])]) = __pyx_v_i;

    /* "phd/gravity/gravity_tree.pyx":387
 * 
 *             # flag leafs that don't belong to this processor
 *             if(pid != phd._rank):             # <<<<<<<<<<<<<<
 *                 node = &self.nodes.array[maps.data[i]]
 *                 node.flags |= (SKIP_BRANCH|TOP_TREE_LEAF_REMOTE)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_pid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rank); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_9, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_10) {

      /* "phd/gravity/gravity_tree.pyx":388
 *             # flag leafs that don't belong to this processor
 *             if(pid != phd._rank):
 *                 node = &self.nodes.array[maps.data[i]]             # <<<<<<<<<<<<<<
 *                 node.flags |= (SKIP_BRANCH|TOP_TREE_LEAF_REMOTE)
 * 
 */
      __pyx_v_node = (&(__pyx_v_self->nodes->array[(__pyx_v_maps->data[__pyx_v_i])]));

      /* "phd/gravity/gravity_tree.pyx":389
 *             if(pid != phd._rank):
 *                 node = &self.nodes.array[maps.data[i]]
 *                 node.flags |= (SKIP_BRANCH|TOP_TREE_LEAF_REMOTE)             # <<<<<<<<<<<<<<
 * 
 *         self.send_disp[0] = 0
 */
      __pyx_v_node->flags = (__pyx_v_node->flags | (__pyx_e_3phd_7gravity_12gravity_tree_SKIP_BRANCH | __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE_LEAF_REMOTE));

      /* "phd/gravity/gravity_tree.pyx":387
 * 
 *             # flag leafs that don't belong to this processor
 *             if(pid != phd._rank):             # <<<<<<<<<<<<<<
 *                 node = &self.nodes.array[maps.data[i]]
 *                 node.flags |= (SKIP_BRANCH|TOP_TREE_LEAF_REMOTE)
 */
    }
  }

  /* "phd/gravity/gravity_tree.pyx":391
 *                 node.flags |= (SKIP_BRANCH|TOP_TREE_LEAF_REMOTE)
 * 
 *         self.send_disp[0] = 0             # <<<<<<<<<<<<<<
 *         for i in range(1, phd._size):
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 */
  if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_disp), 0, __pyx_int_0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 391, __pyx_L1_error)

  /* "phd/gravity/gravity_tree.pyx":392
 * 
 *         self.send_disp[0] = 0
 *         for i in range(1, phd._size):             # <<<<<<<<<<<<<<
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_size); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_long(__pyx_t_9); if (unlikely((__pyx_t_4 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 1; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/gravity/gravity_tree.pyx":393
 *         self.send_disp[0] = 0
 *         for i in range(1, phd._size):
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]             # <<<<<<<<<<<<<<
 * 
 *     cdef void _create_toptree(self, int node_index, LoadNode* load_parent,
 */
    __pyx_t_11 = (__pyx_v_i - 1);
    __pyx_t_9 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->send_cnts), __pyx_t_11, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = (__pyx_v_i - 1);
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->send_disp), __pyx_t_11, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_disp), __pyx_v_i, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "phd/gravity/gravity_tree.pyx":338
 *                     child.center[k] = parent.center[k] - .5*width
 * 
 *     cdef void _build_toptree(self):             # <<<<<<<<<<<<<<
 *         """Copy the load balance tree. The tree is the starting point
 *         to add particles since this tree is common to all processors.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(((PyObject *)__pyx_t_7));
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("phd.gravity.gravity_tree.GravityTree._build_toptree", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pool);
  __Pyx_XDECREF((PyObject *)__pyx_v_leaf_pid);
  __Pyx_XDECREF((PyObject *)__pyx_v_maps);
  __Pyx_XDECREF((PyObject *)__pyx_v_proc);
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":395
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 * 
 *     cdef void _create_toptree(self, int node_index, LoadNode* load_parent,             # <<<<<<<<<<<<<<
 *             np.int32_t* node_map):
 *         """Copys the load balance tree. The tree is the starting point
 */

static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_toptree(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_node_index, struct __pyx_t_3phd_12load_balance_4tree_Node *__pyx_v_load_parent, __pyx_t_5numpy_int32_t *__pyx_v_node_map) {
  int __pyx_v_index;
  int __pyx_v_i;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_parent;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("_create_toptree", 0);

  /* "phd/gravity/gravity_tree.pyx":420
 *         """
 *         cdef int index, i
 *         cdef Node* parent = &self.nodes.array[node_index]             # <<<<<<<<<<<<<<
 * 
 *         # label node in top tree
 */
  __pyx_v_parent = (&(__pyx_v_self->nodes->array[__pyx_v_node_index]));

  /* "phd/gravity/gravity_tree.pyx":423
 * 
 *         # label node in top tree
 *         parent.flags |= TOP_TREE             # <<<<<<<<<<<<<<
 * 
 *         if load_parent.children_start == -1: # leaf stop
 */
  __pyx_v_parent->flags = (__pyx_v_parent->flags | __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE);

  /* "phd/gravity/gravity_tree.pyx":425
 *         parent.flags |= TOP_TREE
 * 
 *         if load_parent.children_start == -1: # leaf stop             # <<<<<<<<<<<<<<
 *             parent.flags |= TOP_TREE_LEAF
 *             node_map[load_parent.array_index] = node_index
 */
  __pyx_t_1 = ((__pyx_v_load_parent->children_start == -1L) != 0);
  if (__pyx_t_1) {

    /* "phd/gravity/gravity_tree.pyx":426
 * 
 *         if load_parent.children_start == -1: # leaf stop
 *             parent.flags |= TOP_TREE_LEAF             # <<<<<<<<<<<<<<
 *             node_map[load_parent.array_index] = node_index
 *         else: # non leaf copy
 */
    __pyx_v_parent->flags = (__pyx_v_parent->flags | __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE_LEAF);

    /* "phd/gravity/gravity_tree.pyx":427
 *         if load_parent.children_start == -1: # leaf stop
 *             parent.flags |= TOP_TREE_LEAF
 *             node_map[load_parent.array_index] = node_index             # <<<<<<<<<<<<<<
 *         else: # non leaf copy
 * 
 */
    (__pyx_v_node_map[__pyx_v_load_parent->array_index]) = __pyx_v_node_index;

    /* "phd/gravity/gravity_tree.pyx":425
 *         parent.flags |= TOP_TREE
 * 
 *         if load_parent.children_start == -1: # leaf stop             # <<<<<<<<<<<<<<
 *             parent.flags |= TOP_TREE_LEAF
 *             node_map[load_parent.array_index] = node_index
 */
    goto __pyx_L3;
  }

  /* "phd/gravity/gravity_tree.pyx":431
 * 
 *             # create children in z-order
 *             self._create_children(node_index)             # <<<<<<<<<<<<<<
 * 
 *             # create children could of realloc
 */
  /*else*/ {
    __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_children(__pyx_v_self, __pyx_v_node_index);

    /* "phd/gravity/gravity_tree.pyx":434
 * 
 *             # create children could of realloc
 *             parent = &self.nodes.array[node_index]             # <<<<<<<<<<<<<<
 * 
 *             # travel down to children
 */
    __pyx_v_parent = (&(__pyx_v_self->nodes->array[__pyx_v_node_index]));

    /* "phd/gravity/gravity_tree.pyx":437
 * 
 *             # travel down to children
 *             for i in range(self.number_nodes):             # <<<<<<<<<<<<<<
 * 
 *                 # grab next child in z-order
 */
    __pyx_t_2 = __pyx_v_self->number_nodes;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "phd/gravity/gravity_tree.pyx":440
 * 
 *                 # grab next child in z-order
 *                 index = load_parent.zorder_to_hilbert[i]             # <<<<<<<<<<<<<<
 *                 self._create_toptree(
 *                         parent.group.children[i], load_parent + load_parent.children_start + index,
 */
      __pyx_v_index = (__pyx_v_load_parent->zorder_to_hilbert[__pyx_v_i]);

      /* "phd/gravity/gravity_tree.pyx":441
 *                 # grab next child in z-order
 *                 index = load_parent.zorder_to_hilbert[i]
 *                 self._create_toptree(             # <<<<<<<<<<<<<<
 *                         parent.group.children[i], load_parent + load_parent.children_start + index,
 *                         node_map)
 */
      ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_create_toptree(__pyx_v_self, (__pyx_v_parent->group.children[__pyx_v_i]), ((__pyx_v_load_parent + __pyx_v_load_parent->children_start) + __pyx_v_index), __pyx_v_node_map);
    }
  }
  __pyx_L3:;

  /* "phd/gravity/gravity_tree.pyx":395
 *             self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 * 
 *     cdef void _create_toptree(self, int node_index, LoadNode* load_parent,             # <<<<<<<<<<<<<<
 *             np.int32_t* node_map):
 *         """Copys the load balance tree. The tree is the starting point
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":445
 *                         node_map)
 * 
 *     cdef inline int _leaf_index_toptree(self, np.int64_t key):             # <<<<<<<<<<<<<<
 *         """Find index of local tree which coincides with given key
 *         inside leaf in top tree.
 */

static CYTHON_INLINE int __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__leaf_index_toptree(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, __pyx_t_5numpy_int64_t __pyx_v_key) {
  struct __pyx_t_3phd_12load_balance_4tree_Node *__pyx_v_load_node;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_maps = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_leaf_index_toptree", 0);

  /* "phd/gravity/gravity_tree.pyx":456
 *         """
 *         cdef LoadNode* load_node
 *         cdef LongArray maps = self.toptree_leafs.get_carray('map')             # <<<<<<<<<<<<<<
 * 
 *         load_node = self.load_balance.tree.find_leaf(key)
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray(__pyx_v_self->toptree_leafs, __pyx_n_s_map, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 456, __pyx_L1_error)
  __pyx_v_maps = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":458
 *         cdef LongArray maps = self.toptree_leafs.get_carray('map')
 * 
 *         load_node = self.load_balance.tree.find_leaf(key)             # <<<<<<<<<<<<<<
 *         return maps.data[load_node.array_index]
 * 
 */
  __pyx_v_load_node = ((struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *)__pyx_v_self->load_balance->tree->__pyx_vtab)->find_leaf(__pyx_v_self->load_balance->tree, __pyx_v_key);

  /* "phd/gravity/gravity_tree.pyx":459
 * 
 *         load_node = self.load_balance.tree.find_leaf(key)
 *         return maps.data[load_node.array_index]             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void _create_root(self):
 */
  __pyx_r = (__pyx_v_maps->data[__pyx_v_load_node->array_index]);
  goto __pyx_L0;

  /* "phd/gravity/gravity_tree.pyx":445
 *                         node_map)
 * 
 *     cdef inline int _leaf_index_toptree(self, np.int64_t key):             # <<<<<<<<<<<<<<
 *         """Find index of local tree which coincides with given key
 *         inside leaf in top tree.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("phd.gravity.gravity_tree.GravityTree._leaf_index_toptree", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_maps);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":461
 *         return maps.data[load_node.array_index]
 * 
 *     cdef inline void _create_root(self):             # <<<<<<<<<<<<<<
 *         """Reset tree if needed and allocate one node for
 *         the root and transfer domain information to the
 */

static CYTHON_INLINE void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_root(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_v_k;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_root;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_float64_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("_create_root", 0);

  /* "phd/gravity/gravity_tree.pyx":470
 * 
 *         # clear out node pool
 *         self.nodes.reset()             # <<<<<<<<<<<<<<
 * 
 *         # create root with domain information
 */
  ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_pool_GravityPool *)__pyx_v_self->nodes->__pyx_vtab)->reset(__pyx_v_self->nodes);

  /* "phd/gravity/gravity_tree.pyx":473
 * 
 *         # create root with domain information
 *         root = self.nodes.get(1)             # <<<<<<<<<<<<<<
 *         root.flags = LEAF
 *         root.width = self.domain_manager.max_length
 */
  __pyx_v_root = ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_pool_GravityPool *)__pyx_v_self->nodes->__pyx_vtab)->get(__pyx_v_self->nodes, 1);

  /* "phd/gravity/gravity_tree.pyx":474
 *         # create root with domain information
 *         root = self.nodes.get(1)
 *         root.flags = LEAF             # <<<<<<<<<<<<<<
 *         root.width = self.domain_manager.max_length
 *         for k in range(self.dim):
 */
  __pyx_v_root->flags = __pyx_e_3phd_7gravity_12gravity_tree_LEAF;

  /* "phd/gravity/gravity_tree.pyx":475
 *         root = self.nodes.get(1)
 *         root.flags = LEAF
 *         root.width = self.domain_manager.max_length             # <<<<<<<<<<<<<<
 *         for k in range(self.dim):
 *             root.center[k] = .5*\
 */
  __pyx_t_1 = __pyx_v_self->domain_manager->max_length;
  __pyx_v_root->width = __pyx_t_1;

  /* "phd/gravity/gravity_tree.pyx":476
 *         root.flags = LEAF
 *         root.width = self.domain_manager.max_length
 *         for k in range(self.dim):             # <<<<<<<<<<<<<<
 *             root.center[k] = .5*\
 *                     (self.domain_manager.bounds[1][k] - self.domain_manager.bounds[0][k])
 */
  __pyx_t_2 = __pyx_v_self->dim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_k = __pyx_t_4;

    /* "phd/gravity/gravity_tree.pyx":477
 *         root.width = self.domain_manager.max_length
 *         for k in range(self.dim):
 *             root.center[k] = .5*\             # <<<<<<<<<<<<<<
 *                     (self.domain_manager.bounds[1][k] - self.domain_manager.bounds[0][k])
 * 
 */
    (__pyx_v_root->center[__pyx_v_k]) = (.5 * (((__pyx_v_self->domain_manager->bounds[1])[__pyx_v_k]) - ((__pyx_v_self->domain_manager->bounds[0])[__pyx_v_k])));
  }

  /* "phd/gravity/gravity_tree.pyx":481
 * 
 *         # set root children to null
 *         for k in range(self.number_nodes):             # <<<<<<<<<<<<<<
 *             root.group.children[k] = NOT_EXIST
 * 
 */
  __pyx_t_2 = __pyx_v_self->number_nodes;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_k = __pyx_t_4;

    /* "phd/gravity/gravity_tree.pyx":482
 *         # set root children to null
 *         for k in range(self.number_nodes):
 *             root.group.children[k] = NOT_EXIST             # <<<<<<<<<<<<<<
 * 
 *     def _build_tree(self, CarrayContainer particles):
 */
    (__pyx_v_root->group.children[__pyx_v_k]) = __pyx_e_3phd_7gravity_12gravity_tree_NOT_EXIST;
  }

  /* "phd/gravity/gravity_tree.pyx":461
 *         return maps.data[load_node.array_index]
 * 
 *     cdef inline void _create_root(self):             # <<<<<<<<<<<<<<
 *         """Reset tree if needed and allocate one node for
 *         the root and transfer domain information to the
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":484
 *             root.group.children[k] = NOT_EXIST
 * 
 *     def _build_tree(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Build local gravity tree by inserting real particles.
 *         This method is non-recursive and only adds real particles.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_11_build_tree(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_10_build_tree[] = "Build local gravity tree by inserting real particles.\n        This method is non-recursive and only adds real particles.\n        Note, leaf nodes may have a particle. The distinction is for\n        parallel tree builds because the top tree will have leafs\n        without any particles.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n        ";
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_11_build_tree(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_build_tree (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 484, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10_build_tree(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10_build_tree(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  struct __pyx_obj_3phd_5utils_6carray_LongLongArray *__pyx_v_keys = 0;
  struct __pyx_obj_3phd_5utils_6carray_IntArray *__pyx_v_tags = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_mass = 0;
  int __pyx_v_index;
  int __pyx_v_current;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_child;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  double __pyx_v_xi[3];
  double __pyx_v_xj[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_tree", 0);

  /* "phd/gravity/gravity_tree.pyx":497
 *         """
 *         cdef LongLongArray keys
 *         cdef IntArray tags = particles.get_carray("tag")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray mass = particles.get_carray("mass")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_tag, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_IntArray))))) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_v_tags = ((struct __pyx_obj_3phd_5utils_6carray_IntArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":498
 *         cdef LongLongArray keys
 *         cdef IntArray tags = particles.get_carray("tag")
 *         cdef DoubleArray mass = particles.get_carray("mass")             # <<<<<<<<<<<<<<
 * 
 *         cdef double width
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_mass, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 498, __pyx_L1_error)
  __pyx_v_mass = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":508
 * 
 *         # pointer to particle position and mass
 *         particles.pointer_groups(self.x, particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 *         self.m = mass.get_data_ptr()
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 508, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 508, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_self->x, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":509
 *         # pointer to particle position and mass
 *         particles.pointer_groups(self.x, particles.carray_named_groups["position"])
 *         self.m = mass.get_data_ptr()             # <<<<<<<<<<<<<<
 * 
 *         self._create_root()
 */
  __pyx_v_self->m = ((struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray *)__pyx_v_mass->__pyx_base.__pyx_vtab)->get_data_ptr(__pyx_v_mass);

  /* "phd/gravity/gravity_tree.pyx":511
 *         self.m = mass.get_data_ptr()
 * 
 *         self._create_root()             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_root(__pyx_v_self);

  /* "phd/gravity/gravity_tree.pyx":513
 *         self._create_root()
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             keys = particles.get_carray("key")
 *             self._build_toptree()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "phd/gravity/gravity_tree.pyx":514
 * 
 *         if phd._in_parallel:
 *             keys = particles.get_carray("key")             # <<<<<<<<<<<<<<
 *             self._build_toptree()
 * 
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_key, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3phd_5utils_6carray_LongLongArray))))) __PYX_ERR(0, 514, __pyx_L1_error)
    __pyx_v_keys = ((struct __pyx_obj_3phd_5utils_6carray_LongLongArray *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "phd/gravity/gravity_tree.pyx":515
 *         if phd._in_parallel:
 *             keys = particles.get_carray("key")
 *             self._build_toptree()             # <<<<<<<<<<<<<<
 * 
 *         # add real particles to tree
 */
    ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_build_toptree(__pyx_v_self);

    /* "phd/gravity/gravity_tree.pyx":513
 *         self._create_root()
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             keys = particles.get_carray("key")
 *             self._build_toptree()
 */
  }

  /* "phd/gravity/gravity_tree.pyx":518
 * 
 *         # add real particles to tree
 *         for i in range(particles.get_carray_size()):             # <<<<<<<<<<<<<<
 *             if tags.data[i] == Real:
 * 
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "phd/gravity/gravity_tree.pyx":519
 *         # add real particles to tree
 *         for i in range(particles.get_carray_size()):
 *             if tags.data[i] == Real:             # <<<<<<<<<<<<<<
 * 
 *                 for k in range(self.dim):
 */
    __pyx_t_3 = (((__pyx_v_tags->data[__pyx_v_i]) == __pyx_v_3phd_7gravity_12gravity_tree_Real) != 0);
    if (__pyx_t_3) {

      /* "phd/gravity/gravity_tree.pyx":521
 *             if tags.data[i] == Real:
 * 
 *                 for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                     xi[k] = self.x[k][i]
 * 
 */
      __pyx_t_7 = __pyx_v_self->dim;
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "phd/gravity/gravity_tree.pyx":522
 * 
 *                 for k in range(self.dim):
 *                     xi[k] = self.x[k][i]             # <<<<<<<<<<<<<<
 * 
 *                 if phd._in_parallel: # start at top tree leaf
 */
        (__pyx_v_xi[__pyx_v_k]) = ((__pyx_v_self->x[__pyx_v_k])[__pyx_v_i]);
      }

      /* "phd/gravity/gravity_tree.pyx":524
 *                     xi[k] = self.x[k][i]
 * 
 *                 if phd._in_parallel: # start at top tree leaf             # <<<<<<<<<<<<<<
 *                     current = self._leaf_index_toptree(keys.data[i])
 *                 else: # start at root
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 524, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 524, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_3) {

        /* "phd/gravity/gravity_tree.pyx":525
 * 
 *                 if phd._in_parallel: # start at top tree leaf
 *                     current = self._leaf_index_toptree(keys.data[i])             # <<<<<<<<<<<<<<
 *                 else: # start at root
 *                     current = ROOT
 */
        if (unlikely(!__pyx_v_keys)) { __Pyx_RaiseUnboundLocalError("keys"); __PYX_ERR(0, 525, __pyx_L1_error) }
        __pyx_v_current = __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__leaf_index_toptree(__pyx_v_self, (__pyx_v_keys->data[__pyx_v_i]));

        /* "phd/gravity/gravity_tree.pyx":524
 *                     xi[k] = self.x[k][i]
 * 
 *                 if phd._in_parallel: # start at top tree leaf             # <<<<<<<<<<<<<<
 *                     current = self._leaf_index_toptree(keys.data[i])
 *                 else: # start at root
 */
        goto __pyx_L9;
      }

      /* "phd/gravity/gravity_tree.pyx":527
 *                     current = self._leaf_index_toptree(keys.data[i])
 *                 else: # start at root
 *                     current = ROOT             # <<<<<<<<<<<<<<
 * 
 *                 while True:
 */
      /*else*/ {
        __pyx_v_current = __pyx_e_3phd_7gravity_12gravity_tree_ROOT;
      }
      __pyx_L9:;

      /* "phd/gravity/gravity_tree.pyx":529
 *                     current = ROOT
 * 
 *                 while True:             # <<<<<<<<<<<<<<
 *                     node = &self.nodes.array[current]
 *                     if (node.flags & LEAF):
 */
      while (1) {

        /* "phd/gravity/gravity_tree.pyx":530
 * 
 *                 while True:
 *                     node = &self.nodes.array[current]             # <<<<<<<<<<<<<<
 *                     if (node.flags & LEAF):
 *                         if (node.flags & HAS_PARTICLE):
 */
        __pyx_v_node = (&(__pyx_v_self->nodes->array[__pyx_v_current]));

        /* "phd/gravity/gravity_tree.pyx":531
 *                 while True:
 *                     node = &self.nodes.array[current]
 *                     if (node.flags & LEAF):             # <<<<<<<<<<<<<<
 *                         if (node.flags & HAS_PARTICLE):
 * 
 */
        __pyx_t_3 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_LEAF) != 0);
        if (__pyx_t_3) {

          /* "phd/gravity/gravity_tree.pyx":532
 *                     node = &self.nodes.array[current]
 *                     if (node.flags & LEAF):
 *                         if (node.flags & HAS_PARTICLE):             # <<<<<<<<<<<<<<
 * 
 *                             # leaf has particle already
 */
          __pyx_t_3 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_HAS_PARTICLE) != 0);
          if (__pyx_t_3) {

            /* "phd/gravity/gravity_tree.pyx":535
 * 
 *                             # leaf has particle already
 *                             j = node.group.data.pid             # <<<<<<<<<<<<<<
 *                             for k in range(self.dim):
 *                                 xj[k] = self.x[k][j]
 */
            __pyx_t_7 = __pyx_v_node->group.data.pid;
            __pyx_v_j = __pyx_t_7;

            /* "phd/gravity/gravity_tree.pyx":536
 *                             # leaf has particle already
 *                             j = node.group.data.pid
 *                             for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                                 xj[k] = self.x[k][j]
 * 
 */
            __pyx_t_7 = __pyx_v_self->dim;
            __pyx_t_8 = __pyx_t_7;
            for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
              __pyx_v_k = __pyx_t_9;

              /* "phd/gravity/gravity_tree.pyx":537
 *                             j = node.group.data.pid
 *                             for k in range(self.dim):
 *                                 xj[k] = self.x[k][j]             # <<<<<<<<<<<<<<
 * 
 *                             # reset children to null due to union
 */
              (__pyx_v_xj[__pyx_v_k]) = ((__pyx_v_self->x[__pyx_v_k])[__pyx_v_j]);
            }

            /* "phd/gravity/gravity_tree.pyx":540
 * 
 *                             # reset children to null due to union
 *                             for k in range(self.number_nodes):             # <<<<<<<<<<<<<<
 *                                 node.group.children[k] = NOT_EXIST
 * 
 */
            __pyx_t_7 = __pyx_v_self->number_nodes;
            __pyx_t_8 = __pyx_t_7;
            for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
              __pyx_v_k = __pyx_t_9;

              /* "phd/gravity/gravity_tree.pyx":541
 *                             # reset children to null due to union
 *                             for k in range(self.number_nodes):
 *                                 node.group.children[k] = NOT_EXIST             # <<<<<<<<<<<<<<
 * 
 *                             # node becomes internal node
 */
              (__pyx_v_node->group.children[__pyx_v_k]) = __pyx_e_3phd_7gravity_12gravity_tree_NOT_EXIST;
            }

            /* "phd/gravity/gravity_tree.pyx":544
 * 
 *                             # node becomes internal node
 *                             node.flags &= ~(LEAF|HAS_PARTICLE)             # <<<<<<<<<<<<<<
 * 
 *                             # create child to store leaf particle
 */
            __pyx_v_node->flags = (__pyx_v_node->flags & (~(__pyx_e_3phd_7gravity_12gravity_tree_LEAF | __pyx_e_3phd_7gravity_12gravity_tree_HAS_PARTICLE)));

            /* "phd/gravity/gravity_tree.pyx":547
 * 
 *                             # create child to store leaf particle
 *                             index = self._get_index(current, xj)             # <<<<<<<<<<<<<<
 *                             child = self._create_child(current, index)
 * 
 */
            __pyx_v_index = __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__get_index(__pyx_v_self, __pyx_v_current, __pyx_v_xj);

            /* "phd/gravity/gravity_tree.pyx":548
 *                             # create child to store leaf particle
 *                             index = self._get_index(current, xj)
 *                             child = self._create_child(current, index)             # <<<<<<<<<<<<<<
 * 
 *                             # store leaf particle here
 */
            __pyx_v_child = __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_child(__pyx_v_self, __pyx_v_current, __pyx_v_index);

            /* "phd/gravity/gravity_tree.pyx":551
 * 
 *                             # store leaf particle here
 *                             child.flags |= (LEAF|HAS_PARTICLE)             # <<<<<<<<<<<<<<
 *                             child.group.data.pid = j
 * 
 */
            __pyx_v_child->flags = (__pyx_v_child->flags | (__pyx_e_3phd_7gravity_12gravity_tree_LEAF | __pyx_e_3phd_7gravity_12gravity_tree_HAS_PARTICLE));

            /* "phd/gravity/gravity_tree.pyx":552
 *                             # store leaf particle here
 *                             child.flags |= (LEAF|HAS_PARTICLE)
 *                             child.group.data.pid = j             # <<<<<<<<<<<<<<
 * 
 *                             # try to insert original particle again
 */
            __pyx_v_child->group.data.pid = __pyx_v_j;

            /* "phd/gravity/gravity_tree.pyx":532
 *                     node = &self.nodes.array[current]
 *                     if (node.flags & LEAF):
 *                         if (node.flags & HAS_PARTICLE):             # <<<<<<<<<<<<<<
 * 
 *                             # leaf has particle already
 */
            goto __pyx_L13;
          }

          /* "phd/gravity/gravity_tree.pyx":557
 * 
 *                         else:
 *                             node.flags |= HAS_PARTICLE # store particle here             # <<<<<<<<<<<<<<
 *                             node.group.data.pid = i    # overwrites in union
 *                             break # particle done
 */
          /*else*/ {
            __pyx_v_node->flags = (__pyx_v_node->flags | __pyx_e_3phd_7gravity_12gravity_tree_HAS_PARTICLE);

            /* "phd/gravity/gravity_tree.pyx":558
 *                         else:
 *                             node.flags |= HAS_PARTICLE # store particle here
 *                             node.group.data.pid = i    # overwrites in union             # <<<<<<<<<<<<<<
 *                             break # particle done
 * 
 */
            __pyx_v_node->group.data.pid = __pyx_v_i;

            /* "phd/gravity/gravity_tree.pyx":559
 *                             node.flags |= HAS_PARTICLE # store particle here
 *                             node.group.data.pid = i    # overwrites in union
 *                             break # particle done             # <<<<<<<<<<<<<<
 * 
 *                     else:
 */
            goto __pyx_L11_break;
          }
          __pyx_L13:;

          /* "phd/gravity/gravity_tree.pyx":531
 *                 while True:
 *                     node = &self.nodes.array[current]
 *                     if (node.flags & LEAF):             # <<<<<<<<<<<<<<
 *                         if (node.flags & HAS_PARTICLE):
 * 
 */
          goto __pyx_L12;
        }

        /* "phd/gravity/gravity_tree.pyx":563
 *                     else:
 *                         # find child to store particle
 *                         index = self._get_index(current, xi)             # <<<<<<<<<<<<<<
 * 
 *                         # if child does not exist create child
 */
        /*else*/ {
          __pyx_v_index = __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__get_index(__pyx_v_self, __pyx_v_current, __pyx_v_xi);

          /* "phd/gravity/gravity_tree.pyx":567
 *                         # if child does not exist create child
 *                         # and store particle
 *                         if node.group.children[index] == NOT_EXIST:             # <<<<<<<<<<<<<<
 *                             child = self._create_child(current, index)
 *                             child.flags |= (LEAF|HAS_PARTICLE)
 */
          __pyx_t_3 = (((__pyx_v_node->group.children[__pyx_v_index]) == __pyx_e_3phd_7gravity_12gravity_tree_NOT_EXIST) != 0);
          if (__pyx_t_3) {

            /* "phd/gravity/gravity_tree.pyx":568
 *                         # and store particle
 *                         if node.group.children[index] == NOT_EXIST:
 *                             child = self._create_child(current, index)             # <<<<<<<<<<<<<<
 *                             child.flags |= (LEAF|HAS_PARTICLE)
 *                             child.group.data.pid = i
 */
            __pyx_v_child = __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_child(__pyx_v_self, __pyx_v_current, __pyx_v_index);

            /* "phd/gravity/gravity_tree.pyx":569
 *                         if node.group.children[index] == NOT_EXIST:
 *                             child = self._create_child(current, index)
 *                             child.flags |= (LEAF|HAS_PARTICLE)             # <<<<<<<<<<<<<<
 *                             child.group.data.pid = i
 *                             break # particle done
 */
            __pyx_v_child->flags = (__pyx_v_child->flags | (__pyx_e_3phd_7gravity_12gravity_tree_LEAF | __pyx_e_3phd_7gravity_12gravity_tree_HAS_PARTICLE));

            /* "phd/gravity/gravity_tree.pyx":570
 *                             child = self._create_child(current, index)
 *                             child.flags |= (LEAF|HAS_PARTICLE)
 *                             child.group.data.pid = i             # <<<<<<<<<<<<<<
 *                             break # particle done
 * 
 */
            __pyx_v_child->group.data.pid = __pyx_v_i;

            /* "phd/gravity/gravity_tree.pyx":571
 *                             child.flags |= (LEAF|HAS_PARTICLE)
 *                             child.group.data.pid = i
 *                             break # particle done             # <<<<<<<<<<<<<<
 * 
 *                         else: # internal node, travel down
 */
            goto __pyx_L11_break;

            /* "phd/gravity/gravity_tree.pyx":567
 *                         # if child does not exist create child
 *                         # and store particle
 *                         if node.group.children[index] == NOT_EXIST:             # <<<<<<<<<<<<<<
 *                             child = self._create_child(current, index)
 *                             child.flags |= (LEAF|HAS_PARTICLE)
 */
          }

          /* "phd/gravity/gravity_tree.pyx":574
 * 
 *                         else: # internal node, travel down
 *                             current = node.group.children[index]             # <<<<<<<<<<<<<<
 * 
 *         # calculate node moments
 */
          /*else*/ {
            __pyx_v_current = (__pyx_v_node->group.children[__pyx_v_index]);
          }
        }
        __pyx_L12:;
      }
      __pyx_L11_break:;

      /* "phd/gravity/gravity_tree.pyx":519
 *         # add real particles to tree
 *         for i in range(particles.get_carray_size()):
 *             if tags.data[i] == Real:             # <<<<<<<<<<<<<<
 * 
 *                 for k in range(self.dim):
 */
    }
  }

  /* "phd/gravity/gravity_tree.pyx":577
 * 
 *         # calculate node moments
 *         self._update_moments(ROOT, ROOT_SIBLING)             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_update_moments(__pyx_v_self, __pyx_e_3phd_7gravity_12gravity_tree_ROOT, __pyx_e_3phd_7gravity_12gravity_tree_ROOT_SIBLING);

  /* "phd/gravity/gravity_tree.pyx":579
 *         self._update_moments(ROOT, ROOT_SIBLING)
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             # export top tree leaf moments and
 *             # recalculate node moments
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "phd/gravity/gravity_tree.pyx":582
 *             # export top tree leaf moments and
 *             # recalculate node moments
 *             self._exchange_toptree_leafs()             # <<<<<<<<<<<<<<
 * 
 *         self.m = NULL
 */
    ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_exchange_toptree_leafs(__pyx_v_self);

    /* "phd/gravity/gravity_tree.pyx":579
 *         self._update_moments(ROOT, ROOT_SIBLING)
 * 
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             # export top tree leaf moments and
 *             # recalculate node moments
 */
  }

  /* "phd/gravity/gravity_tree.pyx":584
 *             self._exchange_toptree_leafs()
 * 
 *         self.m = NULL             # <<<<<<<<<<<<<<
 *         for k in range(self.dim):
 *             self.x[k] = NULL
 */
  __pyx_v_self->m = NULL;

  /* "phd/gravity/gravity_tree.pyx":585
 * 
 *         self.m = NULL
 *         for k in range(self.dim):             # <<<<<<<<<<<<<<
 *             self.x[k] = NULL
 * 
 */
  __pyx_t_4 = __pyx_v_self->dim;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_k = __pyx_t_6;

    /* "phd/gravity/gravity_tree.pyx":586
 *         self.m = NULL
 *         for k in range(self.dim):
 *             self.x[k] = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef void _update_moments(self, int current, int sibling):
 */
    (__pyx_v_self->x[__pyx_v_k]) = NULL;
  }

  /* "phd/gravity/gravity_tree.pyx":484
 *             root.group.children[k] = NOT_EXIST
 * 
 *     def _build_tree(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Build local gravity tree by inserting real particles.
 *         This method is non-recursive and only adds real particles.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree._build_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_keys);
  __Pyx_XDECREF((PyObject *)__pyx_v_tags);
  __Pyx_XDECREF((PyObject *)__pyx_v_mass);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":588
 *             self.x[k] = NULL
 * 
 *     cdef void _update_moments(self, int current, int sibling):             # <<<<<<<<<<<<<<
 *         """Recursively update moments of each local node. As a by
 *         product we collect the first child and sibling of each
 */

static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__update_moments(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_current, int __pyx_v_sibling) {
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_child;
  double __pyx_v_mass;
  double __pyx_v_com[3];
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_sib;
  int __pyx_v_pid;
  int __pyx_v_skip;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_moments", 0);

  /* "phd/gravity/gravity_tree.pyx":606
 *         cdef int i, j, k, sib, pid, skip
 * 
 *         skip = SKIP_BRANCH             # <<<<<<<<<<<<<<
 * 
 *         # due to union we first save moments
 */
  __pyx_v_skip = __pyx_e_3phd_7gravity_12gravity_tree_SKIP_BRANCH;

  /* "phd/gravity/gravity_tree.pyx":609
 * 
 *         # due to union we first save moments
 *         mass = 0.             # <<<<<<<<<<<<<<
 *         for i in range(self.dim):
 *             com[i] = 0.
 */
  __pyx_v_mass = 0.;

  /* "phd/gravity/gravity_tree.pyx":610
 *         # due to union we first save moments
 *         mass = 0.
 *         for i in range(self.dim):             # <<<<<<<<<<<<<<
 *             com[i] = 0.
 *         node = &self.nodes.array[current]
 */
  __pyx_t_1 = __pyx_v_self->dim;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "phd/gravity/gravity_tree.pyx":611
 *         mass = 0.
 *         for i in range(self.dim):
 *             com[i] = 0.             # <<<<<<<<<<<<<<
 *         node = &self.nodes.array[current]
 * 
 */
    (__pyx_v_com[__pyx_v_i]) = 0.;
  }

  /* "phd/gravity/gravity_tree.pyx":612
 *         for i in range(self.dim):
 *             com[i] = 0.
 *         node = &self.nodes.array[current]             # <<<<<<<<<<<<<<
 * 
 *         # for non leafs use children
 */
  __pyx_v_node = (&(__pyx_v_self->nodes->array[__pyx_v_current]));

  /* "phd/gravity/gravity_tree.pyx":615
 * 
 *         # for non leafs use children
 *         if((node.flags & LEAF) != LEAF):             # <<<<<<<<<<<<<<
 *             for i in range(self.number_nodes):
 *                 if(node.group.children[i] != NOT_EXIST):
 */
  __pyx_t_4 = (((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_LEAF) != __pyx_e_3phd_7gravity_12gravity_tree_LEAF) != 0);
  if (__pyx_t_4) {

    /* "phd/gravity/gravity_tree.pyx":616
 *         # for non leafs use children
 *         if((node.flags & LEAF) != LEAF):
 *             for i in range(self.number_nodes):             # <<<<<<<<<<<<<<
 *                 if(node.group.children[i] != NOT_EXIST):
 * 
 */
    __pyx_t_1 = __pyx_v_self->number_nodes;
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "phd/gravity/gravity_tree.pyx":617
 *         if((node.flags & LEAF) != LEAF):
 *             for i in range(self.number_nodes):
 *                 if(node.group.children[i] != NOT_EXIST):             # <<<<<<<<<<<<<<
 * 
 *                     # find sibling of child
 */
      __pyx_t_4 = (((__pyx_v_node->group.children[__pyx_v_i]) != __pyx_e_3phd_7gravity_12gravity_tree_NOT_EXIST) != 0);
      if (__pyx_t_4) {

        /* "phd/gravity/gravity_tree.pyx":620
 * 
 *                     # find sibling of child
 *                     j = i + 1             # <<<<<<<<<<<<<<
 *                     while(j < self.number_nodes and\
 *                             node.group.children[j] == NOT_EXIST):
 */
        __pyx_v_j = (__pyx_v_i + 1);

        /* "phd/gravity/gravity_tree.pyx":621
 *                     # find sibling of child
 *                     j = i + 1
 *                     while(j < self.number_nodes and\             # <<<<<<<<<<<<<<
 *                             node.group.children[j] == NOT_EXIST):
 *                         j += 1
 */
        while (1) {
          __pyx_t_5 = ((__pyx_v_j < __pyx_v_self->number_nodes) != 0);
          if (__pyx_t_5) {
          } else {
            __pyx_t_4 = __pyx_t_5;
            goto __pyx_L11_bool_binop_done;
          }

          /* "phd/gravity/gravity_tree.pyx":622
 *                     j = i + 1
 *                     while(j < self.number_nodes and\
 *                             node.group.children[j] == NOT_EXIST):             # <<<<<<<<<<<<<<
 *                         j += 1
 * 
 */
          __pyx_t_5 = (((__pyx_v_node->group.children[__pyx_v_j]) == __pyx_e_3phd_7gravity_12gravity_tree_NOT_EXIST) != 0);
          __pyx_t_4 = __pyx_t_5;
          __pyx_L11_bool_binop_done:;
          if (!__pyx_t_4) break;

          /* "phd/gravity/gravity_tree.pyx":623
 *                     while(j < self.number_nodes and\
 *                             node.group.children[j] == NOT_EXIST):
 *                         j += 1             # <<<<<<<<<<<<<<
 * 
 *                     if(j < self.number_nodes):
 */
          __pyx_v_j = (__pyx_v_j + 1);
        }

        /* "phd/gravity/gravity_tree.pyx":625
 *                         j += 1
 * 
 *                     if(j < self.number_nodes):             # <<<<<<<<<<<<<<
 *                         sib = node.group.children[j]
 *                     else:
 */
        __pyx_t_4 = ((__pyx_v_j < __pyx_v_self->number_nodes) != 0);
        if (__pyx_t_4) {

          /* "phd/gravity/gravity_tree.pyx":626
 * 
 *                     if(j < self.number_nodes):
 *                         sib = node.group.children[j]             # <<<<<<<<<<<<<<
 *                     else:
 *                         sib = sibling
 */
          __pyx_v_sib = (__pyx_v_node->group.children[__pyx_v_j]);

          /* "phd/gravity/gravity_tree.pyx":625
 *                         j += 1
 * 
 *                     if(j < self.number_nodes):             # <<<<<<<<<<<<<<
 *                         sib = node.group.children[j]
 *                     else:
 */
          goto __pyx_L13;
        }

        /* "phd/gravity/gravity_tree.pyx":628
 *                         sib = node.group.children[j]
 *                     else:
 *                         sib = sibling             # <<<<<<<<<<<<<<
 * 
 *                     self._update_moments(node.group.children[i], sib)
 */
        /*else*/ {
          __pyx_v_sib = __pyx_v_sibling;
        }
        __pyx_L13:;

        /* "phd/gravity/gravity_tree.pyx":630
 *                         sib = sibling
 * 
 *                     self._update_moments(node.group.children[i], sib)             # <<<<<<<<<<<<<<
 *                     child = &self.nodes.array[node.group.children[i]]
 * 
 */
        ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_update_moments(__pyx_v_self, (__pyx_v_node->group.children[__pyx_v_i]), __pyx_v_sib);

        /* "phd/gravity/gravity_tree.pyx":631
 * 
 *                     self._update_moments(node.group.children[i], sib)
 *                     child = &self.nodes.array[node.group.children[i]]             # <<<<<<<<<<<<<<
 * 
 *                     # for parallel flag branches to skip during walk
 */
        __pyx_v_child = (&(__pyx_v_self->nodes->array[(__pyx_v_node->group.children[__pyx_v_i])]));

        /* "phd/gravity/gravity_tree.pyx":634
 * 
 *                     # for parallel flag branches to skip during walk
 *                     skip &= (child.flags & SKIP_BRANCH)             # <<<<<<<<<<<<<<
 * 
 *                     mass += child.group.data.mass
 */
        __pyx_v_skip = (__pyx_v_skip & (__pyx_v_child->flags & __pyx_e_3phd_7gravity_12gravity_tree_SKIP_BRANCH));

        /* "phd/gravity/gravity_tree.pyx":636
 *                     skip &= (child.flags & SKIP_BRANCH)
 * 
 *                     mass += child.group.data.mass             # <<<<<<<<<<<<<<
 *                     for k in range(self.dim):
 *                         com[k] += child.group.data.mass*\
 */
        __pyx_v_mass = (__pyx_v_mass + __pyx_v_child->group.data.mass);

        /* "phd/gravity/gravity_tree.pyx":637
 * 
 *                     mass += child.group.data.mass
 *                     for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                         com[k] += child.group.data.mass*\
 *                                 child.group.data.com[k]
 */
        __pyx_t_6 = __pyx_v_self->dim;
        __pyx_t_7 = __pyx_t_6;
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
          __pyx_v_k = __pyx_t_8;

          /* "phd/gravity/gravity_tree.pyx":638
 *                     mass += child.group.data.mass
 *                     for k in range(self.dim):
 *                         com[k] += child.group.data.mass*\             # <<<<<<<<<<<<<<
 *                                 child.group.data.com[k]
 * 
 */
          __pyx_t_9 = __pyx_v_k;

          /* "phd/gravity/gravity_tree.pyx":639
 *                     for k in range(self.dim):
 *                         com[k] += child.group.data.mass*\
 *                                 child.group.data.com[k]             # <<<<<<<<<<<<<<
 * 
 *             # find first child of node
 */
          (__pyx_v_com[__pyx_t_9]) = ((__pyx_v_com[__pyx_t_9]) + (__pyx_v_child->group.data.mass * (__pyx_v_child->group.data.com[__pyx_v_k])));
        }

        /* "phd/gravity/gravity_tree.pyx":617
 *         if((node.flags & LEAF) != LEAF):
 *             for i in range(self.number_nodes):
 *                 if(node.group.children[i] != NOT_EXIST):             # <<<<<<<<<<<<<<
 * 
 *                     # find sibling of child
 */
      }
    }

    /* "phd/gravity/gravity_tree.pyx":642
 * 
 *             # find first child of node
 *             j = 0             # <<<<<<<<<<<<<<
 *             while(node.group.children[j] == NOT_EXIST):
 *                 j += 1
 */
    __pyx_v_j = 0;

    /* "phd/gravity/gravity_tree.pyx":643
 *             # find first child of node
 *             j = 0
 *             while(node.group.children[j] == NOT_EXIST):             # <<<<<<<<<<<<<<
 *                 j += 1
 * 
 */
    while (1) {
      __pyx_t_4 = (((__pyx_v_node->group.children[__pyx_v_j]) == __pyx_e_3phd_7gravity_12gravity_tree_NOT_EXIST) != 0);
      if (!__pyx_t_4) break;

      /* "phd/gravity/gravity_tree.pyx":644
 *             j = 0
 *             while(node.group.children[j] == NOT_EXIST):
 *                 j += 1             # <<<<<<<<<<<<<<
 * 
 *             node.flags |= (skip & SKIP_BRANCH)
 */
      __pyx_v_j = (__pyx_v_j + 1);
    }

    /* "phd/gravity/gravity_tree.pyx":646
 *                 j += 1
 * 
 *             node.flags |= (skip & SKIP_BRANCH)             # <<<<<<<<<<<<<<
 * 
 *             # no longer need children array in union
 */
    __pyx_v_node->flags = (__pyx_v_node->flags | (__pyx_v_skip & __pyx_e_3phd_7gravity_12gravity_tree_SKIP_BRANCH));

    /* "phd/gravity/gravity_tree.pyx":649
 * 
 *             # no longer need children array in union
 *             node.group.data.first_child = node.group.children[j]             # <<<<<<<<<<<<<<
 *             node.group.data.next_sibling = sibling
 *             node.group.data.mass = mass
 */
    __pyx_v_node->group.data.first_child = (__pyx_v_node->group.children[__pyx_v_j]);

    /* "phd/gravity/gravity_tree.pyx":650
 *             # no longer need children array in union
 *             node.group.data.first_child = node.group.children[j]
 *             node.group.data.next_sibling = sibling             # <<<<<<<<<<<<<<
 *             node.group.data.mass = mass
 * 
 */
    __pyx_v_node->group.data.next_sibling = __pyx_v_sibling;

    /* "phd/gravity/gravity_tree.pyx":651
 *             node.group.data.first_child = node.group.children[j]
 *             node.group.data.next_sibling = sibling
 *             node.group.data.mass = mass             # <<<<<<<<<<<<<<
 * 
 *             if(mass):
 */
    __pyx_v_node->group.data.mass = __pyx_v_mass;

    /* "phd/gravity/gravity_tree.pyx":653
 *             node.group.data.mass = mass
 * 
 *             if(mass):             # <<<<<<<<<<<<<<
 *                 for k in range(self.dim):
 *                     node.group.data.com[k] = com[k]/mass
 */
    __pyx_t_4 = (__pyx_v_mass != 0);
    if (__pyx_t_4) {

      /* "phd/gravity/gravity_tree.pyx":654
 * 
 *             if(mass):
 *                 for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                     node.group.data.com[k] = com[k]/mass
 *             else:
 */
      __pyx_t_1 = __pyx_v_self->dim;
      __pyx_t_2 = __pyx_t_1;
      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_k = __pyx_t_3;

        /* "phd/gravity/gravity_tree.pyx":655
 *             if(mass):
 *                 for k in range(self.dim):
 *                     node.group.data.com[k] = com[k]/mass             # <<<<<<<<<<<<<<
 *             else:
 *                 for k in range(self.dim):
 */
        if (unlikely(__pyx_v_mass == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 655, __pyx_L1_error)
        }
        (__pyx_v_node->group.data.com[__pyx_v_k]) = ((__pyx_v_com[__pyx_v_k]) / __pyx_v_mass);
      }

      /* "phd/gravity/gravity_tree.pyx":653
 *             node.group.data.mass = mass
 * 
 *             if(mass):             # <<<<<<<<<<<<<<
 *                 for k in range(self.dim):
 *                     node.group.data.com[k] = com[k]/mass
 */
      goto __pyx_L18;
    }

    /* "phd/gravity/gravity_tree.pyx":657
 *                     node.group.data.com[k] = com[k]/mass
 *             else:
 *                 for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                     node.group.data.com[k] = 0.
 *         else:
 */
    /*else*/ {
      __pyx_t_1 = __pyx_v_self->dim;
      __pyx_t_2 = __pyx_t_1;
      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_k = __pyx_t_3;

        /* "phd/gravity/gravity_tree.pyx":658
 *             else:
 *                 for k in range(self.dim):
 *                     node.group.data.com[k] = 0.             # <<<<<<<<<<<<<<
 *         else:
 * 
 */
        (__pyx_v_node->group.data.com[__pyx_v_k]) = 0.;
      }
    }
    __pyx_L18:;

    /* "phd/gravity/gravity_tree.pyx":615
 * 
 *         # for non leafs use children
 *         if((node.flags & LEAF) != LEAF):             # <<<<<<<<<<<<<<
 *             for i in range(self.number_nodes):
 *                 if(node.group.children[i] != NOT_EXIST):
 */
    goto __pyx_L5;
  }

  /* "phd/gravity/gravity_tree.pyx":661
 *         else:
 * 
 *             node.group.data.first_child  = NOT_EXIST             # <<<<<<<<<<<<<<
 *             node.group.data.next_sibling = sibling
 * 
 */
  /*else*/ {
    __pyx_v_node->group.data.first_child = __pyx_e_3phd_7gravity_12gravity_tree_NOT_EXIST;

    /* "phd/gravity/gravity_tree.pyx":662
 * 
 *             node.group.data.first_child  = NOT_EXIST
 *             node.group.data.next_sibling = sibling             # <<<<<<<<<<<<<<
 * 
 *             # toptree leafs may not have particles
 */
    __pyx_v_node->group.data.next_sibling = __pyx_v_sibling;

    /* "phd/gravity/gravity_tree.pyx":665
 * 
 *             # toptree leafs may not have particles
 *             if(node.flags & HAS_PARTICLE):             # <<<<<<<<<<<<<<
 *                 pid = node.group.data.pid
 * 
 */
    __pyx_t_4 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_HAS_PARTICLE) != 0);
    if (__pyx_t_4) {

      /* "phd/gravity/gravity_tree.pyx":666
 *             # toptree leafs may not have particles
 *             if(node.flags & HAS_PARTICLE):
 *                 pid = node.group.data.pid             # <<<<<<<<<<<<<<
 * 
 *                 # copy particle information
 */
      __pyx_t_1 = __pyx_v_node->group.data.pid;
      __pyx_v_pid = __pyx_t_1;

      /* "phd/gravity/gravity_tree.pyx":669
 * 
 *                 # copy particle information
 *                 node.group.data.mass = self.m[pid]             # <<<<<<<<<<<<<<
 *                 for k in range(self.dim):
 *                     node.group.data.com[k] = self.x[k][pid]
 */
      __pyx_v_node->group.data.mass = (__pyx_v_self->m[__pyx_v_pid]);

      /* "phd/gravity/gravity_tree.pyx":670
 *                 # copy particle information
 *                 node.group.data.mass = self.m[pid]
 *                 for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                     node.group.data.com[k] = self.x[k][pid]
 *             else:
 */
      __pyx_t_1 = __pyx_v_self->dim;
      __pyx_t_2 = __pyx_t_1;
      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_k = __pyx_t_3;

        /* "phd/gravity/gravity_tree.pyx":671
 *                 node.group.data.mass = self.m[pid]
 *                 for k in range(self.dim):
 *                     node.group.data.com[k] = self.x[k][pid]             # <<<<<<<<<<<<<<
 *             else:
 *                 node.group.data.mass = 0.
 */
        (__pyx_v_node->group.data.com[__pyx_v_k]) = ((__pyx_v_self->x[__pyx_v_k])[__pyx_v_pid]);
      }

      /* "phd/gravity/gravity_tree.pyx":665
 * 
 *             # toptree leafs may not have particles
 *             if(node.flags & HAS_PARTICLE):             # <<<<<<<<<<<<<<
 *                 pid = node.group.data.pid
 * 
 */
      goto __pyx_L23;
    }

    /* "phd/gravity/gravity_tree.pyx":673
 *                     node.group.data.com[k] = self.x[k][pid]
 *             else:
 *                 node.group.data.mass = 0.             # <<<<<<<<<<<<<<
 *                 for k in range(self.dim):
 *                     node.group.data.com[k] = 0.
 */
    /*else*/ {
      __pyx_v_node->group.data.mass = 0.;

      /* "phd/gravity/gravity_tree.pyx":674
 *             else:
 *                 node.group.data.mass = 0.
 *                 for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                     node.group.data.com[k] = 0.
 * 
 */
      __pyx_t_1 = __pyx_v_self->dim;
      __pyx_t_2 = __pyx_t_1;
      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_k = __pyx_t_3;

        /* "phd/gravity/gravity_tree.pyx":675
 *                 node.group.data.mass = 0.
 *                 for k in range(self.dim):
 *                     node.group.data.com[k] = 0.             # <<<<<<<<<<<<<<
 * 
 *     cdef void _update_toptree_moments(self, int current):
 */
        (__pyx_v_node->group.data.com[__pyx_v_k]) = 0.;
      }
    }
    __pyx_L23:;
  }
  __pyx_L5:;

  /* "phd/gravity/gravity_tree.pyx":588
 *             self.x[k] = NULL
 * 
 *     cdef void _update_moments(self, int current, int sibling):             # <<<<<<<<<<<<<<
 *         """Recursively update moments of each local node. As a by
 *         product we collect the first child and sibling of each
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("phd.gravity.gravity_tree.GravityTree._update_moments", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":677
 *                     node.group.data.com[k] = 0.
 * 
 *     cdef void _update_toptree_moments(self, int current):             # <<<<<<<<<<<<<<
 *         """Recursively update toptree moments. Only toptree
 *         moments are calculated because bottom tree moments
 */

static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__update_toptree_moments(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, int __pyx_v_current) {
  int __pyx_v_k;
  int __pyx_v_ind;
  int __pyx_v_sib;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_child;
  double __pyx_v_mass;
  double __pyx_v_com[3];
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_toptree_moments", 0);

  /* "phd/gravity/gravity_tree.pyx":693
 *         cdef double mass, com[3]
 * 
 *         node = &self.nodes.array[current]             # <<<<<<<<<<<<<<
 * 
 *         # check if node is not a top tree leaf
 */
  __pyx_v_node = (&(__pyx_v_self->nodes->array[__pyx_v_current]));

  /* "phd/gravity/gravity_tree.pyx":696
 * 
 *         # check if node is not a top tree leaf
 *         if((node.flags & TOP_TREE_LEAF) != TOP_TREE_LEAF):             # <<<<<<<<<<<<<<
 * 
 *             mass = 0.
 */
  __pyx_t_1 = (((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE_LEAF) != __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE_LEAF) != 0);
  if (__pyx_t_1) {

    /* "phd/gravity/gravity_tree.pyx":698
 *         if((node.flags & TOP_TREE_LEAF) != TOP_TREE_LEAF):
 * 
 *             mass = 0.             # <<<<<<<<<<<<<<
 *             for k in range(self.dim):
 *                 com[k] = 0.
 */
    __pyx_v_mass = 0.;

    /* "phd/gravity/gravity_tree.pyx":699
 * 
 *             mass = 0.
 *             for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                 com[k] = 0.
 * 
 */
    __pyx_t_2 = __pyx_v_self->dim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_k = __pyx_t_4;

      /* "phd/gravity/gravity_tree.pyx":700
 *             mass = 0.
 *             for k in range(self.dim):
 *                 com[k] = 0.             # <<<<<<<<<<<<<<
 * 
 *             # sum moments from each child
 */
      (__pyx_v_com[__pyx_v_k]) = 0.;
    }

    /* "phd/gravity/gravity_tree.pyx":703
 * 
 *             # sum moments from each child
 *             ind = node.group.data.first_child             # <<<<<<<<<<<<<<
 *             sib = node.group.data.next_sibling
 *             while(ind != sib):
 */
    __pyx_t_2 = __pyx_v_node->group.data.first_child;
    __pyx_v_ind = __pyx_t_2;

    /* "phd/gravity/gravity_tree.pyx":704
 *             # sum moments from each child
 *             ind = node.group.data.first_child
 *             sib = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 *             while(ind != sib):
 * 
 */
    __pyx_t_2 = __pyx_v_node->group.data.next_sibling;
    __pyx_v_sib = __pyx_t_2;

    /* "phd/gravity/gravity_tree.pyx":705
 *             ind = node.group.data.first_child
 *             sib = node.group.data.next_sibling
 *             while(ind != sib):             # <<<<<<<<<<<<<<
 * 
 *                 # update node moments
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_ind != __pyx_v_sib) != 0);
      if (!__pyx_t_1) break;

      /* "phd/gravity/gravity_tree.pyx":708
 * 
 *                 # update node moments
 *                 child = &self.nodes.array[ind]             # <<<<<<<<<<<<<<
 *                 self._update_toptree_moments(ind)
 *                 mass += child.group.data.mass
 */
      __pyx_v_child = (&(__pyx_v_self->nodes->array[__pyx_v_ind]));

      /* "phd/gravity/gravity_tree.pyx":709
 *                 # update node moments
 *                 child = &self.nodes.array[ind]
 *                 self._update_toptree_moments(ind)             # <<<<<<<<<<<<<<
 *                 mass += child.group.data.mass
 *                 for k in range(self.dim):
 */
      ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_update_toptree_moments(__pyx_v_self, __pyx_v_ind);

      /* "phd/gravity/gravity_tree.pyx":710
 *                 child = &self.nodes.array[ind]
 *                 self._update_toptree_moments(ind)
 *                 mass += child.group.data.mass             # <<<<<<<<<<<<<<
 *                 for k in range(self.dim):
 *                     com[k] += child.group.data.mass*\
 */
      __pyx_v_mass = (__pyx_v_mass + __pyx_v_child->group.data.mass);

      /* "phd/gravity/gravity_tree.pyx":711
 *                 self._update_toptree_moments(ind)
 *                 mass += child.group.data.mass
 *                 for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                     com[k] += child.group.data.mass*\
 *                             child.group.data.com[k]
 */
      __pyx_t_2 = __pyx_v_self->dim;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_k = __pyx_t_4;

        /* "phd/gravity/gravity_tree.pyx":712
 *                 mass += child.group.data.mass
 *                 for k in range(self.dim):
 *                     com[k] += child.group.data.mass*\             # <<<<<<<<<<<<<<
 *                             child.group.data.com[k]
 * 
 */
        __pyx_t_5 = __pyx_v_k;

        /* "phd/gravity/gravity_tree.pyx":713
 *                 for k in range(self.dim):
 *                     com[k] += child.group.data.mass*\
 *                             child.group.data.com[k]             # <<<<<<<<<<<<<<
 * 
 *                 # next child
 */
        (__pyx_v_com[__pyx_t_5]) = ((__pyx_v_com[__pyx_t_5]) + (__pyx_v_child->group.data.mass * (__pyx_v_child->group.data.com[__pyx_v_k])));
      }

      /* "phd/gravity/gravity_tree.pyx":716
 * 
 *                 # next child
 *                 ind = child.group.data.next_sibling             # <<<<<<<<<<<<<<
 * 
 *             if(mass):
 */
      __pyx_t_2 = __pyx_v_child->group.data.next_sibling;
      __pyx_v_ind = __pyx_t_2;
    }

    /* "phd/gravity/gravity_tree.pyx":718
 *                 ind = child.group.data.next_sibling
 * 
 *             if(mass):             # <<<<<<<<<<<<<<
 *                 for k in range(self.dim):
 *                     com[k] /= mass
 */
    __pyx_t_1 = (__pyx_v_mass != 0);
    if (__pyx_t_1) {

      /* "phd/gravity/gravity_tree.pyx":719
 * 
 *             if(mass):
 *                 for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                     com[k] /= mass
 * 
 */
      __pyx_t_2 = __pyx_v_self->dim;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_k = __pyx_t_4;

        /* "phd/gravity/gravity_tree.pyx":720
 *             if(mass):
 *                 for k in range(self.dim):
 *                     com[k] /= mass             # <<<<<<<<<<<<<<
 * 
 *             node.group.data.mass = mass
 */
        __pyx_t_5 = __pyx_v_k;
        if (unlikely(__pyx_v_mass == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 720, __pyx_L1_error)
        }
        (__pyx_v_com[__pyx_t_5]) = ((__pyx_v_com[__pyx_t_5]) / __pyx_v_mass);
      }

      /* "phd/gravity/gravity_tree.pyx":718
 *                 ind = child.group.data.next_sibling
 * 
 *             if(mass):             # <<<<<<<<<<<<<<
 *                 for k in range(self.dim):
 *                     com[k] /= mass
 */
    }

    /* "phd/gravity/gravity_tree.pyx":722
 *                     com[k] /= mass
 * 
 *             node.group.data.mass = mass             # <<<<<<<<<<<<<<
 *             for k in range(self.dim):
 *                 node.group.data.com[k] = com[k]
 */
    __pyx_v_node->group.data.mass = __pyx_v_mass;

    /* "phd/gravity/gravity_tree.pyx":723
 * 
 *             node.group.data.mass = mass
 *             for k in range(self.dim):             # <<<<<<<<<<<<<<
 *                 node.group.data.com[k] = com[k]
 * 
 */
    __pyx_t_2 = __pyx_v_self->dim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_k = __pyx_t_4;

      /* "phd/gravity/gravity_tree.pyx":724
 *             node.group.data.mass = mass
 *             for k in range(self.dim):
 *                 node.group.data.com[k] = com[k]             # <<<<<<<<<<<<<<
 * 
 *     cdef void _exchange_toptree_leafs(self):
 */
      (__pyx_v_node->group.data.com[__pyx_v_k]) = (__pyx_v_com[__pyx_v_k]);
    }

    /* "phd/gravity/gravity_tree.pyx":696
 * 
 *         # check if node is not a top tree leaf
 *         if((node.flags & TOP_TREE_LEAF) != TOP_TREE_LEAF):             # <<<<<<<<<<<<<<
 * 
 *             mass = 0.
 */
  }

  /* "phd/gravity/gravity_tree.pyx":677
 *                     node.group.data.com[k] = 0.
 * 
 *     cdef void _update_toptree_moments(self, int current):             # <<<<<<<<<<<<<<
 *         """Recursively update toptree moments. Only toptree
 *         moments are calculated because bottom tree moments
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("phd.gravity.gravity_tree.GravityTree._update_toptree_moments", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":726
 *                 node.group.data.com[k] = com[k]
 * 
 *     cdef void _exchange_toptree_leafs(self):             # <<<<<<<<<<<<<<
 *         """Initially toptree moments are incorrect after local
 *         tree construction and moment calculation. To finalize
 */

static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__exchange_toptree_leafs(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_v_j;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  __pyx_t_5numpy_float64_t *__pyx_v_comx[3];
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_proc = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_maps = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_mass = 0;
  PyObject *__pyx_v_field = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_exchange_toptree_leafs", 0);

  /* "phd/gravity/gravity_tree.pyx":736
 *         cdef np.float64_t* comx[3]
 * 
 *         cdef LongArray proc   = self.toptree_leafs.get_carray("proc")             # <<<<<<<<<<<<<<
 *         cdef LongArray maps   = self.toptree_leafs.get_carray("map")
 *         cdef DoubleArray mass = self.toptree_leafs.get_carray("mass")
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray(__pyx_v_self->toptree_leafs, __pyx_n_s_proc, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 736, __pyx_L1_error)
  __pyx_v_proc = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":737
 * 
 *         cdef LongArray proc   = self.toptree_leafs.get_carray("proc")
 *         cdef LongArray maps   = self.toptree_leafs.get_carray("map")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray mass = self.toptree_leafs.get_carray("mass")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray(__pyx_v_self->toptree_leafs, __pyx_n_s_map, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 737, __pyx_L1_error)
  __pyx_v_maps = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":738
 *         cdef LongArray proc   = self.toptree_leafs.get_carray("proc")
 *         cdef LongArray maps   = self.toptree_leafs.get_carray("map")
 *         cdef DoubleArray mass = self.toptree_leafs.get_carray("mass")             # <<<<<<<<<<<<<<
 * 
 *         self.toptree_leafs.pointer_groups(comx,
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray(__pyx_v_self->toptree_leafs, __pyx_n_s_mass, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 738, __pyx_L1_error)
  __pyx_v_mass = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":741
 * 
 *         self.toptree_leafs.pointer_groups(comx,
 *                 self.toptree_leafs.carray_named_groups["com"])             # <<<<<<<<<<<<<<
 * 
 *         # collect toptree leaf moments belonging to our processor
 */
  if (unlikely(__pyx_v_self->toptree_leafs->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 741, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->toptree_leafs->carray_named_groups, __pyx_n_s_com); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 741, __pyx_L1_error)

  /* "phd/gravity/gravity_tree.pyx":740
 *         cdef DoubleArray mass = self.toptree_leafs.get_carray("mass")
 * 
 *         self.toptree_leafs.pointer_groups(comx,             # <<<<<<<<<<<<<<
 *                 self.toptree_leafs.carray_named_groups["com"])
 * 
 */
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->pointer_groups(__pyx_v_self->toptree_leafs, __pyx_v_comx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":744
 * 
 *         # collect toptree leaf moments belonging to our processor
 *         for i in range(self.toptree_leafs.get_carray_size()):             # <<<<<<<<<<<<<<
 *             if proc.data[i] == phd._rank:
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray_size(__pyx_v_self->toptree_leafs, 0);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "phd/gravity/gravity_tree.pyx":745
 *         # collect toptree leaf moments belonging to our processor
 *         for i in range(self.toptree_leafs.get_carray_size()):
 *             if proc.data[i] == phd._rank:             # <<<<<<<<<<<<<<
 * 
 *                 # copy our moments
 */
    __pyx_t_1 = __Pyx_PyInt_From_npy_int32((__pyx_v_proc->data[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_phd); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_rank); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 745, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 745, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {

      /* "phd/gravity/gravity_tree.pyx":748
 * 
 *                 # copy our moments
 *                 node = &self.nodes.array[maps.data[i]]             # <<<<<<<<<<<<<<
 *                 for j in range(self.dim):
 *                     comx[j][i] = node.group.data.com[j]
 */
      __pyx_v_node = (&(__pyx_v_self->nodes->array[(__pyx_v_maps->data[__pyx_v_i])]));

      /* "phd/gravity/gravity_tree.pyx":749
 *                 # copy our moments
 *                 node = &self.nodes.array[maps.data[i]]
 *                 for j in range(self.dim):             # <<<<<<<<<<<<<<
 *                     comx[j][i] = node.group.data.com[j]
 *                 mass.data[i] = node.group.data.mass
 */
      __pyx_t_8 = __pyx_v_self->dim;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_j = __pyx_t_10;

        /* "phd/gravity/gravity_tree.pyx":750
 *                 node = &self.nodes.array[maps.data[i]]
 *                 for j in range(self.dim):
 *                     comx[j][i] = node.group.data.com[j]             # <<<<<<<<<<<<<<
 *                 mass.data[i] = node.group.data.mass
 * 
 */
        ((__pyx_v_comx[__pyx_v_j])[__pyx_v_i]) = (__pyx_v_node->group.data.com[__pyx_v_j]);
      }

      /* "phd/gravity/gravity_tree.pyx":751
 *                 for j in range(self.dim):
 *                     comx[j][i] = node.group.data.com[j]
 *                 mass.data[i] = node.group.data.mass             # <<<<<<<<<<<<<<
 * 
 *         # exchange toptree leaf moments
 */
      __pyx_t_11 = __pyx_v_node->group.data.mass;
      (__pyx_v_mass->data[__pyx_v_i]) = __pyx_t_11;

      /* "phd/gravity/gravity_tree.pyx":745
 *         # collect toptree leaf moments belonging to our processor
 *         for i in range(self.toptree_leafs.get_carray_size()):
 *             if proc.data[i] == phd._rank:             # <<<<<<<<<<<<<<
 * 
 *                 # copy our moments
 */
    }
  }

  /* "phd/gravity/gravity_tree.pyx":754
 * 
 *         # exchange toptree leaf moments
 *         for field in self.toptree_leafs.carray_named_groups["moments"]:             # <<<<<<<<<<<<<<
 *             phd._comm.Allgatherv(MPI.IN_PLACE,
 *                     [self.toptree_leafs[field], self.send_cnts,
 */
  if (unlikely(__pyx_v_self->toptree_leafs->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 754, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_self->toptree_leafs->carray_named_groups, __pyx_n_s_moments); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 754, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 754, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 754, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_13(__pyx_t_6);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 754, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_field, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "phd/gravity/gravity_tree.pyx":755
 *         # exchange toptree leaf moments
 *         for field in self.toptree_leafs.carray_named_groups["moments"]:
 *             phd._comm.Allgatherv(MPI.IN_PLACE,             # <<<<<<<<<<<<<<
 *                     [self.toptree_leafs[field], self.send_cnts,
 *                         self.send_disp, MPI.DOUBLE])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_comm); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_Allgatherv); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_MPI); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_IN_PLACE); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "phd/gravity/gravity_tree.pyx":756
 *         for field in self.toptree_leafs.carray_named_groups["moments"]:
 *             phd._comm.Allgatherv(MPI.IN_PLACE,
 *                     [self.toptree_leafs[field], self.send_cnts,             # <<<<<<<<<<<<<<
 *                         self.send_disp, MPI.DOUBLE])
 * 
 */
    __pyx_t_14 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->toptree_leafs), __pyx_v_field); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);

    /* "phd/gravity/gravity_tree.pyx":757
 *             phd._comm.Allgatherv(MPI.IN_PLACE,
 *                     [self.toptree_leafs[field], self.send_cnts,
 *                         self.send_disp, MPI.DOUBLE])             # <<<<<<<<<<<<<<
 * 
 *         # copy imported toptree leaf moments to tree
 */
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_MPI); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_DOUBLE); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "phd/gravity/gravity_tree.pyx":756
 *         for field in self.toptree_leafs.carray_named_groups["moments"]:
 *             phd._comm.Allgatherv(MPI.IN_PLACE,
 *                     [self.toptree_leafs[field], self.send_cnts,             # <<<<<<<<<<<<<<
 *                         self.send_disp, MPI.DOUBLE])
 * 
 */
    __pyx_t_16 = PyList_New(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_14);
    PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_14);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_cnts));
    PyList_SET_ITEM(__pyx_t_16, 1, ((PyObject *)__pyx_v_self->send_cnts));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->send_disp));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_disp));
    PyList_SET_ITEM(__pyx_t_16, 2, ((PyObject *)__pyx_v_self->send_disp));
    __Pyx_GIVEREF(__pyx_t_17);
    PyList_SET_ITEM(__pyx_t_16, 3, __pyx_t_17);
    __pyx_t_14 = 0;
    __pyx_t_17 = 0;
    __pyx_t_17 = NULL;
    __pyx_t_2 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_2 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_2, 2+__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_2, 2+__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(2+__pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_17) {
        __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_17); __pyx_t_17 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_2, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_2, __pyx_t_16);
      __pyx_t_15 = 0;
      __pyx_t_16 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "phd/gravity/gravity_tree.pyx":754
 * 
 *         # exchange toptree leaf moments
 *         for field in self.toptree_leafs.carray_named_groups["moments"]:             # <<<<<<<<<<<<<<
 *             phd._comm.Allgatherv(MPI.IN_PLACE,
 *                     [self.toptree_leafs[field], self.send_cnts,
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "phd/gravity/gravity_tree.pyx":760
 * 
 *         # copy imported toptree leaf moments to tree
 *         for i in range(self.toptree_leafs.get_carray_size()):             # <<<<<<<<<<<<<<
 *             if proc.data[i] != phd._rank:
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray_size(__pyx_v_self->toptree_leafs, 0);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "phd/gravity/gravity_tree.pyx":761
 *         # copy imported toptree leaf moments to tree
 *         for i in range(self.toptree_leafs.get_carray_size()):
 *             if proc.data[i] != phd._rank:             # <<<<<<<<<<<<<<
 * 
 *                 # update moments
 */
    __pyx_t_6 = __Pyx_PyInt_From_npy_int32((__pyx_v_proc->data[__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_phd); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_rank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {

      /* "phd/gravity/gravity_tree.pyx":764
 * 
 *                 # update moments
 *                 node = &self.nodes.array[maps.data[i]]             # <<<<<<<<<<<<<<
 *                 for j in range(self.dim):
 *                     node.group.data.com[j] = comx[j][i]
 */
      __pyx_v_node = (&(__pyx_v_self->nodes->array[(__pyx_v_maps->data[__pyx_v_i])]));

      /* "phd/gravity/gravity_tree.pyx":765
 *                 # update moments
 *                 node = &self.nodes.array[maps.data[i]]
 *                 for j in range(self.dim):             # <<<<<<<<<<<<<<
 *                     node.group.data.com[j] = comx[j][i]
 *                 node.group.data.mass = mass.data[i]
 */
      __pyx_t_8 = __pyx_v_self->dim;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_j = __pyx_t_10;

        /* "phd/gravity/gravity_tree.pyx":766
 *                 node = &self.nodes.array[maps.data[i]]
 *                 for j in range(self.dim):
 *                     node.group.data.com[j] = comx[j][i]             # <<<<<<<<<<<<<<
 *                 node.group.data.mass = mass.data[i]
 * 
 */
        (__pyx_v_node->group.data.com[__pyx_v_j]) = ((__pyx_v_comx[__pyx_v_j])[__pyx_v_i]);
      }

      /* "phd/gravity/gravity_tree.pyx":767
 *                 for j in range(self.dim):
 *                     node.group.data.com[j] = comx[j][i]
 *                 node.group.data.mass = mass.data[i]             # <<<<<<<<<<<<<<
 * 
 *         # recalculate toptree moments
 */
      __pyx_v_node->group.data.mass = (__pyx_v_mass->data[__pyx_v_i]);

      /* "phd/gravity/gravity_tree.pyx":761
 *         # copy imported toptree leaf moments to tree
 *         for i in range(self.toptree_leafs.get_carray_size()):
 *             if proc.data[i] != phd._rank:             # <<<<<<<<<<<<<<
 * 
 *                 # update moments
 */
    }
  }

  /* "phd/gravity/gravity_tree.pyx":770
 * 
 *         # recalculate toptree moments
 *         self._update_toptree_moments(ROOT)             # <<<<<<<<<<<<<<
 * 
 *     def walk(self, CarrayContainer particles):
 */
  ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_update_toptree_moments(__pyx_v_self, __pyx_e_3phd_7gravity_12gravity_tree_ROOT);

  /* "phd/gravity/gravity_tree.pyx":726
 *                 node.group.data.com[k] = com[k]
 * 
 *     cdef void _exchange_toptree_leafs(self):             # <<<<<<<<<<<<<<
 *         """Initially toptree moments are incorrect after local
 *         tree construction and moment calculation. To finalize
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_WriteUnraisable("phd.gravity.gravity_tree.GravityTree._exchange_toptree_leafs", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_proc);
  __Pyx_XDECREF((PyObject *)__pyx_v_maps);
  __Pyx_XDECREF((PyObject *)__pyx_v_mass);
  __Pyx_XDECREF(__pyx_v_field);
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":772
 *         self._update_toptree_moments(ROOT)
 * 
 *     def walk(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Walk the tree calculating accerlerations.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13walk(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_12walk[] = "Walk the tree calculating accerlerations.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13walk(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("walk (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 772, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12walk(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12walk(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("walk", 0);

  /* "phd/gravity/gravity_tree.pyx":781
 * 
 *         """
 *         self.export_interaction.initialize_particles(particles)             # <<<<<<<<<<<<<<
 *         if phd._in_parallel:
 *             self._parallel_walk(self.export_interaction, particles)
 */
  ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_self->export_interaction->__pyx_vtab)->initialize_particles(__pyx_v_self->export_interaction, __pyx_v_particles, NULL);

  /* "phd/gravity/gravity_tree.pyx":782
 *         """
 *         self.export_interaction.initialize_particles(particles)
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             self._parallel_walk(self.export_interaction, particles)
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in_parallel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "phd/gravity/gravity_tree.pyx":783
 *         self.export_interaction.initialize_particles(particles)
 *         if phd._in_parallel:
 *             self._parallel_walk(self.export_interaction, particles)             # <<<<<<<<<<<<<<
 *         else:
 *             self._serial_walk(self.export_interaction, particles)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->export_interaction);
    __Pyx_INCREF(__pyx_t_2);
    ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_parallel_walk(__pyx_v_self, ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)__pyx_t_2), __pyx_v_particles);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "phd/gravity/gravity_tree.pyx":782
 *         """
 *         self.export_interaction.initialize_particles(particles)
 *         if phd._in_parallel:             # <<<<<<<<<<<<<<
 *             self._parallel_walk(self.export_interaction, particles)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "phd/gravity/gravity_tree.pyx":785
 *             self._parallel_walk(self.export_interaction, particles)
 *         else:
 *             self._serial_walk(self.export_interaction, particles)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _serial_walk(self, Interaction interaction, CarrayContainer particles):
 */
  /*else*/ {
    __pyx_t_2 = ((PyObject *)__pyx_v_self->export_interaction);
    __Pyx_INCREF(__pyx_t_2);
    ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_serial_walk(__pyx_v_self, ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)__pyx_t_2), __pyx_v_particles);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "phd/gravity/gravity_tree.pyx":772
 *         self._update_toptree_moments(ROOT)
 * 
 *     def walk(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Walk the tree calculating accerlerations.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.walk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":787
 *             self._serial_walk(self.export_interaction, particles)
 * 
 *     cdef void _serial_walk(self, Interaction interaction, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Walk the tree calculating interactions. Interactions can be any
 *         calculation between particles.
 */

static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__serial_walk(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *__pyx_v_interaction, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  int __pyx_v_index;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_serial_walk", 0);

  /* "phd/gravity/gravity_tree.pyx":804
 * 
 *         # loop through each real praticle
 *         while(interaction.process_particle()):             # <<<<<<<<<<<<<<
 *             index = ROOT
 *             while(index != ROOT_SIBLING):
 */
  while (1) {
    __pyx_t_1 = (((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->process_particle(__pyx_v_interaction) != 0);
    if (!__pyx_t_1) break;

    /* "phd/gravity/gravity_tree.pyx":805
 *         # loop through each real praticle
 *         while(interaction.process_particle()):
 *             index = ROOT             # <<<<<<<<<<<<<<
 *             while(index != ROOT_SIBLING):
 *                 node = &self.nodes.array[index]
 */
    __pyx_v_index = __pyx_e_3phd_7gravity_12gravity_tree_ROOT;

    /* "phd/gravity/gravity_tree.pyx":806
 *         while(interaction.process_particle()):
 *             index = ROOT
 *             while(index != ROOT_SIBLING):             # <<<<<<<<<<<<<<
 *                 node = &self.nodes.array[index]
 * 
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_index != __pyx_e_3phd_7gravity_12gravity_tree_ROOT_SIBLING) != 0);
      if (!__pyx_t_1) break;

      /* "phd/gravity/gravity_tree.pyx":807
 *             index = ROOT
 *             while(index != ROOT_SIBLING):
 *                 node = &self.nodes.array[index]             # <<<<<<<<<<<<<<
 * 
 *                 if(node.flags & LEAF):
 */
      __pyx_v_node = (&(__pyx_v_self->nodes->array[__pyx_v_index]));

      /* "phd/gravity/gravity_tree.pyx":809
 *                 node = &self.nodes.array[index]
 * 
 *                 if(node.flags & LEAF):             # <<<<<<<<<<<<<<
 *                     # calculate particle particle interaction
 *                     interaction.interact(node)
 */
      __pyx_t_1 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_LEAF) != 0);
      if (__pyx_t_1) {

        /* "phd/gravity/gravity_tree.pyx":811
 *                 if(node.flags & LEAF):
 *                     # calculate particle particle interaction
 *                     interaction.interact(node)             # <<<<<<<<<<<<<<
 *                     index = node.group.data.next_sibling
 *                 else:
 */
        ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->interact(__pyx_v_interaction, __pyx_v_node);

        /* "phd/gravity/gravity_tree.pyx":812
 *                     # calculate particle particle interaction
 *                     interaction.interact(node)
 *                     index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 *                 else:
 *                     if(interaction.splitter.split(node)):
 */
        __pyx_t_2 = __pyx_v_node->group.data.next_sibling;
        __pyx_v_index = __pyx_t_2;

        /* "phd/gravity/gravity_tree.pyx":809
 *                 node = &self.nodes.array[index]
 * 
 *                 if(node.flags & LEAF):             # <<<<<<<<<<<<<<
 *                     # calculate particle particle interaction
 *                     interaction.interact(node)
 */
        goto __pyx_L7;
      }

      /* "phd/gravity/gravity_tree.pyx":814
 *                     index = node.group.data.next_sibling
 *                 else:
 *                     if(interaction.splitter.split(node)):             # <<<<<<<<<<<<<<
 *                         # node opened travel down
 *                         index = node.group.data.first_child
 */
      /*else*/ {
        __pyx_t_1 = (((struct __pyx_vtabstruct_3phd_7gravity_8splitter_Splitter *)__pyx_v_interaction->splitter->__pyx_vtab)->split(__pyx_v_interaction->splitter, __pyx_v_node) != 0);
        if (__pyx_t_1) {

          /* "phd/gravity/gravity_tree.pyx":816
 *                     if(interaction.splitter.split(node)):
 *                         # node opened travel down
 *                         index = node.group.data.first_child             # <<<<<<<<<<<<<<
 *                     else:
 *                         # calculate node particle interaction
 */
          __pyx_t_2 = __pyx_v_node->group.data.first_child;
          __pyx_v_index = __pyx_t_2;

          /* "phd/gravity/gravity_tree.pyx":814
 *                     index = node.group.data.next_sibling
 *                 else:
 *                     if(interaction.splitter.split(node)):             # <<<<<<<<<<<<<<
 *                         # node opened travel down
 *                         index = node.group.data.first_child
 */
          goto __pyx_L8;
        }

        /* "phd/gravity/gravity_tree.pyx":819
 *                     else:
 *                         # calculate node particle interaction
 *                         interaction.interact(node)             # <<<<<<<<<<<<<<
 *                         index = node.group.data.next_sibling
 * 
 */
        /*else*/ {
          ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->interact(__pyx_v_interaction, __pyx_v_node);

          /* "phd/gravity/gravity_tree.pyx":820
 *                         # calculate node particle interaction
 *                         interaction.interact(node)
 *                         index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 * 
 *     cdef void _import_walk(self, Interaction interaction):
 */
          __pyx_t_2 = __pyx_v_node->group.data.next_sibling;
          __pyx_v_index = __pyx_t_2;
        }
        __pyx_L8:;
      }
      __pyx_L7:;
    }
  }

  /* "phd/gravity/gravity_tree.pyx":787
 *             self._serial_walk(self.export_interaction, particles)
 * 
 *     cdef void _serial_walk(self, Interaction interaction, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Walk the tree calculating interactions. Interactions can be any
 *         calculation between particles.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":822
 *                         index = node.group.data.next_sibling
 * 
 *     cdef void _import_walk(self, Interaction interaction):             # <<<<<<<<<<<<<<
 *         """Walk tree calculating interactions for particle that are
 *         imported to this process.
 */

static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__import_walk(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *__pyx_v_interaction) {
  int __pyx_v_index;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_import_walk", 0);

  /* "phd/gravity/gravity_tree.pyx":836
 * 
 *         # loop through each export praticle
 *         while(interaction.process_particle()):             # <<<<<<<<<<<<<<
 *             index = ROOT
 *             while(index != ROOT_SIBLING):
 */
  while (1) {
    __pyx_t_1 = (((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->process_particle(__pyx_v_interaction) != 0);
    if (!__pyx_t_1) break;

    /* "phd/gravity/gravity_tree.pyx":837
 *         # loop through each export praticle
 *         while(interaction.process_particle()):
 *             index = ROOT             # <<<<<<<<<<<<<<
 *             while(index != ROOT_SIBLING):
 *                 node = &self.nodes.array[index]
 */
    __pyx_v_index = __pyx_e_3phd_7gravity_12gravity_tree_ROOT;

    /* "phd/gravity/gravity_tree.pyx":838
 *         while(interaction.process_particle()):
 *             index = ROOT
 *             while(index != ROOT_SIBLING):             # <<<<<<<<<<<<<<
 *                 node = &self.nodes.array[index]
 * 
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_index != __pyx_e_3phd_7gravity_12gravity_tree_ROOT_SIBLING) != 0);
      if (!__pyx_t_1) break;

      /* "phd/gravity/gravity_tree.pyx":839
 *             index = ROOT
 *             while(index != ROOT_SIBLING):
 *                 node = &self.nodes.array[index]             # <<<<<<<<<<<<<<
 * 
 *                 if(node.flags & LEAF):
 */
      __pyx_v_node = (&(__pyx_v_self->nodes->array[__pyx_v_index]));

      /* "phd/gravity/gravity_tree.pyx":841
 *                 node = &self.nodes.array[index]
 * 
 *                 if(node.flags & LEAF):             # <<<<<<<<<<<<<<
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):
 *                         # skip toptree leaf that does not belong
 */
      __pyx_t_1 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_LEAF) != 0);
      if (__pyx_t_1) {

        /* "phd/gravity/gravity_tree.pyx":842
 * 
 *                 if(node.flags & LEAF):
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):             # <<<<<<<<<<<<<<
 *                         # skip toptree leaf that does not belong
 *                         # to this processor
 */
        __pyx_t_1 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE_LEAF_REMOTE) != 0);
        if (__pyx_t_1) {

          /* "phd/gravity/gravity_tree.pyx":845
 *                         # skip toptree leaf that does not belong
 *                         # to this processor
 *                         index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 * 
 *                     else: # calculate particle particle interaction
 */
          __pyx_t_2 = __pyx_v_node->group.data.next_sibling;
          __pyx_v_index = __pyx_t_2;

          /* "phd/gravity/gravity_tree.pyx":842
 * 
 *                 if(node.flags & LEAF):
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):             # <<<<<<<<<<<<<<
 *                         # skip toptree leaf that does not belong
 *                         # to this processor
 */
          goto __pyx_L8;
        }

        /* "phd/gravity/gravity_tree.pyx":848
 * 
 *                     else: # calculate particle particle interaction
 *                         interaction.interact(node)             # <<<<<<<<<<<<<<
 *                         index = node.group.data.next_sibling
 * 
 */
        /*else*/ {
          ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->interact(__pyx_v_interaction, __pyx_v_node);

          /* "phd/gravity/gravity_tree.pyx":849
 *                     else: # calculate particle particle interaction
 *                         interaction.interact(node)
 *                         index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 * 
 *                 else: # node is not leaf
 */
          __pyx_t_2 = __pyx_v_node->group.data.next_sibling;
          __pyx_v_index = __pyx_t_2;
        }
        __pyx_L8:;

        /* "phd/gravity/gravity_tree.pyx":841
 *                 node = &self.nodes.array[index]
 * 
 *                 if(node.flags & LEAF):             # <<<<<<<<<<<<<<
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):
 *                         # skip toptree leaf that does not belong
 */
        goto __pyx_L7;
      }

      /* "phd/gravity/gravity_tree.pyx":852
 * 
 *                 else: # node is not leaf
 *                     if(node.flags & SKIP_BRANCH):             # <<<<<<<<<<<<<<
 *                         # we can skip branch if node only depends
 *                         # on nodes from other processors
 */
      /*else*/ {
        __pyx_t_1 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_SKIP_BRANCH) != 0);
        if (__pyx_t_1) {

          /* "phd/gravity/gravity_tree.pyx":855
 *                         # we can skip branch if node only depends
 *                         # on nodes from other processors
 *                         index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 * 
 *                     # check if node can be opened
 */
          __pyx_t_2 = __pyx_v_node->group.data.next_sibling;
          __pyx_v_index = __pyx_t_2;

          /* "phd/gravity/gravity_tree.pyx":852
 * 
 *                 else: # node is not leaf
 *                     if(node.flags & SKIP_BRANCH):             # <<<<<<<<<<<<<<
 *                         # we can skip branch if node only depends
 *                         # on nodes from other processors
 */
          goto __pyx_L9;
        }

        /* "phd/gravity/gravity_tree.pyx":858
 * 
 *                     # check if node can be opened
 *                     elif(interaction.splitter.split(node)):             # <<<<<<<<<<<<<<
 *                         # travel down node
 *                         index = node.group.data.first_child
 */
        __pyx_t_1 = (((struct __pyx_vtabstruct_3phd_7gravity_8splitter_Splitter *)__pyx_v_interaction->splitter->__pyx_vtab)->split(__pyx_v_interaction->splitter, __pyx_v_node) != 0);
        if (__pyx_t_1) {

          /* "phd/gravity/gravity_tree.pyx":860
 *                     elif(interaction.splitter.split(node)):
 *                         # travel down node
 *                         index = node.group.data.first_child             # <<<<<<<<<<<<<<
 * 
 *                     else: # node not opened particle node interaction
 */
          __pyx_t_2 = __pyx_v_node->group.data.first_child;
          __pyx_v_index = __pyx_t_2;

          /* "phd/gravity/gravity_tree.pyx":858
 * 
 *                     # check if node can be opened
 *                     elif(interaction.splitter.split(node)):             # <<<<<<<<<<<<<<
 *                         # travel down node
 *                         index = node.group.data.first_child
 */
          goto __pyx_L9;
        }

        /* "phd/gravity/gravity_tree.pyx":863
 * 
 *                     else: # node not opened particle node interaction
 *                         if(node.flags & TOP_TREE):             # <<<<<<<<<<<<<<
 *                             # skip top tree nodes
 *                             index = node.group.data.next_sibling
 */
        /*else*/ {
          __pyx_t_1 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE) != 0);
          if (__pyx_t_1) {

            /* "phd/gravity/gravity_tree.pyx":865
 *                         if(node.flags & TOP_TREE):
 *                             # skip top tree nodes
 *                             index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 *                         else:
 *                             # calculate node particle interaction
 */
            __pyx_t_2 = __pyx_v_node->group.data.next_sibling;
            __pyx_v_index = __pyx_t_2;

            /* "phd/gravity/gravity_tree.pyx":863
 * 
 *                     else: # node not opened particle node interaction
 *                         if(node.flags & TOP_TREE):             # <<<<<<<<<<<<<<
 *                             # skip top tree nodes
 *                             index = node.group.data.next_sibling
 */
            goto __pyx_L10;
          }

          /* "phd/gravity/gravity_tree.pyx":868
 *                         else:
 *                             # calculate node particle interaction
 *                             interaction.interact(node)             # <<<<<<<<<<<<<<
 *                             index = node.group.data.next_sibling
 * 
 */
          /*else*/ {
            ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->interact(__pyx_v_interaction, __pyx_v_node);

            /* "phd/gravity/gravity_tree.pyx":869
 *                             # calculate node particle interaction
 *                             interaction.interact(node)
 *                             index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 * 
 *     cdef void _export_walk(self, Interaction interaction):
 */
            __pyx_t_2 = __pyx_v_node->group.data.next_sibling;
            __pyx_v_index = __pyx_t_2;
          }
          __pyx_L10:;
        }
        __pyx_L9:;
      }
      __pyx_L7:;
    }
  }

  /* "phd/gravity/gravity_tree.pyx":822
 *                         index = node.group.data.next_sibling
 * 
 *     cdef void _import_walk(self, Interaction interaction):             # <<<<<<<<<<<<<<
 *         """Walk tree calculating interactions for particle that are
 *         imported to this process.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":871
 *                             index = node.group.data.next_sibling
 * 
 *     cdef void _export_walk(self, Interaction interaction):             # <<<<<<<<<<<<<<
 *         """Walk tree calculating interactions for particle on this
 *         process. Particle are also flagged for export.
 */

static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__export_walk(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *__pyx_v_interaction) {
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  int __pyx_v_index;
  int __pyx_v_node_pid;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_pid = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_export_walk", 0);

  /* "phd/gravity/gravity_tree.pyx":884
 *         cdef int index, i, node_pid
 * 
 *         cdef LongArray pid = self.toptree_leafs.get_carray("proc")             # <<<<<<<<<<<<<<
 * 
 *         # loop through each real praticle
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray(__pyx_v_self->toptree_leafs, __pyx_n_s_proc, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 884, __pyx_L1_error)
  __pyx_v_pid = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":887
 * 
 *         # loop through each real praticle
 *         while(interaction.process_particle()):             # <<<<<<<<<<<<<<
 * 
 *             # start at root or next node from previous walk
 */
  while (1) {
    __pyx_t_2 = (((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->process_particle(__pyx_v_interaction) != 0);
    if (!__pyx_t_2) break;

    /* "phd/gravity/gravity_tree.pyx":890
 * 
 *             # start at root or next node from previous walk
 *             index = interaction.start_node_index()             # <<<<<<<<<<<<<<
 *             while(index != ROOT_SIBLING):
 * 
 */
    __pyx_v_index = ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->start_node_index(__pyx_v_interaction);

    /* "phd/gravity/gravity_tree.pyx":891
 *             # start at root or next node from previous walk
 *             index = interaction.start_node_index()
 *             while(index != ROOT_SIBLING):             # <<<<<<<<<<<<<<
 * 
 *                 node = &self.nodes.array[index]
 */
    while (1) {
      __pyx_t_2 = ((__pyx_v_index != __pyx_e_3phd_7gravity_12gravity_tree_ROOT_SIBLING) != 0);
      if (!__pyx_t_2) break;

      /* "phd/gravity/gravity_tree.pyx":893
 *             while(index != ROOT_SIBLING):
 * 
 *                 node = &self.nodes.array[index]             # <<<<<<<<<<<<<<
 *                 if(node.flags & LEAF):
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):
 */
      __pyx_v_node = (&(__pyx_v_self->nodes->array[__pyx_v_index]));

      /* "phd/gravity/gravity_tree.pyx":894
 * 
 *                 node = &self.nodes.array[index]
 *                 if(node.flags & LEAF):             # <<<<<<<<<<<<<<
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):
 *                         if(interaction.splitter.split(node)):
 */
      __pyx_t_2 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_LEAF) != 0);
      if (__pyx_t_2) {

        /* "phd/gravity/gravity_tree.pyx":895
 *                 node = &self.nodes.array[index]
 *                 if(node.flags & LEAF):
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):             # <<<<<<<<<<<<<<
 *                         if(interaction.splitter.split(node)):
 * 
 */
        __pyx_t_2 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_TOP_TREE_LEAF_REMOTE) != 0);
        if (__pyx_t_2) {

          /* "phd/gravity/gravity_tree.pyx":896
 *                 if(node.flags & LEAF):
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):
 *                         if(interaction.splitter.split(node)):             # <<<<<<<<<<<<<<
 * 
 *                             # node opend check if particle alreay flagged
 */
          __pyx_t_2 = (((struct __pyx_vtabstruct_3phd_7gravity_8splitter_Splitter *)__pyx_v_interaction->splitter->__pyx_vtab)->split(__pyx_v_interaction->splitter, __pyx_v_node) != 0);
          if (__pyx_t_2) {

            /* "phd/gravity/gravity_tree.pyx":899
 * 
 *                             # node opend check if particle alreay flagged
 *                             node_pid = pid.data[self.toptree_leaf_map[index]]             # <<<<<<<<<<<<<<
 *                             if interaction.flag_pid[node_pid]:
 *                                 index = node.group.data.next_sibling
 */
            __pyx_v_node_pid = (__pyx_v_pid->data[(__pyx_v_self->toptree_leaf_map[__pyx_v_index])]);

            /* "phd/gravity/gravity_tree.pyx":900
 *                             # node opend check if particle alreay flagged
 *                             node_pid = pid.data[self.toptree_leaf_map[index]]
 *                             if interaction.flag_pid[node_pid]:             # <<<<<<<<<<<<<<
 *                                 index = node.group.data.next_sibling
 *                             else:
 */
            __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_interaction->flag_pid), __pyx_v_node_pid, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 900, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 900, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_2) {

              /* "phd/gravity/gravity_tree.pyx":901
 *                             node_pid = pid.data[self.toptree_leaf_map[index]]
 *                             if interaction.flag_pid[node_pid]:
 *                                 index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 *                             else:
 * 
 */
              __pyx_t_3 = __pyx_v_node->group.data.next_sibling;
              __pyx_v_index = __pyx_t_3;

              /* "phd/gravity/gravity_tree.pyx":900
 *                             # node opend check if particle alreay flagged
 *                             node_pid = pid.data[self.toptree_leaf_map[index]]
 *                             if interaction.flag_pid[node_pid]:             # <<<<<<<<<<<<<<
 *                                 index = node.group.data.next_sibling
 *                             else:
 */
              goto __pyx_L10;
            }

            /* "phd/gravity/gravity_tree.pyx":905
 * 
 *                                 # particle exported to pid
 *                                 interaction.flag_pid[node_pid] = 1             # <<<<<<<<<<<<<<
 * 
 *                                 # node opened flag for export
 */
            /*else*/ {
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_interaction->flag_pid), __pyx_v_node_pid, __pyx_int_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 905, __pyx_L1_error)

              /* "phd/gravity/gravity_tree.pyx":909
 *                                 # node opened flag for export
 *                                 self.buffer_ids[self.buffer_size].index =\
 *                                         interaction.current             # <<<<<<<<<<<<<<
 *                                 self.buffer_ids[self.buffer_size].proc =\
 *                                         node_pid
 */
              __pyx_t_4 = __pyx_v_interaction->current;

              /* "phd/gravity/gravity_tree.pyx":908
 * 
 *                                 # node opened flag for export
 *                                 self.buffer_ids[self.buffer_size].index =\             # <<<<<<<<<<<<<<
 *                                         interaction.current
 *                                 self.buffer_ids[self.buffer_size].proc =\
 */
              (__pyx_v_self->buffer_ids[__pyx_v_self->buffer_size]).index = __pyx_t_4;

              /* "phd/gravity/gravity_tree.pyx":910
 *                                 self.buffer_ids[self.buffer_size].index =\
 *                                         interaction.current
 *                                 self.buffer_ids[self.buffer_size].proc =\             # <<<<<<<<<<<<<<
 *                                         node_pid
 * 
 */
              (__pyx_v_self->buffer_ids[__pyx_v_self->buffer_size]).proc = __pyx_v_node_pid;

              /* "phd/gravity/gravity_tree.pyx":913
 *                                         node_pid
 * 
 *                                 self.buffer_size += 1             # <<<<<<<<<<<<<<
 * 
 *                                 # check if buffer is full, halt walk if true
 */
              __pyx_v_self->buffer_size = (__pyx_v_self->buffer_size + 1);

              /* "phd/gravity/gravity_tree.pyx":916
 * 
 *                                 # check if buffer is full, halt walk if true
 *                                 if self.buffer_size == self.max_buffer_size:             # <<<<<<<<<<<<<<
 *                                     # save node to continue walk
 *                                     interaction.particle_not_finished(
 */
              __pyx_t_2 = ((__pyx_v_self->buffer_size == __pyx_v_self->max_buffer_size) != 0);
              if (__pyx_t_2) {

                /* "phd/gravity/gravity_tree.pyx":918
 *                                 if self.buffer_size == self.max_buffer_size:
 *                                     # save node to continue walk
 *                                     interaction.particle_not_finished(             # <<<<<<<<<<<<<<
 *                                             node.group.data.next_sibling)
 *                                     return # break out of walk
 */
                ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->particle_not_finished(__pyx_v_interaction, __pyx_v_node->group.data.next_sibling);

                /* "phd/gravity/gravity_tree.pyx":920
 *                                     interaction.particle_not_finished(
 *                                             node.group.data.next_sibling)
 *                                     return # break out of walk             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     index = node.group.data.next_sibling
 */
                goto __pyx_L0;

                /* "phd/gravity/gravity_tree.pyx":916
 * 
 *                                 # check if buffer is full, halt walk if true
 *                                 if self.buffer_size == self.max_buffer_size:             # <<<<<<<<<<<<<<
 *                                     # save node to continue walk
 *                                     interaction.particle_not_finished(
 */
              }

              /* "phd/gravity/gravity_tree.pyx":922
 *                                     return # break out of walk
 *                                 else:
 *                                     index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 * 
 *                         else: # node not opened particle node interaction
 */
              /*else*/ {
                __pyx_t_3 = __pyx_v_node->group.data.next_sibling;
                __pyx_v_index = __pyx_t_3;
              }
            }
            __pyx_L10:;

            /* "phd/gravity/gravity_tree.pyx":896
 *                 if(node.flags & LEAF):
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):
 *                         if(interaction.splitter.split(node)):             # <<<<<<<<<<<<<<
 * 
 *                             # node opend check if particle alreay flagged
 */
            goto __pyx_L9;
          }

          /* "phd/gravity/gravity_tree.pyx":925
 * 
 *                         else: # node not opened particle node interaction
 *                             interaction.interact(node)             # <<<<<<<<<<<<<<
 *                             index = node.group.data.next_sibling
 * 
 */
          /*else*/ {
            ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->interact(__pyx_v_interaction, __pyx_v_node);

            /* "phd/gravity/gravity_tree.pyx":926
 *                         else: # node not opened particle node interaction
 *                             interaction.interact(node)
 *                             index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 * 
 *                     else: # particle particle interaction
 */
            __pyx_t_3 = __pyx_v_node->group.data.next_sibling;
            __pyx_v_index = __pyx_t_3;
          }
          __pyx_L9:;

          /* "phd/gravity/gravity_tree.pyx":895
 *                 node = &self.nodes.array[index]
 *                 if(node.flags & LEAF):
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):             # <<<<<<<<<<<<<<
 *                         if(interaction.splitter.split(node)):
 * 
 */
          goto __pyx_L8;
        }

        /* "phd/gravity/gravity_tree.pyx":929
 * 
 *                     else: # particle particle interaction
 *                         interaction.interact(node)             # <<<<<<<<<<<<<<
 *                         index = node.group.data.next_sibling
 * 
 */
        /*else*/ {
          ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->interact(__pyx_v_interaction, __pyx_v_node);

          /* "phd/gravity/gravity_tree.pyx":930
 *                     else: # particle particle interaction
 *                         interaction.interact(node)
 *                         index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 * 
 *                 else: # check if node can be opened
 */
          __pyx_t_3 = __pyx_v_node->group.data.next_sibling;
          __pyx_v_index = __pyx_t_3;
        }
        __pyx_L8:;

        /* "phd/gravity/gravity_tree.pyx":894
 * 
 *                 node = &self.nodes.array[index]
 *                 if(node.flags & LEAF):             # <<<<<<<<<<<<<<
 *                     if(node.flags & TOP_TREE_LEAF_REMOTE):
 *                         if(interaction.splitter.split(node)):
 */
        goto __pyx_L7;
      }

      /* "phd/gravity/gravity_tree.pyx":933
 * 
 *                 else: # check if node can be opened
 *                     if(interaction.splitter.split(node)):             # <<<<<<<<<<<<<<
 *                         # travel down node
 *                         index = node.group.data.first_child
 */
      /*else*/ {
        __pyx_t_2 = (((struct __pyx_vtabstruct_3phd_7gravity_8splitter_Splitter *)__pyx_v_interaction->splitter->__pyx_vtab)->split(__pyx_v_interaction->splitter, __pyx_v_node) != 0);
        if (__pyx_t_2) {

          /* "phd/gravity/gravity_tree.pyx":935
 *                     if(interaction.splitter.split(node)):
 *                         # travel down node
 *                         index = node.group.data.first_child             # <<<<<<<<<<<<<<
 * 
 *                     else: # node not opened particle node interaction
 */
          __pyx_t_3 = __pyx_v_node->group.data.first_child;
          __pyx_v_index = __pyx_t_3;

          /* "phd/gravity/gravity_tree.pyx":933
 * 
 *                 else: # check if node can be opened
 *                     if(interaction.splitter.split(node)):             # <<<<<<<<<<<<<<
 *                         # travel down node
 *                         index = node.group.data.first_child
 */
          goto __pyx_L12;
        }

        /* "phd/gravity/gravity_tree.pyx":938
 * 
 *                     else: # node not opened particle node interaction
 *                         interaction.interact(node)             # <<<<<<<<<<<<<<
 *                         index = node.group.data.next_sibling
 * 
 */
        /*else*/ {
          ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->interact(__pyx_v_interaction, __pyx_v_node);

          /* "phd/gravity/gravity_tree.pyx":939
 *                     else: # node not opened particle node interaction
 *                         interaction.interact(node)
 *                         index = node.group.data.next_sibling             # <<<<<<<<<<<<<<
 * 
 *             # ready for next particle
 */
          __pyx_t_3 = __pyx_v_node->group.data.next_sibling;
          __pyx_v_index = __pyx_t_3;
        }
        __pyx_L12:;
      }
      __pyx_L7:;
    }

    /* "phd/gravity/gravity_tree.pyx":942
 * 
 *             # ready for next particle
 *             interaction.particle_finished()             # <<<<<<<<<<<<<<
 * 
 *     cdef void _parallel_walk(self, Interaction interaction, CarrayContainer particles):
 */
    ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_interaction->__pyx_vtab)->particle_finished(__pyx_v_interaction);
  }

  /* "phd/gravity/gravity_tree.pyx":871
 *                             index = node.group.data.next_sibling
 * 
 *     cdef void _export_walk(self, Interaction interaction):             # <<<<<<<<<<<<<<
 *         """Walk tree calculating interactions for particle on this
 *         process. Particle are also flagged for export.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("phd.gravity.gravity_tree.GravityTree._export_walk", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pid);
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":944
 *             interaction.particle_finished()
 * 
 *     cdef void _parallel_walk(self, Interaction interaction, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Walk the tree calculating interactions. Interactions can be any
 *         calculation between particles.
 */

static void __pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__parallel_walk(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_7gravity_11interaction_Interaction *__pyx_v_interaction, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  int __pyx_v_i;
  long __pyx_v_num_import;
  PyArrayObject *__pyx_v_loc_done = 0;
  PyArrayObject *__pyx_v_glb_done = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyArrayObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  long __pyx_t_15;
  struct __pyx_opt_args_3phd_7gravity_11interaction_11Interaction_initialize_particles __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_parallel_walk", 0);

  /* "phd/gravity/gravity_tree.pyx":962
 *         cdef np.ndarray loc_done, glb_done
 * 
 *         loc_done = np.zeros(1, dtype=np.int32)             # <<<<<<<<<<<<<<
 *         glb_done = np.zeros(1, dtype=np.int32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 962, __pyx_L1_error)
  __pyx_v_loc_done = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "phd/gravity/gravity_tree.pyx":963
 * 
 *         loc_done = np.zeros(1, dtype=np.int32)
 *         glb_done = np.zeros(1, dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *         # clear out buffers
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 963, __pyx_L1_error)
  __pyx_v_glb_done = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "phd/gravity/gravity_tree.pyx":966
 * 
 *         # clear out buffers
 *         self.buffer_size = 0             # <<<<<<<<<<<<<<
 * 
 *         # setup local particles for walk
 */
  __pyx_v_self->buffer_size = 0;

  /* "phd/gravity/gravity_tree.pyx":969
 * 
 *         # setup local particles for walk
 *         while True:             # <<<<<<<<<<<<<<
 * 
 *             # reset buffers
 */
  while (1) {

    /* "phd/gravity/gravity_tree.pyx":972
 * 
 *             # reset buffers
 *             self.buffer_size = 0             # <<<<<<<<<<<<<<
 *             self.indices.resize(self.buffer_size)
 *             self.buffer_import.resize(self.buffer_size)
 */
    __pyx_v_self->buffer_size = 0;

    /* "phd/gravity/gravity_tree.pyx":973
 *             # reset buffers
 *             self.buffer_size = 0
 *             self.indices.resize(self.buffer_size)             # <<<<<<<<<<<<<<
 *             self.buffer_import.resize(self.buffer_size)
 *             self.buffer_export.resize(self.buffer_size)
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_self->indices->__pyx_base.__pyx_vtab)->__pyx_base.resize(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_self->indices), __pyx_v_self->buffer_size, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "phd/gravity/gravity_tree.pyx":974
 *             self.buffer_size = 0
 *             self.indices.resize(self.buffer_size)
 *             self.buffer_import.resize(self.buffer_size)             # <<<<<<<<<<<<<<
 *             self.buffer_export.resize(self.buffer_size)
 * 
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->buffer_import->__pyx_vtab)->resize(__pyx_v_self->buffer_import, __pyx_v_self->buffer_size, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "phd/gravity/gravity_tree.pyx":975
 *             self.indices.resize(self.buffer_size)
 *             self.buffer_import.resize(self.buffer_size)
 *             self.buffer_export.resize(self.buffer_size)             # <<<<<<<<<<<<<<
 * 
 *             # reset import/export counts
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->buffer_export->__pyx_vtab)->resize(__pyx_v_self->buffer_export, __pyx_v_self->buffer_size, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "phd/gravity/gravity_tree.pyx":978
 * 
 *             # reset import/export counts
 *             for i in range(phd._size):             # <<<<<<<<<<<<<<
 *                 self.send_cnts[i] = 0
 *                 self.recv_cnts[i] = 0
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "phd/gravity/gravity_tree.pyx":979
 *             # reset import/export counts
 *             for i in range(phd._size):
 *                 self.send_cnts[i] = 0             # <<<<<<<<<<<<<<
 *                 self.recv_cnts[i] = 0
 * 
 */
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_cnts), __pyx_v_i, __pyx_int_0, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 979, __pyx_L1_error)

      /* "phd/gravity/gravity_tree.pyx":980
 *             for i in range(phd._size):
 *                 self.send_cnts[i] = 0
 *                 self.recv_cnts[i] = 0             # <<<<<<<<<<<<<<
 * 
 *             # perform walk while flagging particles for export
 */
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->recv_cnts), __pyx_v_i, __pyx_int_0, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 980, __pyx_L1_error)
    }

    /* "phd/gravity/gravity_tree.pyx":984
 *             # perform walk while flagging particles for export
 *             # once the buffer is full the walk will hault
 *             self._export_walk(self.export_interaction)             # <<<<<<<<<<<<<<
 *             if self.buffer_size:
 * 
 */
    __pyx_t_4 = ((PyObject *)__pyx_v_self->export_interaction);
    __Pyx_INCREF(__pyx_t_4);
    ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_export_walk(__pyx_v_self, ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)__pyx_t_4));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":985
 *             # once the buffer is full the walk will hault
 *             self._export_walk(self.export_interaction)
 *             if self.buffer_size:             # <<<<<<<<<<<<<<
 * 
 *                 # put particles in process order
 */
    __pyx_t_8 = (__pyx_v_self->buffer_size != 0);
    if (__pyx_t_8) {

      /* "phd/gravity/gravity_tree.pyx":988
 * 
 *                 # put particles in process order
 *                 qsort(<void*> self.buffer_ids, <size_t> self.buffer_size,             # <<<<<<<<<<<<<<
 *                         sizeof(PairId), proc_compare)
 * 
 */
      qsort(((void *)__pyx_v_self->buffer_ids), ((size_t)__pyx_v_self->buffer_size), (sizeof(struct __pyx_t_3phd_7gravity_12gravity_tree_PairId)), __pyx_f_3phd_7gravity_12gravity_tree_proc_compare);

      /* "phd/gravity/gravity_tree.pyx":993
 *                 # copy particle indices in process order and count
 *                 # the number number particles export per processor
 *                 self.indices.resize(self.buffer_size)             # <<<<<<<<<<<<<<
 *                 for i in range(self.buffer_size):
 *                     self.indices.data[i] = self.buffer_ids[i].index
 */
      __pyx_t_4 = ((struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *)__pyx_v_self->indices->__pyx_base.__pyx_vtab)->__pyx_base.resize(((struct __pyx_obj_3phd_5utils_6carray_BaseArray *)__pyx_v_self->indices), __pyx_v_self->buffer_size, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "phd/gravity/gravity_tree.pyx":994
 *                 # the number number particles export per processor
 *                 self.indices.resize(self.buffer_size)
 *                 for i in range(self.buffer_size):             # <<<<<<<<<<<<<<
 *                     self.indices.data[i] = self.buffer_ids[i].index
 *                     self.send_cnts[self.buffer_ids[i].proc] += 1
 */
      __pyx_t_7 = __pyx_v_self->buffer_size;
      __pyx_t_9 = __pyx_t_7;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;

        /* "phd/gravity/gravity_tree.pyx":995
 *                 self.indices.resize(self.buffer_size)
 *                 for i in range(self.buffer_size):
 *                     self.indices.data[i] = self.buffer_ids[i].index             # <<<<<<<<<<<<<<
 *                     self.send_cnts[self.buffer_ids[i].proc] += 1
 * 
 */
        __pyx_t_11 = (__pyx_v_self->buffer_ids[__pyx_v_i]).index;
        (__pyx_v_self->indices->data[__pyx_v_i]) = __pyx_t_11;

        /* "phd/gravity/gravity_tree.pyx":996
 *                 for i in range(self.buffer_size):
 *                     self.indices.data[i] = self.buffer_ids[i].index
 *                     self.send_cnts[self.buffer_ids[i].proc] += 1             # <<<<<<<<<<<<<<
 * 
 *                 # copy flagged particles into buffer
 */
        __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
        __pyx_t_12 = __pyx_v_self->send_cnts;
        __pyx_t_11 = (__pyx_v_self->buffer_ids[__pyx_v_i]).proc;
        __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_t_12), __pyx_t_11, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_t_12), __pyx_t_11, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_12)); __pyx_t_12 = 0;
      }

      /* "phd/gravity/gravity_tree.pyx":999
 * 
 *                 # copy flagged particles into buffer
 *                 self.buffer_export.resize(self.buffer_size)             # <<<<<<<<<<<<<<
 *                 self.buffer_export.copy(particles, self.indices,
 *                         particles.carray_named_groups["gravity-walk-export"])
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->buffer_export->__pyx_vtab)->resize(__pyx_v_self->buffer_export, __pyx_v_self->buffer_size, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "phd/gravity/gravity_tree.pyx":1000
 *                 # copy flagged particles into buffer
 *                 self.buffer_export.resize(self.buffer_size)
 *                 self.buffer_export.copy(particles, self.indices,             # <<<<<<<<<<<<<<
 *                         particles.carray_named_groups["gravity-walk-export"])
 * 
 */
      __pyx_t_3 = ((PyObject *)__pyx_v_self->indices);
      __Pyx_INCREF(__pyx_t_3);

      /* "phd/gravity/gravity_tree.pyx":1001
 *                 self.buffer_export.resize(self.buffer_size)
 *                 self.buffer_export.copy(particles, self.indices,
 *                         particles.carray_named_groups["gravity-walk-export"])             # <<<<<<<<<<<<<<
 * 
 *             # send number of exports to all processors
 */
      if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1001, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_gravity_walk_export); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(PyList_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 1001, __pyx_L1_error)

      /* "phd/gravity/gravity_tree.pyx":1000
 *                 # copy flagged particles into buffer
 *                 self.buffer_export.resize(self.buffer_size)
 *                 self.buffer_export.copy(particles, self.indices,             # <<<<<<<<<<<<<<
 *                         particles.carray_named_groups["gravity-walk-export"])
 * 
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->buffer_export->__pyx_vtab)->copy(__pyx_v_self->buffer_export, __pyx_v_particles, ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_3), ((PyObject*)__pyx_t_4), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "phd/gravity/gravity_tree.pyx":985
 *             # once the buffer is full the walk will hault
 *             self._export_walk(self.export_interaction)
 *             if self.buffer_size:             # <<<<<<<<<<<<<<
 * 
 *                 # put particles in process order
 */
    }

    /* "phd/gravity/gravity_tree.pyx":1004
 * 
 *             # send number of exports to all processors
 *             phd._comm.Alltoall([self.send_cnts, MPI.INT],             # <<<<<<<<<<<<<<
 *                     [self.recv_cnts, MPI.INT])
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_phd); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_comm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Alltoall); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_MPI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_INT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_cnts));
    PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self->send_cnts));
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "phd/gravity/gravity_tree.pyx":1005
 *             # send number of exports to all processors
 *             phd._comm.Alltoall([self.send_cnts, MPI.INT],
 *                     [self.recv_cnts, MPI.INT])             # <<<<<<<<<<<<<<
 * 
 *             # how many incoming particles
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MPI); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_INT); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_cnts));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_cnts));
    PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->recv_cnts));
    __Pyx_GIVEREF(__pyx_t_13);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_13);
    __pyx_t_13 = 0;
    __pyx_t_13 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_t_3, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_t_3, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_13) {
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_7, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_7, __pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":1008
 * 
 *             # how many incoming particles
 *             num_import = 0             # <<<<<<<<<<<<<<
 *             for i in range(phd._size):
 *                 num_import += self.recv_cnts[i]
 */
    __pyx_v_num_import = 0;

    /* "phd/gravity/gravity_tree.pyx":1009
 *             # how many incoming particles
 *             num_import = 0
 *             for i in range(phd._size):             # <<<<<<<<<<<<<<
 *                 num_import += self.recv_cnts[i]
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_phd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "phd/gravity/gravity_tree.pyx":1010
 *             num_import = 0
 *             for i in range(phd._size):
 *                 num_import += self.recv_cnts[i]             # <<<<<<<<<<<<<<
 * 
 *             # create displacement arrays
 */
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_num_import); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->recv_cnts), __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_14 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_long(__pyx_t_14); if (unlikely((__pyx_t_15 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_v_num_import = __pyx_t_15;
    }

    /* "phd/gravity/gravity_tree.pyx":1013
 * 
 *             # create displacement arrays
 *             self.send_disp[0] = self.recv_disp[0] = 0             # <<<<<<<<<<<<<<
 *             for i in range(1, phd._size):
 *                 self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_disp), 0, __pyx_int_0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1013, __pyx_L1_error)
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->recv_disp), 0, __pyx_int_0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1013, __pyx_L1_error)

    /* "phd/gravity/gravity_tree.pyx":1014
 *             # create displacement arrays
 *             self.send_disp[0] = self.recv_disp[0] = 0
 *             for i in range(1, phd._size):             # <<<<<<<<<<<<<<
 *                 self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 *                 self.recv_disp[i] = self.recv_cnts[i-1] + self.recv_disp[i-1]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_phd); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1014, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 1; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "phd/gravity/gravity_tree.pyx":1015
 *             self.send_disp[0] = self.recv_disp[0] = 0
 *             for i in range(1, phd._size):
 *                 self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]             # <<<<<<<<<<<<<<
 *                 self.recv_disp[i] = self.recv_cnts[i-1] + self.recv_disp[i-1]
 * 
 */
      __pyx_t_15 = (__pyx_v_i - 1);
      __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->send_cnts), __pyx_t_15, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_15 = (__pyx_v_i - 1);
      __pyx_t_14 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->send_disp), __pyx_t_15, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->send_disp), __pyx_v_i, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "phd/gravity/gravity_tree.pyx":1016
 *             for i in range(1, phd._size):
 *                 self.send_disp[i] = self.send_cnts[i-1] + self.send_disp[i-1]
 *                 self.recv_disp[i] = self.recv_cnts[i-1] + self.recv_disp[i-1]             # <<<<<<<<<<<<<<
 * 
 *             # resize to fit number of particle incoming
 */
      __pyx_t_15 = (__pyx_v_i - 1);
      __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->recv_cnts), __pyx_t_15, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_15 = (__pyx_v_i - 1);
      __pyx_t_14 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->recv_disp), __pyx_t_15, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_self->recv_disp), __pyx_v_i, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "phd/gravity/gravity_tree.pyx":1019
 * 
 *             # resize to fit number of particle incoming
 *             self.buffer_import.resize(num_import)             # <<<<<<<<<<<<<<
 * 
 *             # send our particles / recieve particles
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->buffer_import->__pyx_vtab)->resize(__pyx_v_self->buffer_import, __pyx_v_num_import, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":1022
 * 
 *             # send our particles / recieve particles
 *             exchange_particles(self.buffer_import, self.buffer_export,             # <<<<<<<<<<<<<<
 *                     self.send_cnts, self.recv_cnts,
 *                     0, phd._comm,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_exchange_particles); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);

    /* "phd/gravity/gravity_tree.pyx":1024
 *             exchange_particles(self.buffer_import, self.buffer_export,
 *                     self.send_cnts, self.recv_cnts,
 *                     0, phd._comm,             # <<<<<<<<<<<<<<
 *                     particles.carray_named_groups["gravity-walk-export"],
 *                     self.send_disp, self.recv_disp)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_phd); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_comm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":1025
 *                     self.send_cnts, self.recv_cnts,
 *                     0, phd._comm,
 *                     particles.carray_named_groups["gravity-walk-export"],             # <<<<<<<<<<<<<<
 *                     self.send_disp, self.recv_disp)
 * 
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1025, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_gravity_walk_export); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1025, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "phd/gravity/gravity_tree.pyx":1026
 *                     0, phd._comm,
 *                     particles.carray_named_groups["gravity-walk-export"],
 *                     self.send_disp, self.recv_disp)             # <<<<<<<<<<<<<<
 * 
 *             # walk imported particles
 */
    __pyx_t_3 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[10] = {__pyx_t_3, ((PyObject *)__pyx_v_self->buffer_import), ((PyObject *)__pyx_v_self->buffer_export), ((PyObject *)__pyx_v_self->send_cnts), ((PyObject *)__pyx_v_self->recv_cnts), __pyx_int_0, __pyx_t_2, __pyx_t_4, ((PyObject *)__pyx_v_self->send_disp), ((PyObject *)__pyx_v_self->recv_disp)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_7, 9+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[10] = {__pyx_t_3, ((PyObject *)__pyx_v_self->buffer_import), ((PyObject *)__pyx_v_self->buffer_export), ((PyObject *)__pyx_v_self->send_cnts), ((PyObject *)__pyx_v_self->recv_cnts), __pyx_int_0, __pyx_t_2, __pyx_t_4, ((PyObject *)__pyx_v_self->send_disp), ((PyObject *)__pyx_v_self->recv_disp)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_7, 9+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(9+__pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->buffer_import));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->buffer_import));
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->buffer_import));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->buffer_export));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->buffer_export));
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_7, ((PyObject *)__pyx_v_self->buffer_export));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_cnts));
      PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_7, ((PyObject *)__pyx_v_self->send_cnts));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_cnts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_cnts));
      PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_7, ((PyObject *)__pyx_v_self->recv_cnts));
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_13, 4+__pyx_t_7, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_13, 5+__pyx_t_7, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_13, 6+__pyx_t_7, __pyx_t_4);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->send_disp));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_disp));
      PyTuple_SET_ITEM(__pyx_t_13, 7+__pyx_t_7, ((PyObject *)__pyx_v_self->send_disp));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_disp));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_disp));
      PyTuple_SET_ITEM(__pyx_t_13, 8+__pyx_t_7, ((PyObject *)__pyx_v_self->recv_disp));
      __pyx_t_2 = 0;
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":1029
 * 
 *             # walk imported particles
 *             self.import_interaction.initialize_particles(self.buffer_import, False)             # <<<<<<<<<<<<<<
 *             self._import_walk(self.import_interaction)
 * 
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->buffer_import);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_16.__pyx_n = 1;
    __pyx_t_16.local_particles = 0;
    ((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_self->import_interaction->__pyx_vtab)->initialize_particles(__pyx_v_self->import_interaction, ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1), &__pyx_t_16); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":1030
 *             # walk imported particles
 *             self.import_interaction.initialize_particles(self.buffer_import, False)
 *             self._import_walk(self.import_interaction)             # <<<<<<<<<<<<<<
 * 
 *             # recieve back our paritcles / send back particles
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->import_interaction);
    __Pyx_INCREF(__pyx_t_1);
    ((struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self->__pyx_vtab)->_import_walk(__pyx_v_self, ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":1033
 * 
 *             # recieve back our paritcles / send back particles
 *             exchange_particles(self.buffer_export, self.buffer_import,             # <<<<<<<<<<<<<<
 *                     self.recv_cnts, self.send_cnts,
 *                     0, phd._comm,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_exchange_particles); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1033, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);

    /* "phd/gravity/gravity_tree.pyx":1035
 *             exchange_particles(self.buffer_export, self.buffer_import,
 *                     self.recv_cnts, self.send_cnts,
 *                     0, phd._comm,             # <<<<<<<<<<<<<<
 *                     particles.carray_named_groups["gravity-walk-import"],
 *                     self.recv_disp, self.send_disp)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_phd); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1035, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_comm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1035, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "phd/gravity/gravity_tree.pyx":1036
 *                     self.recv_cnts, self.send_cnts,
 *                     0, phd._comm,
 *                     particles.carray_named_groups["gravity-walk-import"],             # <<<<<<<<<<<<<<
 *                     self.recv_disp, self.send_disp)
 * 
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1036, __pyx_L1_error)
    }
    __pyx_t_13 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_gravity_walk_import); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1036, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);

    /* "phd/gravity/gravity_tree.pyx":1037
 *                     0, phd._comm,
 *                     particles.carray_named_groups["gravity-walk-import"],
 *                     self.recv_disp, self.send_disp)             # <<<<<<<<<<<<<<
 * 
 *             # copy back our data
 */
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[10] = {__pyx_t_2, ((PyObject *)__pyx_v_self->buffer_export), ((PyObject *)__pyx_v_self->buffer_import), ((PyObject *)__pyx_v_self->recv_cnts), ((PyObject *)__pyx_v_self->send_cnts), __pyx_int_0, __pyx_t_4, __pyx_t_13, ((PyObject *)__pyx_v_self->recv_disp), ((PyObject *)__pyx_v_self->send_disp)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_7, 9+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[10] = {__pyx_t_2, ((PyObject *)__pyx_v_self->buffer_export), ((PyObject *)__pyx_v_self->buffer_import), ((PyObject *)__pyx_v_self->recv_cnts), ((PyObject *)__pyx_v_self->send_cnts), __pyx_int_0, __pyx_t_4, __pyx_t_13, ((PyObject *)__pyx_v_self->recv_disp), ((PyObject *)__pyx_v_self->send_disp)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_7, 9+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(9+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self->buffer_export));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->buffer_export));
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_7, ((PyObject *)__pyx_v_self->buffer_export));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->buffer_import));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->buffer_import));
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_7, ((PyObject *)__pyx_v_self->buffer_import));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_cnts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_cnts));
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_7, ((PyObject *)__pyx_v_self->recv_cnts));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_cnts));
      PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_7, ((PyObject *)__pyx_v_self->send_cnts));
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_7, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 5+__pyx_t_7, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_3, 6+__pyx_t_7, __pyx_t_13);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_disp));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->recv_disp));
      PyTuple_SET_ITEM(__pyx_t_3, 7+__pyx_t_7, ((PyObject *)__pyx_v_self->recv_disp));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->send_disp));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->send_disp));
      PyTuple_SET_ITEM(__pyx_t_3, 8+__pyx_t_7, ((PyObject *)__pyx_v_self->send_disp));
      __pyx_t_4 = 0;
      __pyx_t_13 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/gravity/gravity_tree.pyx":1040
 * 
 *             # copy back our data
 *             particles.add(self.buffer_export, self.indices,             # <<<<<<<<<<<<<<
 *                     particles.carray_named_groups["gravity-walk-import"])
 * 
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->buffer_export);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_14 = ((PyObject *)__pyx_v_self->indices);
    __Pyx_INCREF(__pyx_t_14);

    /* "phd/gravity/gravity_tree.pyx":1041
 *             # copy back our data
 *             particles.add(self.buffer_export, self.indices,
 *                     particles.carray_named_groups["gravity-walk-import"])             # <<<<<<<<<<<<<<
 * 
 *             # let all processors know if walk is complete
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1041, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_gravity_walk_import); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1041, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyList_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 1041, __pyx_L1_error)

    /* "phd/gravity/gravity_tree.pyx":1040
 * 
 *             # copy back our data
 *             particles.add(self.buffer_export, self.indices,             # <<<<<<<<<<<<<<
 *                     particles.carray_named_groups["gravity-walk-import"])
 * 
 */
    __pyx_t_13 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->add(__pyx_v_particles, ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1), ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_14), ((PyObject*)__pyx_t_3), 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "phd/gravity/gravity_tree.pyx":1044
 * 
 *             # let all processors know if walk is complete
 *             glb_done[0] = 0             # <<<<<<<<<<<<<<
 *             loc_done[0] = self.export_interaction.done_processing()
 *             phd._comm.Allreduce([loc_done, MPI.INT], [glb_done, MPI.INT], op=MPI.SUM)
 */
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_glb_done), 0, __pyx_int_0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1044, __pyx_L1_error)

    /* "phd/gravity/gravity_tree.pyx":1045
 *             # let all processors know if walk is complete
 *             glb_done[0] = 0
 *             loc_done[0] = self.export_interaction.done_processing()             # <<<<<<<<<<<<<<
 *             phd._comm.Allreduce([loc_done, MPI.INT], [glb_done, MPI.INT], op=MPI.SUM)
 * 
 */
    __pyx_t_13 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction *)__pyx_v_self->export_interaction->__pyx_vtab)->done_processing(__pyx_v_self->export_interaction)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_loc_done), 0, __pyx_t_13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 1045, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "phd/gravity/gravity_tree.pyx":1046
 *             glb_done[0] = 0
 *             loc_done[0] = self.export_interaction.done_processing()
 *             phd._comm.Allreduce([loc_done, MPI.INT], [glb_done, MPI.INT], op=MPI.SUM)             # <<<<<<<<<<<<<<
 * 
 *             # if all processors tree walks are done exit
 */
    __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_phd); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_comm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Allreduce); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_MPI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_INT); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_loc_done));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_loc_done));
    PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_loc_done));
    __Pyx_GIVEREF(__pyx_t_14);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_14);
    __pyx_t_14 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_MPI); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_INT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyList_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_INCREF(((PyObject *)__pyx_v_glb_done));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_glb_done));
    PyList_SET_ITEM(__pyx_t_14, 0, ((PyObject *)__pyx_v_glb_done));
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_14);
    __pyx_t_3 = 0;
    __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_MPI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_SUM); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_op, __pyx_t_4) < 0) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_1, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "phd/gravity/gravity_tree.pyx":1049
 * 
 *             # if all processors tree walks are done exit
 *             if glb_done[0] == phd._size:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_glb_done), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_phd); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (__pyx_t_8) {

      /* "phd/gravity/gravity_tree.pyx":1050
 *             # if all processors tree walks are done exit
 *             if glb_done[0] == phd._size:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *     # -- delete later --
 */
      goto __pyx_L4_break;

      /* "phd/gravity/gravity_tree.pyx":1049
 * 
 *             # if all processors tree walks are done exit
 *             if glb_done[0] == phd._size:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }
  }
  __pyx_L4_break:;

  /* "phd/gravity/gravity_tree.pyx":944
 *             interaction.particle_finished()
 * 
 *     cdef void _parallel_walk(self, Interaction interaction, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Walk the tree calculating interactions. Interactions can be any
 *         calculation between particles.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(((PyObject *)__pyx_t_12));
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_WriteUnraisable("phd.gravity.gravity_tree.GravityTree._parallel_walk", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_loc_done);
  __Pyx_XDECREF((PyObject *)__pyx_v_glb_done);
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pyx":1053
 * 
 *     # -- delete later --
 *     def dump_root_node(self):             # <<<<<<<<<<<<<<
 *         cdef Node* root
 *         cdef np.float64_t mass, width
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15dump_root_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15dump_root_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump_root_node (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14dump_root_node(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14dump_root_node(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_root;
  __pyx_t_5numpy_float64_t __pyx_v_mass;
  __pyx_t_5numpy_float64_t __pyx_v_width;
  PyObject *__pyx_v_pos = NULL;
  PyObject *__pyx_v_com = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump_root_node", 0);

  /* "phd/gravity/gravity_tree.pyx":1057
 *         cdef np.float64_t mass, width
 * 
 *         root = &self.nodes.array[0]             # <<<<<<<<<<<<<<
 *         width = root.width
 *         pos = [
 */
  __pyx_v_root = (&(__pyx_v_self->nodes->array[0]));

  /* "phd/gravity/gravity_tree.pyx":1058
 * 
 *         root = &self.nodes.array[0]
 *         width = root.width             # <<<<<<<<<<<<<<
 *         pos = [
 *             root.center[0],
 */
  __pyx_t_1 = __pyx_v_root->width;
  __pyx_v_width = __pyx_t_1;

  /* "phd/gravity/gravity_tree.pyx":1060
 *         width = root.width
 *         pos = [
 *             root.center[0],             # <<<<<<<<<<<<<<
 *             root.center[1],
 *             root.center[2]]
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_root->center[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "phd/gravity/gravity_tree.pyx":1061
 *         pos = [
 *             root.center[0],
 *             root.center[1],             # <<<<<<<<<<<<<<
 *             root.center[2]]
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_root->center[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "phd/gravity/gravity_tree.pyx":1062
 *             root.center[0],
 *             root.center[1],
 *             root.center[2]]             # <<<<<<<<<<<<<<
 * 
 *         mass = root.group.data.mass
 */
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_root->center[2])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "phd/gravity/gravity_tree.pyx":1059
 *         root = &self.nodes.array[0]
 *         width = root.width
 *         pos = [             # <<<<<<<<<<<<<<
 *             root.center[0],
 *             root.center[1],
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_pos = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "phd/gravity/gravity_tree.pyx":1064
 *             root.center[2]]
 * 
 *         mass = root.group.data.mass             # <<<<<<<<<<<<<<
 *         com = [
 *             root.group.data.com[0],
 */
  __pyx_t_1 = __pyx_v_root->group.data.mass;
  __pyx_v_mass = __pyx_t_1;

  /* "phd/gravity/gravity_tree.pyx":1066
 *         mass = root.group.data.mass
 *         com = [
 *             root.group.data.com[0],             # <<<<<<<<<<<<<<
 *             root.group.data.com[1],
 *             root.group.data.com[2]]
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_root->group.data.com[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "phd/gravity/gravity_tree.pyx":1067
 *         com = [
 *             root.group.data.com[0],
 *             root.group.data.com[1],             # <<<<<<<<<<<<<<
 *             root.group.data.com[2]]
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_root->group.data.com[1])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "phd/gravity/gravity_tree.pyx":1068
 *             root.group.data.com[0],
 *             root.group.data.com[1],
 *             root.group.data.com[2]]             # <<<<<<<<<<<<<<
 * 
 *         return pos, width, mass, com
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_root->group.data.com[2])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "phd/gravity/gravity_tree.pyx":1065
 * 
 *         mass = root.group.data.mass
 *         com = [             # <<<<<<<<<<<<<<
 *             root.group.data.com[0],
 *             root.group.data.com[1],
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_v_com = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/gravity/gravity_tree.pyx":1070
 *             root.group.data.com[2]]
 * 
 *         return pos, width, mass, com             # <<<<<<<<<<<<<<
 * 
 *     # -- delete later --
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_mass); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_pos);
  __Pyx_GIVEREF(__pyx_v_pos);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_pos);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_com);
  __Pyx_GIVEREF(__pyx_v_com);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_com);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "phd/gravity/gravity_tree.pyx":1053
 * 
 *     # -- delete later --
 *     def dump_root_node(self):             # <<<<<<<<<<<<<<
 *         cdef Node* root
 *         cdef np.float64_t mass, width
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.dump_root_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF(__pyx_v_com);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":1073
 * 
 *     # -- delete later --
 *     def dump_data(self):             # <<<<<<<<<<<<<<
 *         cdef list data_list = []
 *         cdef Node* node
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_17dump_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_17dump_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump_data (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_16dump_data(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_16dump_data(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_v_data_list = 0;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump_data", 0);

  /* "phd/gravity/gravity_tree.pyx":1074
 *     # -- delete later --
 *     def dump_data(self):
 *         cdef list data_list = []             # <<<<<<<<<<<<<<
 *         cdef Node* node
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":1078
 * 
 *         cdef int i
 *         for i in range(self.nodes.used):             # <<<<<<<<<<<<<<
 *             node = &self.nodes.array[i]
 *             if (node.flags & LEAF):
 */
  __pyx_t_2 = __pyx_v_self->nodes->used;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "phd/gravity/gravity_tree.pyx":1079
 *         cdef int i
 *         for i in range(self.nodes.used):
 *             node = &self.nodes.array[i]             # <<<<<<<<<<<<<<
 *             if (node.flags & LEAF):
 *                 data_list.append([
 */
    __pyx_v_node = (&(__pyx_v_self->nodes->array[__pyx_v_i]));

    /* "phd/gravity/gravity_tree.pyx":1080
 *         for i in range(self.nodes.used):
 *             node = &self.nodes.array[i]
 *             if (node.flags & LEAF):             # <<<<<<<<<<<<<<
 *                 data_list.append([
 *                     node.center[0],
 */
    __pyx_t_5 = ((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_LEAF) != 0);
    if (__pyx_t_5) {

      /* "phd/gravity/gravity_tree.pyx":1082
 *             if (node.flags & LEAF):
 *                 data_list.append([
 *                     node.center[0],             # <<<<<<<<<<<<<<
 *                     node.center[1],
 *                     node.center[2],
 */
      __pyx_t_1 = PyFloat_FromDouble((__pyx_v_node->center[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1082, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "phd/gravity/gravity_tree.pyx":1083
 *                 data_list.append([
 *                     node.center[0],
 *                     node.center[1],             # <<<<<<<<<<<<<<
 *                     node.center[2],
 *                     node.group.data.mass,
 */
      __pyx_t_6 = PyFloat_FromDouble((__pyx_v_node->center[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1083, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "phd/gravity/gravity_tree.pyx":1084
 *                     node.center[0],
 *                     node.center[1],
 *                     node.center[2],             # <<<<<<<<<<<<<<
 *                     node.group.data.mass,
 *                     node.group.data.com[0],
 */
      __pyx_t_7 = PyFloat_FromDouble((__pyx_v_node->center[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1084, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "phd/gravity/gravity_tree.pyx":1085
 *                     node.center[1],
 *                     node.center[2],
 *                     node.group.data.mass,             # <<<<<<<<<<<<<<
 *                     node.group.data.com[0],
 *                     node.group.data.com[1],
 */
      __pyx_t_8 = PyFloat_FromDouble(__pyx_v_node->group.data.mass); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1085, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);

      /* "phd/gravity/gravity_tree.pyx":1086
 *                     node.center[2],
 *                     node.group.data.mass,
 *                     node.group.data.com[0],             # <<<<<<<<<<<<<<
 *                     node.group.data.com[1],
 *                     node.width])
 */
      __pyx_t_9 = PyFloat_FromDouble((__pyx_v_node->group.data.com[0])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1086, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);

      /* "phd/gravity/gravity_tree.pyx":1087
 *                     node.group.data.mass,
 *                     node.group.data.com[0],
 *                     node.group.data.com[1],             # <<<<<<<<<<<<<<
 *                     node.width])
 * 
 */
      __pyx_t_10 = PyFloat_FromDouble((__pyx_v_node->group.data.com[1])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1087, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);

      /* "phd/gravity/gravity_tree.pyx":1088
 *                     node.group.data.com[0],
 *                     node.group.data.com[1],
 *                     node.width])             # <<<<<<<<<<<<<<
 * 
 *         return data_list
 */
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_node->width); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1088, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);

      /* "phd/gravity/gravity_tree.pyx":1081
 *             node = &self.nodes.array[i]
 *             if (node.flags & LEAF):
 *                 data_list.append([             # <<<<<<<<<<<<<<
 *                     node.center[0],
 *                     node.center[1],
 */
      __pyx_t_12 = PyList_New(7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1081, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_6);
      PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_12, 3, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_12, 4, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_12, 5, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_12, 6, __pyx_t_11);
      __pyx_t_1 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_data_list, __pyx_t_12); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1081, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "phd/gravity/gravity_tree.pyx":1080
 *         for i in range(self.nodes.used):
 *             node = &self.nodes.array[i]
 *             if (node.flags & LEAF):             # <<<<<<<<<<<<<<
 *                 data_list.append([
 *                     node.center[0],
 */
    }
  }

  /* "phd/gravity/gravity_tree.pyx":1090
 *                     node.width])
 * 
 *         return data_list             # <<<<<<<<<<<<<<
 * 
 *     # -- delete later --
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data_list);
  __pyx_r = __pyx_v_data_list;
  goto __pyx_L0;

  /* "phd/gravity/gravity_tree.pyx":1073
 * 
 *     # -- delete later --
 *     def dump_data(self):             # <<<<<<<<<<<<<<
 *         cdef list data_list = []
 *         cdef Node* node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.dump_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":1093
 * 
 *     # -- delete later --
 *     def dump_all_data(self):             # <<<<<<<<<<<<<<
 *         cdef list data_list = []
 *         cdef Node* node
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_19dump_all_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_19dump_all_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump_all_data (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18dump_all_data(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18dump_all_data(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_v_data_list = 0;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump_all_data", 0);

  /* "phd/gravity/gravity_tree.pyx":1094
 *     # -- delete later --
 *     def dump_all_data(self):
 *         cdef list data_list = []             # <<<<<<<<<<<<<<
 *         cdef Node* node
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":1098
 * 
 *         cdef int i
 *         for i in range(self.nodes.used):             # <<<<<<<<<<<<<<
 *             node = &self.nodes.array[i]
 *             data_list.append([
 */
  __pyx_t_2 = __pyx_v_self->nodes->used;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "phd/gravity/gravity_tree.pyx":1099
 *         cdef int i
 *         for i in range(self.nodes.used):
 *             node = &self.nodes.array[i]             # <<<<<<<<<<<<<<
 *             data_list.append([
 *                 node.center[0],
 */
    __pyx_v_node = (&(__pyx_v_self->nodes->array[__pyx_v_i]));

    /* "phd/gravity/gravity_tree.pyx":1101
 *             node = &self.nodes.array[i]
 *             data_list.append([
 *                 node.center[0],             # <<<<<<<<<<<<<<
 *                 node.center[1],
 *                 node.center[2],
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_node->center[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "phd/gravity/gravity_tree.pyx":1102
 *             data_list.append([
 *                 node.center[0],
 *                 node.center[1],             # <<<<<<<<<<<<<<
 *                 node.center[2],
 *                 node.group.data.mass,
 */
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_node->center[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "phd/gravity/gravity_tree.pyx":1103
 *                 node.center[0],
 *                 node.center[1],
 *                 node.center[2],             # <<<<<<<<<<<<<<
 *                 node.group.data.mass,
 *                 node.group.data.com[0],
 */
    __pyx_t_6 = PyFloat_FromDouble((__pyx_v_node->center[2])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "phd/gravity/gravity_tree.pyx":1104
 *                 node.center[1],
 *                 node.center[2],
 *                 node.group.data.mass,             # <<<<<<<<<<<<<<
 *                 node.group.data.com[0],
 *                 node.group.data.com[1],
 */
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_node->group.data.mass); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "phd/gravity/gravity_tree.pyx":1105
 *                 node.center[2],
 *                 node.group.data.mass,
 *                 node.group.data.com[0],             # <<<<<<<<<<<<<<
 *                 node.group.data.com[1],
 *                 (node.flags) & LEAF,
 */
    __pyx_t_8 = PyFloat_FromDouble((__pyx_v_node->group.data.com[0])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "phd/gravity/gravity_tree.pyx":1106
 *                 node.group.data.mass,
 *                 node.group.data.com[0],
 *                 node.group.data.com[1],             # <<<<<<<<<<<<<<
 *                 (node.flags) & LEAF,
 *                 node.width])
 */
    __pyx_t_9 = PyFloat_FromDouble((__pyx_v_node->group.data.com[1])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "phd/gravity/gravity_tree.pyx":1107
 *                 node.group.data.com[0],
 *                 node.group.data.com[1],
 *                 (node.flags) & LEAF,             # <<<<<<<<<<<<<<
 *                 node.width])
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_From_int((__pyx_v_node->flags & __pyx_e_3phd_7gravity_12gravity_tree_LEAF)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "phd/gravity/gravity_tree.pyx":1108
 *                 node.group.data.com[1],
 *                 (node.flags) & LEAF,
 *                 node.width])             # <<<<<<<<<<<<<<
 * 
 *         return data_list
 */
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_node->width); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);

    /* "phd/gravity/gravity_tree.pyx":1100
 *         for i in range(self.nodes.used):
 *             node = &self.nodes.array[i]
 *             data_list.append([             # <<<<<<<<<<<<<<
 *                 node.center[0],
 *                 node.center[1],
 */
    __pyx_t_12 = PyList_New(8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_12, 3, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_12, 4, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_12, 5, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_12, 6, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyList_SET_ITEM(__pyx_t_12, 7, __pyx_t_11);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_data_list, __pyx_t_12); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }

  /* "phd/gravity/gravity_tree.pyx":1110
 *                 node.width])
 * 
 *         return data_list             # <<<<<<<<<<<<<<
 * 
 *     # -- delete later --
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data_list);
  __pyx_r = __pyx_v_data_list;
  goto __pyx_L0;

  /* "phd/gravity/gravity_tree.pyx":1093
 * 
 *     # -- delete later --
 *     def dump_all_data(self):             # <<<<<<<<<<<<<<
 *         cdef list data_list = []
 *         cdef Node* node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.dump_all_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":1113
 * 
 *     # -- delete later --
 *     def dump_remote(self):             # <<<<<<<<<<<<<<
 *         cdef int i, j
 *         cdef Node* node
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_21dump_remote(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_21dump_remote(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump_remote (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_20dump_remote(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_20dump_remote(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_v_j;
  struct __pyx_t_3phd_7gravity_12gravity_pool_Node *__pyx_v_node;
  PyObject *__pyx_v_data_list = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_maps = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_proc = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump_remote", 0);

  /* "phd/gravity/gravity_tree.pyx":1116
 *         cdef int i, j
 *         cdef Node* node
 *         cdef list data_list = []             # <<<<<<<<<<<<<<
 *         cdef LongArray maps = self.toptree_leafs.get_carray('map')
 *         cdef LongArray proc = self.toptree_leafs.get_carray('proc')
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":1117
 *         cdef Node* node
 *         cdef list data_list = []
 *         cdef LongArray maps = self.toptree_leafs.get_carray('map')             # <<<<<<<<<<<<<<
 *         cdef LongArray proc = self.toptree_leafs.get_carray('proc')
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray(__pyx_v_self->toptree_leafs, __pyx_n_s_map, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 1117, __pyx_L1_error)
  __pyx_v_maps = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":1118
 *         cdef list data_list = []
 *         cdef LongArray maps = self.toptree_leafs.get_carray('map')
 *         cdef LongArray proc = self.toptree_leafs.get_carray('proc')             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.toptree_leafs.get_carray_size()):
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray(__pyx_v_self->toptree_leafs, __pyx_n_s_proc, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 1118, __pyx_L1_error)
  __pyx_v_proc = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":1120
 *         cdef LongArray proc = self.toptree_leafs.get_carray('proc')
 * 
 *         for i in range(self.toptree_leafs.get_carray_size()):             # <<<<<<<<<<<<<<
 *             j = maps.data[i]
 *             node = &self.nodes.array[j]
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->toptree_leafs->__pyx_vtab)->get_carray_size(__pyx_v_self->toptree_leafs, 0);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "phd/gravity/gravity_tree.pyx":1121
 * 
 *         for i in range(self.toptree_leafs.get_carray_size()):
 *             j = maps.data[i]             # <<<<<<<<<<<<<<
 *             node = &self.nodes.array[j]
 *             data_list.append([
 */
    __pyx_v_j = (__pyx_v_maps->data[__pyx_v_i]);

    /* "phd/gravity/gravity_tree.pyx":1122
 *         for i in range(self.toptree_leafs.get_carray_size()):
 *             j = maps.data[i]
 *             node = &self.nodes.array[j]             # <<<<<<<<<<<<<<
 *             data_list.append([
 *                 node.center[0],
 */
    __pyx_v_node = (&(__pyx_v_self->nodes->array[__pyx_v_j]));

    /* "phd/gravity/gravity_tree.pyx":1124
 *             node = &self.nodes.array[j]
 *             data_list.append([
 *                 node.center[0],             # <<<<<<<<<<<<<<
 *                 node.center[1],
 *                 node.center[2],
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_node->center[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "phd/gravity/gravity_tree.pyx":1125
 *             data_list.append([
 *                 node.center[0],
 *                 node.center[1],             # <<<<<<<<<<<<<<
 *                 node.center[2],
 *                 node.group.data.mass,
 */
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_node->center[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "phd/gravity/gravity_tree.pyx":1126
 *                 node.center[0],
 *                 node.center[1],
 *                 node.center[2],             # <<<<<<<<<<<<<<
 *                 node.group.data.mass,
 *                 node.group.data.com[0],
 */
    __pyx_t_6 = PyFloat_FromDouble((__pyx_v_node->center[2])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "phd/gravity/gravity_tree.pyx":1127
 *                 node.center[1],
 *                 node.center[2],
 *                 node.group.data.mass,             # <<<<<<<<<<<<<<
 *                 node.group.data.com[0],
 *                 node.group.data.com[1],
 */
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_node->group.data.mass); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "phd/gravity/gravity_tree.pyx":1128
 *                 node.center[2],
 *                 node.group.data.mass,
 *                 node.group.data.com[0],             # <<<<<<<<<<<<<<
 *                 node.group.data.com[1],
 *                 proc.data[i],
 */
    __pyx_t_8 = PyFloat_FromDouble((__pyx_v_node->group.data.com[0])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "phd/gravity/gravity_tree.pyx":1129
 *                 node.group.data.mass,
 *                 node.group.data.com[0],
 *                 node.group.data.com[1],             # <<<<<<<<<<<<<<
 *                 proc.data[i],
 *                 node.width])
 */
    __pyx_t_9 = PyFloat_FromDouble((__pyx_v_node->group.data.com[1])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "phd/gravity/gravity_tree.pyx":1130
 *                 node.group.data.com[0],
 *                 node.group.data.com[1],
 *                 proc.data[i],             # <<<<<<<<<<<<<<
 *                 node.width])
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_From_npy_int32((__pyx_v_proc->data[__pyx_v_i])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "phd/gravity/gravity_tree.pyx":1131
 *                 node.group.data.com[1],
 *                 proc.data[i],
 *                 node.width])             # <<<<<<<<<<<<<<
 * 
 *         return data_list
 */
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_node->width); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);

    /* "phd/gravity/gravity_tree.pyx":1123
 *             j = maps.data[i]
 *             node = &self.nodes.array[j]
 *             data_list.append([             # <<<<<<<<<<<<<<
 *                 node.center[0],
 *                 node.center[1],
 */
    __pyx_t_12 = PyList_New(8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_12, 3, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_12, 4, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_12, 5, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_12, 6, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyList_SET_ITEM(__pyx_t_12, 7, __pyx_t_11);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_data_list, __pyx_t_12); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1123, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }

  /* "phd/gravity/gravity_tree.pyx":1133
 *                 node.width])
 * 
 *         return data_list             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data_list);
  __pyx_r = __pyx_v_data_list;
  goto __pyx_L0;

  /* "phd/gravity/gravity_tree.pyx":1113
 * 
 *     # -- delete later --
 *     def dump_remote(self):             # <<<<<<<<<<<<<<
 *         cdef int i, j
 *         cdef Node* node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.dump_remote", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_maps);
  __Pyx_XDECREF((PyObject *)__pyx_v_proc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pyx":1135
 *         return data_list
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Deallocate buffers in gravity
 */

/* Python wrapper */
static void __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_23__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_23__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_22__dealloc__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_22__dealloc__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "phd/gravity/gravity_tree.pyx":1139
 *         Deallocate buffers in gravity
 *         """
 *         stdlib.free(self.buffer_ids)             # <<<<<<<<<<<<<<
 */
  free(__pyx_v_self->buffer_ids);

  /* "phd/gravity/gravity_tree.pyx":1135
 *         return data_list
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Deallocate buffers in gravity
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "phd/gravity/gravity_tree.pxd":38
 * cdef class GravityTree:
 * 
 *     cdef public int number_nodes                # max number of children nodes             # <<<<<<<<<<<<<<
 *     cdef public int dim, rank, size
 *     cdef public DomainManager domain_manager
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->number_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.number_nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 38, __pyx_L1_error)
  __pyx_v_self->number_nodes = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.number_nodes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":39
 * 
 *     cdef public int number_nodes                # max number of children nodes
 *     cdef public int dim, rank, size             # <<<<<<<<<<<<<<
 *     cdef public DomainManager domain_manager
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_3dim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_3dim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_3dim___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_3dim___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.dim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_3dim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_3dim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_3dim_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_3dim_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 39, __pyx_L1_error)
  __pyx_v_self->dim = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.dim.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4rank_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4rank_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4rank___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4rank___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->rank); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.rank.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4rank_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4rank_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4rank_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4rank_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 39, __pyx_L1_error)
  __pyx_v_self->rank = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.rank.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4size___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4size___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4size_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_4size_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 39, __pyx_L1_error)
  __pyx_v_self->size = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":40
 *     cdef public int number_nodes                # max number of children nodes
 *     cdef public int dim, rank, size
 *     cdef public DomainManager domain_manager             # <<<<<<<<<<<<<<
 * 
 *     cdef public str split_type                  # method to open nodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->domain_manager));
  __pyx_r = ((PyObject *)__pyx_v_self->domain_manager);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_6domain_14domain_manager_DomainManager))))) __PYX_ERR(2, 40, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->domain_manager);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->domain_manager));
  __pyx_v_self->domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.domain_manager.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->domain_manager);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->domain_manager));
  __pyx_v_self->domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":42
 *     cdef public DomainManager domain_manager
 * 
 *     cdef public str split_type                  # method to open nodes             # <<<<<<<<<<<<<<
 *     cdef public GravityPool nodes               # node array for gravity tree
 *     cdef public int calc_potential              # flag if potential is calculated
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10split_type___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10split_type___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->split_type);
  __pyx_r = __pyx_v_self->split_type;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 42, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->split_type);
  __Pyx_DECREF(__pyx_v_self->split_type);
  __pyx_v_self->split_type = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.split_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->split_type);
  __Pyx_DECREF(__pyx_v_self->split_type);
  __pyx_v_self->split_type = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":43
 * 
 *     cdef public str split_type                  # method to open nodes
 *     cdef public GravityPool nodes               # node array for gravity tree             # <<<<<<<<<<<<<<
 *     cdef public int calc_potential              # flag if potential is calculated
 *     cdef public double barnes_angle             # angle to open node in barnes hut
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_5nodes___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_5nodes___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->nodes));
  __pyx_r = ((PyObject *)__pyx_v_self->nodes);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_7gravity_12gravity_pool_GravityPool))))) __PYX_ERR(2, 43, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->nodes);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->nodes));
  __pyx_v_self->nodes = ((struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.nodes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->nodes);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->nodes));
  __pyx_v_self->nodes = ((struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":44
 *     cdef public str split_type                  # method to open nodes
 *     cdef public GravityPool nodes               # node array for gravity tree
 *     cdef public int calc_potential              # flag if potential is calculated             # <<<<<<<<<<<<<<
 *     cdef public double barnes_angle             # angle to open node in barnes hut
 *     cdef public Interaction export_interaction  # acceleration calculator
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->calc_potential); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.calc_potential.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 44, __pyx_L1_error)
  __pyx_v_self->calc_potential = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.calc_potential.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":45
 *     cdef public GravityPool nodes               # node array for gravity tree
 *     cdef public int calc_potential              # flag if potential is calculated
 *     cdef public double barnes_angle             # angle to open node in barnes hut             # <<<<<<<<<<<<<<
 *     cdef public Interaction export_interaction  # acceleration calculator
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->barnes_angle); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.barnes_angle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 45, __pyx_L1_error)
  __pyx_v_self->barnes_angle = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.barnes_angle.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":46
 *     cdef public int calc_potential              # flag if potential is calculated
 *     cdef public double barnes_angle             # angle to open node in barnes hut
 *     cdef public Interaction export_interaction  # acceleration calculator             # <<<<<<<<<<<<<<
 * 
 *     #cdef public Splitter splitter
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->export_interaction));
  __pyx_r = ((PyObject *)__pyx_v_self->export_interaction);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_7gravity_11interaction_Interaction))))) __PYX_ERR(2, 46, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->export_interaction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->export_interaction));
  __pyx_v_self->export_interaction = ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.export_interaction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->export_interaction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->export_interaction));
  __pyx_v_self->export_interaction = ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":49
 * 
 *     #cdef public Splitter splitter
 *     cdef public Splitter export_splitter             # <<<<<<<<<<<<<<
 *     cdef public Splitter import_splitter
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->export_splitter));
  __pyx_r = ((PyObject *)__pyx_v_self->export_splitter);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_7gravity_8splitter_Splitter))))) __PYX_ERR(2, 49, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->export_splitter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->export_splitter));
  __pyx_v_self->export_splitter = ((struct __pyx_obj_3phd_7gravity_8splitter_Splitter *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.export_splitter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->export_splitter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->export_splitter));
  __pyx_v_self->export_splitter = ((struct __pyx_obj_3phd_7gravity_8splitter_Splitter *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":50
 *     #cdef public Splitter splitter
 *     cdef public Splitter export_splitter
 *     cdef public Splitter import_splitter             # <<<<<<<<<<<<<<
 * 
 *     cdef public int calculate_potential
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->import_splitter));
  __pyx_r = ((PyObject *)__pyx_v_self->import_splitter);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_7gravity_8splitter_Splitter))))) __PYX_ERR(2, 50, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->import_splitter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->import_splitter));
  __pyx_v_self->import_splitter = ((struct __pyx_obj_3phd_7gravity_8splitter_Splitter *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.import_splitter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->import_splitter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->import_splitter));
  __pyx_v_self->import_splitter = ((struct __pyx_obj_3phd_7gravity_8splitter_Splitter *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":52
 *     cdef public Splitter import_splitter
 * 
 *     cdef public int calculate_potential             # <<<<<<<<<<<<<<
 * 
 *     # pointers for particle position and mass
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->calculate_potential); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.calculate_potential.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 52, __pyx_L1_error)
  __pyx_v_self->calculate_potential = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.calculate_potential.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":62
 *     cdef map[int, int] toptree_leaf_map         # map node index to leaf container
 * 
 *     cdef public LoadBalance load_balance        # reference to load balance             # <<<<<<<<<<<<<<
 *     cdef public Interaction import_interaction  # acceleration calculator
 *     cdef public CarrayContainer toptree_leafs   # container of top tree leafs
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->load_balance));
  __pyx_r = ((PyObject *)__pyx_v_self->load_balance);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance))))) __PYX_ERR(2, 62, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->load_balance);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->load_balance));
  __pyx_v_self->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.load_balance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->load_balance);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->load_balance));
  __pyx_v_self->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":63
 * 
 *     cdef public LoadBalance load_balance        # reference to load balance
 *     cdef public Interaction import_interaction  # acceleration calculator             # <<<<<<<<<<<<<<
 *     cdef public CarrayContainer toptree_leafs   # container of top tree leafs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->import_interaction));
  __pyx_r = ((PyObject *)__pyx_v_self->import_interaction);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_7gravity_11interaction_Interaction))))) __PYX_ERR(2, 63, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->import_interaction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->import_interaction));
  __pyx_v_self->import_interaction = ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.import_interaction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->import_interaction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->import_interaction));
  __pyx_v_self->import_interaction = ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":64
 *     cdef public LoadBalance load_balance        # reference to load balance
 *     cdef public Interaction import_interaction  # acceleration calculator
 *     cdef public CarrayContainer toptree_leafs   # container of top tree leafs             # <<<<<<<<<<<<<<
 * 
 *     #cdef public np.ndarray flag_pid             # flag if particle is export to processor
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->toptree_leafs));
  __pyx_r = ((PyObject *)__pyx_v_self->toptree_leafs);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(2, 64, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->toptree_leafs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->toptree_leafs));
  __pyx_v_self->toptree_leafs = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.toptree_leafs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->toptree_leafs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->toptree_leafs));
  __pyx_v_self->toptree_leafs = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":67
 * 
 *     #cdef public np.ndarray flag_pid             # flag if particle is export to processor
 *     cdef public int max_buffer_size             # max number of particles in buffer             # <<<<<<<<<<<<<<
 *     cdef public int buffer_size
 *     cdef PairId* buffer_ids
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->max_buffer_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.max_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 67, __pyx_L1_error)
  __pyx_v_self->max_buffer_size = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.max_buffer_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":68
 *     #cdef public np.ndarray flag_pid             # flag if particle is export to processor
 *     cdef public int max_buffer_size             # max number of particles in buffer
 *     cdef public int buffer_size             # <<<<<<<<<<<<<<
 *     cdef PairId* buffer_ids
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->buffer_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 68, __pyx_L1_error)
  __pyx_v_self->buffer_size = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.buffer_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":74
 *     cdef dict toptree_carray_named_groups
 * 
 *     cdef public LongArray indices             # <<<<<<<<<<<<<<
 * 
 *     cdef public CarrayContainer buffer_export   # container of particles to import
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7indices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7indices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_7indices___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_7indices___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->indices));
  __pyx_r = ((PyObject *)__pyx_v_self->indices);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7indices_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7indices_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_7indices_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_7indices_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(2, 74, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->indices);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->indices));
  __pyx_v_self->indices = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.indices.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7indices_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7indices_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_7indices_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_7indices_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->indices);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->indices));
  __pyx_v_self->indices = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":76
 *     cdef public LongArray indices
 * 
 *     cdef public CarrayContainer buffer_export   # container of particles to import             # <<<<<<<<<<<<<<
 *     cdef public CarrayContainer buffer_import   # container of particles to export
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->buffer_export));
  __pyx_r = ((PyObject *)__pyx_v_self->buffer_export);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(2, 76, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->buffer_export);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer_export));
  __pyx_v_self->buffer_export = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.buffer_export.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->buffer_export);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer_export));
  __pyx_v_self->buffer_export = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":77
 * 
 *     cdef public CarrayContainer buffer_export   # container of particles to import
 *     cdef public CarrayContainer buffer_import   # container of particles to export             # <<<<<<<<<<<<<<
 * 
 *     cdef public np.ndarray send_cnts            # send counts for mpi
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->buffer_import));
  __pyx_r = ((PyObject *)__pyx_v_self->buffer_import);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(2, 77, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->buffer_import);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer_import));
  __pyx_v_self->buffer_import = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.buffer_import.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->buffer_import);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->buffer_import));
  __pyx_v_self->buffer_import = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":79
 *     cdef public CarrayContainer buffer_import   # container of particles to export
 * 
 *     cdef public np.ndarray send_cnts            # send counts for mpi             # <<<<<<<<<<<<<<
 *     cdef public np.ndarray send_disp            # send displacments for mpi
 *     cdef public np.ndarray recv_cnts            # receive counts for mpi
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->send_cnts));
  __pyx_r = ((PyObject *)__pyx_v_self->send_cnts);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(2, 79, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->send_cnts);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->send_cnts));
  __pyx_v_self->send_cnts = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.send_cnts.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->send_cnts);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->send_cnts));
  __pyx_v_self->send_cnts = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":80
 * 
 *     cdef public np.ndarray send_cnts            # send counts for mpi
 *     cdef public np.ndarray send_disp            # send displacments for mpi             # <<<<<<<<<<<<<<
 *     cdef public np.ndarray recv_cnts            # receive counts for mpi
 *     cdef public np.ndarray recv_disp            # receive counts for mpi
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->send_disp));
  __pyx_r = ((PyObject *)__pyx_v_self->send_disp);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(2, 80, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->send_disp);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->send_disp));
  __pyx_v_self->send_disp = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.send_disp.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->send_disp);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->send_disp));
  __pyx_v_self->send_disp = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":81
 *     cdef public np.ndarray send_cnts            # send counts for mpi
 *     cdef public np.ndarray send_disp            # send displacments for mpi
 *     cdef public np.ndarray recv_cnts            # receive counts for mpi             # <<<<<<<<<<<<<<
 *     cdef public np.ndarray recv_disp            # receive counts for mpi
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_cnts));
  __pyx_r = ((PyObject *)__pyx_v_self->recv_cnts);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(2, 81, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->recv_cnts);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->recv_cnts));
  __pyx_v_self->recv_cnts = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.recv_cnts.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->recv_cnts);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->recv_cnts));
  __pyx_v_self->recv_cnts = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/gravity/gravity_tree.pxd":82
 *     cdef public np.ndarray send_disp            # send displacments for mpi
 *     cdef public np.ndarray recv_cnts            # receive counts for mpi
 *     cdef public np.ndarray recv_disp            # receive counts for mpi             # <<<<<<<<<<<<<<
 * 
 *     # allocate node functions
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp___get__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp___get__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->recv_disp));
  __pyx_r = ((PyObject *)__pyx_v_self->recv_disp);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_2__set__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_2__set__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(2, 82, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->recv_disp);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->recv_disp));
  __pyx_v_self->recv_disp = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.recv_disp.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_4__del__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_4__del__(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->recv_disp);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->recv_disp));
  __pyx_v_self->recv_disp = ((PyArrayObject *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_24__reduce_cython__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_26__setstate_cython__(((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_7gravity_12gravity_tree_11GravityTree_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.gravity.gravity_tree.GravityTree.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":869
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":870
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":873
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":875
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":876
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":882
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 882, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":883
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 883, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 884, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 884, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":888
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 888, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":889
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 889, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 890, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 890, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":894
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 894, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":895
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 895, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":896
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 896, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_3phd_7gravity_12gravity_tree_GravityTree __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree;

static PyObject *__pyx_tp_new_3phd_7gravity_12gravity_tree_GravityTree(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)o);
  p->__pyx_vtab = __pyx_vtabptr_3phd_7gravity_12gravity_tree_GravityTree;
  new((void*)&(p->toptree_leaf_map)) std::map<int,int> ();
  p->domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)Py_None); Py_INCREF(Py_None);
  p->split_type = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->nodes = ((struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *)Py_None); Py_INCREF(Py_None);
  p->export_interaction = ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)Py_None); Py_INCREF(Py_None);
  p->export_splitter = ((struct __pyx_obj_3phd_7gravity_8splitter_Splitter *)Py_None); Py_INCREF(Py_None);
  p->import_splitter = ((struct __pyx_obj_3phd_7gravity_8splitter_Splitter *)Py_None); Py_INCREF(Py_None);
  p->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)Py_None); Py_INCREF(Py_None);
  p->import_interaction = ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)Py_None); Py_INCREF(Py_None);
  p->toptree_leafs = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  p->toptree_carray_to_register = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->toptree_carray_named_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->indices = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)Py_None); Py_INCREF(Py_None);
  p->buffer_export = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  p->buffer_import = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  p->send_cnts = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->send_disp = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->recv_cnts = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->recv_disp = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_3phd_7gravity_12gravity_tree_GravityTree(PyObject *o) {
  struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *p = (struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_23__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->toptree_leaf_map);
  Py_CLEAR(p->domain_manager);
  Py_CLEAR(p->split_type);
  Py_CLEAR(p->nodes);
  Py_CLEAR(p->export_interaction);
  Py_CLEAR(p->export_splitter);
  Py_CLEAR(p->import_splitter);
  Py_CLEAR(p->load_balance);
  Py_CLEAR(p->import_interaction);
  Py_CLEAR(p->toptree_leafs);
  Py_CLEAR(p->toptree_carray_to_register);
  Py_CLEAR(p->toptree_carray_named_groups);
  Py_CLEAR(p->indices);
  Py_CLEAR(p->buffer_export);
  Py_CLEAR(p->buffer_import);
  Py_CLEAR(p->send_cnts);
  Py_CLEAR(p->send_disp);
  Py_CLEAR(p->recv_cnts);
  Py_CLEAR(p->recv_disp);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3phd_7gravity_12gravity_tree_GravityTree(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *p = (struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)o;
  if (p->domain_manager) {
    e = (*v)(((PyObject *)p->domain_manager), a); if (e) return e;
  }
  if (p->nodes) {
    e = (*v)(((PyObject *)p->nodes), a); if (e) return e;
  }
  if (p->export_interaction) {
    e = (*v)(((PyObject *)p->export_interaction), a); if (e) return e;
  }
  if (p->export_splitter) {
    e = (*v)(((PyObject *)p->export_splitter), a); if (e) return e;
  }
  if (p->import_splitter) {
    e = (*v)(((PyObject *)p->import_splitter), a); if (e) return e;
  }
  if (p->load_balance) {
    e = (*v)(((PyObject *)p->load_balance), a); if (e) return e;
  }
  if (p->import_interaction) {
    e = (*v)(((PyObject *)p->import_interaction), a); if (e) return e;
  }
  if (p->toptree_leafs) {
    e = (*v)(((PyObject *)p->toptree_leafs), a); if (e) return e;
  }
  if (p->toptree_carray_to_register) {
    e = (*v)(p->toptree_carray_to_register, a); if (e) return e;
  }
  if (p->toptree_carray_named_groups) {
    e = (*v)(p->toptree_carray_named_groups, a); if (e) return e;
  }
  if (p->indices) {
    e = (*v)(((PyObject *)p->indices), a); if (e) return e;
  }
  if (p->buffer_export) {
    e = (*v)(((PyObject *)p->buffer_export), a); if (e) return e;
  }
  if (p->buffer_import) {
    e = (*v)(((PyObject *)p->buffer_import), a); if (e) return e;
  }
  if (p->send_cnts) {
    e = (*v)(((PyObject *)p->send_cnts), a); if (e) return e;
  }
  if (p->send_disp) {
    e = (*v)(((PyObject *)p->send_disp), a); if (e) return e;
  }
  if (p->recv_cnts) {
    e = (*v)(((PyObject *)p->recv_cnts), a); if (e) return e;
  }
  if (p->recv_disp) {
    e = (*v)(((PyObject *)p->recv_disp), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3phd_7gravity_12gravity_tree_GravityTree(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *p = (struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *)o;
  tmp = ((PyObject*)p->domain_manager);
  p->domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->nodes);
  p->nodes = ((struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->export_interaction);
  p->export_interaction = ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->export_splitter);
  p->export_splitter = ((struct __pyx_obj_3phd_7gravity_8splitter_Splitter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->import_splitter);
  p->import_splitter = ((struct __pyx_obj_3phd_7gravity_8splitter_Splitter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->load_balance);
  p->load_balance = ((struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->import_interaction);
  p->import_interaction = ((struct __pyx_obj_3phd_7gravity_11interaction_Interaction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->toptree_leafs);
  p->toptree_leafs = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->toptree_carray_to_register);
  p->toptree_carray_to_register = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->toptree_carray_named_groups);
  p->toptree_carray_named_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->indices);
  p->indices = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->buffer_export);
  p->buffer_export = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->buffer_import);
  p->buffer_import = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->send_cnts);
  p->send_cnts = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->send_disp);
  p->send_disp = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->recv_cnts);
  p->recv_cnts = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->recv_disp);
  p->recv_disp = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_number_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_number_nodes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12number_nodes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_dim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_3dim_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_dim(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_3dim_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_rank(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4rank_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_rank(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4rank_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4size_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_4size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_domain_manager(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_domain_manager(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14domain_manager_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_split_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_split_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_10split_type_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_nodes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5nodes_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_calc_potential(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_calc_potential(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_14calc_potential_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_barnes_angle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_barnes_angle(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12barnes_angle_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_export_interaction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_export_interaction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18export_interaction_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_export_splitter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_export_splitter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15export_splitter_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_import_splitter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_import_splitter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15import_splitter_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_calculate_potential(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_calculate_potential(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_19calculate_potential_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_load_balance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_load_balance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_12load_balance_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_import_interaction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_import_interaction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_18import_interaction_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_toptree_leafs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_toptree_leafs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13toptree_leafs_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_max_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_max_buffer_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15max_buffer_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_11buffer_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_indices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7indices_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_indices(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7indices_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7indices_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_export(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_export(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_export_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_import(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_import(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13buffer_import_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_send_cnts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_send_cnts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_cnts_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_send_disp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_send_disp(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9send_disp_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_recv_cnts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_recv_cnts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_cnts_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_recv_disp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_1__get__(o);
}

static int __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_recv_disp(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9recv_disp_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_3phd_7gravity_12gravity_tree_GravityTree[] = {
  {"register_fields", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_3register_fields, METH_O, __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_2register_fields},
  {"add_fields", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_5add_fields, METH_O, __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_4add_fields},
  {"set_domain_manager", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_7set_domain_manager, METH_O, __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_6set_domain_manager},
  {"initialize", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_9initialize, METH_NOARGS, __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_8initialize},
  {"_build_tree", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_11_build_tree, METH_O, __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_10_build_tree},
  {"walk", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_13walk, METH_O, __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree_12walk},
  {"dump_root_node", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_15dump_root_node, METH_NOARGS, 0},
  {"dump_data", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_17dump_data, METH_NOARGS, 0},
  {"dump_all_data", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_19dump_all_data, METH_NOARGS, 0},
  {"dump_remote", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_21dump_remote, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_25__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_27__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3phd_7gravity_12gravity_tree_GravityTree[] = {
  {(char *)"number_nodes", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_number_nodes, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_number_nodes, (char *)0, 0},
  {(char *)"dim", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_dim, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_dim, (char *)0, 0},
  {(char *)"rank", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_rank, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_rank, (char *)0, 0},
  {(char *)"size", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_size, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_size, (char *)0, 0},
  {(char *)"domain_manager", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_domain_manager, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_domain_manager, (char *)0, 0},
  {(char *)"split_type", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_split_type, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_split_type, (char *)0, 0},
  {(char *)"nodes", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_nodes, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_nodes, (char *)0, 0},
  {(char *)"calc_potential", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_calc_potential, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_calc_potential, (char *)0, 0},
  {(char *)"barnes_angle", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_barnes_angle, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_barnes_angle, (char *)0, 0},
  {(char *)"export_interaction", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_export_interaction, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_export_interaction, (char *)0, 0},
  {(char *)"export_splitter", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_export_splitter, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_export_splitter, (char *)0, 0},
  {(char *)"import_splitter", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_import_splitter, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_import_splitter, (char *)0, 0},
  {(char *)"calculate_potential", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_calculate_potential, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_calculate_potential, (char *)0, 0},
  {(char *)"load_balance", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_load_balance, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_load_balance, (char *)0, 0},
  {(char *)"import_interaction", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_import_interaction, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_import_interaction, (char *)0, 0},
  {(char *)"toptree_leafs", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_toptree_leafs, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_toptree_leafs, (char *)0, 0},
  {(char *)"max_buffer_size", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_max_buffer_size, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_max_buffer_size, (char *)0, 0},
  {(char *)"buffer_size", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_size, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_size, (char *)0, 0},
  {(char *)"indices", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_indices, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_indices, (char *)0, 0},
  {(char *)"buffer_export", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_export, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_export, (char *)0, 0},
  {(char *)"buffer_import", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_import, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_buffer_import, (char *)0, 0},
  {(char *)"send_cnts", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_send_cnts, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_send_cnts, (char *)0, 0},
  {(char *)"send_disp", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_send_disp, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_send_disp, (char *)0, 0},
  {(char *)"recv_cnts", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_recv_cnts, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_recv_cnts, (char *)0, 0},
  {(char *)"recv_disp", __pyx_getprop_3phd_7gravity_12gravity_tree_11GravityTree_recv_disp, __pyx_setprop_3phd_7gravity_12gravity_tree_11GravityTree_recv_disp, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3phd_7gravity_12gravity_tree_GravityTree = {
  PyVarObject_HEAD_INIT(0, 0)
  "phd.gravity.gravity_tree.GravityTree", /*tp_name*/
  sizeof(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3phd_7gravity_12gravity_tree_GravityTree, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Solves gravity by Barnes-Hut algorithm in serial\n    or parallel. The algorithm heavily depends on the LoadBalance\n    class if run in parallel. The algorithm works in 2d or 3d.\n    ", /*tp_doc*/
  __pyx_tp_traverse_3phd_7gravity_12gravity_tree_GravityTree, /*tp_traverse*/
  __pyx_tp_clear_3phd_7gravity_12gravity_tree_GravityTree, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3phd_7gravity_12gravity_tree_GravityTree, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3phd_7gravity_12gravity_tree_GravityTree, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3phd_7gravity_12gravity_tree_11GravityTree_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3phd_7gravity_12gravity_tree_GravityTree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_gravity_tree(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_gravity_tree},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "gravity_tree",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Allgatherv, __pyx_k_Allgatherv, sizeof(__pyx_k_Allgatherv), 0, 0, 1, 1},
  {&__pyx_n_s_Allreduce, __pyx_k_Allreduce, sizeof(__pyx_k_Allreduce), 0, 0, 1, 1},
  {&__pyx_n_s_Alltoall, __pyx_k_Alltoall, sizeof(__pyx_k_Alltoall), 0, 0, 1, 1},
  {&__pyx_n_s_DOUBLE, __pyx_k_DOUBLE, sizeof(__pyx_k_DOUBLE), 0, 0, 1, 1},
  {&__pyx_kp_s_ERROR_DomainManager_not_set, __pyx_k_ERROR_DomainManager_not_set, sizeof(__pyx_k_ERROR_DomainManager_not_set), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Insufficient_memory_in_id, __pyx_k_ERROR_Insufficient_memory_in_id, sizeof(__pyx_k_ERROR_Insufficient_memory_in_id), 0, 0, 1, 0},
  {&__pyx_n_s_Ghost, __pyx_k_Ghost, sizeof(__pyx_k_Ghost), 0, 0, 1, 1},
  {&__pyx_n_s_GravityTree, __pyx_k_GravityTree, sizeof(__pyx_k_GravityTree), 0, 0, 1, 1},
  {&__pyx_n_s_INT, __pyx_k_INT, sizeof(__pyx_k_INT), 0, 0, 1, 1},
  {&__pyx_n_s_IN_PLACE, __pyx_k_IN_PLACE, sizeof(__pyx_k_IN_PLACE), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_MPI, __pyx_k_MPI, sizeof(__pyx_k_MPI), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_ParticleTAGS, __pyx_k_ParticleTAGS, sizeof(__pyx_k_ParticleTAGS), 0, 0, 1, 1},
  {&__pyx_n_s_Real, __pyx_k_Real, sizeof(__pyx_k_Real), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SUM, __pyx_k_SUM, sizeof(__pyx_k_SUM), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unrecognized_splitter_in_gravity, __pyx_k_Unrecognized_splitter_in_gravity, sizeof(__pyx_k_Unrecognized_splitter_in_gravity), 0, 0, 1, 0},
  {&__pyx_n_s_acceleration, __pyx_k_acceleration, sizeof(__pyx_k_acceleration), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_barnes_angle, __pyx_k_barnes_angle, sizeof(__pyx_k_barnes_angle), 0, 0, 1, 1},
  {&__pyx_kp_s_barnes_hut, __pyx_k_barnes_hut, sizeof(__pyx_k_barnes_hut), 0, 0, 1, 0},
  {&__pyx_n_s_calculate_potential, __pyx_k_calculate_potential, sizeof(__pyx_k_calculate_potential), 0, 0, 1, 1},
  {&__pyx_n_s_carrays_to_register, __pyx_k_carrays_to_register, sizeof(__pyx_k_carrays_to_register), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_com, __pyx_k_com, sizeof(__pyx_k_com), 0, 0, 1, 1},
  {&__pyx_kp_s_com_2, __pyx_k_com_2, sizeof(__pyx_k_com_2), 0, 0, 1, 0},
  {&__pyx_n_s_comm, __pyx_k_comm, sizeof(__pyx_k_comm), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_exchange_particles, __pyx_k_exchange_particles, sizeof(__pyx_k_exchange_particles), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gravity, __pyx_k_gravity, sizeof(__pyx_k_gravity), 0, 0, 1, 1},
  {&__pyx_kp_s_gravity_walk_export, __pyx_k_gravity_walk_export, sizeof(__pyx_k_gravity_walk_export), 0, 0, 1, 0},
  {&__pyx_kp_s_gravity_walk_import, __pyx_k_gravity_walk_import, sizeof(__pyx_k_gravity_walk_import), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_parallel, __pyx_k_in_parallel, sizeof(__pyx_k_in_parallel), 0, 0, 1, 1},
  {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_long, __pyx_k_long, sizeof(__pyx_k_long), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_mass, __pyx_k_mass, sizeof(__pyx_k_mass), 0, 0, 1, 1},
  {&__pyx_n_s_max_buffer_size, __pyx_k_max_buffer_size, sizeof(__pyx_k_max_buffer_size), 0, 0, 1, 1},
  {&__pyx_n_s_moments, __pyx_k_moments, sizeof(__pyx_k_moments), 0, 0, 1, 1},
  {&__pyx_n_s_mpi4py, __pyx_k_mpi4py, sizeof(__pyx_k_mpi4py), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_op, __pyx_k_op, sizeof(__pyx_k_op), 0, 0, 1, 1},
  {&__pyx_n_s_phd, __pyx_k_phd, sizeof(__pyx_k_phd), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_proc, __pyx_k_proc, sizeof(__pyx_k_proc), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rank, __pyx_k_rank, sizeof(__pyx_k_rank), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_register_fields, __pyx_k_register_fields, sizeof(__pyx_k_register_fields), 0, 0, 1, 1},
  {&__pyx_kp_s_self_buffer_ids_self_m_self_x_ca, __pyx_k_self_buffer_ids_self_m_self_x_ca, sizeof(__pyx_k_self_buffer_ids_self_m_self_x_ca), 0, 0, 1, 0},
  {&__pyx_n_s_set_dim, __pyx_k_set_dim, sizeof(__pyx_k_set_dim), 0, 0, 1, 1},
  {&__pyx_n_s_set_splitter, __pyx_k_set_splitter, sizeof(__pyx_k_set_splitter), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_smoothing_length, __pyx_k_smoothing_length, sizeof(__pyx_k_smoothing_length), 0, 0, 1, 1},
  {&__pyx_n_s_split_type, __pyx_k_split_type, sizeof(__pyx_k_split_type), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_utils_exchange_particles, __pyx_k_utils_exchange_particles, sizeof(__pyx_k_utils_exchange_particles), 0, 0, 1, 1},
  {&__pyx_n_s_utils_particle_tags, __pyx_k_utils_particle_tags, sizeof(__pyx_k_utils_particle_tags), 0, 0, 1, 1},
  {&__pyx_n_s_xyz, __pyx_k_xyz, sizeof(__pyx_k_xyz), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 215, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 884, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "phd/gravity/gravity_tree.pyx":72
 *                 self.import_splitter = BarnesHut(self.barnes_angle)
 *         else:
 *             raise RuntimeError("Unrecognized splitter in gravity")             # <<<<<<<<<<<<<<
 * 
 *         # gravity force caculator
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Unrecognized_splitter_in_gravity); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "phd/gravity/gravity_tree.pyx":86
 * 
 *             # particle buffers for parallel tree walk
 *             self.buffer_import = CarrayContainer(0)             # <<<<<<<<<<<<<<
 *             self.buffer_export = CarrayContainer(0)
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "phd/gravity/gravity_tree.pyx":177
 * 
 *         if not self.domain_manager:
 *             raise RuntimeError("ERROR: DomainManager not set")             # <<<<<<<<<<<<<<
 * 
 *         self.export_splitter.set_dim(self.dim)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_ERROR_DomainManager_not_set); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "phd/gravity/gravity_tree.pyx":190
 * 
 *         self.number_nodes = 2**self.dim
 *         self.nodes = GravityPool(10000)             # <<<<<<<<<<<<<<
 * 
 *         if phd._in_parallel:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_int_10000); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "phd/gravity/gravity_tree.pyx":215
 *                     self.max_buffer_size*sizeof(PairId))
 *             if self.buffer_ids == NULL:
 *                 raise MemoryError("ERROR: Insufficient memory in id buffer")             # <<<<<<<<<<<<<<
 *             self.buffer_size = 0
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Insufficient_memory_in_id); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "phd/gravity/gravity_tree.pyx":962
 *         cdef np.ndarray loc_done, glb_done
 * 
 *         loc_done = np.zeros(1, dtype=np.int32)             # <<<<<<<<<<<<<<
 *         glb_done = np.zeros(1, dtype=np.int32)
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self_buffer_ids_self_m_self_x_ca); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.buffer_ids,self.m,self.x cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_buffer_ids_self_m_self_x_ca); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(3, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(3, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10000 = PyInt_FromLong(10000L); if (unlikely(!__pyx_int_10000)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("proc_compare", (void (*)(void))__pyx_f_3phd_7gravity_12gravity_tree_proc_compare, "int (void const *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_3phd_7gravity_12gravity_tree_GravityTree = &__pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._create_root = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_root;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._get_index = (int (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int, __pyx_t_5numpy_float64_t *))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__get_index;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._create_child = (struct __pyx_t_3phd_7gravity_12gravity_pool_Node *(*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int, int))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_child;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._create_children = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_children;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._build_toptree = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__build_toptree;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._create_toptree = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int, struct __pyx_t_3phd_12load_balance_4tree_Node *, __pyx_t_5numpy_int32_t *))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__create_toptree;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._leaf_index_toptree = (int (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, __pyx_t_5numpy_int64_t))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__leaf_index_toptree;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._update_moments = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int, int))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__update_moments;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._exchange_toptree_leafs = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__exchange_toptree_leafs;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._update_toptree_moments = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, int))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__update_toptree_moments;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._serial_walk = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__serial_walk;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._parallel_walk = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__parallel_walk;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._import_walk = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__import_walk;
  __pyx_vtable_3phd_7gravity_12gravity_tree_GravityTree._export_walk = (void (*)(struct __pyx_obj_3phd_7gravity_12gravity_tree_GravityTree *, struct __pyx_obj_3phd_7gravity_11interaction_Interaction *))__pyx_f_3phd_7gravity_12gravity_tree_11GravityTree__export_walk;
  if (PyType_Ready(&__pyx_type_3phd_7gravity_12gravity_tree_GravityTree) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3phd_7gravity_12gravity_tree_GravityTree.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3phd_7gravity_12gravity_tree_GravityTree.tp_dictoffset && __pyx_type_3phd_7gravity_12gravity_tree_GravityTree.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3phd_7gravity_12gravity_tree_GravityTree.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_3phd_7gravity_12gravity_tree_GravityTree, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 31, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_3phd_7gravity_12gravity_tree_11GravityTree___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_3phd_7gravity_12gravity_tree_11GravityTree___init__.doc = __pyx_doc_3phd_7gravity_12gravity_tree_11GravityTree___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_3phd_7gravity_12gravity_tree_11GravityTree___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_3phd_7gravity_12gravity_tree_GravityTree.tp_dict, __pyx_vtabptr_3phd_7gravity_12gravity_tree_GravityTree) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GravityTree, (PyObject *)&__pyx_type_3phd_7gravity_12gravity_tree_GravityTree) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3phd_7gravity_12gravity_tree_GravityTree) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_ptype_3phd_7gravity_12gravity_tree_GravityTree = &__pyx_type_3phd_7gravity_12gravity_tree_GravityTree;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.utils.carray"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_5utils_6carray_BaseArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "BaseArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_BaseArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_BaseArray) __PYX_ERR(5, 5, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_BaseArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_BaseArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_BaseArray)) __PYX_ERR(5, 5, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_BaseArrayIter = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "BaseArrayIter", sizeof(struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_BaseArrayIter) __PYX_ERR(5, 7, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_DoubleArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "DoubleArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_DoubleArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_DoubleArray) __PYX_ERR(5, 31, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_DoubleArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_DoubleArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_DoubleArray)) __PYX_ERR(5, 31, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_IntArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "IntArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_IntArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_IntArray) __PYX_ERR(5, 54, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_IntArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_IntArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_IntArray)) __PYX_ERR(5, 54, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_LongArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "LongArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_LongArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_LongArray) __PYX_ERR(5, 77, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_LongArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_LongArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_LongArray)) __PYX_ERR(5, 77, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_LongLongArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "LongLongArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_LongLongArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_LongLongArray) __PYX_ERR(5, 100, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_LongLongArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_LongLongArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_LongLongArray)) __PYX_ERR(5, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.containers.containers"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_10containers_10containers_CarrayContainer = __Pyx_ImportType(__pyx_t_1, "phd.containers.containers", "CarrayContainer", sizeof(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_10containers_10containers_CarrayContainer) __PYX_ERR(6, 5, __pyx_L1_error)
  __pyx_vtabptr_3phd_10containers_10containers_CarrayContainer = (struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer*)__Pyx_GetVtable(__pyx_ptype_3phd_10containers_10containers_CarrayContainer->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_10containers_10containers_CarrayContainer)) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.gravity.gravity_pool"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_7gravity_12gravity_pool_GravityPool = __Pyx_ImportType(__pyx_t_1, "phd.gravity.gravity_pool", "GravityPool", sizeof(struct __pyx_obj_3phd_7gravity_12gravity_pool_GravityPool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_7gravity_12gravity_pool_GravityPool) __PYX_ERR(7, 21, __pyx_L1_error)
  __pyx_vtabptr_3phd_7gravity_12gravity_pool_GravityPool = (struct __pyx_vtabstruct_3phd_7gravity_12gravity_pool_GravityPool*)__Pyx_GetVtable(__pyx_ptype_3phd_7gravity_12gravity_pool_GravityPool->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_7gravity_12gravity_pool_GravityPool)) __PYX_ERR(7, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.gravity.splitter"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_7gravity_8splitter_Splitter = __Pyx_ImportType(__pyx_t_1, "phd.gravity.splitter", "Splitter", sizeof(struct __pyx_obj_3phd_7gravity_8splitter_Splitter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_7gravity_8splitter_Splitter) __PYX_ERR(8, 7, __pyx_L1_error)
  __pyx_vtabptr_3phd_7gravity_8splitter_Splitter = (struct __pyx_vtabstruct_3phd_7gravity_8splitter_Splitter*)__Pyx_GetVtable(__pyx_ptype_3phd_7gravity_8splitter_Splitter->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_7gravity_8splitter_Splitter)) __PYX_ERR(8, 7, __pyx_L1_error)
  __pyx_ptype_3phd_7gravity_8splitter_BarnesHut = __Pyx_ImportType(__pyx_t_1, "phd.gravity.splitter", "BarnesHut", sizeof(struct __pyx_obj_3phd_7gravity_8splitter_BarnesHut), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_7gravity_8splitter_BarnesHut) __PYX_ERR(8, 16, __pyx_L1_error)
  __pyx_vtabptr_3phd_7gravity_8splitter_BarnesHut = (struct __pyx_vtabstruct_3phd_7gravity_8splitter_BarnesHut*)__Pyx_GetVtable(__pyx_ptype_3phd_7gravity_8splitter_BarnesHut->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_7gravity_8splitter_BarnesHut)) __PYX_ERR(8, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.gravity.interaction"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_7gravity_11interaction_Interaction = __Pyx_ImportType(__pyx_t_1, "phd.gravity.interaction", "Interaction", sizeof(struct __pyx_obj_3phd_7gravity_11interaction_Interaction), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_7gravity_11interaction_Interaction) __PYX_ERR(9, 10, __pyx_L1_error)
  __pyx_vtabptr_3phd_7gravity_11interaction_Interaction = (struct __pyx_vtabstruct_3phd_7gravity_11interaction_Interaction*)__Pyx_GetVtable(__pyx_ptype_3phd_7gravity_11interaction_Interaction->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_7gravity_11interaction_Interaction)) __PYX_ERR(9, 10, __pyx_L1_error)
  __pyx_ptype_3phd_7gravity_11interaction_GravityAcceleration = __Pyx_ImportType(__pyx_t_1, "phd.gravity.interaction", "GravityAcceleration", sizeof(struct __pyx_obj_3phd_7gravity_11interaction_GravityAcceleration), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_7gravity_11interaction_GravityAcceleration) __PYX_ERR(9, 37, __pyx_L1_error)
  __pyx_vtabptr_3phd_7gravity_11interaction_GravityAcceleration = (struct __pyx_vtabstruct_3phd_7gravity_11interaction_GravityAcceleration*)__Pyx_GetVtable(__pyx_ptype_3phd_7gravity_11interaction_GravityAcceleration->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_7gravity_11interaction_GravityAcceleration)) __PYX_ERR(9, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.load_balance.tree"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.tree", "TreeMemoryPool", sizeof(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool) __PYX_ERR(10, 37, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool = (struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool)) __PYX_ERR(10, 37, __pyx_L1_error)
  __pyx_ptype_3phd_12load_balance_4tree_Tree = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.tree", "Tree", sizeof(struct __pyx_obj_3phd_12load_balance_4tree_Tree), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_4tree_Tree) __PYX_ERR(10, 50, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_4tree_Tree = (struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_4tree_Tree->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_4tree_Tree)) __PYX_ERR(10, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.load_balance.load_balance"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.load_balance", "LoadBalance", sizeof(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance) __PYX_ERR(11, 9, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance = (struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance)) __PYX_ERR(11, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.domain.boundary"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "BoundaryConditionBase", sizeof(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase) __PYX_ERR(12, 17, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase = (struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase)) __PYX_ERR(12, 17, __pyx_L1_error)
  __pyx_ptype_3phd_6domain_8boundary_Reflective = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "Reflective", sizeof(struct __pyx_obj_3phd_6domain_8boundary_Reflective), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_Reflective) __PYX_ERR(12, 29, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_Reflective = (struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_Reflective->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_Reflective)) __PYX_ERR(12, 29, __pyx_L1_error)
  __pyx_ptype_3phd_6domain_8boundary_Periodic = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "Periodic", sizeof(struct __pyx_obj_3phd_6domain_8boundary_Periodic), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_Periodic) __PYX_ERR(12, 32, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_Periodic = (struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_Periodic->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_Periodic)) __PYX_ERR(12, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.domain.domain_manager"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_6domain_14domain_manager_DomainManager = __Pyx_ImportType(__pyx_t_1, "phd.domain.domain_manager", "DomainManager", sizeof(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_14domain_manager_DomainManager) __PYX_ERR(13, 45, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager = (struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_14domain_manager_DomainManager->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager)) __PYX_ERR(13, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initgravity_tree(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initgravity_tree(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_gravity_tree(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_gravity_tree(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_gravity_tree(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'gravity_tree' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_gravity_tree(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("gravity_tree", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_phd__gravity__gravity_tree) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "phd.gravity.gravity_tree")) {
      if (unlikely(PyDict_SetItemString(modules, "phd.gravity.gravity_tree", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "phd/gravity/gravity_tree.pyx":1
 * import phd             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as np
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_phd, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_phd, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":2
 * import phd
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * cimport libc.stdlib as stdlib
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":6
 * cimport libc.stdlib as stdlib
 * 
 * from mpi4py import MPI             # <<<<<<<<<<<<<<
 * from libc.math cimport sqrt
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_MPI);
  __Pyx_GIVEREF(__pyx_n_s_MPI);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_MPI);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_mpi4py, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MPI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MPI, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/gravity/gravity_tree.pyx":9
 * from libc.math cimport sqrt
 * 
 * from ..utils.particle_tags import ParticleTAGS             # <<<<<<<<<<<<<<
 * from ..utils.exchange_particles import exchange_particles
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ParticleTAGS);
  __Pyx_GIVEREF(__pyx_n_s_ParticleTAGS);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ParticleTAGS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_utils_particle_tags, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParticleTAGS, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/gravity/gravity_tree.pyx":10
 * 
 * from ..utils.particle_tags import ParticleTAGS
 * from ..utils.exchange_particles import exchange_particles             # <<<<<<<<<<<<<<
 * 
 * from .splitter cimport Splitter, BarnesHut
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_exchange_particles);
  __Pyx_GIVEREF(__pyx_n_s_exchange_particles);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_exchange_particles);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_utils_exchange_particles, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_exchange_particles); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_exchange_particles, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/gravity/gravity_tree.pyx":17
 * from ..utils.carray cimport DoubleArray, IntArray, LongArray, LongLongArray
 * 
 * cdef int Real = ParticleTAGS.Real             # <<<<<<<<<<<<<<
 * cdef int Ghost = ParticleTAGS.Ghost
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Real); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3phd_7gravity_12gravity_tree_Real = __pyx_t_3;

  /* "phd/gravity/gravity_tree.pyx":18
 * 
 * cdef int Real = ParticleTAGS.Real
 * cdef int Ghost = ParticleTAGS.Ghost             # <<<<<<<<<<<<<<
 * 
 * cdef int proc_compare(const void *a, const void *b):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Ghost); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_3phd_7gravity_12gravity_tree_Ghost = __pyx_t_3;

  /* "phd/gravity/gravity_tree.pyx":1
 * import phd             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as np
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init phd.gravity.gravity_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init phd.gravity.gravity_tree");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* None */
static CYTHON_INLINE long __Pyx_pow_long(long b, long e) {
    long t = b;
    switch (e) {
        case 3:
            t *= b;
        CYTHON_FALLTHROUGH;
        case 2:
            t *= b;
        CYTHON_FALLTHROUGH;
        case 1:
            return t;
        case 0:
            return 1;
    }
    #if 1
    if (unlikely(e<0)) return 0;
    #endif
    t = 1;
    while (likely(e)) {
        t *= (b * (e&1)) | ((~e)&1);
        b *= b;
        e >>= 1;
    }
    return t;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int32(npy_int32 value) {
    const npy_int32 neg_one = (npy_int32) ((npy_int32) 0 - (npy_int32) 1), const_zero = (npy_int32) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_int32) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_int32) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int32) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_int32) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int32) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_int32),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
