/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "CGAL_NDEBUG",
                1
            ]
        ],
        "depends": [
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "phd/domain/particle.h",
            "phd/mesh/tess.h"
        ],
        "include_dirs": [
            "./phd/mesh",
            "./phd/domain",
            "phd/domain",
            "/Users/sahilhegde/opt/anaconda3/lib/python3.8/site-packages/numpy/core/include",
            "phd/utils/",
            "phd/containers/",
            "phd/domain/",
            "phd/hilbert/",
            "phd/equation_state/",
            "phd/load_balance/",
            "phd/gravity",
            "phd/riemann/",
            "phd/mesh/",
            "phd/reconstruction/",
            "phd/source_term/",
            "/opt/homebrew/Cellar/cgal/5.2/include",
            "/opt/homebrew/Cellar/boost/1.75.0_1/include"
        ],
        "language": "c++",
        "libraries": [
            "gmp",
            "m"
        ],
        "library_dirs": [
            "/opt/homebrew/Cellar/cgal/5.2/lib"
        ],
        "name": "phd.reconstruction.reconstruction",
        "sources": [
            "phd/reconstruction/reconstruction.pyx"
        ]
    },
    "module_name": "phd.reconstruction.reconstruction"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__phd__reconstruction__reconstruction
#define __PYX_HAVE_API__phd__reconstruction__reconstruction
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <list>
#include "particle.h"
#include "stdlib.h"
#include <algorithm>
#include "tess.h"
#include <stdlib.h>
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "phd/reconstruction/reconstruction.pyx",
  "stringsource",
  "phd/reconstruction/reconstruction.pxd",
  "__init__.pxd",
  "type.pxd",
  "phd/utils/carray.pxd",
  "phd/containers/containers.pxd",
  "phd/domain/boundary.pxd",
  "phd/load_balance/tree.pxd",
  "phd/load_balance/load_balance.pxd",
  "phd/domain/domain_manager.pxd",
  "phd/mesh/pytess.pxd",
  "phd/equation_state/equation_state.pxd",
  "phd/riemann/riemann.pxd",
  "phd/mesh/mesh.pxd",
};

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter;
struct __pyx_obj_3phd_5utils_6carray_BaseArray;
struct __pyx_obj_3phd_5utils_6carray_DoubleArray;
struct __pyx_obj_3phd_5utils_6carray_IntArray;
struct __pyx_obj_3phd_5utils_6carray_LongArray;
struct __pyx_obj_3phd_5utils_6carray_LongLongArray;
struct __pyx_obj_3phd_10containers_10containers_CarrayContainer;
struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase;
struct __pyx_obj_3phd_6domain_8boundary_Reflective;
struct __pyx_obj_3phd_6domain_8boundary_Periodic;
struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool;
struct __pyx_obj_3phd_12load_balance_4tree_Tree;
struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance;
struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager;
struct __pyx_obj_3phd_4mesh_6pytess_PyTess;
struct __pyx_obj_3phd_4mesh_6pytess_PyTess2d;
struct __pyx_obj_3phd_4mesh_6pytess_PyTess3d;
struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase;
struct __pyx_obj_3phd_14equation_state_14equation_state_IdealGas;
struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase;
struct __pyx_obj_3phd_7riemann_7riemann_HLL;
struct __pyx_obj_3phd_7riemann_7riemann_HLLC;
struct __pyx_obj_3phd_7riemann_7riemann_Exact;
struct __pyx_obj_3phd_4mesh_4mesh_Mesh;
struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase;
struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant;
struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_11DoubleArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_8IntArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_9LongArray_remove;
struct __pyx_opt_args_3phd_5utils_6carray_13LongLongArray_remove;

/* "utils/carray.pxd":20
 *     cpdef np.ndarray get_npy_array(self)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 *     cpdef reset(self)
 */
struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":45
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_11DoubleArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":68
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_8IntArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":91
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_9LongArray_remove {
  int __pyx_n;
  int input_sorted;
};

/* "utils/carray.pxd":114
 *     cpdef resize(self, long size)
 *     cpdef squeeze(self)
 *     cpdef remove(self, np.ndarray index_list, bint input_sorted=*)             # <<<<<<<<<<<<<<
 *     cpdef extend(self, np.ndarray in_array)
 * 
 */
struct __pyx_opt_args_3phd_5utils_6carray_13LongLongArray_remove {
  int __pyx_n;
  int input_sorted;
};
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray;
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items;

/* "containers/containers.pxd":11
 *     cdef readonly dict carray_named_groups
 * 
 *     cpdef register_carray(self, int carray_size, str carray_name, str dtype=*)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int get_carray_size(self)
 */
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray {
  int __pyx_n;
  PyObject *dtype;
};

/* "containers/containers.pxd":20
 *     cpdef resize(self, int carray_size)
 *     cpdef remove_tagged_particles(self, np.int8_t tag)
 *     cpdef CarrayContainer extract_items(self, LongArray index_array, list carray_list_names=*)             # <<<<<<<<<<<<<<
 *     cpdef int append_container(self, CarrayContainer container)
 *     cpdef copy(self, CarrayContainer container, LongArray indices, list carray_list_names)
 */
struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items {
  int __pyx_n;
  PyObject *carray_list_names;
};

/* "domain/boundary.pxd":11
 *     FlagParticle* particle_flag_deref(cpplist[FlagParticle].iterator &it)
 * 
 * cdef enum:             # <<<<<<<<<<<<<<
 *     REFLECTIVE = 0x01
 *     PERIODIC   = 0x02
 */
enum  {
  __pyx_e_3phd_6domain_8boundary_REFLECTIVE = 0x01,
  __pyx_e_3phd_6domain_8boundary_PERIODIC = 0x02
};
struct __pyx_t_3phd_12load_balance_4tree_Node;

/* "load_balance/tree.pxd":6
 * from ..containers.containers cimport CarrayContainer
 * 
 * ctypedef np.int64_t (*hilbert_type)(np.int32_t, np.int32_t, np.int32_t, int)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "stdlib.h":
 */
typedef __pyx_t_5numpy_int64_t (*__pyx_t_3phd_12load_balance_4tree_hilbert_type)(__pyx_t_5numpy_int32_t, __pyx_t_5numpy_int32_t, __pyx_t_5numpy_int32_t, int);

/* "load_balance/tree.pxd":15
 * 
 * # forward decleration
 * cdef struct Node             # <<<<<<<<<<<<<<
 * 
 * cdef struct Node:
 */
struct __pyx_t_3phd_12load_balance_4tree_Node {
  __pyx_t_5numpy_int64_t sfc_key;
  __pyx_t_5numpy_int64_t sfc_start_key;
  __pyx_t_5numpy_int64_t number_sfc_keys;
  __pyx_t_5numpy_int64_t level;
  __pyx_t_5numpy_float64_t box_length;
  __pyx_t_5numpy_float64_t center[3];
  int particle_index_start;
  int number_particles;
  int number_segments;
  int leaf;
  int array_index;
  int children_start;
  int zorder_to_hilbert[8];
};
struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields;

/* "domain/domain_manager.pxd":104
 *     cpdef bint ghost_complete(self)
 * 
 *     cpdef update_ghost_fields(self, CarrayContainer particles, list fields,             # <<<<<<<<<<<<<<
 *             bint apply_boundary_condition=*)
 *     cpdef update_ghost_gradients(self, CarrayContainer particles, CarrayContainer gradients)
 */
struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields {
  int __pyx_n;
  int apply_boundary_condition;
};

/* "mesh/pytess.pxd":6
 * from ..domain.domain_manager cimport FlagParticle, GhostID
 * 
 * ctypedef vector[int] nn             # <<<<<<<<<<<<<<
 * ctypedef vector[nn] nn_vec
 * 
 */
typedef std::vector<int>  __pyx_t_3phd_4mesh_6pytess_nn;

/* "mesh/pytess.pxd":7
 * 
 * ctypedef vector[int] nn
 * ctypedef vector[nn] nn_vec             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "tess.h":
 */
typedef std::vector<__pyx_t_3phd_4mesh_6pytess_nn>  __pyx_t_3phd_4mesh_6pytess_nn_vec;

/* "mesh/mesh.pxd":10
 * from ..equation_state.equation_state cimport EquationStateBase
 * 
 * ctypedef vector[int] nn           # nearest neighbors             # <<<<<<<<<<<<<<
 * ctypedef vector[nn] nn_vec
 * 
 */
typedef std::vector<int>  __pyx_t_3phd_4mesh_4mesh_nn;

/* "mesh/mesh.pxd":11
 * 
 * ctypedef vector[int] nn           # nearest neighbors
 * ctypedef vector[nn] nn_vec             # <<<<<<<<<<<<<<
 * 
 * #cdef inline bint in_box(double x[3], double r, np.float64_t bounds[2][3], int dim)
 */
typedef std::vector<__pyx_t_3phd_4mesh_4mesh_nn>  __pyx_t_3phd_4mesh_4mesh_nn_vec;

/* "utils/carray.pxd":7
 * cdef class BaseArray
 * 
 * cdef class BaseArrayIter:             # <<<<<<<<<<<<<<
 *     cdef BaseArray arr
 *     cdef int i
 */
struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter {
  PyObject_HEAD
  struct __pyx_obj_3phd_5utils_6carray_BaseArray *arr;
  int i;
};


/* "utils/carray.pxd":5
 * 
 * # forward declaration
 * cdef class BaseArray             # <<<<<<<<<<<<<<
 * 
 * cdef class BaseArrayIter:
 */
struct __pyx_obj_3phd_5utils_6carray_BaseArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray *__pyx_vtab;
  long length;
  long alloc;
  PyArrayObject *_npy_array;
};


/* "utils/carray.pxd":31
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class DoubleArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.float64_t"""
 *     cdef np.float64_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_DoubleArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_float64_t *data;
  __pyx_t_5numpy_float64_t minimum;
  __pyx_t_5numpy_float64_t maximum;
};


/* "utils/carray.pxd":54
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class IntArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int8_t"""
 *     cdef np.int8_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_IntArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int8_t *data;
  __pyx_t_5numpy_int8_t minimum;
  __pyx_t_5numpy_int8_t maximum;
};


/* "utils/carray.pxd":77
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int32_t"""
 *     cdef np.int32_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_LongArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int32_t *data;
  __pyx_t_5numpy_int32_t minimum;
  __pyx_t_5numpy_int32_t maximum;
};


/* "utils/carray.pxd":100
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongLongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int64_t"""
 *     cdef np.int64_t *data
 */
struct __pyx_obj_3phd_5utils_6carray_LongLongArray {
  struct __pyx_obj_3phd_5utils_6carray_BaseArray __pyx_base;
  __pyx_t_5numpy_int64_t *data;
  __pyx_t_5numpy_int64_t minimum;
  __pyx_t_5numpy_int64_t maximum;
};


/* "containers/containers.pxd":5
 * 
 * 
 * cdef class CarrayContainer:             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly dict carrays
 */
struct __pyx_obj_3phd_10containers_10containers_CarrayContainer {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *__pyx_vtab;
  PyObject *carrays;
  PyObject *carray_dtypes;
  PyObject *carray_named_groups;
};


/* "domain/boundary.pxd":17
 * cdef inline bint intersect_bounds(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class BoundaryConditionBase:             # <<<<<<<<<<<<<<
 *     cdef void create_ghost_particle(self, cpplist[FlagParticle] &flagged_particles,
 *                                     DomainManager domain_manager)
 */
struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *__pyx_vtab;
};


/* "domain/boundary.pxd":29
 *     cpdef update_fields(self, CarrayContainer particles, DomainManager domain_manager)
 * 
 * cdef class Reflective(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_3phd_6domain_8boundary_Reflective {
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};


/* "domain/boundary.pxd":32
 *     pass
 * 
 * cdef class Periodic(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 */
struct __pyx_obj_3phd_6domain_8boundary_Periodic {
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};


/* "load_balance/tree.pxd":37
 *     int zorder_to_hilbert[8]    # map zorder to hilbert
 * 
 * cdef class TreeMemoryPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef int used                       # number of nodes used in the pool
 */
struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool *__pyx_vtab;
  int used;
  int capacity;
  struct __pyx_t_3phd_12load_balance_4tree_Node *node_array;
};


/* "load_balance/tree.pxd":50
 *     cpdef int number_nodes(self)        # number of nodes in tree
 * 
 * cdef class Tree:             # <<<<<<<<<<<<<<
 * 
 *     cdef double domain_corner[3]           # corner of particle domain
 */
struct __pyx_obj_3phd_12load_balance_4tree_Tree {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *__pyx_vtab;
  double domain_corner[3];
  double domain_length;
  double domain_fac;
  int order;
  int min_in_leaf;
  double factor;
  int total_num_part;
  int number_leaves;
  int dim;
  __pyx_t_3phd_12load_balance_4tree_hilbert_type hilbert_func;
  int bounds[2][3];
  struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *mem_pool;
  struct __pyx_t_3phd_12load_balance_4tree_Node *root;
};


/* "load_balance/load_balance.pxd":9
 * 
 * 
 * cdef class LoadBalance:             # <<<<<<<<<<<<<<
 * 
 *     cdef public np.int32_t order
 */
struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance *__pyx_vtab;
  __pyx_t_5numpy_int32_t order;
  __pyx_t_5numpy_float64_t factor;
  __pyx_t_5numpy_int32_t min_in_leaf;
  int dim;
  __pyx_t_5numpy_float64_t fac;
  double bounds[2][3];
  int domain_info_added;
  double corner[3];
  __pyx_t_5numpy_float64_t box_length;
  PyObject *export_ids;
  PyObject *export_pid;
  struct __pyx_obj_3phd_12load_balance_4tree_Tree *tree;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *leaf_pid;
  __pyx_t_3phd_12load_balance_4tree_hilbert_type hilbert_func;
};


/* "domain/domain_manager.pxd":45
 *         const GhostID &a, const GhostID &b) nogil
 * 
 * cdef class DomainManager:             # <<<<<<<<<<<<<<
 * 
 *     cdef public DoubleArray old_radius
 */
struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *__pyx_vtab;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *old_radius;
  struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *load_balance;
  struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *boundary_condition;
  double initial_radius;
  double search_radius_factor;
  int particle_fields_registered;
  int dim;
  PyObject *xmin;
  PyObject *xmax;
  __pyx_t_5numpy_float64_t translate[3];
  __pyx_t_5numpy_float64_t bounds[2][3];
  __pyx_t_5numpy_float64_t max_length;
  __pyx_t_5numpy_float64_t min_length;
  std::vector<BoundaryParticle>  ghost_vec;
  std::list<struct FlagParticle>  flagged_particles;
  int num_export;
  int num_real_particles;
  PyArrayObject *loc_done;
  PyArrayObject *glb_done;
  std::vector<GhostID>  export_ghost_buffer;
  std::vector<GhostID>  import_ghost_buffer;
  PyArrayObject *send_cnts;
  PyArrayObject *recv_cnts;
  PyArrayObject *send_disp;
  PyArrayObject *recv_disp;
};


/* "mesh/pytess.pxd":34
 *         int reindex_ghost(vector[GhostID] &import_ghost_buffer)
 * 
 * cdef class PyTess:             # <<<<<<<<<<<<<<
 * 
 *     cdef void reset_tess(self)
 */
struct __pyx_obj_3phd_4mesh_6pytess_PyTess {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess *__pyx_vtab;
};


/* "mesh/pytess.pxd":46
 *     cdef int reindex_ghost(self, vector[GhostID] &import_ghost_buffer)
 * 
 * cdef class PyTess2d(PyTess):             # <<<<<<<<<<<<<<
 *     cdef Tess2d *thisptr
 * 
 */
struct __pyx_obj_3phd_4mesh_6pytess_PyTess2d {
  struct __pyx_obj_3phd_4mesh_6pytess_PyTess __pyx_base;
  Tess2d *thisptr;
};


/* "mesh/pytess.pxd":49
 *     cdef Tess2d *thisptr
 * 
 * cdef class PyTess3d(PyTess):             # <<<<<<<<<<<<<<
 *     cdef Tess3d *thisptr
 */
struct __pyx_obj_3phd_4mesh_6pytess_PyTess3d {
  struct __pyx_obj_3phd_4mesh_6pytess_PyTess __pyx_base;
  Tess3d *thisptr;
};


/* "equation_state/equation_state.pxd":5
 * from ..containers.containers cimport CarrayContainer
 * 
 * cdef class EquationStateBase:             # <<<<<<<<<<<<<<
 *     cdef public double gamma
 * 
 */
struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_vtab;
  double gamma;
};


/* "equation_state/equation_state.pxd":13
 *     cpdef np.float64_t get_gamma(self)
 * 
 * cdef class IdealGas(EquationStateBase):             # <<<<<<<<<<<<<<
 *     pass
 */
struct __pyx_obj_3phd_14equation_state_14equation_state_IdealGas {
  struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase __pyx_base;
};


/* "riemann/riemann.pxd":7
 * 
 * 
 * cdef class RiemannBase:             # <<<<<<<<<<<<<<
 * 
 *     cdef public double cfl
 */
struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase *__pyx_vtab;
  double cfl;
  int fields_registered;
  PyObject *flux_fields;
  PyObject *flux_field_groups;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *fluxes;
};


/* "riemann/riemann.pxd":25
 *     cdef deboost(self, CarrayContainer fluxes, CarrayContainer faces, int dim)
 * 
 * cdef class HLL(RiemannBase):             # <<<<<<<<<<<<<<
 *     cdef public bint boost
 * 
 */
struct __pyx_obj_3phd_7riemann_7riemann_HLL {
  struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase __pyx_base;
  int boost;
};


/* "riemann/riemann.pxd":32
 *             double gamma, double *sl, double *sc, double *sr)
 * 
 * cdef class HLLC(HLL):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_3phd_7riemann_7riemann_HLLC {
  struct __pyx_obj_3phd_7riemann_7riemann_HLL __pyx_base;
};


/* "riemann/riemann.pxd":35
 *     pass
 * 
 * cdef class Exact(RiemannBase):             # <<<<<<<<<<<<<<
 *     cdef public bint boost
 * 
 */
struct __pyx_obj_3phd_7riemann_7riemann_Exact {
  struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase __pyx_base;
  int boost;
};


/* "mesh/mesh.pxd":15
 * #cdef inline bint in_box(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class Mesh:             # <<<<<<<<<<<<<<
 * 
 *     # initialization parameters
 */
struct __pyx_obj_3phd_4mesh_4mesh_Mesh {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_4mesh_4mesh_Mesh *__pyx_vtab;
  int relax_iterations;
  int max_iterations;
  double eta;
  int regularize;
  int num_neighbors;
  PyObject *face_fields;
  PyObject *face_field_groups;
  PyObject *update_ghost_fields;
  int particle_fields_registered;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *faces;
  struct __pyx_obj_3phd_4mesh_6pytess_PyTess *tess;
  __pyx_t_3phd_4mesh_4mesh_nn_vec neighbors;
};


/* "phd/reconstruction/reconstruction.pxd":9
 * from ..equation_state.equation_state cimport EquationStateBase
 * 
 * cdef class ReconstructionBase:             # <<<<<<<<<<<<<<
 * 
 *     cdef bint fields_registered
 */
struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_vtab;
  int fields_registered;
  int has_passive_scalars;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *left_states;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *right_states;
  PyObject *reconstruct_fields;
  PyObject *reconstruct_field_groups;
  int num_passive;
  __pyx_t_5numpy_float64_t **passive;
  __pyx_t_5numpy_float64_t **passive_l;
  __pyx_t_5numpy_float64_t **passive_r;
  __pyx_t_5numpy_float64_t **dpassive;
};


/* "phd/reconstruction/reconstruction.pxd":41
 *                          double dt, bint boost)
 * 
 * cdef class PieceWiseConstant(ReconstructionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant {
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase __pyx_base;
};


/* "phd/reconstruction/reconstruction.pxd":44
 *     pass
 * 
 * cdef class PieceWiseLinear(ReconstructionBase):             # <<<<<<<<<<<<<<
 * 
 *     cdef public str limiter
 */
struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear {
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase __pyx_base;
  PyObject *limiter;
  int gizmo_limiter;
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *grad;
  int slope_limiter;
  PyObject *reconstruct_grads;
  PyObject *reconstruct_grad_groups;
  __pyx_t_5numpy_float64_t *state_l;
  __pyx_t_5numpy_float64_t *state_r;
  __pyx_t_5numpy_float64_t **priml_pointer;
  __pyx_t_5numpy_float64_t **primr_pointer;
  __pyx_t_5numpy_float64_t **prim_pointer;
  __pyx_t_5numpy_float64_t **grad_pointer;
  __pyx_t_5numpy_float64_t *phi_max;
  __pyx_t_5numpy_float64_t *phi_min;
  __pyx_t_5numpy_float64_t *alpha;
  __pyx_t_5numpy_float64_t *df;
};



/* "utils/carray.pxd":5
 * 
 * # forward declaration
 * cdef class BaseArray             # <<<<<<<<<<<<<<
 * 
 * cdef class BaseArrayIter:
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray {
  PyObject *(*reserve)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyArrayObject *(*get_npy_array)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*squeeze)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*remove)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_5utils_6carray_9BaseArray_remove *__pyx_optional_args);
  PyObject *(*extend)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*reset)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*shrink)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, long, int __pyx_skip_dispatch);
  PyObject *(*align_array)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*get_c_type)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*copy_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*paste_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
  PyObject *(*add_values)(struct __pyx_obj_3phd_5utils_6carray_BaseArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_BaseArray *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray *__pyx_vtabptr_3phd_5utils_6carray_BaseArray;


/* "utils/carray.pxd":31
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class DoubleArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.float64_t"""
 *     cdef np.float64_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *);
  __pyx_t_5numpy_float64_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *);
  __pyx_t_5numpy_float64_t (*get)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, long, __pyx_t_5numpy_float64_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_DoubleArray *, __pyx_t_5numpy_float64_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray *__pyx_vtabptr_3phd_5utils_6carray_DoubleArray;


/* "utils/carray.pxd":54
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class IntArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int8_t"""
 *     cdef np.int8_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_IntArray *);
  __pyx_t_5numpy_int8_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_IntArray *);
  __pyx_t_5numpy_int8_t (*get)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, long, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_IntArray *, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray *__pyx_vtabptr_3phd_5utils_6carray_IntArray;


/* "utils/carray.pxd":77
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int32_t"""
 *     cdef np.int32_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  __pyx_t_5numpy_int32_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  __pyx_t_5numpy_int32_t (*get)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, long, __pyx_t_5numpy_int32_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_LongArray *, __pyx_t_5numpy_int32_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray *__pyx_vtabptr_3phd_5utils_6carray_LongArray;


/* "utils/carray.pxd":100
 *     cpdef add_values(self, LongArray indices, BaseArray dest)
 * 
 * cdef class LongLongArray(BaseArray):             # <<<<<<<<<<<<<<
 *     """This class defines a managed array of np.int64_t"""
 *     cdef np.int64_t *data
 */

struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray {
  struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray __pyx_base;
  PyObject *(*_setup_npy_array)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *);
  __pyx_t_5numpy_int64_t *(*get_data_ptr)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *);
  __pyx_t_5numpy_int64_t (*get)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, long, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, long, __pyx_t_5numpy_int64_t, int __pyx_skip_dispatch);
  PyObject *(*append)(struct __pyx_obj_3phd_5utils_6carray_LongLongArray *, __pyx_t_5numpy_int64_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray *__pyx_vtabptr_3phd_5utils_6carray_LongLongArray;


/* "containers/containers.pxd":5
 * 
 * 
 * cdef class CarrayContainer:             # <<<<<<<<<<<<<<
 * 
 *     cdef readonly dict carrays
 */

struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer {
  PyObject *(*register_carray)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_register_carray *__pyx_optional_args);
  int (*get_carray_size)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*remove_items)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyArrayObject *, int __pyx_skip_dispatch);
  PyObject *(*extend)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int __pyx_skip_dispatch);
  void (*pointer_groups)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, __pyx_t_5numpy_float64_t **, PyObject *);
  struct __pyx_obj_3phd_5utils_6carray_BaseArray *(*get_carray)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*resize)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int __pyx_skip_dispatch);
  PyObject *(*remove_tagged_particles)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, __pyx_t_5numpy_int8_t, int __pyx_skip_dispatch);
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *(*extract_items)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_10containers_10containers_15CarrayContainer_extract_items *__pyx_optional_args);
  int (*append_container)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*copy)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*paste)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*add)(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *__pyx_vtabptr_3phd_10containers_10containers_CarrayContainer;


/* "domain/boundary.pxd":17
 * cdef inline bint intersect_bounds(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class BoundaryConditionBase:             # <<<<<<<<<<<<<<
 *     cdef void create_ghost_particle(self, cpplist[FlagParticle] &flagged_particles,
 *                                     DomainManager domain_manager)
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase {
  void (*create_ghost_particle)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*create_ghost_particle_serial)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*create_ghost_particle_parallel)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, std::list<struct FlagParticle>  &, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*migrate_particles)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  void (*update_gradients)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *);
  PyObject *(*update_fields)(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase *__pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase;


/* "domain/boundary.pxd":29
 *     cpdef update_fields(self, CarrayContainer particles, DomainManager domain_manager)
 * 
 * cdef class Reflective(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective {
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective *__pyx_vtabptr_3phd_6domain_8boundary_Reflective;


/* "domain/boundary.pxd":32
 *     pass
 * 
 * cdef class Periodic(BoundaryConditionBase):             # <<<<<<<<<<<<<<
 *     pass
 */

struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic {
  struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic *__pyx_vtabptr_3phd_6domain_8boundary_Periodic;


/* "load_balance/tree.pxd":37
 *     int zorder_to_hilbert[8]    # map zorder to hilbert
 * 
 * cdef class TreeMemoryPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef int used                       # number of nodes used in the pool
 */

struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool {
  struct __pyx_t_3phd_12load_balance_4tree_Node *(*get)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int);
  void (*resize)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int);
  void (*reset)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *);
  int (*number_leaves)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int __pyx_skip_dispatch);
  int (*number_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool *__pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool;


/* "load_balance/tree.pxd":50
 *     cpdef int number_nodes(self)        # number of nodes in tree
 * 
 * cdef class Tree:             # <<<<<<<<<<<<<<
 * 
 *     cdef double domain_corner[3]           # corner of particle domain
 */

struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree {
  void (*_leaves_to_array)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, int *);
  void (*_create_node_children)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *);
  void (*_fill_particles_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, __pyx_t_5numpy_int64_t *, int);
  void (*_fill_segments_nodes)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, __pyx_t_5numpy_int64_t *, __pyx_t_5numpy_int32_t *, int);
  PyObject *(*_build_local_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, PyArrayObject *, int, int __pyx_skip_dispatch);
  void (*_build_global_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, int, PyArrayObject *, PyArrayObject *, int);
  void (*construct_global_tree)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *);
  struct __pyx_t_3phd_12load_balance_4tree_Node *(*find_leaf)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, __pyx_t_5numpy_int64_t);
  int (*get_nearest_process_neighbors)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, double *, double, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
  void (*_neighbors)(struct __pyx_obj_3phd_12load_balance_4tree_Tree *, struct __pyx_t_3phd_12load_balance_4tree_Node *, double *, double *, __pyx_t_5numpy_int32_t *, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
};
static struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree *__pyx_vtabptr_3phd_12load_balance_4tree_Tree;


/* "load_balance/load_balance.pxd":9
 * 
 * 
 * cdef class LoadBalance:             # <<<<<<<<<<<<<<
 * 
 *     cdef public np.int32_t order
 */

struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance {
  void (*calculate_local_work)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyArrayObject *);
  void (*find_split_in_work)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, PyArrayObject *);
  void (*collect_particles_export)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, struct __pyx_obj_3phd_5utils_6carray_LongArray *, int);
  void (*compute_hilbert_keys)(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
};
static struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance *__pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance;


/* "domain/domain_manager.pxd":45
 *         const GhostID &a, const GhostID &b) nogil
 * 
 * cdef class DomainManager:             # <<<<<<<<<<<<<<
 * 
 *     cdef public DoubleArray old_radius
 */

struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager {
  PyObject *(*check_for_partition)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*partition)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*setup_initial_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*store_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*setup_for_ghost_creation)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*create_ghost_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*create_interior_ghost_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*update_search_radius)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*copy_particles_serial)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*copy_particles_parallel)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *);
  PyObject *(*move_generators)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, double, int __pyx_skip_dispatch);
  PyObject *(*migrate_particles)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  int (*ghost_complete)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*update_ghost_fields)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_3phd_6domain_14domain_manager_13DomainManager_update_ghost_fields *__pyx_optional_args);
  PyObject *(*update_ghost_gradients)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*reindex_ghost)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int, int);
  int (*get_nearest_intersect_process_neighbors)(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double *, double, double, int, struct __pyx_obj_3phd_5utils_6carray_LongArray *);
};
static struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *__pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager;


/* "mesh/pytess.pxd":34
 *         int reindex_ghost(vector[GhostID] &import_ghost_buffer)
 * 
 * cdef class PyTess:             # <<<<<<<<<<<<<<
 * 
 *     cdef void reset_tess(self)
 */

struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess {
  void (*reset_tess)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *);
  int (*build_initial_tess)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *, double **, double *, int);
  int (*update_initial_tess)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *, double **, int, int);
  int (*count_number_of_faces)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *);
  int (*extract_geometry)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *, double **, double **, double *, double *, double **, double **, int *, int *, __pyx_t_3phd_4mesh_6pytess_nn_vec &);
  int (*update_radius)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *, double **, double *, std::list<struct FlagParticle>  &);
  int (*reindex_ghost)(struct __pyx_obj_3phd_4mesh_6pytess_PyTess *, std::vector<GhostID>  &);
};
static struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess *__pyx_vtabptr_3phd_4mesh_6pytess_PyTess;


/* "mesh/pytess.pxd":46
 *     cdef int reindex_ghost(self, vector[GhostID] &import_ghost_buffer)
 * 
 * cdef class PyTess2d(PyTess):             # <<<<<<<<<<<<<<
 *     cdef Tess2d *thisptr
 * 
 */

struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess2d {
  struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess __pyx_base;
};
static struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess2d *__pyx_vtabptr_3phd_4mesh_6pytess_PyTess2d;


/* "mesh/pytess.pxd":49
 *     cdef Tess2d *thisptr
 * 
 * cdef class PyTess3d(PyTess):             # <<<<<<<<<<<<<<
 *     cdef Tess3d *thisptr
 */

struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess3d {
  struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess __pyx_base;
};
static struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess3d *__pyx_vtabptr_3phd_4mesh_6pytess_PyTess3d;


/* "equation_state/equation_state.pxd":5
 * from ..containers.containers cimport CarrayContainer
 * 
 * cdef class EquationStateBase:             # <<<<<<<<<<<<<<
 *     cdef public double gamma
 * 
 */

struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase {
  PyObject *(*conservative_from_primitive)(struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*primitive_from_conservative)(struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  __pyx_t_5numpy_float64_t (*sound_speed)(struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, int __pyx_skip_dispatch);
  __pyx_t_5numpy_float64_t (*get_gamma)(struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase *__pyx_vtabptr_3phd_14equation_state_14equation_state_EquationStateBase;


/* "equation_state/equation_state.pxd":13
 *     cpdef np.float64_t get_gamma(self)
 * 
 * cdef class IdealGas(EquationStateBase):             # <<<<<<<<<<<<<<
 *     pass
 */

struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_IdealGas {
  struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_IdealGas *__pyx_vtabptr_3phd_14equation_state_14equation_state_IdealGas;


/* "riemann/riemann.pxd":7
 * 
 * 
 * cdef class RiemannBase:             # <<<<<<<<<<<<<<
 * 
 *     cdef public double cfl
 */

struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase {
  PyObject *(*compute_fluxes)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, int __pyx_skip_dispatch);
  PyObject *(*riemann_solver)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, double, int);
  double (*compute_time_step)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, int __pyx_skip_dispatch);
  PyObject *(*deboost)(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int);
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase *__pyx_vtabptr_3phd_7riemann_7riemann_RiemannBase;


/* "riemann/riemann.pxd":25
 *     cdef deboost(self, CarrayContainer fluxes, CarrayContainer faces, int dim)
 * 
 * cdef class HLL(RiemannBase):             # <<<<<<<<<<<<<<
 *     cdef public bint boost
 * 
 */

struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLL {
  struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase __pyx_base;
  void (*get_waves)(struct __pyx_obj_3phd_7riemann_7riemann_HLL *, double, double, double, double, double, double, double, double *, double *, double *);
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLL *__pyx_vtabptr_3phd_7riemann_7riemann_HLL;


/* "riemann/riemann.pxd":32
 *             double gamma, double *sl, double *sc, double *sr)
 * 
 * cdef class HLLC(HLL):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLLC {
  struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLL __pyx_base;
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLLC *__pyx_vtabptr_3phd_7riemann_7riemann_HLLC;


/* "riemann/riemann.pxd":35
 *     pass
 * 
 * cdef class Exact(RiemannBase):             # <<<<<<<<<<<<<<
 *     cdef public bint boost
 * 
 */

struct __pyx_vtabstruct_3phd_7riemann_7riemann_Exact {
  struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase __pyx_base;
  double (*p_guess)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double, double, double, double);
  double (*p_func)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double);
  double (*p_func_deriv)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double);
  double (*get_pstar)(struct __pyx_obj_3phd_7riemann_7riemann_Exact *, double, double, double, double, double, double, double, double, double);
};
static struct __pyx_vtabstruct_3phd_7riemann_7riemann_Exact *__pyx_vtabptr_3phd_7riemann_7riemann_Exact;


/* "mesh/mesh.pxd":15
 * #cdef inline bint in_box(double x[3], double r, np.float64_t bounds[2][3], int dim)
 * 
 * cdef class Mesh:             # <<<<<<<<<<<<<<
 * 
 *     # initialization parameters
 */

struct __pyx_vtabstruct_3phd_4mesh_4mesh_Mesh {
  PyObject *(*reset_mesh)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, int __pyx_skip_dispatch);
  PyObject *(*tessellate)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*build_geometry)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*relax)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*assign_generator_velocities)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase *, int __pyx_skip_dispatch);
  PyObject *(*assign_face_velocities)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, int __pyx_skip_dispatch);
  PyObject *(*update_from_fluxes)(struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_4mesh_4mesh_Mesh *__pyx_vtabptr_3phd_4mesh_4mesh_Mesh;


/* "phd/reconstruction/reconstruction.pyx":15
 * cdef int REAL = ParticleTAGS.Real
 * 
 * cdef class ReconstructionBase:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.fields_registered = False
 */

struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase {
  PyObject *(*compute_gradients)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch);
  PyObject *(*add_spatial)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch);
  PyObject *(*add_temporal)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch);
  PyObject *(*compute_states)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_vtabptr_3phd_14reconstruction_14reconstruction_ReconstructionBase;


/* "phd/reconstruction/reconstruction.pyx":131
 *         raise NotImplementedError(msg)
 * 
 * cdef class PieceWiseConstant(ReconstructionBase):             # <<<<<<<<<<<<<<
 *     """Reconstruction of primitive variables onto each face using
 *     constant implementation.
 */

struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseConstant {
  struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseConstant;


/* "phd/reconstruction/reconstruction.pyx":355
 * 
 * 
 * cdef class PieceWiseLinear(ReconstructionBase):             # <<<<<<<<<<<<<<
 *     """Reconstruction of primitive variables onto each face using
 *     AREPO implementation (2009).
 */

struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseLinear {
  struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase __pyx_base;
};
static struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseLinear;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_compute_gradients(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_add_spatial(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, CYTHON_UNUSED double __pyx_v_dt, CYTHON_UNUSED int __pyx_v_boost, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_add_temporal(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, CYTHON_UNUSED double __pyx_v_dt, CYTHON_UNUSED int __pyx_v_boost, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_compute_states(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, CYTHON_UNUSED double __pyx_v_dt, CYTHON_UNUSED int __pyx_v_boost, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_compute_gradients(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_compute_states(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, CYTHON_UNUSED double __pyx_v_dt, int __pyx_v_boost, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_compute_gradients(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_add_spatial(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, CYTHON_UNUSED double __pyx_v_dt, int __pyx_v_boost, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_add_temporal(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_compute_states(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'phd.utils.carray' */
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_BaseArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_BaseArrayIter = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_DoubleArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_IntArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_LongArray = 0;
static PyTypeObject *__pyx_ptype_3phd_5utils_6carray_LongLongArray = 0;

/* Module declarations from 'phd.containers.containers' */
static PyTypeObject *__pyx_ptype_3phd_10containers_10containers_CarrayContainer = 0;

/* Module declarations from 'phd.domain.boundary' */
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase = 0;
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_Reflective = 0;
static PyTypeObject *__pyx_ptype_3phd_6domain_8boundary_Periodic = 0;

/* Module declarations from 'phd.load_balance.tree' */
static PyTypeObject *__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool = 0;
static PyTypeObject *__pyx_ptype_3phd_12load_balance_4tree_Tree = 0;

/* Module declarations from 'phd.load_balance.load_balance' */
static PyTypeObject *__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance = 0;

/* Module declarations from 'phd.domain.domain_manager' */
static PyTypeObject *__pyx_ptype_3phd_6domain_14domain_manager_DomainManager = 0;

/* Module declarations from 'phd.mesh.pytess' */
static PyTypeObject *__pyx_ptype_3phd_4mesh_6pytess_PyTess = 0;
static PyTypeObject *__pyx_ptype_3phd_4mesh_6pytess_PyTess2d = 0;
static PyTypeObject *__pyx_ptype_3phd_4mesh_6pytess_PyTess3d = 0;

/* Module declarations from 'phd.equation_state.equation_state' */
static PyTypeObject *__pyx_ptype_3phd_14equation_state_14equation_state_EquationStateBase = 0;
static PyTypeObject *__pyx_ptype_3phd_14equation_state_14equation_state_IdealGas = 0;

/* Module declarations from 'phd.riemann.riemann' */
static PyTypeObject *__pyx_ptype_3phd_7riemann_7riemann_RiemannBase = 0;
static PyTypeObject *__pyx_ptype_3phd_7riemann_7riemann_HLL = 0;
static PyTypeObject *__pyx_ptype_3phd_7riemann_7riemann_HLLC = 0;
static PyTypeObject *__pyx_ptype_3phd_7riemann_7riemann_Exact = 0;

/* Module declarations from 'phd.mesh.mesh' */
static PyTypeObject *__pyx_ptype_3phd_4mesh_4mesh_Mesh = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'phd.reconstruction.reconstruction' */
static PyTypeObject *__pyx_ptype_3phd_14reconstruction_14reconstruction_ReconstructionBase = 0;
static PyTypeObject *__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseConstant = 0;
static PyTypeObject *__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseLinear = 0;
static int __pyx_v_3phd_14reconstruction_14reconstruction_REAL;
#define __Pyx_MODULE_NAME "phd.reconstruction.reconstruction"
extern int __pyx_module_is_main_phd__reconstruction__reconstruction;
int __pyx_module_is_main_phd__reconstruction__reconstruction = 0;

/* Implementation of 'phd.reconstruction.reconstruction' */
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__8[] = "_";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_com[] = "com";
static const char __pyx_k_phd[] = "phd";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_vel[] = "vel";
static const char __pyx_k_Real[] = "Real";
static const char __pyx_k_area[] = "area";
static const char __pyx_k_dcom[] = "dcom";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mesh[] = "mesh";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_tess[] = "tess";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_arepo[] = "arepo";
static const char __pyx_k_boost[] = "boost";
static const char __pyx_k_gamma[] = "gamma";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_pair_i[] = "pair-i";
static const char __pyx_k_pair_j[] = "pair-j";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_density[] = "density";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_limiter[] = "limiter";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_pressure[] = "pressure";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_particles[] = "particles";
static const char __pyx_k_phdLogger[] = "phdLogger";
static const char __pyx_k_primitive[] = "primitive";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_add_spatial[] = "add_spatial";
static const char __pyx_k_ParticleTAGS[] = "ParticleTAGS";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_add_temporal[] = "add_temporal";
static const char __pyx_k_gizmo_limiter[] = "gizmo_limiter";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_compute_states[] = "compute_states";
static const char __pyx_k_domain_manager[] = "domain_manager";
static const char __pyx_k_PieceWiseLinear[] = "PieceWiseLinear";
static const char __pyx_k_passive_scalars[] = "passive_scalars";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_PieceWiseConstant[] = "PieceWiseConstant";
static const char __pyx_k_compute_gradients[] = "compute_gradients";
static const char __pyx_k_passive_scalars_2[] = "passive-scalars";
static const char __pyx_k_ReconstructionBase[] = "ReconstructionBase";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_carray_named_groups[] = "carray_named_groups";
static const char __pyx_k_carrays_to_register[] = "carrays_to_register";
static const char __pyx_k_utils_particle_tags[] = "utils.particle_tags";
static const char __pyx_k_ERROR_incorrect_neighbors[] = "ERROR: incorrect neighbors!";
static const char __pyx_k_ERROR_Unrecognized_limiter[] = "ERROR: Unrecognized limiter";
static const char __pyx_k_fields_to_reconstruct_groups[] = "fields_to_reconstruct_groups";
static const char __pyx_k_Reconstruction_compute_called[] = "Reconstruction::compute called!";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_self_dpassive_self_passive_self[] = "self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling";
static const char __pyx_k_ERROR_Missing_fields_in_particle[] = "ERROR: Missing fields in particles!";
static const char __pyx_k_PieceWiseConstant_Starting_recon[] = "PieceWiseConstant: Starting reconstruction";
static const char __pyx_k_PieceWiseLinear_Starting_gradien[] = "PieceWiseLinear: Starting gradient cacluation";
static const char __pyx_k_PieceWiseLinear_Starting_spatial[] = "PieceWiseLinear: Starting spatial reconstruction";
static const char __pyx_k_PieceWiseLinear_Starting_tempora[] = "PieceWiseLinear: Starting temporal reconstruction";
static const char __pyx_k_Reconstruction__compute_gradient[] = "Reconstruction::_compute_gradients called!";
static const char __pyx_k_Reconstruction_add_spatial_calle[] = "Reconstruction::add_spatial called!";
static const char __pyx_k_Reconstruction_add_temporal_call[] = "Reconstruction::add_temporal called!";
static const char __pyx_k_Reconstruction_did_not_set_field[] = "Reconstruction did not set fields to reconstruct!";
static const char __pyx_k_Reconstruction_initialize_called[] = "Reconstruction::initialize called!";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self_alpha_self_df_self_dpassive[] = "self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling";
static PyObject *__pyx_kp_s_ERROR_Missing_fields_in_particle;
static PyObject *__pyx_kp_s_ERROR_Unrecognized_limiter;
static PyObject *__pyx_kp_s_ERROR_incorrect_neighbors;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_ParticleTAGS;
static PyObject *__pyx_n_s_PieceWiseConstant;
static PyObject *__pyx_kp_s_PieceWiseConstant_Starting_recon;
static PyObject *__pyx_n_s_PieceWiseLinear;
static PyObject *__pyx_kp_s_PieceWiseLinear_Starting_gradien;
static PyObject *__pyx_kp_s_PieceWiseLinear_Starting_spatial;
static PyObject *__pyx_kp_s_PieceWiseLinear_Starting_tempora;
static PyObject *__pyx_n_s_Real;
static PyObject *__pyx_n_s_ReconstructionBase;
static PyObject *__pyx_kp_s_Reconstruction__compute_gradient;
static PyObject *__pyx_kp_s_Reconstruction_add_spatial_calle;
static PyObject *__pyx_kp_s_Reconstruction_add_temporal_call;
static PyObject *__pyx_kp_s_Reconstruction_compute_called;
static PyObject *__pyx_kp_s_Reconstruction_did_not_set_field;
static PyObject *__pyx_kp_s_Reconstruction_initialize_called;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s__8;
static PyObject *__pyx_n_s_add_spatial;
static PyObject *__pyx_n_s_add_temporal;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_area;
static PyObject *__pyx_n_s_arepo;
static PyObject *__pyx_n_s_boost;
static PyObject *__pyx_n_s_carray_named_groups;
static PyObject *__pyx_n_s_carrays_to_register;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_com;
static PyObject *__pyx_n_s_compute_gradients;
static PyObject *__pyx_n_s_compute_states;
static PyObject *__pyx_n_s_dcom;
static PyObject *__pyx_n_s_density;
static PyObject *__pyx_n_s_domain_manager;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_fields_to_reconstruct_groups;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_gamma;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gizmo_limiter;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_limiter;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mesh;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_kp_s_pair_i;
static PyObject *__pyx_kp_s_pair_j;
static PyObject *__pyx_n_s_particles;
static PyObject *__pyx_n_s_passive_scalars;
static PyObject *__pyx_kp_s_passive_scalars_2;
static PyObject *__pyx_n_s_phd;
static PyObject *__pyx_n_s_phdLogger;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_pressure;
static PyObject *__pyx_n_s_primitive;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_kp_s_self_alpha_self_df_self_dpassive;
static PyObject *__pyx_kp_s_self_dpassive_self_passive_self;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_n_s_tess;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_utils_particle_tags;
static PyObject *__pyx_n_s_vel;
static PyObject *__pyx_n_s_velocity;
static PyObject *__pyx_n_s_volume;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static int __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase___init__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_2initialize(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_4add_fields(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_6compute_gradients(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_8add_spatial(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_10add_temporal(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12compute_states(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states___get__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_2__set__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_4__del__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states___get__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_2__set__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_4__del__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant___init__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self); /* proto */
static void __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_2__dealloc__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_4initialize(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_6add_fields(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_8compute_gradients(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_10compute_states(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear___init__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, PyObject *__pyx_v_limiter, int __pyx_v_gizmo_limiter, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_2__dealloc__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4add_fields(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_6initialize(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_8compute_gradients(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_10add_spatial(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_12add_temporal(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_14compute_states(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter___get__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_2__set__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_4__del__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter___get__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter_2__set__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad___get__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_2__set__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_4__del__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_3phd_14reconstruction_14reconstruction_ReconstructionBase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3phd_14reconstruction_14reconstruction_PieceWiseConstant(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3phd_14reconstruction_14reconstruction_PieceWiseLinear(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
/* Late includes */

/* "phd/reconstruction/reconstruction.pyx":16
 * 
 * cdef class ReconstructionBase:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.fields_registered = False
 *         self.has_passive_scalars = False
 */

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase___init__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase___init__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "phd/reconstruction/reconstruction.pyx":17
 * cdef class ReconstructionBase:
 *     def __init__(self):
 *         self.fields_registered = False             # <<<<<<<<<<<<<<
 *         self.has_passive_scalars = False
 * 
 */
  __pyx_v_self->fields_registered = 0;

  /* "phd/reconstruction/reconstruction.pyx":18
 *     def __init__(self):
 *         self.fields_registered = False
 *         self.has_passive_scalars = False             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self):
 */
  __pyx_v_self->has_passive_scalars = 0;

  /* "phd/reconstruction/reconstruction.pyx":16
 * 
 * cdef class ReconstructionBase:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.fields_registered = False
 *         self.has_passive_scalars = False
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":20
 *         self.has_passive_scalars = False
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Setup all connections for computation classes. Should always
 *         check if fields_registered is True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_3initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_2initialize[] = "Setup all connections for computation classes. Should always\n        check if fields_registered is True.\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_3initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_2initialize(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_2initialize(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self) {
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "phd/reconstruction/reconstruction.pyx":24
 *         check if fields_registered is True.
 *         """
 *         msg = "Reconstruction::initialize called!"             # <<<<<<<<<<<<<<
 *         raise NotImplementedError(msg)
 * 
 */
  __Pyx_INCREF(__pyx_kp_s_Reconstruction_initialize_called);
  __pyx_v_msg = __pyx_kp_s_Reconstruction_initialize_called;

  /* "phd/reconstruction/reconstruction.pyx":25
 *         """
 *         msg = "Reconstruction::initialize called!"
 *         raise NotImplementedError(msg)             # <<<<<<<<<<<<<<
 * 
 *     def add_fields(self, CarrayContainer particles):
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 25, __pyx_L1_error)

  /* "phd/reconstruction/reconstruction.pyx":20
 *         self.has_passive_scalars = False
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Setup all connections for computation classes. Should always
 *         check if fields_registered is True.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":27
 *         raise NotImplementedError(msg)
 * 
 *     def add_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Create lists of variables to reconstruct and setup containers
 *         for gradients and reconstructions.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_5add_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_4add_fields[] = "Create lists of variables to reconstruct and setup containers\n        for gradients and reconstructions.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_5add_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_fields (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 27, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_4add_fields(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_4add_fields(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_fields", 0);

  /* "phd/reconstruction/reconstruction.pyx":37
 * 
 *         """
 *         msg = "Reconstruction::initialize called!"             # <<<<<<<<<<<<<<
 *         raise NotImplementedError(msg)
 * 
 */
  __Pyx_INCREF(__pyx_kp_s_Reconstruction_initialize_called);
  __pyx_v_msg = __pyx_kp_s_Reconstruction_initialize_called;

  /* "phd/reconstruction/reconstruction.pyx":38
 *         """
 *         msg = "Reconstruction::initialize called!"
 *         raise NotImplementedError(msg)             # <<<<<<<<<<<<<<
 * 
 *     cpdef compute_gradients(self, CarrayContainer particles, Mesh mesh,
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 38, __pyx_L1_error)

  /* "phd/reconstruction/reconstruction.pyx":27
 *         raise NotImplementedError(msg)
 * 
 *     def add_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Create lists of variables to reconstruct and setup containers
 *         for gradients and reconstructions.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.add_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":40
 *         raise NotImplementedError(msg)
 * 
 *     cpdef compute_gradients(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                             DomainManager domain_manager):
 *         """Create spatial derivatives for reconstruction.
 */

static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_7compute_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_compute_gradients(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_gradients", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_gradients); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_7compute_gradients)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), ((PyObject *)__pyx_v_domain_manager)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), ((PyObject *)__pyx_v_domain_manager)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 40, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_mesh));
          __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_domain_manager));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/reconstruction/reconstruction.pyx":56
 * 
 *         """
 *         msg = "Reconstruction::_compute_gradients called!"             # <<<<<<<<<<<<<<
 *         raise NotImplementedError(msg)
 * 
 */
  __Pyx_INCREF(__pyx_kp_s_Reconstruction__compute_gradient);
  __pyx_v_msg = __pyx_kp_s_Reconstruction__compute_gradient;

  /* "phd/reconstruction/reconstruction.pyx":57
 *         """
 *         msg = "Reconstruction::_compute_gradients called!"
 *         raise NotImplementedError(msg)             # <<<<<<<<<<<<<<
 * 
 *     cpdef add_spatial(self, CarrayContainer particles, Mesh mesh,
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 57, __pyx_L1_error)

  /* "phd/reconstruction/reconstruction.pyx":40
 *         raise NotImplementedError(msg)
 * 
 *     cpdef compute_gradients(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                             DomainManager domain_manager):
 *         """Create spatial derivatives for reconstruction.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.compute_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_7compute_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_6compute_gradients[] = "Create spatial derivatives for reconstruction.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        mesh : Mesh\n            Class that builds the domain mesh.\n\n        domain_manager : DomainManager\n            Class that handels all things related with the domain.\n\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_7compute_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_gradients (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_domain_manager,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_gradients", 1, 3, 3, 1); __PYX_ERR(0, 40, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain_manager)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_gradients", 1, 3, 3, 2); __PYX_ERR(0, 40, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_gradients") < 0)) __PYX_ERR(0, 40, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_gradients", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 40, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.compute_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 40, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 40, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 41, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_6compute_gradients(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_domain_manager);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_6compute_gradients(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_gradients", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_compute_gradients(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_domain_manager, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.compute_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":59
 *         raise NotImplementedError(msg)
 * 
 *     cpdef add_spatial(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_9add_spatial(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_add_spatial(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, CYTHON_UNUSED double __pyx_v_dt, CYTHON_UNUSED int __pyx_v_boost, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_spatial", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_spatial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_9add_spatial)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 59, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_boost); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 59, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 59, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, ((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_3);
          __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
          PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, ((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/reconstruction/reconstruction.pyx":76
 * 
 *         """
 *         msg = "Reconstruction::add_spatial called!"             # <<<<<<<<<<<<<<
 *         raise NotImplementedError(msg)
 * 
 */
  __Pyx_INCREF(__pyx_kp_s_Reconstruction_add_spatial_calle);
  __pyx_v_msg = __pyx_kp_s_Reconstruction_add_spatial_calle;

  /* "phd/reconstruction/reconstruction.pyx":77
 *         """
 *         msg = "Reconstruction::add_spatial called!"
 *         raise NotImplementedError(msg)             # <<<<<<<<<<<<<<
 * 
 *     cpdef add_temporal(self, CarrayContainer particles, Mesh mesh,
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 77, __pyx_L1_error)

  /* "phd/reconstruction/reconstruction.pyx":59
 *         raise NotImplementedError(msg)
 * 
 *     cpdef add_spatial(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.add_spatial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_9add_spatial(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_8add_spatial[] = "Create spatial derivatives for reconstruction.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        mesh : Mesh\n            Class that builds the domain mesh.\n\n        domain_manager : DomainManager\n            Class that handels all things related with the domain.\n\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_9add_spatial(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  double __pyx_v_gamma;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager = 0;
  double __pyx_v_dt;
  int __pyx_v_boost;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_spatial (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_gamma,&__pyx_n_s_domain_manager,&__pyx_n_s_dt,&__pyx_n_s_boost,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, 1); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gamma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, 2); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain_manager)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, 3); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, 4); __PYX_ERR(0, 59, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, 5); __PYX_ERR(0, 59, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_spatial") < 0)) __PYX_ERR(0, 59, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_gamma = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_gamma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 60, __pyx_L3_error)
    __pyx_v_domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)values[3]);
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 61, __pyx_L3_error)
    __pyx_v_boost = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_boost == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 61, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 59, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.add_spatial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 59, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 59, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 60, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_8add_spatial(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_8add_spatial(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_spatial", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_add_spatial(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.add_spatial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":79
 *         raise NotImplementedError(msg)
 * 
 *     cpdef add_temporal(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11add_temporal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_add_temporal(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, CYTHON_UNUSED double __pyx_v_dt, CYTHON_UNUSED int __pyx_v_boost, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_temporal", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_temporal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11add_temporal)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_boost); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 79, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, ((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_3);
          __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
          PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, ((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/reconstruction/reconstruction.pyx":96
 * 
 *         """
 *         msg = "Reconstruction::add_temporal called!"             # <<<<<<<<<<<<<<
 *         raise NotImplementedError(msg)
 * 
 */
  __Pyx_INCREF(__pyx_kp_s_Reconstruction_add_temporal_call);
  __pyx_v_msg = __pyx_kp_s_Reconstruction_add_temporal_call;

  /* "phd/reconstruction/reconstruction.pyx":97
 *         """
 *         msg = "Reconstruction::add_temporal called!"
 *         raise NotImplementedError(msg)             # <<<<<<<<<<<<<<
 * 
 *     cpdef compute_states(self, CarrayContainer particles, Mesh mesh,
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 97, __pyx_L1_error)

  /* "phd/reconstruction/reconstruction.pyx":79
 *         raise NotImplementedError(msg)
 * 
 *     cpdef add_temporal(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.add_temporal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11add_temporal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_10add_temporal[] = "Create spatial derivatives for reconstruction.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        mesh : Mesh\n            Class that builds the domain mesh.\n\n        domain_manager : DomainManager\n            Class that handels all things related with the domain.\n\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11add_temporal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  double __pyx_v_gamma;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager = 0;
  double __pyx_v_dt;
  int __pyx_v_boost;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_temporal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_gamma,&__pyx_n_s_domain_manager,&__pyx_n_s_dt,&__pyx_n_s_boost,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, 1); __PYX_ERR(0, 79, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gamma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, 2); __PYX_ERR(0, 79, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain_manager)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, 3); __PYX_ERR(0, 79, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, 4); __PYX_ERR(0, 79, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, 5); __PYX_ERR(0, 79, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_temporal") < 0)) __PYX_ERR(0, 79, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_gamma = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_gamma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 80, __pyx_L3_error)
    __pyx_v_domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)values[3]);
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L3_error)
    __pyx_v_boost = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_boost == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 79, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.add_temporal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_10add_temporal(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_10add_temporal(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_temporal", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_add_temporal(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.add_temporal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":99
 *         raise NotImplementedError(msg)
 * 
 *     cpdef compute_states(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_13compute_states(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_compute_states(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, CYTHON_UNUSED double __pyx_v_dt, CYTHON_UNUSED int __pyx_v_boost, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_states", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_states); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_13compute_states)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 99, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_boost); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 99, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, ((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_3);
          __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
          PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, ((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/reconstruction/reconstruction.pyx":128
 * 
 *         """
 *         msg = "Reconstruction::compute called!"             # <<<<<<<<<<<<<<
 *         raise NotImplementedError(msg)
 * 
 */
  __Pyx_INCREF(__pyx_kp_s_Reconstruction_compute_called);
  __pyx_v_msg = __pyx_kp_s_Reconstruction_compute_called;

  /* "phd/reconstruction/reconstruction.pyx":129
 *         """
 *         msg = "Reconstruction::compute called!"
 *         raise NotImplementedError(msg)             # <<<<<<<<<<<<<<
 * 
 * cdef class PieceWiseConstant(ReconstructionBase):
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_v_msg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 129, __pyx_L1_error)

  /* "phd/reconstruction/reconstruction.pyx":99
 *         raise NotImplementedError(msg)
 * 
 *     cpdef compute_states(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.compute_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_13compute_states(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12compute_states[] = "Perform reconstruction from cell center to face center.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        mesh : Mesh\n            Class that builds the domain mesh.\n\n        gamma : double\n            Ratio of specific heats.\n\n        domain_manager : DomainManager\n            Class that handels all things related with the domain.\n\n        dt : float\n            Time step of the simulation.\n\n        boost : bool\n            Solve equations in moving reference frame.\n\n        add_temporal : bool\n            If true add time derivatives in the reconstruction.\n\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_13compute_states(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  double __pyx_v_gamma;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager = 0;
  double __pyx_v_dt;
  int __pyx_v_boost;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_states (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_gamma,&__pyx_n_s_domain_manager,&__pyx_n_s_dt,&__pyx_n_s_boost,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 1); __PYX_ERR(0, 99, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gamma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 2); __PYX_ERR(0, 99, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain_manager)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 3); __PYX_ERR(0, 99, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 4); __PYX_ERR(0, 99, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 5); __PYX_ERR(0, 99, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_states") < 0)) __PYX_ERR(0, 99, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_gamma = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_gamma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L3_error)
    __pyx_v_domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)values[3]);
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L3_error)
    __pyx_v_boost = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_boost == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 99, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.compute_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 99, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 99, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 100, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12compute_states(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12compute_states(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_states", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_compute_states(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.compute_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pxd":14
 *     cdef bint has_passive_scalars
 * 
 *     cdef public CarrayContainer left_states             # <<<<<<<<<<<<<<
 *     cdef public CarrayContainer right_states
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states___get__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states___get__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->left_states));
  __pyx_r = ((PyObject *)__pyx_v_self->left_states);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_2__set__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_2__set__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(2, 14, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->left_states);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->left_states));
  __pyx_v_self->left_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.left_states.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_4__del__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_4__del__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->left_states);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->left_states));
  __pyx_v_self->left_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pxd":15
 * 
 *     cdef public CarrayContainer left_states
 *     cdef public CarrayContainer right_states             # <<<<<<<<<<<<<<
 * 
 *     cdef dict reconstruct_fields
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states___get__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states___get__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->right_states));
  __pyx_r = ((PyObject *)__pyx_v_self->right_states);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_2__set__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_2__set__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(2, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->right_states);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->right_states));
  __pyx_v_self->right_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.right_states.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_4__del__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_4__del__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->right_states);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->right_states));
  __pyx_v_self->right_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_14__reduce_cython__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_16__setstate_cython__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_18ReconstructionBase_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.ReconstructionBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":163
 * 
 *     """
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(PieceWiseConstant, self).__init__()
 * 
 */

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant___init__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant___init__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "phd/reconstruction/reconstruction.pyx":164
 *     """
 *     def __init__(self):
 *         super(PieceWiseConstant, self).__init__()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseConstant));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseConstant));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseConstant));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":163
 * 
 *     """
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super(PieceWiseConstant, self).__init__()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":166
 *         super(PieceWiseConstant, self).__init__()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Release pointers"""
 * 
 */

/* Python wrapper */
static void __pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_2__dealloc__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_2__dealloc__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "phd/reconstruction/reconstruction.pyx":169
 *         """Release pointers"""
 * 
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *             stdlib.free(self.passive)
 *             stdlib.free(self.passive_l)
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.has_passive_scalars != 0);
  if (__pyx_t_1) {

    /* "phd/reconstruction/reconstruction.pyx":170
 * 
 *         if self.has_passive_scalars:
 *             stdlib.free(self.passive)             # <<<<<<<<<<<<<<
 *             stdlib.free(self.passive_l)
 *             stdlib.free(self.passive_r)
 */
    free(__pyx_v_self->__pyx_base.passive);

    /* "phd/reconstruction/reconstruction.pyx":171
 *         if self.has_passive_scalars:
 *             stdlib.free(self.passive)
 *             stdlib.free(self.passive_l)             # <<<<<<<<<<<<<<
 *             stdlib.free(self.passive_r)
 * 
 */
    free(__pyx_v_self->__pyx_base.passive_l);

    /* "phd/reconstruction/reconstruction.pyx":172
 *             stdlib.free(self.passive)
 *             stdlib.free(self.passive_l)
 *             stdlib.free(self.passive_r)             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self):
 */
    free(__pyx_v_self->__pyx_base.passive_r);

    /* "phd/reconstruction/reconstruction.pyx":169
 *         """Release pointers"""
 * 
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *             stdlib.free(self.passive)
 *             stdlib.free(self.passive_l)
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":166
 *         super(PieceWiseConstant, self).__init__()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Release pointers"""
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "phd/reconstruction/reconstruction.pyx":174
 *             stdlib.free(self.passive_r)
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Setup all connections for computation classes. Should always
 *         check if fields_registered is True.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_5initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_4initialize[] = "Setup all connections for computation classes. Should always\n        check if fields_registered is True.\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_5initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_4initialize(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_4initialize(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self) {
  CYTHON_UNUSED int __pyx_v_dim;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "phd/reconstruction/reconstruction.pyx":180
 *         cdef int dim
 * 
 *         if not self.fields_registered:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Reconstruction did not set fields to reconstruct!")
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_self->__pyx_base.fields_registered != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "phd/reconstruction/reconstruction.pyx":181
 * 
 *         if not self.fields_registered:
 *             raise RuntimeError("Reconstruction did not set fields to reconstruct!")             # <<<<<<<<<<<<<<
 * 
 *         # left/right face states for riemann solver
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 181, __pyx_L1_error)

    /* "phd/reconstruction/reconstruction.pyx":180
 *         cdef int dim
 * 
 *         if not self.fields_registered:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Reconstruction did not set fields to reconstruct!")
 * 
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":184
 * 
 *         # left/right face states for riemann solver
 *         self.left_states  = CarrayContainer(carrays_to_register=self.reconstruct_fields)             # <<<<<<<<<<<<<<
 *         self.right_states = CarrayContainer(carrays_to_register=self.reconstruct_fields)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_carrays_to_register, __pyx_v_self->__pyx_base.reconstruct_fields) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_10containers_10containers_CarrayContainer), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.left_states);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.left_states));
  __pyx_v_self->__pyx_base.left_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "phd/reconstruction/reconstruction.pyx":185
 *         # left/right face states for riemann solver
 *         self.left_states  = CarrayContainer(carrays_to_register=self.reconstruct_fields)
 *         self.right_states = CarrayContainer(carrays_to_register=self.reconstruct_fields)             # <<<<<<<<<<<<<<
 * 
 *         # named groups for easier selection
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_carrays_to_register, __pyx_v_self->__pyx_base.reconstruct_fields) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_10containers_10containers_CarrayContainer), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.right_states);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.right_states));
  __pyx_v_self->__pyx_base.right_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/reconstruction/reconstruction.pyx":188
 * 
 *         # named groups for easier selection
 *         self.left_states.carray_named_groups  = self.reconstruct_field_groups             # <<<<<<<<<<<<<<
 *         self.right_states.carray_named_groups = self.reconstruct_field_groups
 * 
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.reconstruct_field_groups;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.left_states->carray_named_groups);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.left_states->carray_named_groups);
  __pyx_v_self->__pyx_base.left_states->carray_named_groups = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/reconstruction/reconstruction.pyx":189
 *         # named groups for easier selection
 *         self.left_states.carray_named_groups  = self.reconstruct_field_groups
 *         self.right_states.carray_named_groups = self.reconstruct_field_groups             # <<<<<<<<<<<<<<
 * 
 *         # allocate helper pointers
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.reconstruct_field_groups;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.right_states->carray_named_groups);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.right_states->carray_named_groups);
  __pyx_v_self->__pyx_base.right_states->carray_named_groups = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/reconstruction/reconstruction.pyx":192
 * 
 *         # allocate helper pointers
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *             dim = len(self.left_states.carray_named_groups["velocity"])
 *             self.num_passive = len(self.fields_to_reconstruct_groups["passive_scalars"])
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.has_passive_scalars != 0);
  if (__pyx_t_1) {

    /* "phd/reconstruction/reconstruction.pyx":193
 *         # allocate helper pointers
 *         if self.has_passive_scalars:
 *             dim = len(self.left_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 *             self.num_passive = len(self.fields_to_reconstruct_groups["passive_scalars"])
 * 
 */
    if (unlikely(__pyx_v_self->__pyx_base.left_states->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 193, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.left_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_dim = __pyx_t_4;

    /* "phd/reconstruction/reconstruction.pyx":194
 *         if self.has_passive_scalars:
 *             dim = len(self.left_states.carray_named_groups["velocity"])
 *             self.num_passive = len(self.fields_to_reconstruct_groups["passive_scalars"])             # <<<<<<<<<<<<<<
 * 
 *             self.passive   = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fields_to_reconstruct_groups); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_passive_scalars); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->__pyx_base.num_passive = __pyx_t_4;

    /* "phd/reconstruction/reconstruction.pyx":196
 *             self.num_passive = len(self.fields_to_reconstruct_groups["passive_scalars"])
 * 
 *             self.passive   = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))             # <<<<<<<<<<<<<<
 *             self.passive_l = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 *             self.passive_r = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 */
    __pyx_v_self->__pyx_base.passive = ((__pyx_t_5numpy_float64_t **)malloc((__pyx_v_self->__pyx_base.num_passive * (sizeof(void *)))));

    /* "phd/reconstruction/reconstruction.pyx":197
 * 
 *             self.passive   = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 *             self.passive_l = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))             # <<<<<<<<<<<<<<
 *             self.passive_r = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 * 
 */
    __pyx_v_self->__pyx_base.passive_l = ((__pyx_t_5numpy_float64_t **)malloc((__pyx_v_self->__pyx_base.num_passive * (sizeof(void *)))));

    /* "phd/reconstruction/reconstruction.pyx":198
 *             self.passive   = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 *             self.passive_l = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 *             self.passive_r = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))             # <<<<<<<<<<<<<<
 * 
 *     def add_fields(self, CarrayContainer particles):
 */
    __pyx_v_self->__pyx_base.passive_r = ((__pyx_t_5numpy_float64_t **)malloc((__pyx_v_self->__pyx_base.num_passive * (sizeof(void *)))));

    /* "phd/reconstruction/reconstruction.pyx":192
 * 
 *         # allocate helper pointers
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *             dim = len(self.left_states.carray_named_groups["velocity"])
 *             self.num_passive = len(self.fields_to_reconstruct_groups["passive_scalars"])
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":174
 *             stdlib.free(self.passive_r)
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Setup all connections for computation classes. Should always
 *         check if fields_registered is True.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":200
 *             self.passive_r = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 * 
 *     def add_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Create lists of variables to reconstruct and setup containers
 *         for gradients and reconstructions.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_7add_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_6add_fields[] = "Create lists of variables to reconstruct and setup containers\n        for gradients and reconstructions.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_7add_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_fields (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 200, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_6add_fields(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_6add_fields(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  PyObject *__pyx_v_field_name = 0;
  PyObject *__pyx_v_carray_to_register = 0;
  PyObject *__pyx_v_carray_named_groups = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_fields", 0);

  /* "phd/reconstruction/reconstruction.pyx":211
 *         """
 *         cdef str field_name
 *         cdef dict carray_to_register = {}, carray_named_groups = {}             # <<<<<<<<<<<<<<
 * 
 *         if "primitive" not in particles.carray_named_groups or\
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_carray_to_register = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_carray_named_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":213
 *         cdef dict carray_to_register = {}, carray_named_groups = {}
 * 
 *         if "primitive" not in particles.carray_named_groups or\             # <<<<<<<<<<<<<<
 *                 "velocity" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 213, __pyx_L1_error)
  }
  __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_primitive, __pyx_v_particles->carray_named_groups, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 213, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "phd/reconstruction/reconstruction.pyx":214
 * 
 *         if "primitive" not in particles.carray_named_groups or\
 *                 "velocity" not in particles.carray_named_groups:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 214, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_velocity, __pyx_v_particles->carray_named_groups, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 214, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;

  /* "phd/reconstruction/reconstruction.pyx":213
 *         cdef dict carray_to_register = {}, carray_named_groups = {}
 * 
 *         if "primitive" not in particles.carray_named_groups or\             # <<<<<<<<<<<<<<
 *                 "velocity" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 */
  if (unlikely(__pyx_t_2)) {

    /* "phd/reconstruction/reconstruction.pyx":215
 *         if "primitive" not in particles.carray_named_groups or\
 *                 "velocity" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")             # <<<<<<<<<<<<<<
 * 
 *         # add primitive fields
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 215, __pyx_L1_error)

    /* "phd/reconstruction/reconstruction.pyx":213
 *         cdef dict carray_to_register = {}, carray_named_groups = {}
 * 
 *         if "primitive" not in particles.carray_named_groups or\             # <<<<<<<<<<<<<<
 *                 "velocity" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":218
 * 
 *         # add primitive fields
 *         for field_name in particles.carray_named_groups["primitive"]:             # <<<<<<<<<<<<<<
 *             carray_to_register[field_name] = "double"
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 218, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 218, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 218, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 218, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_field_name, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "phd/reconstruction/reconstruction.pyx":219
 *         # add primitive fields
 *         for field_name in particles.carray_named_groups["primitive"]:
 *             carray_to_register[field_name] = "double"             # <<<<<<<<<<<<<<
 * 
 *         # add primitive and velocity in named groups
 */
    if (unlikely(PyDict_SetItem(__pyx_v_carray_to_register, __pyx_v_field_name, __pyx_n_s_double) < 0)) __PYX_ERR(0, 219, __pyx_L1_error)

    /* "phd/reconstruction/reconstruction.pyx":218
 * 
 *         # add primitive fields
 *         for field_name in particles.carray_named_groups["primitive"]:             # <<<<<<<<<<<<<<
 *             carray_to_register[field_name] = "double"
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "phd/reconstruction/reconstruction.pyx":222
 * 
 *         # add primitive and velocity in named groups
 *         carray_named_groups["primitive"] = particles.carray_named_groups["primitive"]             # <<<<<<<<<<<<<<
 *         carray_named_groups["velocity"] = particles.carray_named_groups["velocity"]
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 222, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyDict_SetItem(__pyx_v_carray_named_groups, __pyx_n_s_primitive, __pyx_t_5) < 0)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "phd/reconstruction/reconstruction.pyx":223
 *         # add primitive and velocity in named groups
 *         carray_named_groups["primitive"] = particles.carray_named_groups["primitive"]
 *         carray_named_groups["velocity"] = particles.carray_named_groups["velocity"]             # <<<<<<<<<<<<<<
 * 
 *         # add passive-scalars if any
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 223, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyDict_SetItem(__pyx_v_carray_named_groups, __pyx_n_s_velocity, __pyx_t_5) < 0)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "phd/reconstruction/reconstruction.pyx":226
 * 
 *         # add passive-scalars if any
 *         if "passive-scalars" in particles.carray_named_groups.keys():             # <<<<<<<<<<<<<<
 *             self.has_passive_scalars = True
 *             carray_named_groups["passive-scalars"] = particles.carray_named_groups["passive-scalars"]
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 226, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_Keys(__pyx_v_particles->carray_named_groups); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_passive_scalars_2, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "phd/reconstruction/reconstruction.pyx":227
 *         # add passive-scalars if any
 *         if "passive-scalars" in particles.carray_named_groups.keys():
 *             self.has_passive_scalars = True             # <<<<<<<<<<<<<<
 *             carray_named_groups["passive-scalars"] = particles.carray_named_groups["passive-scalars"]
 *             self.num_passive = len(particles.carray_named_groups["passive-scalars"])
 */
    __pyx_v_self->__pyx_base.has_passive_scalars = 1;

    /* "phd/reconstruction/reconstruction.pyx":228
 *         if "passive-scalars" in particles.carray_named_groups.keys():
 *             self.has_passive_scalars = True
 *             carray_named_groups["passive-scalars"] = particles.carray_named_groups["passive-scalars"]             # <<<<<<<<<<<<<<
 *             self.num_passive = len(particles.carray_named_groups["passive-scalars"])
 * 
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 228, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_carray_named_groups, __pyx_kp_s_passive_scalars_2, __pyx_t_5) < 0)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "phd/reconstruction/reconstruction.pyx":229
 *             self.has_passive_scalars = True
 *             carray_named_groups["passive-scalars"] = particles.carray_named_groups["passive-scalars"]
 *             self.num_passive = len(particles.carray_named_groups["passive-scalars"])             # <<<<<<<<<<<<<<
 * 
 *         # store fields info
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 229, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_self->__pyx_base.num_passive = __pyx_t_6;

    /* "phd/reconstruction/reconstruction.pyx":226
 * 
 *         # add passive-scalars if any
 *         if "passive-scalars" in particles.carray_named_groups.keys():             # <<<<<<<<<<<<<<
 *             self.has_passive_scalars = True
 *             carray_named_groups["passive-scalars"] = particles.carray_named_groups["passive-scalars"]
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":232
 * 
 *         # store fields info
 *         self.fields_registered = True             # <<<<<<<<<<<<<<
 *         self.reconstruct_fields = carray_to_register
 *         self.reconstruct_field_groups = carray_named_groups
 */
  __pyx_v_self->__pyx_base.fields_registered = 1;

  /* "phd/reconstruction/reconstruction.pyx":233
 *         # store fields info
 *         self.fields_registered = True
 *         self.reconstruct_fields = carray_to_register             # <<<<<<<<<<<<<<
 *         self.reconstruct_field_groups = carray_named_groups
 * 
 */
  __Pyx_INCREF(__pyx_v_carray_to_register);
  __Pyx_GIVEREF(__pyx_v_carray_to_register);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.reconstruct_fields);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.reconstruct_fields);
  __pyx_v_self->__pyx_base.reconstruct_fields = __pyx_v_carray_to_register;

  /* "phd/reconstruction/reconstruction.pyx":234
 *         self.fields_registered = True
 *         self.reconstruct_fields = carray_to_register
 *         self.reconstruct_field_groups = carray_named_groups             # <<<<<<<<<<<<<<
 * 
 *     cpdef compute_gradients(self, CarrayContainer particles, Mesh mesh,
 */
  __Pyx_INCREF(__pyx_v_carray_named_groups);
  __Pyx_GIVEREF(__pyx_v_carray_named_groups);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.reconstruct_field_groups);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.reconstruct_field_groups);
  __pyx_v_self->__pyx_base.reconstruct_field_groups = __pyx_v_carray_named_groups;

  /* "phd/reconstruction/reconstruction.pyx":200
 *             self.passive_r = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 * 
 *     def add_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Create lists of variables to reconstruct and setup containers
 *         for gradients and reconstructions.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.add_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field_name);
  __Pyx_XDECREF(__pyx_v_carray_to_register);
  __Pyx_XDECREF(__pyx_v_carray_named_groups);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":236
 *         self.reconstruct_field_groups = carray_named_groups
 * 
 *     cpdef compute_gradients(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                             DomainManager domain_manager):
 *         """Create spatial derivatives for reconstruction.
 */

static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_9compute_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_compute_gradients(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, CYTHON_UNUSED struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_gradients", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_gradients); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_9compute_gradients)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), ((PyObject *)__pyx_v_domain_manager)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), ((PyObject *)__pyx_v_domain_manager)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 236, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_mesh));
          __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_domain_manager));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/reconstruction/reconstruction.pyx":238
 *     cpdef compute_gradients(self, CarrayContainer particles, Mesh mesh,
 *                             DomainManager domain_manager):
 *         """Create spatial derivatives for reconstruction.             # <<<<<<<<<<<<<<
 * 
 *         Parameters
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.compute_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":236
 *         self.reconstruct_field_groups = carray_named_groups
 * 
 *     cpdef compute_gradients(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                             DomainManager domain_manager):
 *         """Create spatial derivatives for reconstruction.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_9compute_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_8compute_gradients[] = "Create spatial derivatives for reconstruction.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        mesh : Mesh\n            Class that builds the domain mesh.\n\n        domain_manager : DomainManager\n            Class that handels all things related with the domain.\n\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_9compute_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_gradients (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_domain_manager,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_gradients", 1, 3, 3, 1); __PYX_ERR(0, 236, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain_manager)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_gradients", 1, 3, 3, 2); __PYX_ERR(0, 236, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_gradients") < 0)) __PYX_ERR(0, 236, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_gradients", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 236, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.compute_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 236, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 236, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 237, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_8compute_gradients(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_domain_manager);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_8compute_gradients(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_gradients", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_compute_gradients(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_domain_manager, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.compute_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":254
 *         pass # no gradients for constant reconstruction
 * 
 *     cpdef compute_states(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_11compute_states(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_compute_states(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, CYTHON_UNUSED double __pyx_v_dt, int __pyx_v_boost, int __pyx_skip_dispatch) {
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_d = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_p = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dr = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pr = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_pair_i = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_pair_j = 0;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_n;
  int __pyx_v_dim;
  __pyx_t_5numpy_float64_t *__pyx_v_v[3];
  __pyx_t_5numpy_float64_t *__pyx_v_vl[3];
  __pyx_t_5numpy_float64_t *__pyx_v_vr[3];
  __pyx_t_5numpy_float64_t *__pyx_v_wx[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_states", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_states); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_11compute_states)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_boost); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 254, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, ((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_3);
          __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
          PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, ((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/reconstruction/reconstruction.pyx":281
 *         """
 *         # particle primitive variables
 *         cdef DoubleArray d = particles.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray p = particles.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 281, __pyx_L1_error)
  __pyx_v_d = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":282
 *         # particle primitive variables
 *         cdef DoubleArray d = particles.get_carray("density")
 *         cdef DoubleArray p = particles.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         # density
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 282, __pyx_L1_error)
  __pyx_v_p = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":285
 * 
 *         # density
 *         cdef DoubleArray dl = self.left_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray dr = self.right_states.get_carray("density")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.left_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 285, __pyx_L1_error)
  __pyx_v_dl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":286
 *         # density
 *         cdef DoubleArray dl = self.left_states.get_carray("density")
 *         cdef DoubleArray dr = self.right_states.get_carray("density")             # <<<<<<<<<<<<<<
 * 
 *         # pressure
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.right_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 286, __pyx_L1_error)
  __pyx_v_dr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":289
 * 
 *         # pressure
 *         cdef DoubleArray pl = self.left_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pr = self.right_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.left_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 289, __pyx_L1_error)
  __pyx_v_pl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":290
 *         # pressure
 *         cdef DoubleArray pl = self.left_states.get_carray("pressure")
 *         cdef DoubleArray pr = self.right_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         # particle indices that make up face
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.right_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 290, __pyx_L1_error)
  __pyx_v_pr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":293
 * 
 *         # particle indices that make up face
 *         cdef LongArray pair_i = mesh.faces.get_carray("pair-i")             # <<<<<<<<<<<<<<
 *         cdef LongArray pair_j = mesh.faces.get_carray("pair-j")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray(__pyx_v_mesh->faces, __pyx_kp_s_pair_i, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 293, __pyx_L1_error)
  __pyx_v_pair_i = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":294
 *         # particle indices that make up face
 *         cdef LongArray pair_i = mesh.faces.get_carray("pair-i")
 *         cdef LongArray pair_j = mesh.faces.get_carray("pair-j")             # <<<<<<<<<<<<<<
 * 
 *         cdef int i, j, k, n, dim, num_species
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray(__pyx_v_mesh->faces, __pyx_kp_s_pair_j, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 294, __pyx_L1_error)
  __pyx_v_pair_j = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":299
 *         cdef np.float64_t *v[3], *vl[3], *vr[3], *wx[3]
 * 
 *         phdLogger.info("PieceWiseConstant: Starting reconstruction")             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phdLogger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_kp_s_PieceWiseConstant_Starting_recon) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_PieceWiseConstant_Starting_recon);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":301
 *         phdLogger.info("PieceWiseConstant: Starting reconstruction")
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *         # particle and face velocity pointer
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 301, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_10;

  /* "phd/reconstruction/reconstruction.pyx":304
 * 
 *         # particle and face velocity pointer
 *         particles.pointer_groups(v, particles.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 *         mesh.faces.pointer_groups(wx, mesh.faces.carray_named_groups["velocity"])
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 304, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 304, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_v, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":305
 *         # particle and face velocity pointer
 *         particles.pointer_groups(v, particles.carray_named_groups["velocity"])
 *         mesh.faces.pointer_groups(wx, mesh.faces.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # resize states to hold values at each face
 */
  if (unlikely(__pyx_v_mesh->faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 305, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_mesh->faces->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 305, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->pointer_groups(__pyx_v_mesh->faces, __pyx_v_wx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":308
 * 
 *         # resize states to hold values at each face
 *         self.left_states.resize(mesh.faces.get_carray_size())             # <<<<<<<<<<<<<<
 *         self.right_states.resize(mesh.faces.get_carray_size())
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->resize(__pyx_v_self->__pyx_base.left_states, ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":309
 *         # resize states to hold values at each face
 *         self.left_states.resize(mesh.faces.get_carray_size())
 *         self.right_states.resize(mesh.faces.get_carray_size())             # <<<<<<<<<<<<<<
 * 
 *         # velocity
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->resize(__pyx_v_self->__pyx_base.right_states, ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":312
 * 
 *         # velocity
 *         self.left_states.pointer_groups(vl,  self.left_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 *         self.right_states.pointer_groups(vr, self.right_states.carray_named_groups["velocity"])
 * 
 */
  if (unlikely(__pyx_v_self->__pyx_base.left_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 312, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.left_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 312, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.left_states, __pyx_v_vl, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":313
 *         # velocity
 *         self.left_states.pointer_groups(vl,  self.left_states.carray_named_groups["velocity"])
 *         self.right_states.pointer_groups(vr, self.right_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # include passive scalars if any
 */
  if (unlikely(__pyx_v_self->__pyx_base.right_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 313, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.right_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 313, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.right_states, __pyx_v_vr, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":316
 * 
 *         # include passive scalars if any
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 * 
 *             # pointers to passive and left/right states
 */
  __pyx_t_11 = (__pyx_v_self->__pyx_base.has_passive_scalars != 0);
  if (__pyx_t_11) {

    /* "phd/reconstruction/reconstruction.pyx":319
 * 
 *             # pointers to passive and left/right states
 *             particles.pointer_groups(self.passive, particles.carray_named_groups["passive-scalars"])             # <<<<<<<<<<<<<<
 *             self.left_states.pointer_groups(self.passive_l, self.carray_named_groups["passive-scalars"])
 *             self.right_states.pointer_groups(self.passive_r, self.carray_named_groups["passive-scalars"])
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 319, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 319, __pyx_L1_error)
    ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_self->__pyx_base.passive, ((PyObject*)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/reconstruction/reconstruction.pyx":320
 *             # pointers to passive and left/right states
 *             particles.pointer_groups(self.passive, particles.carray_named_groups["passive-scalars"])
 *             self.left_states.pointer_groups(self.passive_l, self.carray_named_groups["passive-scalars"])             # <<<<<<<<<<<<<<
 *             self.right_states.pointer_groups(self.passive_r, self.carray_named_groups["passive-scalars"])
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_carray_named_groups); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 320, __pyx_L1_error)
    ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.left_states, __pyx_v_self->__pyx_base.passive_l, ((PyObject*)__pyx_t_6));
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "phd/reconstruction/reconstruction.pyx":321
 *             particles.pointer_groups(self.passive, particles.carray_named_groups["passive-scalars"])
 *             self.left_states.pointer_groups(self.passive_l, self.carray_named_groups["passive-scalars"])
 *             self.right_states.pointer_groups(self.passive_r, self.carray_named_groups["passive-scalars"])             # <<<<<<<<<<<<<<
 * 
 *         # loop through each face
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_carray_named_groups); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 321, __pyx_L1_error)
    ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.right_states, __pyx_v_self->__pyx_base.passive_r, ((PyObject*)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/reconstruction/reconstruction.pyx":316
 * 
 *         # include passive scalars if any
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 * 
 *             # pointers to passive and left/right states
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":324
 * 
 *         # loop through each face
 *         for n in range(mesh.faces.get_carray_size()):             # <<<<<<<<<<<<<<
 * 
 *             # particles that make up the face
 */
  __pyx_t_8 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0);
  __pyx_t_12 = __pyx_t_8;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_n = __pyx_t_13;

    /* "phd/reconstruction/reconstruction.pyx":327
 * 
 *             # particles that make up the face
 *             i = pair_i.data[n]             # <<<<<<<<<<<<<<
 *             j = pair_j.data[n]
 * 
 */
    __pyx_v_i = (__pyx_v_pair_i->data[__pyx_v_n]);

    /* "phd/reconstruction/reconstruction.pyx":328
 *             # particles that make up the face
 *             i = pair_i.data[n]
 *             j = pair_j.data[n]             # <<<<<<<<<<<<<<
 * 
 *             # density
 */
    __pyx_v_j = (__pyx_v_pair_j->data[__pyx_v_n]);

    /* "phd/reconstruction/reconstruction.pyx":331
 * 
 *             # density
 *             dl.data[n] = d.data[i]             # <<<<<<<<<<<<<<
 *             dr.data[n] = d.data[j]
 * 
 */
    (__pyx_v_dl->data[__pyx_v_n]) = (__pyx_v_d->data[__pyx_v_i]);

    /* "phd/reconstruction/reconstruction.pyx":332
 *             # density
 *             dl.data[n] = d.data[i]
 *             dr.data[n] = d.data[j]             # <<<<<<<<<<<<<<
 * 
 *             # add passive scalars if any
 */
    (__pyx_v_dr->data[__pyx_v_n]) = (__pyx_v_d->data[__pyx_v_j]);

    /* "phd/reconstruction/reconstruction.pyx":335
 * 
 *             # add passive scalars if any
 *             if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *                 for k in range(self.num_passive):
 *                     self.passive_l[k][n] = self.passive[k][i]
 */
    __pyx_t_11 = (__pyx_v_self->__pyx_base.has_passive_scalars != 0);
    if (__pyx_t_11) {

      /* "phd/reconstruction/reconstruction.pyx":336
 *             # add passive scalars if any
 *             if self.has_passive_scalars:
 *                 for k in range(self.num_passive):             # <<<<<<<<<<<<<<
 *                     self.passive_l[k][n] = self.passive[k][i]
 *                     self.passive_r[k][n] = self.passive[k][j]
 */
      __pyx_t_14 = __pyx_v_self->__pyx_base.num_passive;
      __pyx_t_15 = __pyx_t_14;
      for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
        __pyx_v_k = __pyx_t_16;

        /* "phd/reconstruction/reconstruction.pyx":337
 *             if self.has_passive_scalars:
 *                 for k in range(self.num_passive):
 *                     self.passive_l[k][n] = self.passive[k][i]             # <<<<<<<<<<<<<<
 *                     self.passive_r[k][n] = self.passive[k][j]
 * 
 */
        ((__pyx_v_self->__pyx_base.passive_l[__pyx_v_k])[__pyx_v_n]) = ((__pyx_v_self->__pyx_base.passive[__pyx_v_k])[__pyx_v_i]);

        /* "phd/reconstruction/reconstruction.pyx":338
 *                 for k in range(self.num_passive):
 *                     self.passive_l[k][n] = self.passive[k][i]
 *                     self.passive_r[k][n] = self.passive[k][j]             # <<<<<<<<<<<<<<
 * 
 *             # pressure
 */
        ((__pyx_v_self->__pyx_base.passive_r[__pyx_v_k])[__pyx_v_n]) = ((__pyx_v_self->__pyx_base.passive[__pyx_v_k])[__pyx_v_j]);
      }

      /* "phd/reconstruction/reconstruction.pyx":335
 * 
 *             # add passive scalars if any
 *             if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *                 for k in range(self.num_passive):
 *                     self.passive_l[k][n] = self.passive[k][i]
 */
    }

    /* "phd/reconstruction/reconstruction.pyx":341
 * 
 *             # pressure
 *             pl.data[n] = p.data[i]             # <<<<<<<<<<<<<<
 *             pr.data[n] = p.data[j]
 * 
 */
    (__pyx_v_pl->data[__pyx_v_n]) = (__pyx_v_p->data[__pyx_v_i]);

    /* "phd/reconstruction/reconstruction.pyx":342
 *             # pressure
 *             pl.data[n] = p.data[i]
 *             pr.data[n] = p.data[j]             # <<<<<<<<<<<<<<
 * 
 *             # velocities
 */
    (__pyx_v_pr->data[__pyx_v_n]) = (__pyx_v_p->data[__pyx_v_j]);

    /* "phd/reconstruction/reconstruction.pyx":345
 * 
 *             # velocities
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 *                 if boost:
 *                     # velocity in face frame
 */
    __pyx_t_14 = __pyx_v_dim;
    __pyx_t_15 = __pyx_t_14;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_k = __pyx_t_16;

      /* "phd/reconstruction/reconstruction.pyx":346
 *             # velocities
 *             for k in range(dim):
 *                 if boost:             # <<<<<<<<<<<<<<
 *                     # velocity in face frame
 *                     vl[k][n] = v[k][i] - wx[k][n]
 */
      __pyx_t_11 = (__pyx_v_boost != 0);
      if (__pyx_t_11) {

        /* "phd/reconstruction/reconstruction.pyx":348
 *                 if boost:
 *                     # velocity in face frame
 *                     vl[k][n] = v[k][i] - wx[k][n]             # <<<<<<<<<<<<<<
 *                     vr[k][n] = v[k][j] - wx[k][n]
 *                 else:
 */
        ((__pyx_v_vl[__pyx_v_k])[__pyx_v_n]) = (((__pyx_v_v[__pyx_v_k])[__pyx_v_i]) - ((__pyx_v_wx[__pyx_v_k])[__pyx_v_n]));

        /* "phd/reconstruction/reconstruction.pyx":349
 *                     # velocity in face frame
 *                     vl[k][n] = v[k][i] - wx[k][n]
 *                     vr[k][n] = v[k][j] - wx[k][n]             # <<<<<<<<<<<<<<
 *                 else:
 *                     vl[k][n] = v[k][i]
 */
        ((__pyx_v_vr[__pyx_v_k])[__pyx_v_n]) = (((__pyx_v_v[__pyx_v_k])[__pyx_v_j]) - ((__pyx_v_wx[__pyx_v_k])[__pyx_v_n]));

        /* "phd/reconstruction/reconstruction.pyx":346
 *             # velocities
 *             for k in range(dim):
 *                 if boost:             # <<<<<<<<<<<<<<
 *                     # velocity in face frame
 *                     vl[k][n] = v[k][i] - wx[k][n]
 */
        goto __pyx_L11;
      }

      /* "phd/reconstruction/reconstruction.pyx":351
 *                     vr[k][n] = v[k][j] - wx[k][n]
 *                 else:
 *                     vl[k][n] = v[k][i]             # <<<<<<<<<<<<<<
 *                     vr[k][n] = v[k][j]
 * 
 */
      /*else*/ {
        ((__pyx_v_vl[__pyx_v_k])[__pyx_v_n]) = ((__pyx_v_v[__pyx_v_k])[__pyx_v_i]);

        /* "phd/reconstruction/reconstruction.pyx":352
 *                 else:
 *                     vl[k][n] = v[k][i]
 *                     vr[k][n] = v[k][j]             # <<<<<<<<<<<<<<
 * 
 * 
 */
        ((__pyx_v_vr[__pyx_v_k])[__pyx_v_n]) = ((__pyx_v_v[__pyx_v_k])[__pyx_v_j]);
      }
      __pyx_L11:;
    }
  }

  /* "phd/reconstruction/reconstruction.pyx":254
 *         pass # no gradients for constant reconstruction
 * 
 *     cpdef compute_states(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.compute_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_d);
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF((PyObject *)__pyx_v_dl);
  __Pyx_XDECREF((PyObject *)__pyx_v_dr);
  __Pyx_XDECREF((PyObject *)__pyx_v_pl);
  __Pyx_XDECREF((PyObject *)__pyx_v_pr);
  __Pyx_XDECREF((PyObject *)__pyx_v_pair_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_pair_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_11compute_states(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_10compute_states[] = "Perform reconstruction from cell center to face center.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        mesh : Mesh\n            Class that builds the domain mesh.\n\n        boost : bool\n            Solve equations in moving reference frame.\n\n        domain_manager : DomainManager\n            Class that handels all things related with the domain.\n\n        dt : float\n            Time to extrapolate reconstructed fields to.\n\n        add_temporal : bool\n            If true add time derivatives in the reconstruction.\n\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_11compute_states(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  double __pyx_v_gamma;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager = 0;
  double __pyx_v_dt;
  int __pyx_v_boost;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_states (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_gamma,&__pyx_n_s_domain_manager,&__pyx_n_s_dt,&__pyx_n_s_boost,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 1); __PYX_ERR(0, 254, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gamma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 2); __PYX_ERR(0, 254, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain_manager)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 3); __PYX_ERR(0, 254, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 4); __PYX_ERR(0, 254, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 5); __PYX_ERR(0, 254, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_states") < 0)) __PYX_ERR(0, 254, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_gamma = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_gamma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L3_error)
    __pyx_v_domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)values[3]);
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 256, __pyx_L3_error)
    __pyx_v_boost = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_boost == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 256, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 254, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.compute_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 254, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 254, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_10compute_states(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_10compute_states(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_states", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_compute_states(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.compute_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_12__reduce_cython__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_14__setstate_cython__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseConstant.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":403
 * 
 *     """
 *     def __init__(self, str limiter = "arepo", bint gizmo_limiter=True, **kwargs):             # <<<<<<<<<<<<<<
 *         super(PieceWiseLinear, self).__init__()
 * 
 */

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_limiter = 0;
  int __pyx_v_gizmo_limiter;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_limiter,&__pyx_n_s_gizmo_limiter,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject*)__pyx_n_s_arepo);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_limiter);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gizmo_limiter);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 403, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_limiter = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_gizmo_limiter = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_gizmo_limiter == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
    } else {
      __pyx_v_gizmo_limiter = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 403, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_limiter), (&PyString_Type), 1, "limiter", 1))) __PYX_ERR(0, 403, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear___init__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self), __pyx_v_limiter, __pyx_v_gizmo_limiter, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear___init__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, PyObject *__pyx_v_limiter, int __pyx_v_gizmo_limiter, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "phd/reconstruction/reconstruction.pyx":404
 *     """
 *     def __init__(self, str limiter = "arepo", bint gizmo_limiter=True, **kwargs):
 *         super(PieceWiseLinear, self).__init__()             # <<<<<<<<<<<<<<
 * 
 *         if limiter == "arepo":
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseLinear));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseLinear));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseLinear));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":406
 *         super(PieceWiseLinear, self).__init__()
 * 
 *         if limiter == "arepo":             # <<<<<<<<<<<<<<
 *             self.slope_limiter = 0
 *         elif limiter == "tess":
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_limiter, __pyx_n_s_arepo, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 406, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "phd/reconstruction/reconstruction.pyx":407
 * 
 *         if limiter == "arepo":
 *             self.slope_limiter = 0             # <<<<<<<<<<<<<<
 *         elif limiter == "tess":
 *             self.slope_limiter = 1
 */
    __pyx_v_self->slope_limiter = 0;

    /* "phd/reconstruction/reconstruction.pyx":406
 *         super(PieceWiseLinear, self).__init__()
 * 
 *         if limiter == "arepo":             # <<<<<<<<<<<<<<
 *             self.slope_limiter = 0
 *         elif limiter == "tess":
 */
    goto __pyx_L3;
  }

  /* "phd/reconstruction/reconstruction.pyx":408
 *         if limiter == "arepo":
 *             self.slope_limiter = 0
 *         elif limiter == "tess":             # <<<<<<<<<<<<<<
 *             self.slope_limiter = 1
 *         else:
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_limiter, __pyx_n_s_tess, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (likely(__pyx_t_4)) {

    /* "phd/reconstruction/reconstruction.pyx":409
 *             self.slope_limiter = 0
 *         elif limiter == "tess":
 *             self.slope_limiter = 1             # <<<<<<<<<<<<<<
 *         else:
 *             raise RuntimeError("ERROR: Unrecognized limiter")
 */
    __pyx_v_self->slope_limiter = 1;

    /* "phd/reconstruction/reconstruction.pyx":408
 *         if limiter == "arepo":
 *             self.slope_limiter = 0
 *         elif limiter == "tess":             # <<<<<<<<<<<<<<
 *             self.slope_limiter = 1
 *         else:
 */
    goto __pyx_L3;
  }

  /* "phd/reconstruction/reconstruction.pyx":411
 *             self.slope_limiter = 1
 *         else:
 *             raise RuntimeError("ERROR: Unrecognized limiter")             # <<<<<<<<<<<<<<
 * 
 *         self.limiter = limiter
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 411, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "phd/reconstruction/reconstruction.pyx":413
 *             raise RuntimeError("ERROR: Unrecognized limiter")
 * 
 *         self.limiter = limiter             # <<<<<<<<<<<<<<
 *         self.gizmo_limiter = gizmo_limiter
 * 
 */
  __Pyx_INCREF(__pyx_v_limiter);
  __Pyx_GIVEREF(__pyx_v_limiter);
  __Pyx_GOTREF(__pyx_v_self->limiter);
  __Pyx_DECREF(__pyx_v_self->limiter);
  __pyx_v_self->limiter = __pyx_v_limiter;

  /* "phd/reconstruction/reconstruction.pyx":414
 * 
 *         self.limiter = limiter
 *         self.gizmo_limiter = gizmo_limiter             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->gizmo_limiter = __pyx_v_gizmo_limiter;

  /* "phd/reconstruction/reconstruction.pyx":403
 * 
 *     """
 *     def __init__(self, str limiter = "arepo", bint gizmo_limiter=True, **kwargs):             # <<<<<<<<<<<<<<
 *         super(PieceWiseLinear, self).__init__()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":416
 *         self.gizmo_limiter = gizmo_limiter
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Release pointers"""
 * 
 */

/* Python wrapper */
static void __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_2__dealloc__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_2__dealloc__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "phd/reconstruction/reconstruction.pyx":419
 *         """Release pointers"""
 * 
 *         stdlib.free(self.prim_pointer)             # <<<<<<<<<<<<<<
 * 
 *         stdlib.free(self.priml_pointer)
 */
  free(__pyx_v_self->prim_pointer);

  /* "phd/reconstruction/reconstruction.pyx":421
 *         stdlib.free(self.prim_pointer)
 * 
 *         stdlib.free(self.priml_pointer)             # <<<<<<<<<<<<<<
 *         stdlib.free(self.primr_pointer)
 *         stdlib.free(self.state_l)
 */
  free(__pyx_v_self->priml_pointer);

  /* "phd/reconstruction/reconstruction.pyx":422
 * 
 *         stdlib.free(self.priml_pointer)
 *         stdlib.free(self.primr_pointer)             # <<<<<<<<<<<<<<
 *         stdlib.free(self.state_l)
 *         stdlib.free(self.state_r)
 */
  free(__pyx_v_self->primr_pointer);

  /* "phd/reconstruction/reconstruction.pyx":423
 *         stdlib.free(self.priml_pointer)
 *         stdlib.free(self.primr_pointer)
 *         stdlib.free(self.state_l)             # <<<<<<<<<<<<<<
 *         stdlib.free(self.state_r)
 * 
 */
  free(__pyx_v_self->state_l);

  /* "phd/reconstruction/reconstruction.pyx":424
 *         stdlib.free(self.primr_pointer)
 *         stdlib.free(self.state_l)
 *         stdlib.free(self.state_r)             # <<<<<<<<<<<<<<
 * 
 *         stdlib.free(self.grad_pointer)
 */
  free(__pyx_v_self->state_r);

  /* "phd/reconstruction/reconstruction.pyx":426
 *         stdlib.free(self.state_r)
 * 
 *         stdlib.free(self.grad_pointer)             # <<<<<<<<<<<<<<
 * 
 *         if self.has_passive_scalars:
 */
  free(__pyx_v_self->grad_pointer);

  /* "phd/reconstruction/reconstruction.pyx":428
 *         stdlib.free(self.grad_pointer)
 * 
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *             stdlib.free(self.passive)
 *             stdlib.free(self.passive_l)
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.has_passive_scalars != 0);
  if (__pyx_t_1) {

    /* "phd/reconstruction/reconstruction.pyx":429
 * 
 *         if self.has_passive_scalars:
 *             stdlib.free(self.passive)             # <<<<<<<<<<<<<<
 *             stdlib.free(self.passive_l)
 *             stdlib.free(self.passive_r)
 */
    free(__pyx_v_self->__pyx_base.passive);

    /* "phd/reconstruction/reconstruction.pyx":430
 *         if self.has_passive_scalars:
 *             stdlib.free(self.passive)
 *             stdlib.free(self.passive_l)             # <<<<<<<<<<<<<<
 *             stdlib.free(self.passive_r)
 *             stdlib.free(self.dpassive)
 */
    free(__pyx_v_self->__pyx_base.passive_l);

    /* "phd/reconstruction/reconstruction.pyx":431
 *             stdlib.free(self.passive)
 *             stdlib.free(self.passive_l)
 *             stdlib.free(self.passive_r)             # <<<<<<<<<<<<<<
 *             stdlib.free(self.dpassive)
 * 
 */
    free(__pyx_v_self->__pyx_base.passive_r);

    /* "phd/reconstruction/reconstruction.pyx":432
 *             stdlib.free(self.passive_l)
 *             stdlib.free(self.passive_r)
 *             stdlib.free(self.dpassive)             # <<<<<<<<<<<<<<
 * 
 *         stdlib.free(self.phi_max)
 */
    free(__pyx_v_self->__pyx_base.dpassive);

    /* "phd/reconstruction/reconstruction.pyx":428
 *         stdlib.free(self.grad_pointer)
 * 
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *             stdlib.free(self.passive)
 *             stdlib.free(self.passive_l)
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":434
 *             stdlib.free(self.dpassive)
 * 
 *         stdlib.free(self.phi_max)             # <<<<<<<<<<<<<<
 *         stdlib.free(self.phi_min)
 * 
 */
  free(__pyx_v_self->phi_max);

  /* "phd/reconstruction/reconstruction.pyx":435
 * 
 *         stdlib.free(self.phi_max)
 *         stdlib.free(self.phi_min)             # <<<<<<<<<<<<<<
 * 
 *         stdlib.free(self.alpha)
 */
  free(__pyx_v_self->phi_min);

  /* "phd/reconstruction/reconstruction.pyx":437
 *         stdlib.free(self.phi_min)
 * 
 *         stdlib.free(self.alpha)             # <<<<<<<<<<<<<<
 *         stdlib.free(self.df)
 * 
 */
  free(__pyx_v_self->alpha);

  /* "phd/reconstruction/reconstruction.pyx":438
 * 
 *         stdlib.free(self.alpha)
 *         stdlib.free(self.df)             # <<<<<<<<<<<<<<
 * 
 *     def add_fields(self, CarrayContainer particles):
 */
  free(__pyx_v_self->df);

  /* "phd/reconstruction/reconstruction.pyx":416
 *         self.gizmo_limiter = gizmo_limiter
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Release pointers"""
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "phd/reconstruction/reconstruction.pyx":440
 *         stdlib.free(self.df)
 * 
 *     def add_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Create lists of variables to reconstruct and setup containers
 *         for gradients and reconstructions.
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_5add_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4add_fields[] = "Create lists of variables to reconstruct and setup containers\n        for gradients and reconstructions.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_5add_fields(PyObject *__pyx_v_self, PyObject *__pyx_v_particles) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_fields (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 440, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4add_fields(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self), ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4add_fields(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles) {
  int __pyx_v_i;
  int __pyx_v_dim;
  PyObject *__pyx_v_field_name = 0;
  PyObject *__pyx_v_grad_name = 0;
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_grad_carray_to_register = 0;
  PyObject *__pyx_v_grad_carray_named_groups = 0;
  PyObject *__pyx_v_recon_carray_to_register = 0;
  PyObject *__pyx_v_recon_carray_named_groups = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_fields", 0);

  /* "phd/reconstruction/reconstruction.pyx":452
 *         cdef int i, dim
 *         cdef str field_name, grad_name
 *         cdef list axis = ["x", "y", "z"]             # <<<<<<<<<<<<<<
 *         cdef dict grad_carray_to_register = {}, grad_carray_named_groups = {}
 *         cdef dict recon_carray_to_register = {}, recon_carray_named_groups = {}
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_x);
  __Pyx_GIVEREF(__pyx_n_s_x);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_x);
  __Pyx_INCREF(__pyx_n_s_y);
  __Pyx_GIVEREF(__pyx_n_s_y);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_y);
  __Pyx_INCREF(__pyx_n_s_z);
  __Pyx_GIVEREF(__pyx_n_s_z);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_z);
  __pyx_v_axis = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":453
 *         cdef str field_name, grad_name
 *         cdef list axis = ["x", "y", "z"]
 *         cdef dict grad_carray_to_register = {}, grad_carray_named_groups = {}             # <<<<<<<<<<<<<<
 *         cdef dict recon_carray_to_register = {}, recon_carray_named_groups = {}
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_grad_carray_to_register = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_grad_carray_named_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":454
 *         cdef list axis = ["x", "y", "z"]
 *         cdef dict grad_carray_to_register = {}, grad_carray_named_groups = {}
 *         cdef dict recon_carray_to_register = {}, recon_carray_named_groups = {}             # <<<<<<<<<<<<<<
 * 
 *         if "primitive" not in particles.carray_named_groups or\
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_recon_carray_to_register = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_recon_carray_named_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":456
 *         cdef dict recon_carray_to_register = {}, recon_carray_named_groups = {}
 * 
 *         if "primitive" not in particles.carray_named_groups or\             # <<<<<<<<<<<<<<
 *                 "velocity" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 456, __pyx_L1_error)
  }
  __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_primitive, __pyx_v_particles->carray_named_groups, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 456, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "phd/reconstruction/reconstruction.pyx":457
 * 
 *         if "primitive" not in particles.carray_named_groups or\
 *                 "velocity" not in particles.carray_named_groups:             # <<<<<<<<<<<<<<
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 457, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_velocity, __pyx_v_particles->carray_named_groups, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 457, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;

  /* "phd/reconstruction/reconstruction.pyx":456
 *         cdef dict recon_carray_to_register = {}, recon_carray_named_groups = {}
 * 
 *         if "primitive" not in particles.carray_named_groups or\             # <<<<<<<<<<<<<<
 *                 "velocity" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 */
  if (unlikely(__pyx_t_2)) {

    /* "phd/reconstruction/reconstruction.pyx":458
 *         if "primitive" not in particles.carray_named_groups or\
 *                 "velocity" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 458, __pyx_L1_error)

    /* "phd/reconstruction/reconstruction.pyx":456
 *         cdef dict recon_carray_to_register = {}, recon_carray_named_groups = {}
 * 
 *         if "primitive" not in particles.carray_named_groups or\             # <<<<<<<<<<<<<<
 *                 "velocity" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":460
 *                     raise RuntimeError("ERROR: Missing fields in particles!")
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 * 
 *         grad_carray_named_groups["velocity"] = []
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 460, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_5;

  /* "phd/reconstruction/reconstruction.pyx":462
 *         dim = len(particles.carray_named_groups["position"])
 * 
 *         grad_carray_named_groups["velocity"] = []             # <<<<<<<<<<<<<<
 *         grad_carray_named_groups["primitive"] = []
 *         for field_name in particles.carray_named_groups["primitive"]:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_grad_carray_named_groups, __pyx_n_s_velocity, __pyx_t_1) < 0)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":463
 * 
 *         grad_carray_named_groups["velocity"] = []
 *         grad_carray_named_groups["primitive"] = []             # <<<<<<<<<<<<<<
 *         for field_name in particles.carray_named_groups["primitive"]:
 *             grad_carray_named_groups[field_name] = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_grad_carray_named_groups, __pyx_n_s_primitive, __pyx_t_1) < 0)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":464
 *         grad_carray_named_groups["velocity"] = []
 *         grad_carray_named_groups["primitive"] = []
 *         for field_name in particles.carray_named_groups["primitive"]:             # <<<<<<<<<<<<<<
 *             grad_carray_named_groups[field_name] = []
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 464, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_6 = __pyx_t_1; __Pyx_INCREF(__pyx_t_6); __pyx_t_5 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 464, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 464, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 464, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_6);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 464, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_field_name, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "phd/reconstruction/reconstruction.pyx":465
 *         grad_carray_named_groups["primitive"] = []
 *         for field_name in particles.carray_named_groups["primitive"]:
 *             grad_carray_named_groups[field_name] = []             # <<<<<<<<<<<<<<
 * 
 *         recon_carray_named_groups["primitive"] = particles.carray_named_groups["primitive"]
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_grad_carray_named_groups, __pyx_v_field_name, __pyx_t_1) < 0)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/reconstruction/reconstruction.pyx":464
 *         grad_carray_named_groups["velocity"] = []
 *         grad_carray_named_groups["primitive"] = []
 *         for field_name in particles.carray_named_groups["primitive"]:             # <<<<<<<<<<<<<<
 *             grad_carray_named_groups[field_name] = []
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "phd/reconstruction/reconstruction.pyx":467
 *             grad_carray_named_groups[field_name] = []
 * 
 *         recon_carray_named_groups["primitive"] = particles.carray_named_groups["primitive"]             # <<<<<<<<<<<<<<
 * 
 *         # add primitive fields
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 467, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(PyDict_SetItem(__pyx_v_recon_carray_named_groups, __pyx_n_s_primitive, __pyx_t_6) < 0)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "phd/reconstruction/reconstruction.pyx":470
 * 
 *         # add primitive fields
 *         for field_name in particles.carray_named_groups["primitive"]:             # <<<<<<<<<<<<<<
 * 
 *             # add field to primitive reconstruction fields
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 470, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 470, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 470, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 470, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 470, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 470, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 470, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    if (!(likely(PyString_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_field_name, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "phd/reconstruction/reconstruction.pyx":473
 * 
 *             # add field to primitive reconstruction fields
 *             recon_carray_to_register[field_name] = "double"             # <<<<<<<<<<<<<<
 *             for i in range(dim):
 * 
 */
    if (unlikely(PyDict_SetItem(__pyx_v_recon_carray_to_register, __pyx_v_field_name, __pyx_n_s_double) < 0)) __PYX_ERR(0, 473, __pyx_L1_error)

    /* "phd/reconstruction/reconstruction.pyx":474
 *             # add field to primitive reconstruction fields
 *             recon_carray_to_register[field_name] = "double"
 *             for i in range(dim):             # <<<<<<<<<<<<<<
 * 
 *                 # store gradient of field
 */
    __pyx_t_8 = __pyx_v_dim;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "phd/reconstruction/reconstruction.pyx":477
 * 
 *                 # store gradient of field
 *                 grad_name = field_name + "_" + axis[i]             # <<<<<<<<<<<<<<
 *                 grad_carray_to_register[grad_name] = "double"
 *                 grad_carray_named_groups["primitive"].append(grad_name)
 */
      __pyx_t_6 = PyNumber_Add(__pyx_v_field_name, __pyx_n_s__8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 477, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_11 = __Pyx_GetItemInt_List(__pyx_v_axis, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 477, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyNumber_Add(__pyx_t_6, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 477, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_12))||((__pyx_t_12) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_12)->tp_name), 0))) __PYX_ERR(0, 477, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_grad_name, ((PyObject*)__pyx_t_12));
      __pyx_t_12 = 0;

      /* "phd/reconstruction/reconstruction.pyx":478
 *                 # store gradient of field
 *                 grad_name = field_name + "_" + axis[i]
 *                 grad_carray_to_register[grad_name] = "double"             # <<<<<<<<<<<<<<
 *                 grad_carray_named_groups["primitive"].append(grad_name)
 *                 grad_carray_named_groups[field_name].append(grad_name)
 */
      if (unlikely(PyDict_SetItem(__pyx_v_grad_carray_to_register, __pyx_v_grad_name, __pyx_n_s_double) < 0)) __PYX_ERR(0, 478, __pyx_L1_error)

      /* "phd/reconstruction/reconstruction.pyx":479
 *                 grad_name = field_name + "_" + axis[i]
 *                 grad_carray_to_register[grad_name] = "double"
 *                 grad_carray_named_groups["primitive"].append(grad_name)             # <<<<<<<<<<<<<<
 *                 grad_carray_named_groups[field_name].append(grad_name)
 * 
 */
      __pyx_t_12 = __Pyx_PyDict_GetItem(__pyx_v_grad_carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_t_12, __pyx_v_grad_name); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 479, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "phd/reconstruction/reconstruction.pyx":480
 *                 grad_carray_to_register[grad_name] = "double"
 *                 grad_carray_named_groups["primitive"].append(grad_name)
 *                 grad_carray_named_groups[field_name].append(grad_name)             # <<<<<<<<<<<<<<
 * 
 *                 # store velocity gradient matrix
 */
      __pyx_t_12 = __Pyx_PyDict_GetItem(__pyx_v_grad_carray_named_groups, __pyx_v_field_name); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 480, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_t_12, __pyx_v_grad_name); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 480, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "phd/reconstruction/reconstruction.pyx":483
 * 
 *                 # store velocity gradient matrix
 *                 if "vel" in field_name:             # <<<<<<<<<<<<<<
 *                     grad_carray_named_groups["velocity"].append(grad_name)
 * 
 */
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_vel, __pyx_v_field_name, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 483, __pyx_L1_error)
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "phd/reconstruction/reconstruction.pyx":484
 *                 # store velocity gradient matrix
 *                 if "vel" in field_name:
 *                     grad_carray_named_groups["velocity"].append(grad_name)             # <<<<<<<<<<<<<<
 * 
 *         # store velocity group
 */
        __pyx_t_12 = __Pyx_PyDict_GetItem(__pyx_v_grad_carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyObject_Append(__pyx_t_12, __pyx_v_grad_name); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 484, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "phd/reconstruction/reconstruction.pyx":483
 * 
 *                 # store velocity gradient matrix
 *                 if "vel" in field_name:             # <<<<<<<<<<<<<<
 *                     grad_carray_named_groups["velocity"].append(grad_name)
 * 
 */
      }
    }

    /* "phd/reconstruction/reconstruction.pyx":470
 * 
 *         # add primitive fields
 *         for field_name in particles.carray_named_groups["primitive"]:             # <<<<<<<<<<<<<<
 * 
 *             # add field to primitive reconstruction fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":487
 * 
 *         # store velocity group
 *         recon_carray_named_groups["velocity"] = particles.carray_named_groups["velocity"]             # <<<<<<<<<<<<<<
 * 
 *         # add passive-scalars if any
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 487, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_recon_carray_named_groups, __pyx_n_s_velocity, __pyx_t_1) < 0)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":490
 * 
 *         # add passive-scalars if any
 *         if "passive-scalars" in particles.carray_named_groups.keys():             # <<<<<<<<<<<<<<
 *             self.has_passive_scalars = True
 *             self.num_passive = len(particles.carray_named_groups["passive-scalars"])
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 490, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_particles->carray_named_groups); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_passive_scalars_2, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "phd/reconstruction/reconstruction.pyx":491
 *         # add passive-scalars if any
 *         if "passive-scalars" in particles.carray_named_groups.keys():
 *             self.has_passive_scalars = True             # <<<<<<<<<<<<<<
 *             self.num_passive = len(particles.carray_named_groups["passive-scalars"])
 * 
 */
    __pyx_v_self->__pyx_base.has_passive_scalars = 1;

    /* "phd/reconstruction/reconstruction.pyx":492
 *         if "passive-scalars" in particles.carray_named_groups.keys():
 *             self.has_passive_scalars = True
 *             self.num_passive = len(particles.carray_named_groups["passive-scalars"])             # <<<<<<<<<<<<<<
 * 
 *             grad_carray_named_groups["passive-scalars"] = []
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 492, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->__pyx_base.num_passive = __pyx_t_5;

    /* "phd/reconstruction/reconstruction.pyx":494
 *             self.num_passive = len(particles.carray_named_groups["passive-scalars"])
 * 
 *             grad_carray_named_groups["passive-scalars"] = []             # <<<<<<<<<<<<<<
 *             recon_carray_named_groups["passive-scalars"] = particles.carray_named_groups["passive-scalars"]
 * 
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_grad_carray_named_groups, __pyx_kp_s_passive_scalars_2, __pyx_t_1) < 0)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/reconstruction/reconstruction.pyx":495
 * 
 *             grad_carray_named_groups["passive-scalars"] = []
 *             recon_carray_named_groups["passive-scalars"] = particles.carray_named_groups["passive-scalars"]             # <<<<<<<<<<<<<<
 * 
 *             for field_name in particles.carray_named_groups["passive-scalars"]:
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 495, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_recon_carray_named_groups, __pyx_kp_s_passive_scalars_2, __pyx_t_1) < 0)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/reconstruction/reconstruction.pyx":497
 *             recon_carray_named_groups["passive-scalars"] = particles.carray_named_groups["passive-scalars"]
 * 
 *             for field_name in particles.carray_named_groups["passive-scalars"]:             # <<<<<<<<<<<<<<
 *                 for i in range(dim):
 *                     grad_name = field_name + "_" + axis[i]
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 497, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_12 = __pyx_t_1; __Pyx_INCREF(__pyx_t_12); __pyx_t_5 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 497, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 497, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_12))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_12);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 497, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 497, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_field_name, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "phd/reconstruction/reconstruction.pyx":498
 * 
 *             for field_name in particles.carray_named_groups["passive-scalars"]:
 *                 for i in range(dim):             # <<<<<<<<<<<<<<
 *                     grad_name = field_name + "_" + axis[i]
 *                     grad_carray_named_groups["passive-scalars"].append(grad_name)
 */
      __pyx_t_8 = __pyx_v_dim;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;

        /* "phd/reconstruction/reconstruction.pyx":499
 *             for field_name in particles.carray_named_groups["passive-scalars"]:
 *                 for i in range(dim):
 *                     grad_name = field_name + "_" + axis[i]             # <<<<<<<<<<<<<<
 *                     grad_carray_named_groups["passive-scalars"].append(grad_name)
 * 
 */
        __pyx_t_1 = PyNumber_Add(__pyx_v_field_name, __pyx_n_s__8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = __Pyx_GetItemInt_List(__pyx_v_axis, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (!(likely(PyString_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_XDECREF_SET(__pyx_v_grad_name, ((PyObject*)__pyx_t_6));
        __pyx_t_6 = 0;

        /* "phd/reconstruction/reconstruction.pyx":500
 *                 for i in range(dim):
 *                     grad_name = field_name + "_" + axis[i]
 *                     grad_carray_named_groups["passive-scalars"].append(grad_name)             # <<<<<<<<<<<<<<
 * 
 *         # store fields
 */
        __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_grad_carray_named_groups, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_13 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_v_grad_name); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "phd/reconstruction/reconstruction.pyx":497
 *             recon_carray_named_groups["passive-scalars"] = particles.carray_named_groups["passive-scalars"]
 * 
 *             for field_name in particles.carray_named_groups["passive-scalars"]:             # <<<<<<<<<<<<<<
 *                 for i in range(dim):
 *                     grad_name = field_name + "_" + axis[i]
 */
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "phd/reconstruction/reconstruction.pyx":490
 * 
 *         # add passive-scalars if any
 *         if "passive-scalars" in particles.carray_named_groups.keys():             # <<<<<<<<<<<<<<
 *             self.has_passive_scalars = True
 *             self.num_passive = len(particles.carray_named_groups["passive-scalars"])
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":503
 * 
 *         # store fields
 *         self.fields_registered = True             # <<<<<<<<<<<<<<
 *         self.reconstruct_fields = recon_carray_to_register
 *         self.reconstruct_field_groups = recon_carray_named_groups
 */
  __pyx_v_self->__pyx_base.fields_registered = 1;

  /* "phd/reconstruction/reconstruction.pyx":504
 *         # store fields
 *         self.fields_registered = True
 *         self.reconstruct_fields = recon_carray_to_register             # <<<<<<<<<<<<<<
 *         self.reconstruct_field_groups = recon_carray_named_groups
 * 
 */
  __Pyx_INCREF(__pyx_v_recon_carray_to_register);
  __Pyx_GIVEREF(__pyx_v_recon_carray_to_register);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.reconstruct_fields);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.reconstruct_fields);
  __pyx_v_self->__pyx_base.reconstruct_fields = __pyx_v_recon_carray_to_register;

  /* "phd/reconstruction/reconstruction.pyx":505
 *         self.fields_registered = True
 *         self.reconstruct_fields = recon_carray_to_register
 *         self.reconstruct_field_groups = recon_carray_named_groups             # <<<<<<<<<<<<<<
 * 
 *         # store gradients
 */
  __Pyx_INCREF(__pyx_v_recon_carray_named_groups);
  __Pyx_GIVEREF(__pyx_v_recon_carray_named_groups);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.reconstruct_field_groups);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.reconstruct_field_groups);
  __pyx_v_self->__pyx_base.reconstruct_field_groups = __pyx_v_recon_carray_named_groups;

  /* "phd/reconstruction/reconstruction.pyx":508
 * 
 *         # store gradients
 *         self.reconstruct_grads = grad_carray_to_register             # <<<<<<<<<<<<<<
 *         self.reconstruct_grad_groups = grad_carray_named_groups
 * 
 */
  __Pyx_INCREF(__pyx_v_grad_carray_to_register);
  __Pyx_GIVEREF(__pyx_v_grad_carray_to_register);
  __Pyx_GOTREF(__pyx_v_self->reconstruct_grads);
  __Pyx_DECREF(__pyx_v_self->reconstruct_grads);
  __pyx_v_self->reconstruct_grads = __pyx_v_grad_carray_to_register;

  /* "phd/reconstruction/reconstruction.pyx":509
 *         # store gradients
 *         self.reconstruct_grads = grad_carray_to_register
 *         self.reconstruct_grad_groups = grad_carray_named_groups             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self):
 */
  __Pyx_INCREF(__pyx_v_grad_carray_named_groups);
  __Pyx_GIVEREF(__pyx_v_grad_carray_named_groups);
  __Pyx_GOTREF(__pyx_v_self->reconstruct_grad_groups);
  __Pyx_DECREF(__pyx_v_self->reconstruct_grad_groups);
  __pyx_v_self->reconstruct_grad_groups = __pyx_v_grad_carray_named_groups;

  /* "phd/reconstruction/reconstruction.pyx":440
 *         stdlib.free(self.df)
 * 
 *     def add_fields(self, CarrayContainer particles):             # <<<<<<<<<<<<<<
 *         """Create lists of variables to reconstruct and setup containers
 *         for gradients and reconstructions.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.add_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_field_name);
  __Pyx_XDECREF(__pyx_v_grad_name);
  __Pyx_XDECREF(__pyx_v_axis);
  __Pyx_XDECREF(__pyx_v_grad_carray_to_register);
  __Pyx_XDECREF(__pyx_v_grad_carray_named_groups);
  __Pyx_XDECREF(__pyx_v_recon_carray_to_register);
  __Pyx_XDECREF(__pyx_v_recon_carray_named_groups);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":511
 *         self.reconstruct_grad_groups = grad_carray_named_groups
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Setup initial arrays and routines for computation."""
 *         cdef int dim, num_fields
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_6initialize[] = "Setup initial arrays and routines for computation.";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7initialize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_6initialize(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_6initialize(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self) {
  int __pyx_v_dim;
  int __pyx_v_num_fields;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "phd/reconstruction/reconstruction.pyx":515
 *         cdef int dim, num_fields
 * 
 *         if not self.fields_registered:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                     "Reconstruction did not set fields to reconstruct!")
 */
  __pyx_t_1 = ((!(__pyx_v_self->__pyx_base.fields_registered != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "phd/reconstruction/reconstruction.pyx":516
 * 
 *         if not self.fields_registered:
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                     "Reconstruction did not set fields to reconstruct!")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 516, __pyx_L1_error)

    /* "phd/reconstruction/reconstruction.pyx":515
 *         cdef int dim, num_fields
 * 
 *         if not self.fields_registered:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                     "Reconstruction did not set fields to reconstruct!")
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":520
 * 
 *         # initialize left/right face states for riemann solver
 *         self.left_states  = CarrayContainer(carrays_to_register=self.reconstruct_fields)             # <<<<<<<<<<<<<<
 *         self.right_states = CarrayContainer(carrays_to_register=self.reconstruct_fields)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_carrays_to_register, __pyx_v_self->__pyx_base.reconstruct_fields) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_10containers_10containers_CarrayContainer), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.left_states);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.left_states));
  __pyx_v_self->__pyx_base.left_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "phd/reconstruction/reconstruction.pyx":521
 *         # initialize left/right face states for riemann solver
 *         self.left_states  = CarrayContainer(carrays_to_register=self.reconstruct_fields)
 *         self.right_states = CarrayContainer(carrays_to_register=self.reconstruct_fields)             # <<<<<<<<<<<<<<
 * 
 *         # add named groups
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_carrays_to_register, __pyx_v_self->__pyx_base.reconstruct_fields) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_10containers_10containers_CarrayContainer), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.right_states);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.right_states));
  __pyx_v_self->__pyx_base.right_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/reconstruction/reconstruction.pyx":524
 * 
 *         # add named groups
 *         self.left_states.carray_named_groups  = self.reconstruct_field_groups             # <<<<<<<<<<<<<<
 *         self.right_states.carray_named_groups = self.reconstruct_field_groups
 * 
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.reconstruct_field_groups;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.left_states->carray_named_groups);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.left_states->carray_named_groups);
  __pyx_v_self->__pyx_base.left_states->carray_named_groups = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/reconstruction/reconstruction.pyx":525
 *         # add named groups
 *         self.left_states.carray_named_groups  = self.reconstruct_field_groups
 *         self.right_states.carray_named_groups = self.reconstruct_field_groups             # <<<<<<<<<<<<<<
 * 
 *         # initialize gradients
 */
  __pyx_t_2 = __pyx_v_self->__pyx_base.reconstruct_field_groups;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.right_states->carray_named_groups);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.right_states->carray_named_groups);
  __pyx_v_self->__pyx_base.right_states->carray_named_groups = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "phd/reconstruction/reconstruction.pyx":528
 * 
 *         # initialize gradients
 *         self.grad = CarrayContainer(carrays_to_register=self.reconstruct_grads)             # <<<<<<<<<<<<<<
 *         self.grad.carray_named_groups = self.reconstruct_grad_groups
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_carrays_to_register, __pyx_v_self->reconstruct_grads) < 0) __PYX_ERR(0, 528, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3phd_10containers_10containers_CarrayContainer), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->grad);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->grad));
  __pyx_v_self->grad = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "phd/reconstruction/reconstruction.pyx":529
 *         # initialize gradients
 *         self.grad = CarrayContainer(carrays_to_register=self.reconstruct_grads)
 *         self.grad.carray_named_groups = self.reconstruct_grad_groups             # <<<<<<<<<<<<<<
 * 
 *         # allocate helper pointers
 */
  __pyx_t_3 = __pyx_v_self->reconstruct_grad_groups;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->grad->carray_named_groups);
  __Pyx_DECREF(__pyx_v_self->grad->carray_named_groups);
  __pyx_v_self->grad->carray_named_groups = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "phd/reconstruction/reconstruction.pyx":532
 * 
 *         # allocate helper pointers
 *         dim = len(self.left_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 *         num_fields = len(self.left_states.carray_named_groups["primitive"])
 * 
 */
  if (unlikely(__pyx_v_self->__pyx_base.left_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 532, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.left_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_dim = __pyx_t_4;

  /* "phd/reconstruction/reconstruction.pyx":533
 *         # allocate helper pointers
 *         dim = len(self.left_states.carray_named_groups["velocity"])
 *         num_fields = len(self.left_states.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 * 
 *         # allocate helper pointers
 */
  if (unlikely(__pyx_v_self->__pyx_base.left_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 533, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.left_states->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_num_fields = __pyx_t_4;

  /* "phd/reconstruction/reconstruction.pyx":536
 * 
 *         # allocate helper pointers
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *             self.num_passive = len(self.fields_to_reconstruct_groups["passive_scalars"])
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.has_passive_scalars != 0);
  if (__pyx_t_1) {

    /* "phd/reconstruction/reconstruction.pyx":537
 *         # allocate helper pointers
 *         if self.has_passive_scalars:
 *             self.num_passive = len(self.fields_to_reconstruct_groups["passive_scalars"])             # <<<<<<<<<<<<<<
 * 
 *             self.passive   = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fields_to_reconstruct_groups); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_s_passive_scalars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->__pyx_base.num_passive = __pyx_t_4;

    /* "phd/reconstruction/reconstruction.pyx":539
 *             self.num_passive = len(self.fields_to_reconstruct_groups["passive_scalars"])
 * 
 *             self.passive   = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))             # <<<<<<<<<<<<<<
 *             self.passive_l = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 *             self.passive_r = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 */
    __pyx_v_self->__pyx_base.passive = ((__pyx_t_5numpy_float64_t **)malloc((__pyx_v_self->__pyx_base.num_passive * (sizeof(void *)))));

    /* "phd/reconstruction/reconstruction.pyx":540
 * 
 *             self.passive   = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 *             self.passive_l = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))             # <<<<<<<<<<<<<<
 *             self.passive_r = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 * 
 */
    __pyx_v_self->__pyx_base.passive_l = ((__pyx_t_5numpy_float64_t **)malloc((__pyx_v_self->__pyx_base.num_passive * (sizeof(void *)))));

    /* "phd/reconstruction/reconstruction.pyx":541
 *             self.passive   = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 *             self.passive_l = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 *             self.passive_r = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))             # <<<<<<<<<<<<<<
 * 
 *             self.dpassive  = <np.float64_t**> stdlib.malloc((self.num_passive*dim)*sizeof(void*))
 */
    __pyx_v_self->__pyx_base.passive_r = ((__pyx_t_5numpy_float64_t **)malloc((__pyx_v_self->__pyx_base.num_passive * (sizeof(void *)))));

    /* "phd/reconstruction/reconstruction.pyx":543
 *             self.passive_r = <np.float64_t**> stdlib.malloc(self.num_passive*sizeof(void*))
 * 
 *             self.dpassive  = <np.float64_t**> stdlib.malloc((self.num_passive*dim)*sizeof(void*))             # <<<<<<<<<<<<<<
 * 
 *         # primitive values and gradient
 */
    __pyx_v_self->__pyx_base.dpassive = ((__pyx_t_5numpy_float64_t **)malloc(((__pyx_v_self->__pyx_base.num_passive * __pyx_v_dim) * (sizeof(void *)))));

    /* "phd/reconstruction/reconstruction.pyx":536
 * 
 *         # allocate helper pointers
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *             self.num_passive = len(self.fields_to_reconstruct_groups["passive_scalars"])
 * 
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":546
 * 
 *         # primitive values and gradient
 *         self.prim_pointer = <np.float64_t**> stdlib.malloc(num_fields*sizeof(void*))             # <<<<<<<<<<<<<<
 * 
 *         self.state_l = <np.float64_t*> stdlib.malloc(num_fields*sizeof(void*))
 */
  __pyx_v_self->prim_pointer = ((__pyx_t_5numpy_float64_t **)malloc((__pyx_v_num_fields * (sizeof(void *)))));

  /* "phd/reconstruction/reconstruction.pyx":548
 *         self.prim_pointer = <np.float64_t**> stdlib.malloc(num_fields*sizeof(void*))
 * 
 *         self.state_l = <np.float64_t*> stdlib.malloc(num_fields*sizeof(void*))             # <<<<<<<<<<<<<<
 *         self.state_r = <np.float64_t*> stdlib.malloc(num_fields*sizeof(void*))
 *         self.priml_pointer = <np.float64_t**> stdlib.malloc(num_fields*sizeof(void*))
 */
  __pyx_v_self->state_l = ((__pyx_t_5numpy_float64_t *)malloc((__pyx_v_num_fields * (sizeof(void *)))));

  /* "phd/reconstruction/reconstruction.pyx":549
 * 
 *         self.state_l = <np.float64_t*> stdlib.malloc(num_fields*sizeof(void*))
 *         self.state_r = <np.float64_t*> stdlib.malloc(num_fields*sizeof(void*))             # <<<<<<<<<<<<<<
 *         self.priml_pointer = <np.float64_t**> stdlib.malloc(num_fields*sizeof(void*))
 *         self.primr_pointer = <np.float64_t**> stdlib.malloc(num_fields*sizeof(void*))
 */
  __pyx_v_self->state_r = ((__pyx_t_5numpy_float64_t *)malloc((__pyx_v_num_fields * (sizeof(void *)))));

  /* "phd/reconstruction/reconstruction.pyx":550
 *         self.state_l = <np.float64_t*> stdlib.malloc(num_fields*sizeof(void*))
 *         self.state_r = <np.float64_t*> stdlib.malloc(num_fields*sizeof(void*))
 *         self.priml_pointer = <np.float64_t**> stdlib.malloc(num_fields*sizeof(void*))             # <<<<<<<<<<<<<<
 *         self.primr_pointer = <np.float64_t**> stdlib.malloc(num_fields*sizeof(void*))
 * 
 */
  __pyx_v_self->priml_pointer = ((__pyx_t_5numpy_float64_t **)malloc((__pyx_v_num_fields * (sizeof(void *)))));

  /* "phd/reconstruction/reconstruction.pyx":551
 *         self.state_r = <np.float64_t*> stdlib.malloc(num_fields*sizeof(void*))
 *         self.priml_pointer = <np.float64_t**> stdlib.malloc(num_fields*sizeof(void*))
 *         self.primr_pointer = <np.float64_t**> stdlib.malloc(num_fields*sizeof(void*))             # <<<<<<<<<<<<<<
 * 
 *         self.grad_pointer = <np.float64_t**> stdlib.malloc((num_fields*dim)*sizeof(void*))
 */
  __pyx_v_self->primr_pointer = ((__pyx_t_5numpy_float64_t **)malloc((__pyx_v_num_fields * (sizeof(void *)))));

  /* "phd/reconstruction/reconstruction.pyx":553
 *         self.primr_pointer = <np.float64_t**> stdlib.malloc(num_fields*sizeof(void*))
 * 
 *         self.grad_pointer = <np.float64_t**> stdlib.malloc((num_fields*dim)*sizeof(void*))             # <<<<<<<<<<<<<<
 * 
 *         # min/max of field value of particle
 */
  __pyx_v_self->grad_pointer = ((__pyx_t_5numpy_float64_t **)malloc(((__pyx_v_num_fields * __pyx_v_dim) * (sizeof(void *)))));

  /* "phd/reconstruction/reconstruction.pyx":556
 * 
 *         # min/max of field value of particle
 *         self.phi_max = <np.float64_t*> stdlib.malloc(num_fields*sizeof(np.float64))             # <<<<<<<<<<<<<<
 *         self.phi_min = <np.float64_t*> stdlib.malloc(num_fields*sizeof(np.float64))
 *         self.alpha   = <np.float64_t*> stdlib.malloc(num_fields*sizeof(np.float64))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->phi_max = ((__pyx_t_5numpy_float64_t *)malloc((__pyx_v_num_fields * (sizeof(__pyx_t_3)))));
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "phd/reconstruction/reconstruction.pyx":557
 *         # min/max of field value of particle
 *         self.phi_max = <np.float64_t*> stdlib.malloc(num_fields*sizeof(np.float64))
 *         self.phi_min = <np.float64_t*> stdlib.malloc(num_fields*sizeof(np.float64))             # <<<<<<<<<<<<<<
 *         self.alpha   = <np.float64_t*> stdlib.malloc(num_fields*sizeof(np.float64))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->phi_min = ((__pyx_t_5numpy_float64_t *)malloc((__pyx_v_num_fields * (sizeof(__pyx_t_2)))));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/reconstruction/reconstruction.pyx":558
 *         self.phi_max = <np.float64_t*> stdlib.malloc(num_fields*sizeof(np.float64))
 *         self.phi_min = <np.float64_t*> stdlib.malloc(num_fields*sizeof(np.float64))
 *         self.alpha   = <np.float64_t*> stdlib.malloc(num_fields*sizeof(np.float64))             # <<<<<<<<<<<<<<
 * 
 *         # difference of field value at paticle position to face position
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->alpha = ((__pyx_t_5numpy_float64_t *)malloc((__pyx_v_num_fields * (sizeof(__pyx_t_3)))));
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "phd/reconstruction/reconstruction.pyx":561
 * 
 *         # difference of field value at paticle position to face position
 *         self.df = <np.float64_t*> stdlib.malloc((num_fields*dim)*sizeof(np.float64))             # <<<<<<<<<<<<<<
 * 
 *     cpdef compute_gradients(self, CarrayContainer particles, Mesh mesh,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->df = ((__pyx_t_5numpy_float64_t *)malloc(((__pyx_v_num_fields * __pyx_v_dim) * (sizeof(__pyx_t_2)))));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/reconstruction/reconstruction.pyx":511
 *         self.reconstruct_grad_groups = grad_carray_named_groups
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """Setup initial arrays and routines for computation."""
 *         cdef int dim, num_fields
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":563
 *         self.df = <np.float64_t*> stdlib.malloc((num_fields*dim)*sizeof(np.float64))
 * 
 *     cpdef compute_gradients(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                             DomainManager domain_manager):
 *         """Compute gradients for each primitive variable.
 */

static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_9compute_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_compute_gradients(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, int __pyx_skip_dispatch) {
  struct __pyx_obj_3phd_5utils_6carray_IntArray *__pyx_v_tags = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_vol = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_face_area = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_pair_i = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_pair_j = 0;
  int __pyx_v_dim;
  int __pyx_v_num_fields;
  int __pyx_v_limiter;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_n;
  int __pyx_v_m;
  int __pyx_v_fid;
  double __pyx_v_psi;
  double __pyx_v_d_dif;
  double __pyx_v_d_sum;
  double *__pyx_v_x[3];
  double *__pyx_v_dcx[3];
  double __pyx_v_cfx[3];
  double *__pyx_v_fij[3];
  double __pyx_v_area;
  double __pyx_v_xi[3];
  double __pyx_v_xj[3];
  double __pyx_v_dr[3];
  double __pyx_v_cx[3];
  double __pyx_v_r;
  double __pyx_v__vol;
  __pyx_t_5numpy_float64_t **__pyx_v_prim;
  __pyx_t_5numpy_float64_t **__pyx_v_grad;
  __pyx_t_5numpy_float64_t *__pyx_v_phi_max;
  __pyx_t_5numpy_float64_t *__pyx_v_phi_min;
  __pyx_t_5numpy_float64_t *__pyx_v_alpha;
  __pyx_t_5numpy_float64_t *__pyx_v_df;
  PyObject *__pyx_v_dphi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __pyx_t_5numpy_float64_t **__pyx_t_7;
  __pyx_t_5numpy_float64_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  std::vector<int> ::size_type __pyx_t_19;
  std::vector<int> ::size_type __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  double __pyx_t_23;
  double __pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_gradients", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_gradients); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_9compute_gradients)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), ((PyObject *)__pyx_v_domain_manager)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), ((PyObject *)__pyx_v_domain_manager)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_mesh));
          __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_domain_manager));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/reconstruction/reconstruction.pyx":576
 *         """
 *         # particle information
 *         cdef IntArray tags = particles.get_carray("tag")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray vol = particles.get_carray("volume")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_tag, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_IntArray))))) __PYX_ERR(0, 576, __pyx_L1_error)
  __pyx_v_tags = ((struct __pyx_obj_3phd_5utils_6carray_IntArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":577
 *         # particle information
 *         cdef IntArray tags = particles.get_carray("tag")
 *         cdef DoubleArray vol = particles.get_carray("volume")             # <<<<<<<<<<<<<<
 * 
 *         # face information
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_volume, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 577, __pyx_L1_error)
  __pyx_v_vol = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":580
 * 
 *         # face information
 *         cdef DoubleArray face_area = mesh.faces.get_carray("area")             # <<<<<<<<<<<<<<
 *         cdef LongArray pair_i = mesh.faces.get_carray("pair-i")
 *         cdef LongArray pair_j = mesh.faces.get_carray("pair-j")
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray(__pyx_v_mesh->faces, __pyx_n_s_area, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 580, __pyx_L1_error)
  __pyx_v_face_area = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":581
 *         # face information
 *         cdef DoubleArray face_area = mesh.faces.get_carray("area")
 *         cdef LongArray pair_i = mesh.faces.get_carray("pair-i")             # <<<<<<<<<<<<<<
 *         cdef LongArray pair_j = mesh.faces.get_carray("pair-j")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray(__pyx_v_mesh->faces, __pyx_kp_s_pair_i, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 581, __pyx_L1_error)
  __pyx_v_pair_i = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":582
 *         cdef DoubleArray face_area = mesh.faces.get_carray("area")
 *         cdef LongArray pair_i = mesh.faces.get_carray("pair-i")
 *         cdef LongArray pair_j = mesh.faces.get_carray("pair-j")             # <<<<<<<<<<<<<<
 * 
 *         cdef int dim, num_fields
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray(__pyx_v_mesh->faces, __pyx_kp_s_pair_j, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 582, __pyx_L1_error)
  __pyx_v_pair_j = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":585
 * 
 *         cdef int dim, num_fields
 *         cdef int limiter = self.slope_limiter             # <<<<<<<<<<<<<<
 * 
 *         cdef int i, j, k, n, m, fid
 */
  __pyx_t_5 = __pyx_v_self->slope_limiter;
  __pyx_v_limiter = __pyx_t_5;

  /* "phd/reconstruction/reconstruction.pyx":594
 *         cdef double xi[3], xj[3], dr[3], cx[3], r, _vol
 * 
 *         cdef np.float64_t** prim = self.prim_pointer             # <<<<<<<<<<<<<<
 *         cdef np.float64_t** grad = self.grad_pointer
 * 
 */
  __pyx_t_7 = __pyx_v_self->prim_pointer;
  __pyx_v_prim = __pyx_t_7;

  /* "phd/reconstruction/reconstruction.pyx":595
 * 
 *         cdef np.float64_t** prim = self.prim_pointer
 *         cdef np.float64_t** grad = self.grad_pointer             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t* phi_max = self.phi_max
 */
  __pyx_t_7 = __pyx_v_self->grad_pointer;
  __pyx_v_grad = __pyx_t_7;

  /* "phd/reconstruction/reconstruction.pyx":597
 *         cdef np.float64_t** grad = self.grad_pointer
 * 
 *         cdef np.float64_t* phi_max = self.phi_max             # <<<<<<<<<<<<<<
 *         cdef np.float64_t* phi_min = self.phi_min
 *         cdef np.float64_t* alpha   = self.alpha
 */
  __pyx_t_8 = __pyx_v_self->phi_max;
  __pyx_v_phi_max = __pyx_t_8;

  /* "phd/reconstruction/reconstruction.pyx":598
 * 
 *         cdef np.float64_t* phi_max = self.phi_max
 *         cdef np.float64_t* phi_min = self.phi_min             # <<<<<<<<<<<<<<
 *         cdef np.float64_t* alpha   = self.alpha
 *         cdef np.float64_t* df      = self.df
 */
  __pyx_t_8 = __pyx_v_self->phi_min;
  __pyx_v_phi_min = __pyx_t_8;

  /* "phd/reconstruction/reconstruction.pyx":599
 *         cdef np.float64_t* phi_max = self.phi_max
 *         cdef np.float64_t* phi_min = self.phi_min
 *         cdef np.float64_t* alpha   = self.alpha             # <<<<<<<<<<<<<<
 *         cdef np.float64_t* df      = self.df
 * 
 */
  __pyx_t_8 = __pyx_v_self->alpha;
  __pyx_v_alpha = __pyx_t_8;

  /* "phd/reconstruction/reconstruction.pyx":600
 *         cdef np.float64_t* phi_min = self.phi_min
 *         cdef np.float64_t* alpha   = self.alpha
 *         cdef np.float64_t* df      = self.df             # <<<<<<<<<<<<<<
 * 
 *         phdLogger.info("PieceWiseLinear: Starting gradient cacluation")
 */
  __pyx_t_8 = __pyx_v_self->df;
  __pyx_v_df = __pyx_t_8;

  /* "phd/reconstruction/reconstruction.pyx":602
 *         cdef np.float64_t* df      = self.df
 * 
 *         phdLogger.info("PieceWiseLinear: Starting gradient cacluation")             # <<<<<<<<<<<<<<
 *         self.grad.resize(particles.get_carray_size())
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phdLogger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_s_PieceWiseLinear_Starting_gradien) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_PieceWiseLinear_Starting_gradien);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":603
 * 
 *         phdLogger.info("PieceWiseLinear: Starting gradient cacluation")
 *         self.grad.resize(particles.get_carray_size())             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->grad->__pyx_vtab)->resize(__pyx_v_self->grad, ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":605
 *         self.grad.resize(particles.get_carray_size())
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 *         num_fields = len(particles.carray_named_groups["primitive"])
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 605, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_9;

  /* "phd/reconstruction/reconstruction.pyx":606
 * 
 *         dim = len(particles.carray_named_groups["position"])
 *         num_fields = len(particles.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 * 
 *         # pointer to particle information
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 606, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_fields = __pyx_t_9;

  /* "phd/reconstruction/reconstruction.pyx":609
 * 
 *         # pointer to particle information
 *         particles.pointer_groups(x, particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 *         particles.pointer_groups(dcx, particles.carray_named_groups["dcom"])
 *         particles.pointer_groups(prim, particles.carray_named_groups["primitive"])
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 609, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 609, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_x, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":610
 *         # pointer to particle information
 *         particles.pointer_groups(x, particles.carray_named_groups["position"])
 *         particles.pointer_groups(dcx, particles.carray_named_groups["dcom"])             # <<<<<<<<<<<<<<
 *         particles.pointer_groups(prim, particles.carray_named_groups["primitive"])
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 610, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_dcom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 610, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_dcx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":611
 *         particles.pointer_groups(x, particles.carray_named_groups["position"])
 *         particles.pointer_groups(dcx, particles.carray_named_groups["dcom"])
 *         particles.pointer_groups(prim, particles.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 * 
 *         # pointer to face center of mass
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 611, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 611, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_prim, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":614
 * 
 *         # pointer to face center of mass
 *         mesh.faces.pointer_groups(fij, mesh.faces.carray_named_groups["com"])             # <<<<<<<<<<<<<<
 * 
 *         # pointer to primitive gradients with dimension stacked
 */
  if (unlikely(__pyx_v_mesh->faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 614, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_mesh->faces->carray_named_groups, __pyx_n_s_com); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 614, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->pointer_groups(__pyx_v_mesh->faces, __pyx_v_fij, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":617
 * 
 *         # pointer to primitive gradients with dimension stacked
 *         self.grad.pointer_groups(grad, self.grad.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 * 
 *         # calculate gradients
 */
  if (unlikely(__pyx_v_self->grad->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 617, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->grad->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 617, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->grad->__pyx_vtab)->pointer_groups(__pyx_v_self->grad, __pyx_v_grad, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":620
 * 
 *         # calculate gradients
 *         for i in range(particles.get_carray_size()):             # <<<<<<<<<<<<<<
 *             if tags.data[i] == REAL:
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray_size(__pyx_v_particles, 0);
  __pyx_t_10 = __pyx_t_5;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "phd/reconstruction/reconstruction.pyx":621
 *         # calculate gradients
 *         for i in range(particles.get_carray_size()):
 *             if tags.data[i] == REAL:             # <<<<<<<<<<<<<<
 * 
 *                 # store particle position
 */
    __pyx_t_12 = (((__pyx_v_tags->data[__pyx_v_i]) == __pyx_v_3phd_14reconstruction_14reconstruction_REAL) != 0);
    if (__pyx_t_12) {

      /* "phd/reconstruction/reconstruction.pyx":624
 * 
 *                 # store particle position
 *                 for k in range(dim):             # <<<<<<<<<<<<<<
 *                     xi[k] = x[k][i]
 *                     cx[k] = xi[k] + dcx[k][i]
 */
      __pyx_t_13 = __pyx_v_dim;
      __pyx_t_14 = __pyx_t_13;
      for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_k = __pyx_t_15;

        /* "phd/reconstruction/reconstruction.pyx":625
 *                 # store particle position
 *                 for k in range(dim):
 *                     xi[k] = x[k][i]             # <<<<<<<<<<<<<<
 *                     cx[k] = xi[k] + dcx[k][i]
 *                 _vol = vol.data[i]
 */
        (__pyx_v_xi[__pyx_v_k]) = ((__pyx_v_x[__pyx_v_k])[__pyx_v_i]);

        /* "phd/reconstruction/reconstruction.pyx":626
 *                 for k in range(dim):
 *                     xi[k] = x[k][i]
 *                     cx[k] = xi[k] + dcx[k][i]             # <<<<<<<<<<<<<<
 *                 _vol = vol.data[i]
 * 
 */
        (__pyx_v_cx[__pyx_v_k]) = ((__pyx_v_xi[__pyx_v_k]) + ((__pyx_v_dcx[__pyx_v_k])[__pyx_v_i]));
      }

      /* "phd/reconstruction/reconstruction.pyx":627
 *                     xi[k] = x[k][i]
 *                     cx[k] = xi[k] + dcx[k][i]
 *                 _vol = vol.data[i]             # <<<<<<<<<<<<<<
 * 
 *                 for n in range(num_fields):
 */
      __pyx_v__vol = (__pyx_v_vol->data[__pyx_v_i]);

      /* "phd/reconstruction/reconstruction.pyx":629
 *                 _vol = vol.data[i]
 * 
 *                 for n in range(num_fields):             # <<<<<<<<<<<<<<
 * 
 *                     # set min/max primitive values
 */
      __pyx_t_13 = __pyx_v_num_fields;
      __pyx_t_14 = __pyx_t_13;
      for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_n = __pyx_t_15;

        /* "phd/reconstruction/reconstruction.pyx":632
 * 
 *                     # set min/max primitive values
 *                     phi_max[n] = phi_min[n] = prim[n][i]             # <<<<<<<<<<<<<<
 *                     alpha[n]   = 1.0
 * 
 */
        (__pyx_v_phi_max[__pyx_v_n]) = ((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]);
        (__pyx_v_phi_min[__pyx_v_n]) = ((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]);

        /* "phd/reconstruction/reconstruction.pyx":633
 *                     # set min/max primitive values
 *                     phi_max[n] = phi_min[n] = prim[n][i]
 *                     alpha[n]   = 1.0             # <<<<<<<<<<<<<<
 * 
 *                     # zero out gradients
 */
        (__pyx_v_alpha[__pyx_v_n]) = 1.0;

        /* "phd/reconstruction/reconstruction.pyx":636
 * 
 *                     # zero out gradients
 *                     for k in range(dim):             # <<<<<<<<<<<<<<
 *                         df[dim*n+k] = 0
 * 
 */
        __pyx_t_16 = __pyx_v_dim;
        __pyx_t_17 = __pyx_t_16;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "phd/reconstruction/reconstruction.pyx":637
 *                     # zero out gradients
 *                     for k in range(dim):
 *                         df[dim*n+k] = 0             # <<<<<<<<<<<<<<
 * 
 *                 # loop over faces of particle
 */
          (__pyx_v_df[((__pyx_v_dim * __pyx_v_n) + __pyx_v_k)]) = 0.0;
        }
      }

      /* "phd/reconstruction/reconstruction.pyx":640
 * 
 *                 # loop over faces of particle
 *                 for m in range(mesh.neighbors[i].size()):             # <<<<<<<<<<<<<<
 * 
 *                     # index of face neighbor
 */
      __pyx_t_19 = (__pyx_v_mesh->neighbors[__pyx_v_i]).size();
      __pyx_t_20 = __pyx_t_19;
      for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_20; __pyx_t_13+=1) {
        __pyx_v_m = __pyx_t_13;

        /* "phd/reconstruction/reconstruction.pyx":643
 * 
 *                     # index of face neighbor
 *                     fid = mesh.neighbors[i][m]             # <<<<<<<<<<<<<<
 *                     area = face_area.data[fid]
 * 
 */
        __pyx_v_fid = ((__pyx_v_mesh->neighbors[__pyx_v_i])[__pyx_v_m]);

        /* "phd/reconstruction/reconstruction.pyx":644
 *                     # index of face neighbor
 *                     fid = mesh.neighbors[i][m]
 *                     area = face_area.data[fid]             # <<<<<<<<<<<<<<
 * 
 *                     # extract neighbor from face
 */
        __pyx_v_area = (__pyx_v_face_area->data[__pyx_v_fid]);

        /* "phd/reconstruction/reconstruction.pyx":647
 * 
 *                     # extract neighbor from face
 *                     if i == pair_i.data[fid]:             # <<<<<<<<<<<<<<
 *                         j = pair_j.data[fid]
 *                     elif i == pair_j.data[fid]:
 */
        __pyx_t_12 = ((__pyx_v_i == (__pyx_v_pair_i->data[__pyx_v_fid])) != 0);
        if (__pyx_t_12) {

          /* "phd/reconstruction/reconstruction.pyx":648
 *                     # extract neighbor from face
 *                     if i == pair_i.data[fid]:
 *                         j = pair_j.data[fid]             # <<<<<<<<<<<<<<
 *                     elif i == pair_j.data[fid]:
 *                         j = pair_i.data[fid]
 */
          __pyx_v_j = (__pyx_v_pair_j->data[__pyx_v_fid]);

          /* "phd/reconstruction/reconstruction.pyx":647
 * 
 *                     # extract neighbor from face
 *                     if i == pair_i.data[fid]:             # <<<<<<<<<<<<<<
 *                         j = pair_j.data[fid]
 *                     elif i == pair_j.data[fid]:
 */
          goto __pyx_L14;
        }

        /* "phd/reconstruction/reconstruction.pyx":649
 *                     if i == pair_i.data[fid]:
 *                         j = pair_j.data[fid]
 *                     elif i == pair_j.data[fid]:             # <<<<<<<<<<<<<<
 *                         j = pair_i.data[fid]
 *                     else:
 */
        __pyx_t_12 = ((__pyx_v_i == (__pyx_v_pair_j->data[__pyx_v_fid])) != 0);
        if (likely(__pyx_t_12)) {

          /* "phd/reconstruction/reconstruction.pyx":650
 *                         j = pair_j.data[fid]
 *                     elif i == pair_j.data[fid]:
 *                         j = pair_i.data[fid]             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise RuntimeError("ERROR: incorrect neighbors!")
 */
          __pyx_v_j = (__pyx_v_pair_i->data[__pyx_v_fid]);

          /* "phd/reconstruction/reconstruction.pyx":649
 *                     if i == pair_i.data[fid]:
 *                         j = pair_j.data[fid]
 *                     elif i == pair_j.data[fid]:             # <<<<<<<<<<<<<<
 *                         j = pair_i.data[fid]
 *                     else:
 */
          goto __pyx_L14;
        }

        /* "phd/reconstruction/reconstruction.pyx":652
 *                         j = pair_i.data[fid]
 *                     else:
 *                         raise RuntimeError("ERROR: incorrect neighbors!")             # <<<<<<<<<<<<<<
 * 
 *                     r = 0.0
 */
        /*else*/ {
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(0, 652, __pyx_L1_error)
        }
        __pyx_L14:;

        /* "phd/reconstruction/reconstruction.pyx":654
 *                         raise RuntimeError("ERROR: incorrect neighbors!")
 * 
 *                     r = 0.0             # <<<<<<<<<<<<<<
 *                     for k in range(dim):
 * 
 */
        __pyx_v_r = 0.0;

        /* "phd/reconstruction/reconstruction.pyx":655
 * 
 *                     r = 0.0
 *                     for k in range(dim):             # <<<<<<<<<<<<<<
 * 
 *                         # neighbor position
 */
        __pyx_t_14 = __pyx_v_dim;
        __pyx_t_15 = __pyx_t_14;
        for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
          __pyx_v_k = __pyx_t_16;

          /* "phd/reconstruction/reconstruction.pyx":658
 * 
 *                         # neighbor position
 *                         xj[k] = x[k][j]             # <<<<<<<<<<<<<<
 * 
 *                         # face center mass relative to midpoint of particles
 */
          (__pyx_v_xj[__pyx_v_k]) = ((__pyx_v_x[__pyx_v_k])[__pyx_v_j]);

          /* "phd/reconstruction/reconstruction.pyx":661
 * 
 *                         # face center mass relative to midpoint of particles
 *                         cfx[k] = fij[k][fid] - 0.5*(xi[k] + xj[k])             # <<<<<<<<<<<<<<
 * 
 *                         # separation vector of particles
 */
          (__pyx_v_cfx[__pyx_v_k]) = (((__pyx_v_fij[__pyx_v_k])[__pyx_v_fid]) - (0.5 * ((__pyx_v_xi[__pyx_v_k]) + (__pyx_v_xj[__pyx_v_k]))));

          /* "phd/reconstruction/reconstruction.pyx":664
 * 
 *                         # separation vector of particles
 *                         dr[k] = xi[k] - xj[k]             # <<<<<<<<<<<<<<
 *                         r += dr[k]**2
 * 
 */
          (__pyx_v_dr[__pyx_v_k]) = ((__pyx_v_xi[__pyx_v_k]) - (__pyx_v_xj[__pyx_v_k]));

          /* "phd/reconstruction/reconstruction.pyx":665
 *                         # separation vector of particles
 *                         dr[k] = xi[k] - xj[k]
 *                         r += dr[k]**2             # <<<<<<<<<<<<<<
 * 
 *                     r = sqrt(r)
 */
          __pyx_v_r = (__pyx_v_r + pow((__pyx_v_dr[__pyx_v_k]), 2.0));
        }

        /* "phd/reconstruction/reconstruction.pyx":667
 *                         r += dr[k]**2
 * 
 *                     r = sqrt(r)             # <<<<<<<<<<<<<<
 * 
 *                     # extrapolate each field to face
 */
        __pyx_v_r = sqrt(__pyx_v_r);

        /* "phd/reconstruction/reconstruction.pyx":670
 * 
 *                     # extrapolate each field to face
 *                     for n in range(num_fields):             # <<<<<<<<<<<<<<
 * 
 *                         # add neighbor values to max and min
 */
        __pyx_t_14 = __pyx_v_num_fields;
        __pyx_t_15 = __pyx_t_14;
        for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
          __pyx_v_n = __pyx_t_16;

          /* "phd/reconstruction/reconstruction.pyx":673
 * 
 *                         # add neighbor values to max and min
 *                         phi_max[n] = fmax(phi_max[n], prim[n][j])             # <<<<<<<<<<<<<<
 *                         phi_min[n] = fmin(phi_min[n], prim[n][j])
 * 
 */
          (__pyx_v_phi_max[__pyx_v_n]) = fmax((__pyx_v_phi_max[__pyx_v_n]), ((__pyx_v_prim[__pyx_v_n])[__pyx_v_j]));

          /* "phd/reconstruction/reconstruction.pyx":674
 *                         # add neighbor values to max and min
 *                         phi_max[n] = fmax(phi_max[n], prim[n][j])
 *                         phi_min[n] = fmin(phi_min[n], prim[n][j])             # <<<<<<<<<<<<<<
 * 
 *                         d_dif = prim[n][j] - prim[n][i]
 */
          (__pyx_v_phi_min[__pyx_v_n]) = fmin((__pyx_v_phi_min[__pyx_v_n]), ((__pyx_v_prim[__pyx_v_n])[__pyx_v_j]));

          /* "phd/reconstruction/reconstruction.pyx":676
 *                         phi_min[n] = fmin(phi_min[n], prim[n][j])
 * 
 *                         d_dif = prim[n][j] - prim[n][i]             # <<<<<<<<<<<<<<
 *                         d_sum = prim[n][j] + prim[n][i]
 * 
 */
          __pyx_v_d_dif = (((__pyx_v_prim[__pyx_v_n])[__pyx_v_j]) - ((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]));

          /* "phd/reconstruction/reconstruction.pyx":677
 * 
 *                         d_dif = prim[n][j] - prim[n][i]
 *                         d_sum = prim[n][j] + prim[n][i]             # <<<<<<<<<<<<<<
 * 
 *                         # gradient estimate Eq. 21
 */
          __pyx_v_d_sum = (((__pyx_v_prim[__pyx_v_n])[__pyx_v_j]) + ((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]));

          /* "phd/reconstruction/reconstruction.pyx":680
 * 
 *                         # gradient estimate Eq. 21
 *                         for k in range(dim):             # <<<<<<<<<<<<<<
 *                             df[dim*n+k] += area*(d_dif*cfx[k] - 0.5*d_sum*dr[k])/(r*_vol)
 * 
 */
          __pyx_t_17 = __pyx_v_dim;
          __pyx_t_18 = __pyx_t_17;
          for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_18; __pyx_t_21+=1) {
            __pyx_v_k = __pyx_t_21;

            /* "phd/reconstruction/reconstruction.pyx":681
 *                         # gradient estimate Eq. 21
 *                         for k in range(dim):
 *                             df[dim*n+k] += area*(d_dif*cfx[k] - 0.5*d_sum*dr[k])/(r*_vol)             # <<<<<<<<<<<<<<
 * 
 *                 if limiter == 0: # AREPO limiter
 */
            __pyx_t_22 = ((__pyx_v_dim * __pyx_v_n) + __pyx_v_k);
            __pyx_t_23 = (__pyx_v_area * ((__pyx_v_d_dif * (__pyx_v_cfx[__pyx_v_k])) - ((0.5 * __pyx_v_d_sum) * (__pyx_v_dr[__pyx_v_k]))));
            __pyx_t_24 = (__pyx_v_r * __pyx_v__vol);
            if (unlikely(__pyx_t_24 == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 681, __pyx_L1_error)
            }
            (__pyx_v_df[__pyx_t_22]) = ((__pyx_v_df[__pyx_t_22]) + (__pyx_t_23 / __pyx_t_24));
          }
        }
      }

      /* "phd/reconstruction/reconstruction.pyx":683
 *                             df[dim*n+k] += area*(d_dif*cfx[k] - 0.5*d_sum*dr[k])/(r*_vol)
 * 
 *                 if limiter == 0: # AREPO limiter             # <<<<<<<<<<<<<<
 * 
 *                     # limit gradients Eq. 30
 */
      switch (__pyx_v_limiter) {
        case 0:

        /* "phd/reconstruction/reconstruction.pyx":686
 * 
 *                     # limit gradients Eq. 30
 *                     for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                         for m in range(mesh.neighbors[i].size()):
 * 
 */
        __pyx_t_13 = __pyx_v_num_fields;
        __pyx_t_14 = __pyx_t_13;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_n = __pyx_t_15;

          /* "phd/reconstruction/reconstruction.pyx":687
 *                     # limit gradients Eq. 30
 *                     for n in range(num_fields):
 *                         for m in range(mesh.neighbors[i].size()):             # <<<<<<<<<<<<<<
 * 
 *                             # index of face neighbor
 */
          __pyx_t_19 = (__pyx_v_mesh->neighbors[__pyx_v_i]).size();
          __pyx_t_20 = __pyx_t_19;
          for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_20; __pyx_t_16+=1) {
            __pyx_v_m = __pyx_t_16;

            /* "phd/reconstruction/reconstruction.pyx":690
 * 
 *                             # index of face neighbor
 *                             fid = mesh.neighbors[i][m]             # <<<<<<<<<<<<<<
 * 
 *                             dphi = 0
 */
            __pyx_v_fid = ((__pyx_v_mesh->neighbors[__pyx_v_i])[__pyx_v_m]);

            /* "phd/reconstruction/reconstruction.pyx":692
 *                             fid = mesh.neighbors[i][m]
 * 
 *                             dphi = 0             # <<<<<<<<<<<<<<
 *                             for k in range(dim):
 *                                 dphi += df[dim*n+k]*(fij[k][fid] - cx[k])
 */
            __Pyx_INCREF(__pyx_int_0);
            __Pyx_XDECREF_SET(__pyx_v_dphi, __pyx_int_0);

            /* "phd/reconstruction/reconstruction.pyx":693
 * 
 *                             dphi = 0
 *                             for k in range(dim):             # <<<<<<<<<<<<<<
 *                                 dphi += df[dim*n+k]*(fij[k][fid] - cx[k])
 * 
 */
            __pyx_t_17 = __pyx_v_dim;
            __pyx_t_18 = __pyx_t_17;
            for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_18; __pyx_t_21+=1) {
              __pyx_v_k = __pyx_t_21;

              /* "phd/reconstruction/reconstruction.pyx":694
 *                             dphi = 0
 *                             for k in range(dim):
 *                                 dphi += df[dim*n+k]*(fij[k][fid] - cx[k])             # <<<<<<<<<<<<<<
 * 
 *                             if dphi > 0:
 */
              __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_df[((__pyx_v_dim * __pyx_v_n) + __pyx_v_k)]) * (((__pyx_v_fij[__pyx_v_k])[__pyx_v_fid]) - (__pyx_v_cx[__pyx_v_k])))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_dphi, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF_SET(__pyx_v_dphi, __pyx_t_3);
              __pyx_t_3 = 0;
            }

            /* "phd/reconstruction/reconstruction.pyx":696
 *                                 dphi += df[dim*n+k]*(fij[k][fid] - cx[k])
 * 
 *                             if dphi > 0:             # <<<<<<<<<<<<<<
 *                                 psi = (phi_max[n] - prim[n][i])/dphi
 *                             elif dphi < 0:
 */
            __pyx_t_3 = PyObject_RichCompare(__pyx_v_dphi, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 696, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (__pyx_t_12) {

              /* "phd/reconstruction/reconstruction.pyx":697
 * 
 *                             if dphi > 0:
 *                                 psi = (phi_max[n] - prim[n][i])/dphi             # <<<<<<<<<<<<<<
 *                             elif dphi < 0:
 *                                 psi = (phi_min[n] - prim[n][i])/dphi
 */
              __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_phi_max[__pyx_v_n]) - ((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 697, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dphi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_24 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_24 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_v_psi = __pyx_t_24;

              /* "phd/reconstruction/reconstruction.pyx":696
 *                                 dphi += df[dim*n+k]*(fij[k][fid] - cx[k])
 * 
 *                             if dphi > 0:             # <<<<<<<<<<<<<<
 *                                 psi = (phi_max[n] - prim[n][i])/dphi
 *                             elif dphi < 0:
 */
              goto __pyx_L27;
            }

            /* "phd/reconstruction/reconstruction.pyx":698
 *                             if dphi > 0:
 *                                 psi = (phi_max[n] - prim[n][i])/dphi
 *                             elif dphi < 0:             # <<<<<<<<<<<<<<
 *                                 psi = (phi_min[n] - prim[n][i])/dphi
 *                             else:
 */
            __pyx_t_1 = PyObject_RichCompare(__pyx_v_dphi, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error)
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 698, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_12) {

              /* "phd/reconstruction/reconstruction.pyx":699
 *                                 psi = (phi_max[n] - prim[n][i])/dphi
 *                             elif dphi < 0:
 *                                 psi = (phi_min[n] - prim[n][i])/dphi             # <<<<<<<<<<<<<<
 *                             else:
 *                                 psi = 1.0
 */
              __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_phi_min[__pyx_v_n]) - ((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_dphi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 699, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_24 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_24 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_v_psi = __pyx_t_24;

              /* "phd/reconstruction/reconstruction.pyx":698
 *                             if dphi > 0:
 *                                 psi = (phi_max[n] - prim[n][i])/dphi
 *                             elif dphi < 0:             # <<<<<<<<<<<<<<
 *                                 psi = (phi_min[n] - prim[n][i])/dphi
 *                             else:
 */
              goto __pyx_L27;
            }

            /* "phd/reconstruction/reconstruction.pyx":701
 *                                 psi = (phi_min[n] - prim[n][i])/dphi
 *                             else:
 *                                 psi = 1.0             # <<<<<<<<<<<<<<
 * 
 *                             alpha[n] = fmin(alpha[n], fmax(psi, 0.))
 */
            /*else*/ {
              __pyx_v_psi = 1.0;
            }
            __pyx_L27:;

            /* "phd/reconstruction/reconstruction.pyx":703
 *                                 psi = 1.0
 * 
 *                             alpha[n] = fmin(alpha[n], fmax(psi, 0.))             # <<<<<<<<<<<<<<
 * 
 *                 elif limiter == 1: # TESS limiter
 */
            (__pyx_v_alpha[__pyx_v_n]) = fmin((__pyx_v_alpha[__pyx_v_n]), fmax(__pyx_v_psi, 0.));
          }
        }

        /* "phd/reconstruction/reconstruction.pyx":683
 *                             df[dim*n+k] += area*(d_dif*cfx[k] - 0.5*d_sum*dr[k])/(r*_vol)
 * 
 *                 if limiter == 0: # AREPO limiter             # <<<<<<<<<<<<<<
 * 
 *                     # limit gradients Eq. 30
 */
        break;
        case 1:

        /* "phd/reconstruction/reconstruction.pyx":708
 * 
 *                     # limit gradients Eq. 22
 *                     for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                         for m in range(mesh.neighbors[i].size()):
 * 
 */
        __pyx_t_13 = __pyx_v_num_fields;
        __pyx_t_14 = __pyx_t_13;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_n = __pyx_t_15;

          /* "phd/reconstruction/reconstruction.pyx":709
 *                     # limit gradients Eq. 22
 *                     for n in range(num_fields):
 *                         for m in range(mesh.neighbors[i].size()):             # <<<<<<<<<<<<<<
 * 
 *                             # index of face neighbor
 */
          __pyx_t_19 = (__pyx_v_mesh->neighbors[__pyx_v_i]).size();
          __pyx_t_20 = __pyx_t_19;
          for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_20; __pyx_t_16+=1) {
            __pyx_v_m = __pyx_t_16;

            /* "phd/reconstruction/reconstruction.pyx":712
 * 
 *                             # index of face neighbor
 *                             fid = mesh.neighbors[i][m]             # <<<<<<<<<<<<<<
 *                             # extract neighbor from face
 * 
 */
            __pyx_v_fid = ((__pyx_v_mesh->neighbors[__pyx_v_i])[__pyx_v_m]);

            /* "phd/reconstruction/reconstruction.pyx":715
 *                             # extract neighbor from face
 * 
 *                             if i == pair_i.data[fid]:             # <<<<<<<<<<<<<<
 *                                 j = pair_j.data[fid]
 *                             elif i == pair_j.data[fid]:
 */
            __pyx_t_12 = ((__pyx_v_i == (__pyx_v_pair_i->data[__pyx_v_fid])) != 0);
            if (__pyx_t_12) {

              /* "phd/reconstruction/reconstruction.pyx":716
 * 
 *                             if i == pair_i.data[fid]:
 *                                 j = pair_j.data[fid]             # <<<<<<<<<<<<<<
 *                             elif i == pair_j.data[fid]:
 *                                 j = pair_i.data[fid]
 */
              __pyx_v_j = (__pyx_v_pair_j->data[__pyx_v_fid]);

              /* "phd/reconstruction/reconstruction.pyx":715
 *                             # extract neighbor from face
 * 
 *                             if i == pair_i.data[fid]:             # <<<<<<<<<<<<<<
 *                                 j = pair_j.data[fid]
 *                             elif i == pair_j.data[fid]:
 */
              goto __pyx_L32;
            }

            /* "phd/reconstruction/reconstruction.pyx":717
 *                             if i == pair_i.data[fid]:
 *                                 j = pair_j.data[fid]
 *                             elif i == pair_j.data[fid]:             # <<<<<<<<<<<<<<
 *                                 j = pair_i.data[fid]
 * 
 */
            __pyx_t_12 = ((__pyx_v_i == (__pyx_v_pair_j->data[__pyx_v_fid])) != 0);
            if (__pyx_t_12) {

              /* "phd/reconstruction/reconstruction.pyx":718
 *                                 j = pair_j.data[fid]
 *                             elif i == pair_j.data[fid]:
 *                                 j = pair_i.data[fid]             # <<<<<<<<<<<<<<
 * 
 *                             dphi = 0
 */
              __pyx_v_j = (__pyx_v_pair_i->data[__pyx_v_fid]);

              /* "phd/reconstruction/reconstruction.pyx":717
 *                             if i == pair_i.data[fid]:
 *                                 j = pair_j.data[fid]
 *                             elif i == pair_j.data[fid]:             # <<<<<<<<<<<<<<
 *                                 j = pair_i.data[fid]
 * 
 */
            }
            __pyx_L32:;

            /* "phd/reconstruction/reconstruction.pyx":720
 *                                 j = pair_i.data[fid]
 * 
 *                             dphi = 0             # <<<<<<<<<<<<<<
 *                             for k in range(dim):
 *                                 dphi += df[dim*n+k]*(fij[k][fid] - cx[k])
 */
            __Pyx_INCREF(__pyx_int_0);
            __Pyx_XDECREF_SET(__pyx_v_dphi, __pyx_int_0);

            /* "phd/reconstruction/reconstruction.pyx":721
 * 
 *                             dphi = 0
 *                             for k in range(dim):             # <<<<<<<<<<<<<<
 *                                 dphi += df[dim*n+k]*(fij[k][fid] - cx[k])
 * 
 */
            __pyx_t_17 = __pyx_v_dim;
            __pyx_t_18 = __pyx_t_17;
            for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_18; __pyx_t_21+=1) {
              __pyx_v_k = __pyx_t_21;

              /* "phd/reconstruction/reconstruction.pyx":722
 *                             dphi = 0
 *                             for k in range(dim):
 *                                 dphi += df[dim*n+k]*(fij[k][fid] - cx[k])             # <<<<<<<<<<<<<<
 * 
 *                             if dphi > 0.0:
 */
              __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_df[((__pyx_v_dim * __pyx_v_n) + __pyx_v_k)]) * (((__pyx_v_fij[__pyx_v_k])[__pyx_v_fid]) - (__pyx_v_cx[__pyx_v_k])))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 722, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_dphi, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 722, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF_SET(__pyx_v_dphi, __pyx_t_1);
              __pyx_t_1 = 0;
            }

            /* "phd/reconstruction/reconstruction.pyx":724
 *                                 dphi += df[dim*n+k]*(fij[k][fid] - cx[k])
 * 
 *                             if dphi > 0.0:             # <<<<<<<<<<<<<<
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)
 *                             elif dphi < 0.0:
 */
            __pyx_t_1 = PyObject_RichCompare(__pyx_v_dphi, __pyx_float_0_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 724, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_12) {

              /* "phd/reconstruction/reconstruction.pyx":725
 * 
 *                             if dphi > 0.0:
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)             # <<<<<<<<<<<<<<
 *                             elif dphi < 0.0:
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)
 */
              __pyx_t_24 = 0.;
              __pyx_t_1 = PyFloat_FromDouble((((__pyx_v_prim[__pyx_v_n])[__pyx_v_j]) - ((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_dphi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_2 = PyFloat_FromDouble(__pyx_t_24); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 725, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 725, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (__pyx_t_12) {
                __pyx_t_6 = PyFloat_FromDouble(__pyx_t_24); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 725, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_1 = __pyx_t_6;
                __pyx_t_6 = 0;
              } else {
                __Pyx_INCREF(__pyx_t_3);
                __pyx_t_1 = __pyx_t_3;
              }
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_24 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_24 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_v_psi = __pyx_t_24;

              /* "phd/reconstruction/reconstruction.pyx":724
 *                                 dphi += df[dim*n+k]*(fij[k][fid] - cx[k])
 * 
 *                             if dphi > 0.0:             # <<<<<<<<<<<<<<
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)
 *                             elif dphi < 0.0:
 */
              goto __pyx_L35;
            }

            /* "phd/reconstruction/reconstruction.pyx":726
 *                             if dphi > 0.0:
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)
 *                             elif dphi < 0.0:             # <<<<<<<<<<<<<<
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)
 *                             else:
 */
            __pyx_t_1 = PyObject_RichCompare(__pyx_v_dphi, __pyx_float_0_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
            __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 726, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_12) {

              /* "phd/reconstruction/reconstruction.pyx":727
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)
 *                             elif dphi < 0.0:
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 psi = 1.0
 */
              __pyx_t_24 = 0.;
              __pyx_t_1 = PyFloat_FromDouble((((__pyx_v_prim[__pyx_v_n])[__pyx_v_j]) - ((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_dphi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 727, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_6 = PyFloat_FromDouble(__pyx_t_24); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 727, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_2 = PyObject_RichCompare(__pyx_t_6, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 727, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 727, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (__pyx_t_12) {
                __pyx_t_2 = PyFloat_FromDouble(__pyx_t_24); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 727, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_1 = __pyx_t_2;
                __pyx_t_2 = 0;
              } else {
                __Pyx_INCREF(__pyx_t_3);
                __pyx_t_1 = __pyx_t_3;
              }
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_24 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_24 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_v_psi = __pyx_t_24;

              /* "phd/reconstruction/reconstruction.pyx":726
 *                             if dphi > 0.0:
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)
 *                             elif dphi < 0.0:             # <<<<<<<<<<<<<<
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)
 *                             else:
 */
              goto __pyx_L35;
            }

            /* "phd/reconstruction/reconstruction.pyx":729
 *                                 psi = max((prim[n][j] - prim[n][i])/dphi, 0.)
 *                             else:
 *                                 psi = 1.0             # <<<<<<<<<<<<<<
 * 
 *                             alpha[0] = fmin(alpha[0], fmax(psi, 0.))
 */
            /*else*/ {
              __pyx_v_psi = 1.0;
            }
            __pyx_L35:;

            /* "phd/reconstruction/reconstruction.pyx":731
 *                                 psi = 1.0
 * 
 *                             alpha[0] = fmin(alpha[0], fmax(psi, 0.))             # <<<<<<<<<<<<<<
 * 
 *                 # store the gradients
 */
            (__pyx_v_alpha[0]) = fmin((__pyx_v_alpha[0]), fmax(__pyx_v_psi, 0.));
          }
        }

        /* "phd/reconstruction/reconstruction.pyx":705
 *                             alpha[n] = fmin(alpha[n], fmax(psi, 0.))
 * 
 *                 elif limiter == 1: # TESS limiter             # <<<<<<<<<<<<<<
 * 
 *                     # limit gradients Eq. 22
 */
        break;
        default: break;
      }

      /* "phd/reconstruction/reconstruction.pyx":734
 * 
 *                 # store the gradients
 *                 for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                     for k in range(dim):
 *                         grad[dim*n+k][i] = alpha[n]*df[dim*n+k]
 */
      __pyx_t_13 = __pyx_v_num_fields;
      __pyx_t_14 = __pyx_t_13;
      for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_n = __pyx_t_15;

        /* "phd/reconstruction/reconstruction.pyx":735
 *                 # store the gradients
 *                 for n in range(num_fields):
 *                     for k in range(dim):             # <<<<<<<<<<<<<<
 *                         grad[dim*n+k][i] = alpha[n]*df[dim*n+k]
 * 
 */
        __pyx_t_16 = __pyx_v_dim;
        __pyx_t_17 = __pyx_t_16;
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "phd/reconstruction/reconstruction.pyx":736
 *                 for n in range(num_fields):
 *                     for k in range(dim):
 *                         grad[dim*n+k][i] = alpha[n]*df[dim*n+k]             # <<<<<<<<<<<<<<
 * 
 *         # transfer gradients to ghost particles
 */
          ((__pyx_v_grad[((__pyx_v_dim * __pyx_v_n) + __pyx_v_k)])[__pyx_v_i]) = ((__pyx_v_alpha[__pyx_v_n]) * (__pyx_v_df[((__pyx_v_dim * __pyx_v_n) + __pyx_v_k)]));
        }
      }

      /* "phd/reconstruction/reconstruction.pyx":621
 *         # calculate gradients
 *         for i in range(particles.get_carray_size()):
 *             if tags.data[i] == REAL:             # <<<<<<<<<<<<<<
 * 
 *                 # store particle position
 */
    }
  }

  /* "phd/reconstruction/reconstruction.pyx":739
 * 
 *         # transfer gradients to ghost particles
 *         domain_manager.update_ghost_gradients(particles, self.grad)             # <<<<<<<<<<<<<<
 * 
 *     cpdef add_spatial(self, CarrayContainer particles, Mesh mesh,
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->grad);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = ((struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager *)__pyx_v_domain_manager->__pyx_vtab)->update_ghost_gradients(__pyx_v_domain_manager, __pyx_v_particles, ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1), 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "phd/reconstruction/reconstruction.pyx":563
 *         self.df = <np.float64_t*> stdlib.malloc((num_fields*dim)*sizeof(np.float64))
 * 
 *     cpdef compute_gradients(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                             DomainManager domain_manager):
 *         """Compute gradients for each primitive variable.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.compute_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tags);
  __Pyx_XDECREF((PyObject *)__pyx_v_vol);
  __Pyx_XDECREF((PyObject *)__pyx_v_face_area);
  __Pyx_XDECREF((PyObject *)__pyx_v_pair_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_pair_j);
  __Pyx_XDECREF(__pyx_v_dphi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_9compute_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_8compute_gradients[] = "Compute gradients for each primitive variable.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        mesh : Mesh\n            Class that builds the domain mesh.\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_9compute_gradients(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_gradients (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_domain_manager,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_gradients", 1, 3, 3, 1); __PYX_ERR(0, 563, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain_manager)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_gradients", 1, 3, 3, 2); __PYX_ERR(0, 563, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_gradients") < 0)) __PYX_ERR(0, 563, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_gradients", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 563, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.compute_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 563, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 563, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 564, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_8compute_gradients(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_domain_manager);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_8compute_gradients(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_gradients", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_compute_gradients(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_domain_manager, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.compute_gradients", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":741
 *         domain_manager.update_ghost_gradients(particles, self.grad)
 * 
 *     cpdef add_spatial(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_11add_spatial(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_add_spatial(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, CYTHON_UNUSED double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, CYTHON_UNUSED double __pyx_v_dt, int __pyx_v_boost, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_dim;
  int __pyx_v_num_fields;
  double __pyx_v_psi1;
  double __pyx_v_psi2;
  double __pyx_v_delta1;
  double __pyx_v_delta2;
  double __pyx_v_phi_min;
  double __pyx_v_phi_max;
  double __pyx_v_phibar_l;
  double __pyx_v_phibar_r;
  double __pyx_v_phi_minus;
  double __pyx_v_phi_plus;
  double __pyx_v_sepi;
  double __pyx_v_sepj;
  double __pyx_v_sepi_mag;
  double __pyx_v_sepj_mag;
  double __pyx_v_diff_mag;
  __pyx_t_5numpy_float64_t *__pyx_v_vl[3];
  __pyx_t_5numpy_float64_t *__pyx_v_vr[3];
  __pyx_t_5numpy_float64_t *__pyx_v_fij[3];
  __pyx_t_5numpy_float64_t *__pyx_v_wx[3];
  __pyx_t_5numpy_float64_t *__pyx_v_x[3];
  __pyx_t_5numpy_float64_t *__pyx_v_v[3];
  __pyx_t_5numpy_float64_t *__pyx_v_dcx[3];
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_pair_i = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_pair_j = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dr = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pr = 0;
  __pyx_t_5numpy_float64_t **__pyx_v_prim;
  __pyx_t_5numpy_float64_t **__pyx_v_prim_l;
  __pyx_t_5numpy_float64_t **__pyx_v_prim_r;
  __pyx_t_5numpy_float64_t *__pyx_v_state_l;
  __pyx_t_5numpy_float64_t *__pyx_v_state_r;
  __pyx_t_5numpy_float64_t **__pyx_v_grad;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __pyx_t_5numpy_float64_t **__pyx_t_10;
  __pyx_t_5numpy_float64_t *__pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  double __pyx_t_24;
  double __pyx_t_25;
  int __pyx_t_26;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_spatial", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_spatial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_11add_spatial)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_boost); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, ((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_3);
          __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
          PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, ((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/reconstruction/reconstruction.pyx":768
 * 
 *         # gizmo limiter parameters
 *         cdef double psi1 = 0.5, psi2 = 0.25             # <<<<<<<<<<<<<<
 *         cdef double delta1, delta2
 *         cdef double phi_min, phi_max
 */
  __pyx_v_psi1 = 0.5;
  __pyx_v_psi2 = 0.25;

  /* "phd/reconstruction/reconstruction.pyx":781
 *         cdef np.float64_t *x[3], *v[3], *dcx[3]
 * 
 *         cdef LongArray pair_i = mesh.faces.get_carray("pair-i")             # <<<<<<<<<<<<<<
 *         cdef LongArray pair_j = mesh.faces.get_carray("pair-j")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray(__pyx_v_mesh->faces, __pyx_kp_s_pair_i, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 781, __pyx_L1_error)
  __pyx_v_pair_i = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":782
 * 
 *         cdef LongArray pair_i = mesh.faces.get_carray("pair-i")
 *         cdef LongArray pair_j = mesh.faces.get_carray("pair-j")             # <<<<<<<<<<<<<<
 * 
 *         # left state primitive variables
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray(__pyx_v_mesh->faces, __pyx_kp_s_pair_j, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 782, __pyx_L1_error)
  __pyx_v_pair_j = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":785
 * 
 *         # left state primitive variables
 *         cdef DoubleArray dl = self.left_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pl = self.left_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.left_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 785, __pyx_L1_error)
  __pyx_v_dl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":786
 *         # left state primitive variables
 *         cdef DoubleArray dl = self.left_states.get_carray("density")
 *         cdef DoubleArray pl = self.left_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         # right state primitive variables
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.left_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 786, __pyx_L1_error)
  __pyx_v_pl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":789
 * 
 *         # right state primitive variables
 *         cdef DoubleArray dr = self.right_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pr = self.right_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.right_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 789, __pyx_L1_error)
  __pyx_v_dr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":790
 *         # right state primitive variables
 *         cdef DoubleArray dr = self.right_states.get_carray("density")
 *         cdef DoubleArray pr = self.right_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t** prim = self.prim_pointer
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.right_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 790, __pyx_L1_error)
  __pyx_v_pr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":792
 *         cdef DoubleArray pr = self.right_states.get_carray("pressure")
 * 
 *         cdef np.float64_t** prim = self.prim_pointer             # <<<<<<<<<<<<<<
 *         cdef np.float64_t** prim_l = self.priml_pointer
 *         cdef np.float64_t** prim_r = self.primr_pointer
 */
  __pyx_t_10 = __pyx_v_self->prim_pointer;
  __pyx_v_prim = __pyx_t_10;

  /* "phd/reconstruction/reconstruction.pyx":793
 * 
 *         cdef np.float64_t** prim = self.prim_pointer
 *         cdef np.float64_t** prim_l = self.priml_pointer             # <<<<<<<<<<<<<<
 *         cdef np.float64_t** prim_r = self.primr_pointer
 * 
 */
  __pyx_t_10 = __pyx_v_self->priml_pointer;
  __pyx_v_prim_l = __pyx_t_10;

  /* "phd/reconstruction/reconstruction.pyx":794
 *         cdef np.float64_t** prim = self.prim_pointer
 *         cdef np.float64_t** prim_l = self.priml_pointer
 *         cdef np.float64_t** prim_r = self.primr_pointer             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t* state_l = self.state_l
 */
  __pyx_t_10 = __pyx_v_self->primr_pointer;
  __pyx_v_prim_r = __pyx_t_10;

  /* "phd/reconstruction/reconstruction.pyx":796
 *         cdef np.float64_t** prim_r = self.primr_pointer
 * 
 *         cdef np.float64_t* state_l = self.state_l             # <<<<<<<<<<<<<<
 *         cdef np.float64_t* state_r = self.state_r
 * 
 */
  __pyx_t_11 = __pyx_v_self->state_l;
  __pyx_v_state_l = __pyx_t_11;

  /* "phd/reconstruction/reconstruction.pyx":797
 * 
 *         cdef np.float64_t* state_l = self.state_l
 *         cdef np.float64_t* state_r = self.state_r             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t** grad = self.grad_pointer
 */
  __pyx_t_11 = __pyx_v_self->state_r;
  __pyx_v_state_r = __pyx_t_11;

  /* "phd/reconstruction/reconstruction.pyx":799
 *         cdef np.float64_t* state_r = self.state_r
 * 
 *         cdef np.float64_t** grad = self.grad_pointer             # <<<<<<<<<<<<<<
 * 
 *         phdLogger.info("PieceWiseLinear: Starting spatial reconstruction")
 */
  __pyx_t_10 = __pyx_v_self->grad_pointer;
  __pyx_v_grad = __pyx_t_10;

  /* "phd/reconstruction/reconstruction.pyx":801
 *         cdef np.float64_t** grad = self.grad_pointer
 * 
 *         phdLogger.info("PieceWiseLinear: Starting spatial reconstruction")             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phdLogger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_kp_s_PieceWiseLinear_Starting_spatial) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_PieceWiseLinear_Starting_spatial);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":803
 *         phdLogger.info("PieceWiseLinear: Starting spatial reconstruction")
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 *         num_fields = len(particles.carray_named_groups["primitive"])
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 803, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_12;

  /* "phd/reconstruction/reconstruction.pyx":804
 * 
 *         dim = len(particles.carray_named_groups["position"])
 *         num_fields = len(particles.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 * 
 *         # resize states to hold values at each face
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 804, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_fields = __pyx_t_12;

  /* "phd/reconstruction/reconstruction.pyx":807
 * 
 *         # resize states to hold values at each face
 *         self.left_states.resize(mesh.faces.get_carray_size())             # <<<<<<<<<<<<<<
 *         self.right_states.resize(mesh.faces.get_carray_size())
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->resize(__pyx_v_self->__pyx_base.left_states, ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":808
 *         # resize states to hold values at each face
 *         self.left_states.resize(mesh.faces.get_carray_size())
 *         self.right_states.resize(mesh.faces.get_carray_size())             # <<<<<<<<<<<<<<
 * 
 *         # pointers left/right primitive values
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->resize(__pyx_v_self->__pyx_base.right_states, ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":811
 * 
 *         # pointers left/right primitive values
 *         self.left_states.pointer_groups(prim_l, self.left_states.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 *         self.right_states.pointer_groups(prim_r, self.right_states.carray_named_groups["primitive"])
 * 
 */
  if (unlikely(__pyx_v_self->__pyx_base.left_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 811, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.left_states->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 811, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.left_states, __pyx_v_prim_l, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":812
 *         # pointers left/right primitive values
 *         self.left_states.pointer_groups(prim_l, self.left_states.carray_named_groups["primitive"])
 *         self.right_states.pointer_groups(prim_r, self.right_states.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 * 
 *         # pointers to particle primitive, position, com, and velocity
 */
  if (unlikely(__pyx_v_self->__pyx_base.right_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 812, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.right_states->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 812, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.right_states, __pyx_v_prim_r, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":815
 * 
 *         # pointers to particle primitive, position, com, and velocity
 *         particles.pointer_groups(prim, particles.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 *         particles.pointer_groups(x, particles.carray_named_groups["position"])
 *         particles.pointer_groups(dcx, particles.carray_named_groups["dcom"])
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 815, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 815, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_prim, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":816
 *         # pointers to particle primitive, position, com, and velocity
 *         particles.pointer_groups(prim, particles.carray_named_groups["primitive"])
 *         particles.pointer_groups(x, particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 *         particles.pointer_groups(dcx, particles.carray_named_groups["dcom"])
 *         particles.pointer_groups(v, particles.carray_named_groups["velocity"])
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 816, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 816, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_x, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":817
 *         particles.pointer_groups(prim, particles.carray_named_groups["primitive"])
 *         particles.pointer_groups(x, particles.carray_named_groups["position"])
 *         particles.pointer_groups(dcx, particles.carray_named_groups["dcom"])             # <<<<<<<<<<<<<<
 *         particles.pointer_groups(v, particles.carray_named_groups["velocity"])
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 817, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_dcom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 817, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_dcx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":818
 *         particles.pointer_groups(x, particles.carray_named_groups["position"])
 *         particles.pointer_groups(dcx, particles.carray_named_groups["dcom"])
 *         particles.pointer_groups(v, particles.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # pointers to left/right velocities at face
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 818, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 818, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_v, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":821
 * 
 *         # pointers to left/right velocities at face
 *         self.left_states.pointer_groups(vl, self.left_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 *         self.right_states.pointer_groups(vr, self.right_states.carray_named_groups["velocity"])
 * 
 */
  if (unlikely(__pyx_v_self->__pyx_base.left_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 821, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.left_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 821, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.left_states, __pyx_v_vl, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":822
 *         # pointers to left/right velocities at face
 *         self.left_states.pointer_groups(vl, self.left_states.carray_named_groups["velocity"])
 *         self.right_states.pointer_groups(vr, self.right_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # pointers to face velocity and center of mass
 */
  if (unlikely(__pyx_v_self->__pyx_base.right_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 822, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.right_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 822, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.right_states, __pyx_v_vr, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":825
 * 
 *         # pointers to face velocity and center of mass
 *         mesh.faces.pointer_groups(fij, mesh.faces.carray_named_groups["com"])             # <<<<<<<<<<<<<<
 *         mesh.faces.pointer_groups(wx, mesh.faces.carray_named_groups["velocity"])
 * 
 */
  if (unlikely(__pyx_v_mesh->faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 825, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_mesh->faces->carray_named_groups, __pyx_n_s_com); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 825, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->pointer_groups(__pyx_v_mesh->faces, __pyx_v_fij, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":826
 *         # pointers to face velocity and center of mass
 *         mesh.faces.pointer_groups(fij, mesh.faces.carray_named_groups["com"])
 *         mesh.faces.pointer_groups(wx, mesh.faces.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # pointers to primitive gradients
 */
  if (unlikely(__pyx_v_mesh->faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 826, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_mesh->faces->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 826, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->pointer_groups(__pyx_v_mesh->faces, __pyx_v_wx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":829
 * 
 *         # pointers to primitive gradients
 *         self.grad.pointer_groups(grad, self.grad.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 * 
 *         # create left/right states for each face
 */
  if (unlikely(__pyx_v_self->grad->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 829, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->grad->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 829, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->grad->__pyx_vtab)->pointer_groups(__pyx_v_self->grad, __pyx_v_grad, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":832
 * 
 *         # create left/right states for each face
 *         for m in range(mesh.faces.get_carray_size()):             # <<<<<<<<<<<<<<
 * 
 *             # particles that make up the face
 */
  __pyx_t_8 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0);
  __pyx_t_13 = __pyx_t_8;
  for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
    __pyx_v_m = __pyx_t_14;

    /* "phd/reconstruction/reconstruction.pyx":835
 * 
 *             # particles that make up the face
 *             i = pair_i.data[m]             # <<<<<<<<<<<<<<
 *             j = pair_j.data[m]
 * 
 */
    __pyx_v_i = (__pyx_v_pair_i->data[__pyx_v_m]);

    /* "phd/reconstruction/reconstruction.pyx":836
 *             # particles that make up the face
 *             i = pair_i.data[m]
 *             j = pair_j.data[m]             # <<<<<<<<<<<<<<
 * 
 *             # copy constant states
 */
    __pyx_v_j = (__pyx_v_pair_j->data[__pyx_v_m]);

    /* "phd/reconstruction/reconstruction.pyx":839
 * 
 *             # copy constant states
 *             for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                 prim_l[n][m] = prim[n][i]
 *                 prim_r[n][m] = prim[n][j]
 */
    __pyx_t_15 = __pyx_v_num_fields;
    __pyx_t_16 = __pyx_t_15;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_n = __pyx_t_17;

      /* "phd/reconstruction/reconstruction.pyx":840
 *             # copy constant states
 *             for n in range(num_fields):
 *                 prim_l[n][m] = prim[n][i]             # <<<<<<<<<<<<<<
 *                 prim_r[n][m] = prim[n][j]
 * 
 */
      ((__pyx_v_prim_l[__pyx_v_n])[__pyx_v_m]) = ((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]);

      /* "phd/reconstruction/reconstruction.pyx":841
 *             for n in range(num_fields):
 *                 prim_l[n][m] = prim[n][i]
 *                 prim_r[n][m] = prim[n][j]             # <<<<<<<<<<<<<<
 * 
 *             # update because of boost
 */
      ((__pyx_v_prim_r[__pyx_v_n])[__pyx_v_m]) = ((__pyx_v_prim[__pyx_v_n])[__pyx_v_j]);
    }

    /* "phd/reconstruction/reconstruction.pyx":844
 * 
 *             # update because of boost
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 *                 if boost:
 *                     vl[k][m] = v[k][i] - wx[k][m]
 */
    __pyx_t_15 = __pyx_v_dim;
    __pyx_t_16 = __pyx_t_15;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_k = __pyx_t_17;

      /* "phd/reconstruction/reconstruction.pyx":845
 *             # update because of boost
 *             for k in range(dim):
 *                 if boost:             # <<<<<<<<<<<<<<
 *                     vl[k][m] = v[k][i] - wx[k][m]
 *                     vr[k][m] = v[k][j] - wx[k][m]
 */
      __pyx_t_18 = (__pyx_v_boost != 0);
      if (__pyx_t_18) {

        /* "phd/reconstruction/reconstruction.pyx":846
 *             for k in range(dim):
 *                 if boost:
 *                     vl[k][m] = v[k][i] - wx[k][m]             # <<<<<<<<<<<<<<
 *                     vr[k][m] = v[k][j] - wx[k][m]
 * 
 */
        ((__pyx_v_vl[__pyx_v_k])[__pyx_v_m]) = (((__pyx_v_v[__pyx_v_k])[__pyx_v_i]) - ((__pyx_v_wx[__pyx_v_k])[__pyx_v_m]));

        /* "phd/reconstruction/reconstruction.pyx":847
 *                 if boost:
 *                     vl[k][m] = v[k][i] - wx[k][m]
 *                     vr[k][m] = v[k][j] - wx[k][m]             # <<<<<<<<<<<<<<
 * 
 *             # copy constant states
 */
        ((__pyx_v_vr[__pyx_v_k])[__pyx_v_m]) = (((__pyx_v_v[__pyx_v_k])[__pyx_v_j]) - ((__pyx_v_wx[__pyx_v_k])[__pyx_v_m]));

        /* "phd/reconstruction/reconstruction.pyx":845
 *             # update because of boost
 *             for k in range(dim):
 *                 if boost:             # <<<<<<<<<<<<<<
 *                     vl[k][m] = v[k][i] - wx[k][m]
 *                     vr[k][m] = v[k][j] - wx[k][m]
 */
      }
    }

    /* "phd/reconstruction/reconstruction.pyx":850
 * 
 *             # copy constant states
 *             for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                 state_l[n] = prim_l[n][m]
 *                 state_r[n] = prim_r[n][m]
 */
    __pyx_t_15 = __pyx_v_num_fields;
    __pyx_t_16 = __pyx_t_15;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_n = __pyx_t_17;

      /* "phd/reconstruction/reconstruction.pyx":851
 *             # copy constant states
 *             for n in range(num_fields):
 *                 state_l[n] = prim_l[n][m]             # <<<<<<<<<<<<<<
 *                 state_r[n] = prim_r[n][m]
 * 
 */
      (__pyx_v_state_l[__pyx_v_n]) = ((__pyx_v_prim_l[__pyx_v_n])[__pyx_v_m]);

      /* "phd/reconstruction/reconstruction.pyx":852
 *             for n in range(num_fields):
 *                 state_l[n] = prim_l[n][m]
 *                 state_r[n] = prim_r[n][m]             # <<<<<<<<<<<<<<
 * 
 *             diff_mag = 0.0
 */
      (__pyx_v_state_r[__pyx_v_n]) = ((__pyx_v_prim_r[__pyx_v_n])[__pyx_v_m]);
    }

    /* "phd/reconstruction/reconstruction.pyx":854
 *                 state_r[n] = prim_r[n][m]
 * 
 *             diff_mag = 0.0             # <<<<<<<<<<<<<<
 *             sepi_mag = sepj_mag = 0.0
 * 
 */
    __pyx_v_diff_mag = 0.0;

    /* "phd/reconstruction/reconstruction.pyx":855
 * 
 *             diff_mag = 0.0
 *             sepi_mag = sepj_mag = 0.0             # <<<<<<<<<<<<<<
 * 
 *             # add spatial derivatives Eq. 27
 */
    __pyx_v_sepi_mag = 0.0;
    __pyx_v_sepj_mag = 0.0;

    /* "phd/reconstruction/reconstruction.pyx":858
 * 
 *             # add spatial derivatives Eq. 27
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 * 
 *                 # distance from particle to com of face
 */
    __pyx_t_15 = __pyx_v_dim;
    __pyx_t_16 = __pyx_t_15;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_k = __pyx_t_17;

      /* "phd/reconstruction/reconstruction.pyx":861
 * 
 *                 # distance from particle to com of face
 *                 sepi = fij[k][m] - (x[k][i] + dcx[k][i])             # <<<<<<<<<<<<<<
 *                 sepj = fij[k][m] - (x[k][j] + dcx[k][j])
 * 
 */
      __pyx_v_sepi = (((__pyx_v_fij[__pyx_v_k])[__pyx_v_m]) - (((__pyx_v_x[__pyx_v_k])[__pyx_v_i]) + ((__pyx_v_dcx[__pyx_v_k])[__pyx_v_i])));

      /* "phd/reconstruction/reconstruction.pyx":862
 *                 # distance from particle to com of face
 *                 sepi = fij[k][m] - (x[k][i] + dcx[k][i])
 *                 sepj = fij[k][m] - (x[k][j] + dcx[k][j])             # <<<<<<<<<<<<<<
 * 
 *                 sepi_mag += sepi*sepi
 */
      __pyx_v_sepj = (((__pyx_v_fij[__pyx_v_k])[__pyx_v_m]) - (((__pyx_v_x[__pyx_v_k])[__pyx_v_j]) + ((__pyx_v_dcx[__pyx_v_k])[__pyx_v_j])));

      /* "phd/reconstruction/reconstruction.pyx":864
 *                 sepj = fij[k][m] - (x[k][j] + dcx[k][j])
 * 
 *                 sepi_mag += sepi*sepi             # <<<<<<<<<<<<<<
 *                 sepj_mag += sepj*sepj
 *                 diff_mag += (x[k][j] - x[k][i])**2
 */
      __pyx_v_sepi_mag = (__pyx_v_sepi_mag + (__pyx_v_sepi * __pyx_v_sepi));

      /* "phd/reconstruction/reconstruction.pyx":865
 * 
 *                 sepi_mag += sepi*sepi
 *                 sepj_mag += sepj*sepj             # <<<<<<<<<<<<<<
 *                 diff_mag += (x[k][j] - x[k][i])**2
 * 
 */
      __pyx_v_sepj_mag = (__pyx_v_sepj_mag + (__pyx_v_sepj * __pyx_v_sepj));

      /* "phd/reconstruction/reconstruction.pyx":866
 *                 sepi_mag += sepi*sepi
 *                 sepj_mag += sepj*sepj
 *                 diff_mag += (x[k][j] - x[k][i])**2             # <<<<<<<<<<<<<<
 * 
 *                 # extraploate to face
 */
      __pyx_v_diff_mag = (__pyx_v_diff_mag + pow((((__pyx_v_x[__pyx_v_k])[__pyx_v_j]) - ((__pyx_v_x[__pyx_v_k])[__pyx_v_i])), 2.0));

      /* "phd/reconstruction/reconstruction.pyx":869
 * 
 *                 # extraploate to face
 *                 for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                     prim_l[n][m] += grad[n*dim+k][i]*sepi
 *                     prim_r[n][m] += grad[n*dim+k][j]*sepj
 */
      __pyx_t_19 = __pyx_v_num_fields;
      __pyx_t_20 = __pyx_t_19;
      for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
        __pyx_v_n = __pyx_t_21;

        /* "phd/reconstruction/reconstruction.pyx":870
 *                 # extraploate to face
 *                 for n in range(num_fields):
 *                     prim_l[n][m] += grad[n*dim+k][i]*sepi             # <<<<<<<<<<<<<<
 *                     prim_r[n][m] += grad[n*dim+k][j]*sepj
 * 
 */
        __pyx_t_22 = __pyx_v_n;
        __pyx_t_23 = __pyx_v_m;
        ((__pyx_v_prim_l[__pyx_t_22])[__pyx_t_23]) = (((__pyx_v_prim_l[__pyx_t_22])[__pyx_t_23]) + (((__pyx_v_grad[((__pyx_v_n * __pyx_v_dim) + __pyx_v_k)])[__pyx_v_i]) * __pyx_v_sepi));

        /* "phd/reconstruction/reconstruction.pyx":871
 *                 for n in range(num_fields):
 *                     prim_l[n][m] += grad[n*dim+k][i]*sepi
 *                     prim_r[n][m] += grad[n*dim+k][j]*sepj             # <<<<<<<<<<<<<<
 * 
 *             sepi_mag = sqrt(sepi_mag)
 */
        __pyx_t_22 = __pyx_v_n;
        __pyx_t_23 = __pyx_v_m;
        ((__pyx_v_prim_r[__pyx_t_22])[__pyx_t_23]) = (((__pyx_v_prim_r[__pyx_t_22])[__pyx_t_23]) + (((__pyx_v_grad[((__pyx_v_n * __pyx_v_dim) + __pyx_v_k)])[__pyx_v_j]) * __pyx_v_sepj));
      }
    }

    /* "phd/reconstruction/reconstruction.pyx":873
 *                     prim_r[n][m] += grad[n*dim+k][j]*sepj
 * 
 *             sepi_mag = sqrt(sepi_mag)             # <<<<<<<<<<<<<<
 *             sepj_mag = sqrt(sepj_mag)
 *             diff_mag = sqrt(diff_mag)
 */
    __pyx_v_sepi_mag = sqrt(__pyx_v_sepi_mag);

    /* "phd/reconstruction/reconstruction.pyx":874
 * 
 *             sepi_mag = sqrt(sepi_mag)
 *             sepj_mag = sqrt(sepj_mag)             # <<<<<<<<<<<<<<
 *             diff_mag = sqrt(diff_mag)
 * 
 */
    __pyx_v_sepj_mag = sqrt(__pyx_v_sepj_mag);

    /* "phd/reconstruction/reconstruction.pyx":875
 *             sepi_mag = sqrt(sepi_mag)
 *             sepj_mag = sqrt(sepj_mag)
 *             diff_mag = sqrt(diff_mag)             # <<<<<<<<<<<<<<
 * 
 *             # gizmo limiter: appendix B4
 */
    __pyx_v_diff_mag = sqrt(__pyx_v_diff_mag);

    /* "phd/reconstruction/reconstruction.pyx":878
 * 
 *             # gizmo limiter: appendix B4
 *             if self.gizmo_limiter:             # <<<<<<<<<<<<<<
 * 
 *                 # limit each field pairwise
 */
    __pyx_t_18 = (__pyx_v_self->gizmo_limiter != 0);
    if (__pyx_t_18) {

      /* "phd/reconstruction/reconstruction.pyx":881
 * 
 *                 # limit each field pairwise
 *                 for n in range(num_fields):             # <<<<<<<<<<<<<<
 * 
 *                     delta1 = psi1*fabs(state_l[n] - state_r[n])
 */
      __pyx_t_15 = __pyx_v_num_fields;
      __pyx_t_16 = __pyx_t_15;
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
        __pyx_v_n = __pyx_t_17;

        /* "phd/reconstruction/reconstruction.pyx":883
 *                 for n in range(num_fields):
 * 
 *                     delta1 = psi1*fabs(state_l[n] - state_r[n])             # <<<<<<<<<<<<<<
 *                     delta2 = psi2*fabs(state_l[n] - state_r[n])
 * 
 */
        __pyx_v_delta1 = (__pyx_v_psi1 * fabs(((__pyx_v_state_l[__pyx_v_n]) - (__pyx_v_state_r[__pyx_v_n]))));

        /* "phd/reconstruction/reconstruction.pyx":884
 * 
 *                     delta1 = psi1*fabs(state_l[n] - state_r[n])
 *                     delta2 = psi2*fabs(state_l[n] - state_r[n])             # <<<<<<<<<<<<<<
 * 
 *                     phi_min = fmin(state_l[n], state_r[n])
 */
        __pyx_v_delta2 = (__pyx_v_psi2 * fabs(((__pyx_v_state_l[__pyx_v_n]) - (__pyx_v_state_r[__pyx_v_n]))));

        /* "phd/reconstruction/reconstruction.pyx":886
 *                     delta2 = psi2*fabs(state_l[n] - state_r[n])
 * 
 *                     phi_min = fmin(state_l[n], state_r[n])             # <<<<<<<<<<<<<<
 *                     phi_max = fmax(state_l[n], state_r[n])
 * 
 */
        __pyx_v_phi_min = fmin((__pyx_v_state_l[__pyx_v_n]), (__pyx_v_state_r[__pyx_v_n]));

        /* "phd/reconstruction/reconstruction.pyx":887
 * 
 *                     phi_min = fmin(state_l[n], state_r[n])
 *                     phi_max = fmax(state_l[n], state_r[n])             # <<<<<<<<<<<<<<
 * 
 *                     phibar_l = state_l[n] + sepi_mag/diff_mag*(state_r[n] - state_l[n])
 */
        __pyx_v_phi_max = fmax((__pyx_v_state_l[__pyx_v_n]), (__pyx_v_state_r[__pyx_v_n]));

        /* "phd/reconstruction/reconstruction.pyx":889
 *                     phi_max = fmax(state_l[n], state_r[n])
 * 
 *                     phibar_l = state_l[n] + sepi_mag/diff_mag*(state_r[n] - state_l[n])             # <<<<<<<<<<<<<<
 *                     phibar_r = state_r[n] + sepj_mag/diff_mag*(state_l[n] - state_r[n])
 * 
 */
        if (unlikely(__pyx_v_diff_mag == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 889, __pyx_L1_error)
        }
        __pyx_v_phibar_l = ((__pyx_v_state_l[__pyx_v_n]) + ((__pyx_v_sepi_mag / __pyx_v_diff_mag) * ((__pyx_v_state_r[__pyx_v_n]) - (__pyx_v_state_l[__pyx_v_n]))));

        /* "phd/reconstruction/reconstruction.pyx":890
 * 
 *                     phibar_l = state_l[n] + sepi_mag/diff_mag*(state_r[n] - state_l[n])
 *                     phibar_r = state_r[n] + sepj_mag/diff_mag*(state_l[n] - state_r[n])             # <<<<<<<<<<<<<<
 * 
 *                     if ((phi_max + delta1)*phi_max >= 0.):
 */
        if (unlikely(__pyx_v_diff_mag == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 890, __pyx_L1_error)
        }
        __pyx_v_phibar_r = ((__pyx_v_state_r[__pyx_v_n]) + ((__pyx_v_sepj_mag / __pyx_v_diff_mag) * ((__pyx_v_state_l[__pyx_v_n]) - (__pyx_v_state_r[__pyx_v_n]))));

        /* "phd/reconstruction/reconstruction.pyx":892
 *                     phibar_r = state_r[n] + sepj_mag/diff_mag*(state_l[n] - state_r[n])
 * 
 *                     if ((phi_max + delta1)*phi_max >= 0.):             # <<<<<<<<<<<<<<
 *                         phi_plus = phi_max + delta1
 *                     else:
 */
        __pyx_t_18 = ((((__pyx_v_phi_max + __pyx_v_delta1) * __pyx_v_phi_max) >= 0.) != 0);
        if (__pyx_t_18) {

          /* "phd/reconstruction/reconstruction.pyx":893
 * 
 *                     if ((phi_max + delta1)*phi_max >= 0.):
 *                         phi_plus = phi_max + delta1             # <<<<<<<<<<<<<<
 *                     else:
 *                         phi_plus = phi_max/(1 + delta1/fabs(phi_max))
 */
          __pyx_v_phi_plus = (__pyx_v_phi_max + __pyx_v_delta1);

          /* "phd/reconstruction/reconstruction.pyx":892
 *                     phibar_r = state_r[n] + sepj_mag/diff_mag*(state_l[n] - state_r[n])
 * 
 *                     if ((phi_max + delta1)*phi_max >= 0.):             # <<<<<<<<<<<<<<
 *                         phi_plus = phi_max + delta1
 *                     else:
 */
          goto __pyx_L19;
        }

        /* "phd/reconstruction/reconstruction.pyx":895
 *                         phi_plus = phi_max + delta1
 *                     else:
 *                         phi_plus = phi_max/(1 + delta1/fabs(phi_max))             # <<<<<<<<<<<<<<
 * 
 *                     if ((phi_min - delta1)*phi_min >= 0.):
 */
        /*else*/ {
          __pyx_t_24 = fabs(__pyx_v_phi_max);
          if (unlikely(__pyx_t_24 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 895, __pyx_L1_error)
          }
          __pyx_t_25 = (1.0 + (__pyx_v_delta1 / __pyx_t_24));
          if (unlikely(__pyx_t_25 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 895, __pyx_L1_error)
          }
          __pyx_v_phi_plus = (__pyx_v_phi_max / __pyx_t_25);
        }
        __pyx_L19:;

        /* "phd/reconstruction/reconstruction.pyx":897
 *                         phi_plus = phi_max/(1 + delta1/fabs(phi_max))
 * 
 *                     if ((phi_min - delta1)*phi_min >= 0.):             # <<<<<<<<<<<<<<
 *                         phi_minus = phi_min - delta1
 *                     else:
 */
        __pyx_t_18 = ((((__pyx_v_phi_min - __pyx_v_delta1) * __pyx_v_phi_min) >= 0.) != 0);
        if (__pyx_t_18) {

          /* "phd/reconstruction/reconstruction.pyx":898
 * 
 *                     if ((phi_min - delta1)*phi_min >= 0.):
 *                         phi_minus = phi_min - delta1             # <<<<<<<<<<<<<<
 *                     else:
 *                         phi_minus = phi_min/(1 + delta1/fabs(phi_min))
 */
          __pyx_v_phi_minus = (__pyx_v_phi_min - __pyx_v_delta1);

          /* "phd/reconstruction/reconstruction.pyx":897
 *                         phi_plus = phi_max/(1 + delta1/fabs(phi_max))
 * 
 *                     if ((phi_min - delta1)*phi_min >= 0.):             # <<<<<<<<<<<<<<
 *                         phi_minus = phi_min - delta1
 *                     else:
 */
          goto __pyx_L20;
        }

        /* "phd/reconstruction/reconstruction.pyx":900
 *                         phi_minus = phi_min - delta1
 *                     else:
 *                         phi_minus = phi_min/(1 + delta1/fabs(phi_min))             # <<<<<<<<<<<<<<
 * 
 *                     if prim[n][i] < prim[n][j]:
 */
        /*else*/ {
          __pyx_t_25 = fabs(__pyx_v_phi_min);
          if (unlikely(__pyx_t_25 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 900, __pyx_L1_error)
          }
          __pyx_t_24 = (1.0 + (__pyx_v_delta1 / __pyx_t_25));
          if (unlikely(__pyx_t_24 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 900, __pyx_L1_error)
          }
          __pyx_v_phi_minus = (__pyx_v_phi_min / __pyx_t_24);
        }
        __pyx_L20:;

        /* "phd/reconstruction/reconstruction.pyx":902
 *                         phi_minus = phi_min/(1 + delta1/fabs(phi_min))
 * 
 *                     if prim[n][i] < prim[n][j]:             # <<<<<<<<<<<<<<
 *                         prim_l[n][m] = fmax(phi_minus, fmin(phibar_l+delta2, prim_l[n][m]))
 *                         prim_r[n][m] = fmin(phi_plus,  fmax(phibar_r-delta2, prim_r[n][m]))
 */
        __pyx_t_18 = ((((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]) < ((__pyx_v_prim[__pyx_v_n])[__pyx_v_j])) != 0);
        if (__pyx_t_18) {

          /* "phd/reconstruction/reconstruction.pyx":903
 * 
 *                     if prim[n][i] < prim[n][j]:
 *                         prim_l[n][m] = fmax(phi_minus, fmin(phibar_l+delta2, prim_l[n][m]))             # <<<<<<<<<<<<<<
 *                         prim_r[n][m] = fmin(phi_plus,  fmax(phibar_r-delta2, prim_r[n][m]))
 * 
 */
          ((__pyx_v_prim_l[__pyx_v_n])[__pyx_v_m]) = fmax(__pyx_v_phi_minus, fmin((__pyx_v_phibar_l + __pyx_v_delta2), ((__pyx_v_prim_l[__pyx_v_n])[__pyx_v_m])));

          /* "phd/reconstruction/reconstruction.pyx":904
 *                     if prim[n][i] < prim[n][j]:
 *                         prim_l[n][m] = fmax(phi_minus, fmin(phibar_l+delta2, prim_l[n][m]))
 *                         prim_r[n][m] = fmin(phi_plus,  fmax(phibar_r-delta2, prim_r[n][m]))             # <<<<<<<<<<<<<<
 * 
 *                     elif prim[n][i] > prim[n][j]:
 */
          ((__pyx_v_prim_r[__pyx_v_n])[__pyx_v_m]) = fmin(__pyx_v_phi_plus, fmax((__pyx_v_phibar_r - __pyx_v_delta2), ((__pyx_v_prim_r[__pyx_v_n])[__pyx_v_m])));

          /* "phd/reconstruction/reconstruction.pyx":902
 *                         phi_minus = phi_min/(1 + delta1/fabs(phi_min))
 * 
 *                     if prim[n][i] < prim[n][j]:             # <<<<<<<<<<<<<<
 *                         prim_l[n][m] = fmax(phi_minus, fmin(phibar_l+delta2, prim_l[n][m]))
 *                         prim_r[n][m] = fmin(phi_plus,  fmax(phibar_r-delta2, prim_r[n][m]))
 */
          goto __pyx_L21;
        }

        /* "phd/reconstruction/reconstruction.pyx":906
 *                         prim_r[n][m] = fmin(phi_plus,  fmax(phibar_r-delta2, prim_r[n][m]))
 * 
 *                     elif prim[n][i] > prim[n][j]:             # <<<<<<<<<<<<<<
 *                         prim_l[n][m] = fmin(phi_plus,  fmax(phibar_l-delta2, prim_l[n][m]))
 *                         prim_r[n][m] = fmax(phi_minus, fmin(phibar_r+delta2, prim_r[n][m]))
 */
        __pyx_t_18 = ((((__pyx_v_prim[__pyx_v_n])[__pyx_v_i]) > ((__pyx_v_prim[__pyx_v_n])[__pyx_v_j])) != 0);
        if (__pyx_t_18) {

          /* "phd/reconstruction/reconstruction.pyx":907
 * 
 *                     elif prim[n][i] > prim[n][j]:
 *                         prim_l[n][m] = fmin(phi_plus,  fmax(phibar_l-delta2, prim_l[n][m]))             # <<<<<<<<<<<<<<
 *                         prim_r[n][m] = fmax(phi_minus, fmin(phibar_r+delta2, prim_r[n][m]))
 * 
 */
          ((__pyx_v_prim_l[__pyx_v_n])[__pyx_v_m]) = fmin(__pyx_v_phi_plus, fmax((__pyx_v_phibar_l - __pyx_v_delta2), ((__pyx_v_prim_l[__pyx_v_n])[__pyx_v_m])));

          /* "phd/reconstruction/reconstruction.pyx":908
 *                     elif prim[n][i] > prim[n][j]:
 *                         prim_l[n][m] = fmin(phi_plus,  fmax(phibar_l-delta2, prim_l[n][m]))
 *                         prim_r[n][m] = fmax(phi_minus, fmin(phibar_r+delta2, prim_r[n][m]))             # <<<<<<<<<<<<<<
 * 
 *                     else:
 */
          ((__pyx_v_prim_r[__pyx_v_n])[__pyx_v_m]) = fmax(__pyx_v_phi_minus, fmin((__pyx_v_phibar_r + __pyx_v_delta2), ((__pyx_v_prim_r[__pyx_v_n])[__pyx_v_m])));

          /* "phd/reconstruction/reconstruction.pyx":906
 *                         prim_r[n][m] = fmin(phi_plus,  fmax(phibar_r-delta2, prim_r[n][m]))
 * 
 *                     elif prim[n][i] > prim[n][j]:             # <<<<<<<<<<<<<<
 *                         prim_l[n][m] = fmin(phi_plus,  fmax(phibar_l-delta2, prim_l[n][m]))
 *                         prim_r[n][m] = fmax(phi_minus, fmin(phibar_r+delta2, prim_r[n][m]))
 */
          goto __pyx_L21;
        }

        /* "phd/reconstruction/reconstruction.pyx":911
 * 
 *                     else:
 *                         prim_l[n][m] = state_l[n]             # <<<<<<<<<<<<<<
 *                         prim_r[n][m] = state_r[n]
 * 
 */
        /*else*/ {
          ((__pyx_v_prim_l[__pyx_v_n])[__pyx_v_m]) = (__pyx_v_state_l[__pyx_v_n]);

          /* "phd/reconstruction/reconstruction.pyx":912
 *                     else:
 *                         prim_l[n][m] = state_l[n]
 *                         prim_r[n][m] = state_r[n]             # <<<<<<<<<<<<<<
 * 
 *                 # if negative reduce to constant reconstruction
 */
          ((__pyx_v_prim_r[__pyx_v_n])[__pyx_v_m]) = (__pyx_v_state_r[__pyx_v_n]);
        }
        __pyx_L21:;
      }

      /* "phd/reconstruction/reconstruction.pyx":915
 * 
 *                 # if negative reduce to constant reconstruction
 *                 if dl.data[m] < 0.0 or pl.data[m] < 0.0:             # <<<<<<<<<<<<<<
 *                     for n in range(num_fields):
 *                         prim_l[n][m] = state_l[n]
 */
      __pyx_t_26 = (((__pyx_v_dl->data[__pyx_v_m]) < 0.0) != 0);
      if (!__pyx_t_26) {
      } else {
        __pyx_t_18 = __pyx_t_26;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_26 = (((__pyx_v_pl->data[__pyx_v_m]) < 0.0) != 0);
      __pyx_t_18 = __pyx_t_26;
      __pyx_L23_bool_binop_done:;
      if (__pyx_t_18) {

        /* "phd/reconstruction/reconstruction.pyx":916
 *                 # if negative reduce to constant reconstruction
 *                 if dl.data[m] < 0.0 or pl.data[m] < 0.0:
 *                     for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                         prim_l[n][m] = state_l[n]
 * 
 */
        __pyx_t_15 = __pyx_v_num_fields;
        __pyx_t_16 = __pyx_t_15;
        for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
          __pyx_v_n = __pyx_t_17;

          /* "phd/reconstruction/reconstruction.pyx":917
 *                 if dl.data[m] < 0.0 or pl.data[m] < 0.0:
 *                     for n in range(num_fields):
 *                         prim_l[n][m] = state_l[n]             # <<<<<<<<<<<<<<
 * 
 *                 if dr.data[m] < 0.0 or pr.data[m] < 0.0:
 */
          ((__pyx_v_prim_l[__pyx_v_n])[__pyx_v_m]) = (__pyx_v_state_l[__pyx_v_n]);
        }

        /* "phd/reconstruction/reconstruction.pyx":915
 * 
 *                 # if negative reduce to constant reconstruction
 *                 if dl.data[m] < 0.0 or pl.data[m] < 0.0:             # <<<<<<<<<<<<<<
 *                     for n in range(num_fields):
 *                         prim_l[n][m] = state_l[n]
 */
      }

      /* "phd/reconstruction/reconstruction.pyx":919
 *                         prim_l[n][m] = state_l[n]
 * 
 *                 if dr.data[m] < 0.0 or pr.data[m] < 0.0:             # <<<<<<<<<<<<<<
 *                     for n in range(num_fields):
 *                         prim_r[n][m] = state_r[n]
 */
      __pyx_t_26 = (((__pyx_v_dr->data[__pyx_v_m]) < 0.0) != 0);
      if (!__pyx_t_26) {
      } else {
        __pyx_t_18 = __pyx_t_26;
        goto __pyx_L28_bool_binop_done;
      }
      __pyx_t_26 = (((__pyx_v_pr->data[__pyx_v_m]) < 0.0) != 0);
      __pyx_t_18 = __pyx_t_26;
      __pyx_L28_bool_binop_done:;
      if (__pyx_t_18) {

        /* "phd/reconstruction/reconstruction.pyx":920
 * 
 *                 if dr.data[m] < 0.0 or pr.data[m] < 0.0:
 *                     for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                         prim_r[n][m] = state_r[n]
 * 
 */
        __pyx_t_15 = __pyx_v_num_fields;
        __pyx_t_16 = __pyx_t_15;
        for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
          __pyx_v_n = __pyx_t_17;

          /* "phd/reconstruction/reconstruction.pyx":921
 *                 if dr.data[m] < 0.0 or pr.data[m] < 0.0:
 *                     for n in range(num_fields):
 *                         prim_r[n][m] = state_r[n]             # <<<<<<<<<<<<<<
 * 
 *     cpdef add_temporal(self, CarrayContainer particles, Mesh mesh,
 */
          ((__pyx_v_prim_r[__pyx_v_n])[__pyx_v_m]) = (__pyx_v_state_r[__pyx_v_n]);
        }

        /* "phd/reconstruction/reconstruction.pyx":919
 *                         prim_l[n][m] = state_l[n]
 * 
 *                 if dr.data[m] < 0.0 or pr.data[m] < 0.0:             # <<<<<<<<<<<<<<
 *                     for n in range(num_fields):
 *                         prim_r[n][m] = state_r[n]
 */
      }

      /* "phd/reconstruction/reconstruction.pyx":878
 * 
 *             # gizmo limiter: appendix B4
 *             if self.gizmo_limiter:             # <<<<<<<<<<<<<<
 * 
 *                 # limit each field pairwise
 */
    }
  }

  /* "phd/reconstruction/reconstruction.pyx":741
 *         domain_manager.update_ghost_gradients(particles, self.grad)
 * 
 *     cpdef add_spatial(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.add_spatial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pair_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_pair_j);
  __Pyx_XDECREF((PyObject *)__pyx_v_dl);
  __Pyx_XDECREF((PyObject *)__pyx_v_pl);
  __Pyx_XDECREF((PyObject *)__pyx_v_dr);
  __Pyx_XDECREF((PyObject *)__pyx_v_pr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_11add_spatial(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_10add_spatial[] = "Perform reconstruction from cell center to face center.\n        This follows the method outlined by Springel (2009) and all equations\n        referenced are from that paper.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        mesh : Mesh\n            Class that builds the domain mesh.\n\n        boost : bool\n            Solve equations in moving reference frame.\n\n        domain_manager : DomainManager\n            Class that handels all things related with the domain.\n\n        dt : float\n            Time to extrapolate reconstructed fields to.\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_11add_spatial(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  double __pyx_v_gamma;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager = 0;
  double __pyx_v_dt;
  int __pyx_v_boost;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_spatial (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_gamma,&__pyx_n_s_domain_manager,&__pyx_n_s_dt,&__pyx_n_s_boost,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, 1); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gamma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, 2); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain_manager)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, 3); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, 4); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, 5); __PYX_ERR(0, 741, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_spatial") < 0)) __PYX_ERR(0, 741, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_gamma = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_gamma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L3_error)
    __pyx_v_domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)values[3]);
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L3_error)
    __pyx_v_boost = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_boost == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_spatial", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 741, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.add_spatial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 741, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 741, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 742, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_10add_spatial(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_10add_spatial(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_spatial", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_add_spatial(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.add_spatial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":923
 *                         prim_r[n][m] = state_r[n]
 * 
 *     cpdef add_temporal(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13add_temporal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_add_temporal(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, CYTHON_UNUSED struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_dim;
  int __pyx_v_num_passive;
  int __pyx_v_num_fields;
  __pyx_t_5numpy_float64_t __pyx_v_vi[3];
  __pyx_t_5numpy_float64_t __pyx_v_vj[3];
  __pyx_t_5numpy_float64_t *__pyx_v_v[3];
  __pyx_t_5numpy_float64_t *__pyx_v_wx[3];
  __pyx_t_5numpy_float64_t *__pyx_v_vl[3];
  __pyx_t_5numpy_float64_t *__pyx_v_vr[3];
  __pyx_t_5numpy_float64_t *__pyx_v_dd[3];
  __pyx_t_5numpy_float64_t *__pyx_v_dv[9];
  __pyx_t_5numpy_float64_t *__pyx_v_dp[3];
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_pair_i = 0;
  struct __pyx_obj_3phd_5utils_6carray_LongArray *__pyx_v_pair_j = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_d = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_p = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pl = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_dr = 0;
  struct __pyx_obj_3phd_5utils_6carray_DoubleArray *__pyx_v_pr = 0;
  __pyx_t_5numpy_float64_t *__pyx_v_state_l;
  __pyx_t_5numpy_float64_t *__pyx_v_state_r;
  __pyx_t_5numpy_float64_t **__pyx_v_prim_l;
  __pyx_t_5numpy_float64_t **__pyx_v_prim_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __pyx_t_5numpy_float64_t *__pyx_t_10;
  __pyx_t_5numpy_float64_t **__pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  __pyx_t_5numpy_float64_t __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_temporal", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_temporal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13add_temporal)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 923, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_boost); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 923, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 923, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 923, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 923, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, ((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_3);
          __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
          PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, ((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 923, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/reconstruction/reconstruction.pyx":954
 *         cdef np.float64_t *dd[3], *dv[9], *dp[3]
 * 
 *         cdef LongArray pair_i = mesh.faces.get_carray("pair-i")             # <<<<<<<<<<<<<<
 *         cdef LongArray pair_j = mesh.faces.get_carray("pair-j")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray(__pyx_v_mesh->faces, __pyx_kp_s_pair_i, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 954, __pyx_L1_error)
  __pyx_v_pair_i = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":955
 * 
 *         cdef LongArray pair_i = mesh.faces.get_carray("pair-i")
 *         cdef LongArray pair_j = mesh.faces.get_carray("pair-j")             # <<<<<<<<<<<<<<
 * 
 *         # particle primitive variables
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray(__pyx_v_mesh->faces, __pyx_kp_s_pair_j, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_LongArray))))) __PYX_ERR(0, 955, __pyx_L1_error)
  __pyx_v_pair_j = ((struct __pyx_obj_3phd_5utils_6carray_LongArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":958
 * 
 *         # particle primitive variables
 *         cdef DoubleArray d = particles.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray p = particles.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 958, __pyx_L1_error)
  __pyx_v_d = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":959
 *         # particle primitive variables
 *         cdef DoubleArray d = particles.get_carray("density")
 *         cdef DoubleArray p = particles.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         # left state primitive variables
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->get_carray(__pyx_v_particles, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 959, __pyx_L1_error)
  __pyx_v_p = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":962
 * 
 *         # left state primitive variables
 *         cdef DoubleArray dl = self.left_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pl = self.left_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.left_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 962, __pyx_L1_error)
  __pyx_v_dl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":963
 *         # left state primitive variables
 *         cdef DoubleArray dl = self.left_states.get_carray("density")
 *         cdef DoubleArray pl = self.left_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         # right state primitive variables
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.left_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 963, __pyx_L1_error)
  __pyx_v_pl = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":966
 * 
 *         # right state primitive variables
 *         cdef DoubleArray dr = self.right_states.get_carray("density")             # <<<<<<<<<<<<<<
 *         cdef DoubleArray pr = self.right_states.get_carray("pressure")
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.right_states, __pyx_n_s_density, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 966, __pyx_L1_error)
  __pyx_v_dr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":967
 *         # right state primitive variables
 *         cdef DoubleArray dr = self.right_states.get_carray("density")
 *         cdef DoubleArray pr = self.right_states.get_carray("pressure")             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t* state_l = self.state_l
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->get_carray(__pyx_v_self->__pyx_base.right_states, __pyx_n_s_pressure, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3phd_5utils_6carray_DoubleArray))))) __PYX_ERR(0, 967, __pyx_L1_error)
  __pyx_v_pr = ((struct __pyx_obj_3phd_5utils_6carray_DoubleArray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":969
 *         cdef DoubleArray pr = self.right_states.get_carray("pressure")
 * 
 *         cdef np.float64_t* state_l = self.state_l             # <<<<<<<<<<<<<<
 *         cdef np.float64_t* state_r = self.state_r
 * 
 */
  __pyx_t_10 = __pyx_v_self->state_l;
  __pyx_v_state_l = __pyx_t_10;

  /* "phd/reconstruction/reconstruction.pyx":970
 * 
 *         cdef np.float64_t* state_l = self.state_l
 *         cdef np.float64_t* state_r = self.state_r             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t** prim_l = self.priml_pointer
 */
  __pyx_t_10 = __pyx_v_self->state_r;
  __pyx_v_state_r = __pyx_t_10;

  /* "phd/reconstruction/reconstruction.pyx":972
 *         cdef np.float64_t* state_r = self.state_r
 * 
 *         cdef np.float64_t** prim_l = self.priml_pointer             # <<<<<<<<<<<<<<
 *         cdef np.float64_t** prim_r = self.primr_pointer
 * 
 */
  __pyx_t_11 = __pyx_v_self->priml_pointer;
  __pyx_v_prim_l = __pyx_t_11;

  /* "phd/reconstruction/reconstruction.pyx":973
 * 
 *         cdef np.float64_t** prim_l = self.priml_pointer
 *         cdef np.float64_t** prim_r = self.primr_pointer             # <<<<<<<<<<<<<<
 * 
 *         phdLogger.info("PieceWiseLinear: Starting temporal reconstruction")
 */
  __pyx_t_11 = __pyx_v_self->primr_pointer;
  __pyx_v_prim_r = __pyx_t_11;

  /* "phd/reconstruction/reconstruction.pyx":975
 *         cdef np.float64_t** prim_r = self.primr_pointer
 * 
 *         phdLogger.info("PieceWiseLinear: Starting temporal reconstruction")             # <<<<<<<<<<<<<<
 * 
 *         dim = len(particles.carray_named_groups["position"])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_phdLogger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_kp_s_PieceWiseLinear_Starting_tempora) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_PieceWiseLinear_Starting_tempora);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":977
 *         phdLogger.info("PieceWiseLinear: Starting temporal reconstruction")
 * 
 *         dim = len(particles.carray_named_groups["position"])             # <<<<<<<<<<<<<<
 *         num_fields = len(particles.carray_named_groups["primitive"])
 * 
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 977, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dim = __pyx_t_12;

  /* "phd/reconstruction/reconstruction.pyx":978
 * 
 *         dim = len(particles.carray_named_groups["position"])
 *         num_fields = len(particles.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 * 
 *         # extract pointers
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 978, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_fields = __pyx_t_12;

  /* "phd/reconstruction/reconstruction.pyx":981
 * 
 *         # extract pointers
 *         particles.pointer_groups(v, particles.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # pointers left/right primitive values
 */
  if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 981, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 981, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_v, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":984
 * 
 *         # pointers left/right primitive values
 *         self.left_states.pointer_groups(prim_l, self.left_states.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 *         self.right_states.pointer_groups(prim_r, self.right_states.carray_named_groups["primitive"])
 * 
 */
  if (unlikely(__pyx_v_self->__pyx_base.left_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 984, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.left_states->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 984, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.left_states, __pyx_v_prim_l, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":985
 *         # pointers left/right primitive values
 *         self.left_states.pointer_groups(prim_l, self.left_states.carray_named_groups["primitive"])
 *         self.right_states.pointer_groups(prim_r, self.right_states.carray_named_groups["primitive"])             # <<<<<<<<<<<<<<
 * 
 *         # pointers to velocity states
 */
  if (unlikely(__pyx_v_self->__pyx_base.right_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 985, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.right_states->carray_named_groups, __pyx_n_s_primitive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 985, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.right_states, __pyx_v_prim_r, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":988
 * 
 *         # pointers to velocity states
 *         self.left_states.pointer_groups(vl, self.left_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 *         self.right_states.pointer_groups(vr, self.right_states.carray_named_groups["velocity"])
 * 
 */
  if (unlikely(__pyx_v_self->__pyx_base.left_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 988, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.left_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 988, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.left_states, __pyx_v_vl, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":989
 *         # pointers to velocity states
 *         self.left_states.pointer_groups(vl, self.left_states.carray_named_groups["velocity"])
 *         self.right_states.pointer_groups(vr, self.right_states.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # pointers to face velocity and center of mass
 */
  if (unlikely(__pyx_v_self->__pyx_base.right_states->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 989, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.right_states->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 989, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.right_states, __pyx_v_vr, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":992
 * 
 *         # pointers to face velocity and center of mass
 *         mesh.faces.pointer_groups(wx, mesh.faces.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 * 
 *         # pointers to gradients
 */
  if (unlikely(__pyx_v_mesh->faces->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 992, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_mesh->faces->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 992, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->pointer_groups(__pyx_v_mesh->faces, __pyx_v_wx, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":995
 * 
 *         # pointers to gradients
 *         self.grad.pointer_groups(dd, self.grad.carray_named_groups["density"])             # <<<<<<<<<<<<<<
 *         self.grad.pointer_groups(dv, self.grad.carray_named_groups["velocity"])
 *         self.grad.pointer_groups(dp, self.grad.carray_named_groups["pressure"])
 */
  if (unlikely(__pyx_v_self->grad->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 995, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->grad->carray_named_groups, __pyx_n_s_density); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 995, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->grad->__pyx_vtab)->pointer_groups(__pyx_v_self->grad, __pyx_v_dd, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":996
 *         # pointers to gradients
 *         self.grad.pointer_groups(dd, self.grad.carray_named_groups["density"])
 *         self.grad.pointer_groups(dv, self.grad.carray_named_groups["velocity"])             # <<<<<<<<<<<<<<
 *         self.grad.pointer_groups(dp, self.grad.carray_named_groups["pressure"])
 * 
 */
  if (unlikely(__pyx_v_self->grad->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 996, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->grad->carray_named_groups, __pyx_n_s_velocity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 996, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->grad->__pyx_vtab)->pointer_groups(__pyx_v_self->grad, __pyx_v_dv, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":997
 *         self.grad.pointer_groups(dd, self.grad.carray_named_groups["density"])
 *         self.grad.pointer_groups(dv, self.grad.carray_named_groups["velocity"])
 *         self.grad.pointer_groups(dp, self.grad.carray_named_groups["pressure"])             # <<<<<<<<<<<<<<
 * 
 *         if self.has_passive_scalars:
 */
  if (unlikely(__pyx_v_self->grad->carray_named_groups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 997, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->grad->carray_named_groups, __pyx_n_s_pressure); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 997, __pyx_L1_error)
  ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->grad->__pyx_vtab)->pointer_groups(__pyx_v_self->grad, __pyx_v_dp, ((PyObject*)__pyx_t_1));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":999
 *         self.grad.pointer_groups(dp, self.grad.carray_named_groups["pressure"])
 * 
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 * 
 *             num_passive = self.num_passive
 */
  __pyx_t_13 = (__pyx_v_self->__pyx_base.has_passive_scalars != 0);
  if (__pyx_t_13) {

    /* "phd/reconstruction/reconstruction.pyx":1001
 *         if self.has_passive_scalars:
 * 
 *             num_passive = self.num_passive             # <<<<<<<<<<<<<<
 *             particles.pointer_groups(self.passive, particles.carray_named_groups["passive-scalars"])
 * 
 */
    __pyx_t_8 = __pyx_v_self->__pyx_base.num_passive;
    __pyx_v_num_passive = __pyx_t_8;

    /* "phd/reconstruction/reconstruction.pyx":1002
 * 
 *             num_passive = self.num_passive
 *             particles.pointer_groups(self.passive, particles.carray_named_groups["passive-scalars"])             # <<<<<<<<<<<<<<
 * 
 *             # pointer to passive left/right states
 */
    if (unlikely(__pyx_v_particles->carray_named_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1002, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_particles->carray_named_groups, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1002, __pyx_L1_error)
    ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_particles->__pyx_vtab)->pointer_groups(__pyx_v_particles, __pyx_v_self->__pyx_base.passive, ((PyObject*)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/reconstruction/reconstruction.pyx":1005
 * 
 *             # pointer to passive left/right states
 *             self.left_states.pointer_groups(self.passive_l, self.carray_named_groups["passive-scalars"])             # <<<<<<<<<<<<<<
 *             self.right_states.pointer_groups(self.passive_r, self.carray_named_groups["passive-scalars"])
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_carray_named_groups); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 1005, __pyx_L1_error)
    ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.left_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.left_states, __pyx_v_self->__pyx_base.passive_l, ((PyObject*)__pyx_t_6));
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "phd/reconstruction/reconstruction.pyx":1006
 *             # pointer to passive left/right states
 *             self.left_states.pointer_groups(self.passive_l, self.carray_named_groups["passive-scalars"])
 *             self.right_states.pointer_groups(self.passive_r, self.carray_named_groups["passive-scalars"])             # <<<<<<<<<<<<<<
 * 
 *             # pointer to gradients of passive scalars
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_carray_named_groups); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1006, __pyx_L1_error)
    ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->__pyx_base.right_states->__pyx_vtab)->pointer_groups(__pyx_v_self->__pyx_base.right_states, __pyx_v_self->__pyx_base.passive_r, ((PyObject*)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/reconstruction/reconstruction.pyx":1009
 * 
 *             # pointer to gradients of passive scalars
 *             self.grad.pointer_groups(self.dpassive, self.reconstruct_grad_groups["passive-scalars"])             # <<<<<<<<<<<<<<
 * 
 *         # create left/right states for each face
 */
    if (unlikely(__pyx_v_self->reconstruct_grad_groups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1009, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->reconstruct_grad_groups, __pyx_kp_s_passive_scalars_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1009, __pyx_L1_error)
    ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_self->grad->__pyx_vtab)->pointer_groups(__pyx_v_self->grad, __pyx_v_self->__pyx_base.dpassive, ((PyObject*)__pyx_t_1));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "phd/reconstruction/reconstruction.pyx":999
 *         self.grad.pointer_groups(dp, self.grad.carray_named_groups["pressure"])
 * 
 *         if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 * 
 *             num_passive = self.num_passive
 */
  }

  /* "phd/reconstruction/reconstruction.pyx":1012
 * 
 *         # create left/right states for each face
 *         for m in range(mesh.faces.get_carray_size()):             # <<<<<<<<<<<<<<
 * 
 *             # particles that make up the face
 */
  __pyx_t_8 = ((struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer *)__pyx_v_mesh->faces->__pyx_vtab)->get_carray_size(__pyx_v_mesh->faces, 0);
  __pyx_t_14 = __pyx_t_8;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_m = __pyx_t_15;

    /* "phd/reconstruction/reconstruction.pyx":1015
 * 
 *             # particles that make up the face
 *             i = pair_i.data[m]             # <<<<<<<<<<<<<<
 *             j = pair_j.data[m]
 * 
 */
    __pyx_v_i = (__pyx_v_pair_i->data[__pyx_v_m]);

    /* "phd/reconstruction/reconstruction.pyx":1016
 *             # particles that make up the face
 *             i = pair_i.data[m]
 *             j = pair_j.data[m]             # <<<<<<<<<<<<<<
 * 
 *             # copy states before time derivatives
 */
    __pyx_v_j = (__pyx_v_pair_j->data[__pyx_v_m]);

    /* "phd/reconstruction/reconstruction.pyx":1019
 * 
 *             # copy states before time derivatives
 *             for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                 state_l[n] = prim_l[n][m]
 *                 state_r[n] = prim_r[n][m]
 */
    __pyx_t_16 = __pyx_v_num_fields;
    __pyx_t_17 = __pyx_t_16;
    for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_v_n = __pyx_t_18;

      /* "phd/reconstruction/reconstruction.pyx":1020
 *             # copy states before time derivatives
 *             for n in range(num_fields):
 *                 state_l[n] = prim_l[n][m]             # <<<<<<<<<<<<<<
 *                 state_r[n] = prim_r[n][m]
 * 
 */
      (__pyx_v_state_l[__pyx_v_n]) = ((__pyx_v_prim_l[__pyx_v_n])[__pyx_v_m]);

      /* "phd/reconstruction/reconstruction.pyx":1021
 *             for n in range(num_fields):
 *                 state_l[n] = prim_l[n][m]
 *                 state_r[n] = prim_r[n][m]             # <<<<<<<<<<<<<<
 * 
 *             # velocity
 */
      (__pyx_v_state_r[__pyx_v_n]) = ((__pyx_v_prim_r[__pyx_v_n])[__pyx_v_m]);
    }

    /* "phd/reconstruction/reconstruction.pyx":1024
 * 
 *             # velocity
 *             for k in range(dim):             # <<<<<<<<<<<<<<
 * 
 *                 # copy velocities for temporal calculation
 */
    __pyx_t_16 = __pyx_v_dim;
    __pyx_t_17 = __pyx_t_16;
    for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_v_k = __pyx_t_18;

      /* "phd/reconstruction/reconstruction.pyx":1027
 * 
 *                 # copy velocities for temporal calculation
 *                 if boost:             # <<<<<<<<<<<<<<
 *                     vi[k] = v[k][i] - wx[k][m]
 *                     vj[k] = v[k][j] - wx[k][m]
 */
      __pyx_t_13 = (__pyx_v_boost != 0);
      if (__pyx_t_13) {

        /* "phd/reconstruction/reconstruction.pyx":1028
 *                 # copy velocities for temporal calculation
 *                 if boost:
 *                     vi[k] = v[k][i] - wx[k][m]             # <<<<<<<<<<<<<<
 *                     vj[k] = v[k][j] - wx[k][m]
 *                 else:
 */
        (__pyx_v_vi[__pyx_v_k]) = (((__pyx_v_v[__pyx_v_k])[__pyx_v_i]) - ((__pyx_v_wx[__pyx_v_k])[__pyx_v_m]));

        /* "phd/reconstruction/reconstruction.pyx":1029
 *                 if boost:
 *                     vi[k] = v[k][i] - wx[k][m]
 *                     vj[k] = v[k][j] - wx[k][m]             # <<<<<<<<<<<<<<
 *                 else:
 *                     vi[k] = v[k][i]
 */
        (__pyx_v_vj[__pyx_v_k]) = (((__pyx_v_v[__pyx_v_k])[__pyx_v_j]) - ((__pyx_v_wx[__pyx_v_k])[__pyx_v_m]));

        /* "phd/reconstruction/reconstruction.pyx":1027
 * 
 *                 # copy velocities for temporal calculation
 *                 if boost:             # <<<<<<<<<<<<<<
 *                     vi[k] = v[k][i] - wx[k][m]
 *                     vj[k] = v[k][j] - wx[k][m]
 */
        goto __pyx_L10;
      }

      /* "phd/reconstruction/reconstruction.pyx":1031
 *                     vj[k] = v[k][j] - wx[k][m]
 *                 else:
 *                     vi[k] = v[k][i]             # <<<<<<<<<<<<<<
 *                     vj[k] = v[k][j]
 * 
 */
      /*else*/ {
        (__pyx_v_vi[__pyx_v_k]) = ((__pyx_v_v[__pyx_v_k])[__pyx_v_i]);

        /* "phd/reconstruction/reconstruction.pyx":1032
 *                 else:
 *                     vi[k] = v[k][i]
 *                     vj[k] = v[k][j]             # <<<<<<<<<<<<<<
 * 
 *                 vl[k][m] -= dt*dp[k][i]/d.data[i]
 */
        (__pyx_v_vj[__pyx_v_k]) = ((__pyx_v_v[__pyx_v_k])[__pyx_v_j]);
      }
      __pyx_L10:;

      /* "phd/reconstruction/reconstruction.pyx":1034
 *                     vj[k] = v[k][j]
 * 
 *                 vl[k][m] -= dt*dp[k][i]/d.data[i]             # <<<<<<<<<<<<<<
 *                 vr[k][m] -= dt*dp[k][j]/d.data[j]
 * 
 */
      __pyx_t_19 = __pyx_v_k;
      __pyx_t_20 = __pyx_v_m;
      __pyx_t_21 = (__pyx_v_dt * ((__pyx_v_dp[__pyx_v_k])[__pyx_v_i]));
      if (unlikely((__pyx_v_d->data[__pyx_v_i]) == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1034, __pyx_L1_error)
      }
      ((__pyx_v_vl[__pyx_t_19])[__pyx_t_20]) = (((__pyx_v_vl[__pyx_t_19])[__pyx_t_20]) - (__pyx_t_21 / (__pyx_v_d->data[__pyx_v_i])));

      /* "phd/reconstruction/reconstruction.pyx":1035
 * 
 *                 vl[k][m] -= dt*dp[k][i]/d.data[i]
 *                 vr[k][m] -= dt*dp[k][j]/d.data[j]             # <<<<<<<<<<<<<<
 * 
 *             # add derivatives to primitive
 */
      __pyx_t_19 = __pyx_v_k;
      __pyx_t_20 = __pyx_v_m;
      __pyx_t_21 = (__pyx_v_dt * ((__pyx_v_dp[__pyx_v_k])[__pyx_v_j]));
      if (unlikely((__pyx_v_d->data[__pyx_v_j]) == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1035, __pyx_L1_error)
      }
      ((__pyx_v_vr[__pyx_t_19])[__pyx_t_20]) = (((__pyx_v_vr[__pyx_t_19])[__pyx_t_20]) - (__pyx_t_21 / (__pyx_v_d->data[__pyx_v_j])));
    }

    /* "phd/reconstruction/reconstruction.pyx":1038
 * 
 *             # add derivatives to primitive
 *             for k in range(dim): # dot products             # <<<<<<<<<<<<<<
 * 
 *                 # add gradient (Eq. 21) and time Extrapolation (eq. 37)
 */
    __pyx_t_16 = __pyx_v_dim;
    __pyx_t_17 = __pyx_t_16;
    for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_v_k = __pyx_t_18;

      /* "phd/reconstruction/reconstruction.pyx":1044
 * 
 *                 # density, add temporal derivative
 *                 dl.data[m] -= dt*(d.data[i]*dv[(dim+1)*k][i] + vi[k]*dd[k][i])             # <<<<<<<<<<<<<<
 *                 dr.data[m] -= dt*(d.data[j]*dv[(dim+1)*k][j] + vj[k]*dd[k][j])
 * 
 */
      __pyx_t_19 = __pyx_v_m;
      (__pyx_v_dl->data[__pyx_t_19]) = ((__pyx_v_dl->data[__pyx_t_19]) - (__pyx_v_dt * (((__pyx_v_d->data[__pyx_v_i]) * ((__pyx_v_dv[((__pyx_v_dim + 1) * __pyx_v_k)])[__pyx_v_i])) + ((__pyx_v_vi[__pyx_v_k]) * ((__pyx_v_dd[__pyx_v_k])[__pyx_v_i])))));

      /* "phd/reconstruction/reconstruction.pyx":1045
 *                 # density, add temporal derivative
 *                 dl.data[m] -= dt*(d.data[i]*dv[(dim+1)*k][i] + vi[k]*dd[k][i])
 *                 dr.data[m] -= dt*(d.data[j]*dv[(dim+1)*k][j] + vj[k]*dd[k][j])             # <<<<<<<<<<<<<<
 * 
 *                 if self.has_passive_scalars:
 */
      __pyx_t_19 = __pyx_v_m;
      (__pyx_v_dr->data[__pyx_t_19]) = ((__pyx_v_dr->data[__pyx_t_19]) - (__pyx_v_dt * (((__pyx_v_d->data[__pyx_v_j]) * ((__pyx_v_dv[((__pyx_v_dim + 1) * __pyx_v_k)])[__pyx_v_j])) + ((__pyx_v_vj[__pyx_v_k]) * ((__pyx_v_dd[__pyx_v_k])[__pyx_v_j])))));

      /* "phd/reconstruction/reconstruction.pyx":1047
 *                 dr.data[m] -= dt*(d.data[j]*dv[(dim+1)*k][j] + vj[k]*dd[k][j])
 * 
 *                 if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *                     for n in range(num_passive):
 * 
 */
      __pyx_t_13 = (__pyx_v_self->__pyx_base.has_passive_scalars != 0);
      if (__pyx_t_13) {

        /* "phd/reconstruction/reconstruction.pyx":1048
 * 
 *                 if self.has_passive_scalars:
 *                     for n in range(num_passive):             # <<<<<<<<<<<<<<
 * 
 *                         # passive scalars, add spatial derivative
 */
        __pyx_t_19 = __pyx_v_num_passive;
        __pyx_t_20 = __pyx_t_19;
        for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_20; __pyx_t_22+=1) {
          __pyx_v_n = __pyx_t_22;

          /* "phd/reconstruction/reconstruction.pyx":1051
 * 
 *                         # passive scalars, add spatial derivative
 *                         self.passive_l[n][m] -= dt*(self.passive[n][i]*dv[(dim+1)*k][i]\             # <<<<<<<<<<<<<<
 *                                 - vi[k]*self.dpassive[n*dim+k][i])
 *                         self.passive_r[n][m] -= dt*(self.passive[n][j]*dv[(dim+1)*k][j]\
 */
          __pyx_t_23 = __pyx_v_n;
          __pyx_t_24 = __pyx_v_m;

          /* "phd/reconstruction/reconstruction.pyx":1052
 *                         # passive scalars, add spatial derivative
 *                         self.passive_l[n][m] -= dt*(self.passive[n][i]*dv[(dim+1)*k][i]\
 *                                 - vi[k]*self.dpassive[n*dim+k][i])             # <<<<<<<<<<<<<<
 *                         self.passive_r[n][m] -= dt*(self.passive[n][j]*dv[(dim+1)*k][j]\
 *                                 - vj[k]*self.dpassive[n*dim+k][j])
 */
          ((__pyx_v_self->__pyx_base.passive_l[__pyx_t_23])[__pyx_t_24]) = (((__pyx_v_self->__pyx_base.passive_l[__pyx_t_23])[__pyx_t_24]) - (__pyx_v_dt * ((((__pyx_v_self->__pyx_base.passive[__pyx_v_n])[__pyx_v_i]) * ((__pyx_v_dv[((__pyx_v_dim + 1) * __pyx_v_k)])[__pyx_v_i])) - ((__pyx_v_vi[__pyx_v_k]) * ((__pyx_v_self->__pyx_base.dpassive[((__pyx_v_n * __pyx_v_dim) + __pyx_v_k)])[__pyx_v_i])))));

          /* "phd/reconstruction/reconstruction.pyx":1053
 *                         self.passive_l[n][m] -= dt*(self.passive[n][i]*dv[(dim+1)*k][i]\
 *                                 - vi[k]*self.dpassive[n*dim+k][i])
 *                         self.passive_r[n][m] -= dt*(self.passive[n][j]*dv[(dim+1)*k][j]\             # <<<<<<<<<<<<<<
 *                                 - vj[k]*self.dpassive[n*dim+k][j])
 * 
 */
          __pyx_t_23 = __pyx_v_n;
          __pyx_t_24 = __pyx_v_m;

          /* "phd/reconstruction/reconstruction.pyx":1054
 *                                 - vi[k]*self.dpassive[n*dim+k][i])
 *                         self.passive_r[n][m] -= dt*(self.passive[n][j]*dv[(dim+1)*k][j]\
 *                                 - vj[k]*self.dpassive[n*dim+k][j])             # <<<<<<<<<<<<<<
 * 
 *                 # pressure, add spatial derivative
 */
          ((__pyx_v_self->__pyx_base.passive_r[__pyx_t_23])[__pyx_t_24]) = (((__pyx_v_self->__pyx_base.passive_r[__pyx_t_23])[__pyx_t_24]) - (__pyx_v_dt * ((((__pyx_v_self->__pyx_base.passive[__pyx_v_n])[__pyx_v_j]) * ((__pyx_v_dv[((__pyx_v_dim + 1) * __pyx_v_k)])[__pyx_v_j])) - ((__pyx_v_vj[__pyx_v_k]) * ((__pyx_v_self->__pyx_base.dpassive[((__pyx_v_n * __pyx_v_dim) + __pyx_v_k)])[__pyx_v_j])))));
        }

        /* "phd/reconstruction/reconstruction.pyx":1047
 *                 dr.data[m] -= dt*(d.data[j]*dv[(dim+1)*k][j] + vj[k]*dd[k][j])
 * 
 *                 if self.has_passive_scalars:             # <<<<<<<<<<<<<<
 *                     for n in range(num_passive):
 * 
 */
      }

      /* "phd/reconstruction/reconstruction.pyx":1057
 * 
 *                 # pressure, add spatial derivative
 *                 pl.data[m] -= dt*(gamma*p.data[i]*dv[(dim+1)*k][i] + vi[k]*dp[k][i])             # <<<<<<<<<<<<<<
 *                 pr.data[m] -= dt*(gamma*p.data[j]*dv[(dim+1)*k][j] + vj[k]*dp[k][j])
 * 
 */
      __pyx_t_19 = __pyx_v_m;
      (__pyx_v_pl->data[__pyx_t_19]) = ((__pyx_v_pl->data[__pyx_t_19]) - (__pyx_v_dt * (((__pyx_v_gamma * (__pyx_v_p->data[__pyx_v_i])) * ((__pyx_v_dv[((__pyx_v_dim + 1) * __pyx_v_k)])[__pyx_v_i])) + ((__pyx_v_vi[__pyx_v_k]) * ((__pyx_v_dp[__pyx_v_k])[__pyx_v_i])))));

      /* "phd/reconstruction/reconstruction.pyx":1058
 *                 # pressure, add spatial derivative
 *                 pl.data[m] -= dt*(gamma*p.data[i]*dv[(dim+1)*k][i] + vi[k]*dp[k][i])
 *                 pr.data[m] -= dt*(gamma*p.data[j]*dv[(dim+1)*k][j] + vj[k]*dp[k][j])             # <<<<<<<<<<<<<<
 * 
 *                 # velocity, add spatial derivative
 */
      __pyx_t_19 = __pyx_v_m;
      (__pyx_v_pr->data[__pyx_t_19]) = ((__pyx_v_pr->data[__pyx_t_19]) - (__pyx_v_dt * (((__pyx_v_gamma * (__pyx_v_p->data[__pyx_v_j])) * ((__pyx_v_dv[((__pyx_v_dim + 1) * __pyx_v_k)])[__pyx_v_j])) + ((__pyx_v_vj[__pyx_v_k]) * ((__pyx_v_dp[__pyx_v_k])[__pyx_v_j])))));

      /* "phd/reconstruction/reconstruction.pyx":1061
 * 
 *                 # velocity, add spatial derivative
 *                 for n in range(dim): # over velocity components             # <<<<<<<<<<<<<<
 *                     vl[n][m] -= dt*vi[k]*dv[n*dim+k][i]
 *                     vr[n][m] -= dt*vj[k]*dv[n*dim+k][j]
 */
      __pyx_t_19 = __pyx_v_dim;
      __pyx_t_20 = __pyx_t_19;
      for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_20; __pyx_t_22+=1) {
        __pyx_v_n = __pyx_t_22;

        /* "phd/reconstruction/reconstruction.pyx":1062
 *                 # velocity, add spatial derivative
 *                 for n in range(dim): # over velocity components
 *                     vl[n][m] -= dt*vi[k]*dv[n*dim+k][i]             # <<<<<<<<<<<<<<
 *                     vr[n][m] -= dt*vj[k]*dv[n*dim+k][j]
 * 
 */
        __pyx_t_23 = __pyx_v_n;
        __pyx_t_24 = __pyx_v_m;
        ((__pyx_v_vl[__pyx_t_23])[__pyx_t_24]) = (((__pyx_v_vl[__pyx_t_23])[__pyx_t_24]) - ((__pyx_v_dt * (__pyx_v_vi[__pyx_v_k])) * ((__pyx_v_dv[((__pyx_v_n * __pyx_v_dim) + __pyx_v_k)])[__pyx_v_i])));

        /* "phd/reconstruction/reconstruction.pyx":1063
 *                 for n in range(dim): # over velocity components
 *                     vl[n][m] -= dt*vi[k]*dv[n*dim+k][i]
 *                     vr[n][m] -= dt*vj[k]*dv[n*dim+k][j]             # <<<<<<<<<<<<<<
 * 
 *             # if negative remove time derivative
 */
        __pyx_t_23 = __pyx_v_n;
        __pyx_t_24 = __pyx_v_m;
        ((__pyx_v_vr[__pyx_t_23])[__pyx_t_24]) = (((__pyx_v_vr[__pyx_t_23])[__pyx_t_24]) - ((__pyx_v_dt * (__pyx_v_vj[__pyx_v_k])) * ((__pyx_v_dv[((__pyx_v_n * __pyx_v_dim) + __pyx_v_k)])[__pyx_v_j])));
      }
    }

    /* "phd/reconstruction/reconstruction.pyx":1066
 * 
 *             # if negative remove time derivative
 *             if dl.data[m] < 0.0 or pl.data[m] < 0.0:             # <<<<<<<<<<<<<<
 *                 for n in range(num_fields):
 *                     prim_l[n][m] = state_l[n]
 */
    __pyx_t_25 = (((__pyx_v_dl->data[__pyx_v_m]) < 0.0) != 0);
    if (!__pyx_t_25) {
    } else {
      __pyx_t_13 = __pyx_t_25;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_25 = (((__pyx_v_pl->data[__pyx_v_m]) < 0.0) != 0);
    __pyx_t_13 = __pyx_t_25;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_13) {

      /* "phd/reconstruction/reconstruction.pyx":1067
 *             # if negative remove time derivative
 *             if dl.data[m] < 0.0 or pl.data[m] < 0.0:
 *                 for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                     prim_l[n][m] = state_l[n]
 * 
 */
      __pyx_t_16 = __pyx_v_num_fields;
      __pyx_t_17 = __pyx_t_16;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_n = __pyx_t_18;

        /* "phd/reconstruction/reconstruction.pyx":1068
 *             if dl.data[m] < 0.0 or pl.data[m] < 0.0:
 *                 for n in range(num_fields):
 *                     prim_l[n][m] = state_l[n]             # <<<<<<<<<<<<<<
 * 
 *             if dr.data[m] < 0.0 or pr.data[m] < 0.0:
 */
        ((__pyx_v_prim_l[__pyx_v_n])[__pyx_v_m]) = (__pyx_v_state_l[__pyx_v_n]);
      }

      /* "phd/reconstruction/reconstruction.pyx":1066
 * 
 *             # if negative remove time derivative
 *             if dl.data[m] < 0.0 or pl.data[m] < 0.0:             # <<<<<<<<<<<<<<
 *                 for n in range(num_fields):
 *                     prim_l[n][m] = state_l[n]
 */
    }

    /* "phd/reconstruction/reconstruction.pyx":1070
 *                     prim_l[n][m] = state_l[n]
 * 
 *             if dr.data[m] < 0.0 or pr.data[m] < 0.0:             # <<<<<<<<<<<<<<
 *                 for n in range(num_fields):
 *                     prim_r[n][m] = state_r[n]
 */
    __pyx_t_25 = (((__pyx_v_dr->data[__pyx_v_m]) < 0.0) != 0);
    if (!__pyx_t_25) {
    } else {
      __pyx_t_13 = __pyx_t_25;
      goto __pyx_L24_bool_binop_done;
    }
    __pyx_t_25 = (((__pyx_v_pr->data[__pyx_v_m]) < 0.0) != 0);
    __pyx_t_13 = __pyx_t_25;
    __pyx_L24_bool_binop_done:;
    if (__pyx_t_13) {

      /* "phd/reconstruction/reconstruction.pyx":1071
 * 
 *             if dr.data[m] < 0.0 or pr.data[m] < 0.0:
 *                 for n in range(num_fields):             # <<<<<<<<<<<<<<
 *                     prim_r[n][m] = state_r[n]
 * 
 */
      __pyx_t_16 = __pyx_v_num_fields;
      __pyx_t_17 = __pyx_t_16;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_n = __pyx_t_18;

        /* "phd/reconstruction/reconstruction.pyx":1072
 *             if dr.data[m] < 0.0 or pr.data[m] < 0.0:
 *                 for n in range(num_fields):
 *                     prim_r[n][m] = state_r[n]             # <<<<<<<<<<<<<<
 * 
 *     cpdef compute_states(self, CarrayContainer particles, Mesh mesh,
 */
        ((__pyx_v_prim_r[__pyx_v_n])[__pyx_v_m]) = (__pyx_v_state_r[__pyx_v_n]);
      }

      /* "phd/reconstruction/reconstruction.pyx":1070
 *                     prim_l[n][m] = state_l[n]
 * 
 *             if dr.data[m] < 0.0 or pr.data[m] < 0.0:             # <<<<<<<<<<<<<<
 *                 for n in range(num_fields):
 *                     prim_r[n][m] = state_r[n]
 */
    }
  }

  /* "phd/reconstruction/reconstruction.pyx":923
 *                         prim_r[n][m] = state_r[n]
 * 
 *     cpdef add_temporal(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.add_temporal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pair_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_pair_j);
  __Pyx_XDECREF((PyObject *)__pyx_v_d);
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF((PyObject *)__pyx_v_dl);
  __Pyx_XDECREF((PyObject *)__pyx_v_pl);
  __Pyx_XDECREF((PyObject *)__pyx_v_dr);
  __Pyx_XDECREF((PyObject *)__pyx_v_pr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13add_temporal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_12add_temporal[] = "Perform temporal reconstruction from cell center to face center.\n        This follows the method outlined by Springel (2009) and all equations\n        referenced are from that paper.\n\n        Parameters\n        ----------\n        particles : CarrayContainer\n            Class that holds all information pertaining to the particles.\n\n        mesh : Mesh\n            Class that builds the domain mesh.\n\n        boost : bool\n            Solve equations in moving reference frame.\n\n        domain_manager : DomainManager\n            Class that handels all things related with the domain.\n\n        dt : float\n            Time to extrapolate reconstructed fields to.\n        ";
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13add_temporal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  double __pyx_v_gamma;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager = 0;
  double __pyx_v_dt;
  int __pyx_v_boost;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_temporal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_gamma,&__pyx_n_s_domain_manager,&__pyx_n_s_dt,&__pyx_n_s_boost,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, 1); __PYX_ERR(0, 923, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gamma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, 2); __PYX_ERR(0, 923, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain_manager)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, 3); __PYX_ERR(0, 923, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, 4); __PYX_ERR(0, 923, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, 5); __PYX_ERR(0, 923, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_temporal") < 0)) __PYX_ERR(0, 923, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_gamma = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_gamma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 924, __pyx_L3_error)
    __pyx_v_domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)values[3]);
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 925, __pyx_L3_error)
    __pyx_v_boost = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_boost == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 925, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_temporal", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 923, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.add_temporal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 923, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 923, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 924, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_12add_temporal(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_12add_temporal(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_temporal", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_add_temporal(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.add_temporal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pyx":1074
 *                     prim_r[n][m] = state_r[n]
 * 
 *     cpdef compute_states(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_15compute_states(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_compute_states(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_states", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_states); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_15compute_states)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1074, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_boost); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1074, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1074, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[7] = {__pyx_t_7, ((PyObject *)__pyx_v_particles), ((PyObject *)__pyx_v_mesh), __pyx_t_3, ((PyObject *)__pyx_v_domain_manager), __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1074, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1074, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_particles));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_particles));
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_particles));
          __Pyx_INCREF(((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_mesh));
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, ((PyObject *)__pyx_v_mesh));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_3);
          __Pyx_INCREF(((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_manager));
          PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, ((PyObject *)__pyx_v_domain_manager));
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1074, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "phd/reconstruction/reconstruction.pyx":1078
 *                          double dt, bint boost):
 * 
 *         self.add_spatial(particles, mesh, gamma, domain_manager, dt, boost)             # <<<<<<<<<<<<<<
 *         self.add_temporal(particles, mesh, gamma, domain_manager, dt, boost)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.add_spatial(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":1079
 * 
 *         self.add_spatial(particles, mesh, gamma, domain_manager, dt, boost)
 *         self.add_temporal(particles, mesh, gamma, domain_manager, dt, boost)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.add_temporal(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":1074
 *                     prim_r[n][m] = state_r[n]
 * 
 *     cpdef compute_states(self, CarrayContainer particles, Mesh mesh,             # <<<<<<<<<<<<<<
 *                          double gamma, DomainManager domain_manager,
 *                          double dt, bint boost):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.compute_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_15compute_states(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_15compute_states(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles = 0;
  struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh = 0;
  double __pyx_v_gamma;
  struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager = 0;
  double __pyx_v_dt;
  int __pyx_v_boost;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_states (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_mesh,&__pyx_n_s_gamma,&__pyx_n_s_domain_manager,&__pyx_n_s_dt,&__pyx_n_s_boost,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 1); __PYX_ERR(0, 1074, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gamma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 2); __PYX_ERR(0, 1074, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain_manager)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 3); __PYX_ERR(0, 1074, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 4); __PYX_ERR(0, 1074, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, 5); __PYX_ERR(0, 1074, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_states") < 0)) __PYX_ERR(0, 1074, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_particles = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)values[0]);
    __pyx_v_mesh = ((struct __pyx_obj_3phd_4mesh_4mesh_Mesh *)values[1]);
    __pyx_v_gamma = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_gamma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1075, __pyx_L3_error)
    __pyx_v_domain_manager = ((struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *)values[3]);
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L3_error)
    __pyx_v_boost = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_boost == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_states", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1074, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.compute_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), __pyx_ptype_3phd_10containers_10containers_CarrayContainer, 1, "particles", 0))) __PYX_ERR(0, 1074, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mesh), __pyx_ptype_3phd_4mesh_4mesh_Mesh, 1, "mesh", 0))) __PYX_ERR(0, 1074, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_domain_manager), __pyx_ptype_3phd_6domain_14domain_manager_DomainManager, 1, "domain_manager", 0))) __PYX_ERR(0, 1075, __pyx_L1_error)
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_14compute_states(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self), __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_14compute_states(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *__pyx_v_particles, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *__pyx_v_mesh, double __pyx_v_gamma, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *__pyx_v_domain_manager, double __pyx_v_dt, int __pyx_v_boost) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_states", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_compute_states(__pyx_v_self, __pyx_v_particles, __pyx_v_mesh, __pyx_v_gamma, __pyx_v_domain_manager, __pyx_v_dt, __pyx_v_boost, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.compute_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pxd":46
 * cdef class PieceWiseLinear(ReconstructionBase):
 * 
 *     cdef public str limiter             # <<<<<<<<<<<<<<
 *     cdef public bint gizmo_limiter
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter___get__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter___get__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->limiter);
  __pyx_r = __pyx_v_self->limiter;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_2__set__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_2__set__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 46, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->limiter);
  __Pyx_DECREF(__pyx_v_self->limiter);
  __pyx_v_self->limiter = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.limiter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_4__del__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_4__del__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->limiter);
  __Pyx_DECREF(__pyx_v_self->limiter);
  __pyx_v_self->limiter = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pxd":47
 * 
 *     cdef public str limiter
 *     cdef public bint gizmo_limiter             # <<<<<<<<<<<<<<
 * 
 *     cdef public CarrayContainer grad
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter___get__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter___get__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->gizmo_limiter); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.gizmo_limiter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter_2__set__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter_2__set__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 47, __pyx_L1_error)
  __pyx_v_self->gizmo_limiter = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.gizmo_limiter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "phd/reconstruction/reconstruction.pxd":49
 *     cdef public bint gizmo_limiter
 * 
 *     cdef public CarrayContainer grad             # <<<<<<<<<<<<<<
 * 
 *     cdef int slope_limiter
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad___get__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad___get__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->grad));
  __pyx_r = ((PyObject *)__pyx_v_self->grad);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_2__set__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_2__set__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3phd_10containers_10containers_CarrayContainer))))) __PYX_ERR(2, 49, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->grad);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->grad));
  __pyx_v_self->grad = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.grad.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_4__del__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_4__del__(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->grad);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->grad));
  __pyx_v_self->grad = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_16__reduce_cython__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_18__setstate_cython__(((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phd.reconstruction.reconstruction.PieceWiseLinear.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":869
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":870
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":873
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":875
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":876
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":882
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 882, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":883
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 883, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 884, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 884, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":888
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 888, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":889
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 889, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 890, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 890, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":894
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 894, __pyx_L3_error)

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":895
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 895, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":896
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 896, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase __pyx_vtable_3phd_14reconstruction_14reconstruction_ReconstructionBase;

static PyObject *__pyx_tp_new_3phd_14reconstruction_14reconstruction_ReconstructionBase(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)o);
  p->__pyx_vtab = __pyx_vtabptr_3phd_14reconstruction_14reconstruction_ReconstructionBase;
  p->left_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  p->right_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  p->reconstruct_fields = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->reconstruct_field_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_3phd_14reconstruction_14reconstruction_ReconstructionBase(PyObject *o) {
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *p = (struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->left_states);
  Py_CLEAR(p->right_states);
  Py_CLEAR(p->reconstruct_fields);
  Py_CLEAR(p->reconstruct_field_groups);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_3phd_14reconstruction_14reconstruction_ReconstructionBase(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *p = (struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)o;
  if (p->left_states) {
    e = (*v)(((PyObject *)p->left_states), a); if (e) return e;
  }
  if (p->right_states) {
    e = (*v)(((PyObject *)p->right_states), a); if (e) return e;
  }
  if (p->reconstruct_fields) {
    e = (*v)(p->reconstruct_fields, a); if (e) return e;
  }
  if (p->reconstruct_field_groups) {
    e = (*v)(p->reconstruct_field_groups, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3phd_14reconstruction_14reconstruction_ReconstructionBase(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *p = (struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *)o;
  tmp = ((PyObject*)p->left_states);
  p->left_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->right_states);
  p->right_states = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reconstruct_fields);
  p->reconstruct_fields = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reconstruct_field_groups);
  p->reconstruct_field_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3phd_14reconstruction_14reconstruction_18ReconstructionBase_left_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_1__get__(o);
}

static int __pyx_setprop_3phd_14reconstruction_14reconstruction_18ReconstructionBase_left_states(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11left_states_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_14reconstruction_14reconstruction_18ReconstructionBase_right_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_1__get__(o);
}

static int __pyx_setprop_3phd_14reconstruction_14reconstruction_18ReconstructionBase_right_states(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12right_states_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_3phd_14reconstruction_14reconstruction_ReconstructionBase[] = {
  {"initialize", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_3initialize, METH_NOARGS, __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_2initialize},
  {"add_fields", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_5add_fields, METH_O, __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_4add_fields},
  {"compute_gradients", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_7compute_gradients, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_6compute_gradients},
  {"add_spatial", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_9add_spatial, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_8add_spatial},
  {"add_temporal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_11add_temporal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_10add_temporal},
  {"compute_states", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_13compute_states, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_14reconstruction_14reconstruction_18ReconstructionBase_12compute_states},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3phd_14reconstruction_14reconstruction_ReconstructionBase[] = {
  {(char *)"left_states", __pyx_getprop_3phd_14reconstruction_14reconstruction_18ReconstructionBase_left_states, __pyx_setprop_3phd_14reconstruction_14reconstruction_18ReconstructionBase_left_states, (char *)0, 0},
  {(char *)"right_states", __pyx_getprop_3phd_14reconstruction_14reconstruction_18ReconstructionBase_right_states, __pyx_setprop_3phd_14reconstruction_14reconstruction_18ReconstructionBase_right_states, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3phd_14reconstruction_14reconstruction_ReconstructionBase = {
  PyVarObject_HEAD_INIT(0, 0)
  "phd.reconstruction.reconstruction.ReconstructionBase", /*tp_name*/
  sizeof(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3phd_14reconstruction_14reconstruction_ReconstructionBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3phd_14reconstruction_14reconstruction_ReconstructionBase, /*tp_traverse*/
  __pyx_tp_clear_3phd_14reconstruction_14reconstruction_ReconstructionBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3phd_14reconstruction_14reconstruction_ReconstructionBase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3phd_14reconstruction_14reconstruction_ReconstructionBase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3phd_14reconstruction_14reconstruction_18ReconstructionBase_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3phd_14reconstruction_14reconstruction_ReconstructionBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseConstant __pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseConstant;

static PyObject *__pyx_tp_new_3phd_14reconstruction_14reconstruction_PieceWiseConstant(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *p;
  PyObject *o = __pyx_tp_new_3phd_14reconstruction_14reconstruction_ReconstructionBase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase*)__pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseConstant;
  return o;
}

static void __pyx_tp_dealloc_3phd_14reconstruction_14reconstruction_PieceWiseConstant(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_3phd_14reconstruction_14reconstruction_ReconstructionBase(o);
}

static PyMethodDef __pyx_methods_3phd_14reconstruction_14reconstruction_PieceWiseConstant[] = {
  {"initialize", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_5initialize, METH_NOARGS, __pyx_doc_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_4initialize},
  {"add_fields", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_7add_fields, METH_O, __pyx_doc_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_6add_fields},
  {"compute_gradients", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_9compute_gradients, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_8compute_gradients},
  {"compute_states", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_11compute_states, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_10compute_states},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant = {
  PyVarObject_HEAD_INIT(0, 0)
  "phd.reconstruction.reconstruction.PieceWiseConstant", /*tp_name*/
  sizeof(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseConstant), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3phd_14reconstruction_14reconstruction_PieceWiseConstant, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Reconstruction of primitive variables onto each face using\n    constant implementation.\n\n    Attributes\n    ----------\n    fields_registered : bool\n        Flag stating if reconstruction fields have been registered.\n\n    left_states : CarrayContainer\n        Left states primitive values for riemann problem.\n\n    right_states : CarrayContainer\n        Left states primitive values for riemann problem.\n\n    has_passive_scalars : bool\n        Flag indicating if passive scalars are present for\n        reconstruction.\n\n    num_passive : int\n        Number of passive scalars in particle containers.\n\n    reconstruct_fields : dict\n       Dictionary of primitive fields where the keys are the names\n       and values are the data type of carrays to create in the\n       container.\n\n    reconstruct_field_groups : dict\n        Dictionary of collection of field names allowing for ease\n        of subsetting of fields.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_3phd_14reconstruction_14reconstruction_ReconstructionBase, /*tp_traverse*/
  __pyx_tp_clear_3phd_14reconstruction_14reconstruction_ReconstructionBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3phd_14reconstruction_14reconstruction_PieceWiseConstant, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3phd_14reconstruction_14reconstruction_PieceWiseConstant, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_PieceWiseLinear __pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseLinear;

static PyObject *__pyx_tp_new_3phd_14reconstruction_14reconstruction_PieceWiseLinear(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *p;
  PyObject *o = __pyx_tp_new_3phd_14reconstruction_14reconstruction_ReconstructionBase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_3phd_14reconstruction_14reconstruction_ReconstructionBase*)__pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseLinear;
  p->limiter = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->grad = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  p->reconstruct_grads = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->reconstruct_grad_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_3phd_14reconstruction_14reconstruction_PieceWiseLinear(PyObject *o) {
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *p = (struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->limiter);
  Py_CLEAR(p->grad);
  Py_CLEAR(p->reconstruct_grads);
  Py_CLEAR(p->reconstruct_grad_groups);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_3phd_14reconstruction_14reconstruction_ReconstructionBase(o);
}

static int __pyx_tp_traverse_3phd_14reconstruction_14reconstruction_PieceWiseLinear(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *p = (struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)o;
  e = __pyx_tp_traverse_3phd_14reconstruction_14reconstruction_ReconstructionBase(o, v, a); if (e) return e;
  if (p->grad) {
    e = (*v)(((PyObject *)p->grad), a); if (e) return e;
  }
  if (p->reconstruct_grads) {
    e = (*v)(p->reconstruct_grads, a); if (e) return e;
  }
  if (p->reconstruct_grad_groups) {
    e = (*v)(p->reconstruct_grad_groups, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3phd_14reconstruction_14reconstruction_PieceWiseLinear(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *p = (struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear *)o;
  __pyx_tp_clear_3phd_14reconstruction_14reconstruction_ReconstructionBase(o);
  tmp = ((PyObject*)p->grad);
  p->grad = ((struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reconstruct_grads);
  p->reconstruct_grads = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reconstruct_grad_groups);
  p->reconstruct_grad_groups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_limiter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_1__get__(o);
}

static int __pyx_setprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_limiter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7limiter_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_gizmo_limiter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter_1__get__(o);
}

static int __pyx_setprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_gizmo_limiter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13gizmo_limiter_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_grad(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_1__get__(o);
}

static int __pyx_setprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_grad(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_3__set__(o, v);
  }
  else {
    return __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4grad_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_3phd_14reconstruction_14reconstruction_PieceWiseLinear[] = {
  {"add_fields", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_5add_fields, METH_O, __pyx_doc_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_4add_fields},
  {"initialize", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_7initialize, METH_NOARGS, __pyx_doc_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_6initialize},
  {"compute_gradients", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_9compute_gradients, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_8compute_gradients},
  {"add_spatial", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_11add_spatial, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_10add_spatial},
  {"add_temporal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_13add_temporal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_12add_temporal},
  {"compute_states", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_15compute_states, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3phd_14reconstruction_14reconstruction_PieceWiseLinear[] = {
  {(char *)"limiter", __pyx_getprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_limiter, __pyx_setprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_limiter, (char *)0, 0},
  {(char *)"gizmo_limiter", __pyx_getprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_gizmo_limiter, __pyx_setprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_gizmo_limiter, (char *)0, 0},
  {(char *)"grad", __pyx_getprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_grad, __pyx_setprop_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_grad, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear = {
  PyVarObject_HEAD_INIT(0, 0)
  "phd.reconstruction.reconstruction.PieceWiseLinear", /*tp_name*/
  sizeof(struct __pyx_obj_3phd_14reconstruction_14reconstruction_PieceWiseLinear), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3phd_14reconstruction_14reconstruction_PieceWiseLinear, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Reconstruction of primitive variables onto each face using\n    AREPO implementation (2009).\n\n    Attributes\n    ----------\n    fields_registered : bool\n        Flag stating if reconstruction fields have been registered.\n\n    grad : CarrayContainer\n       Gradient of each primitive field.\n\n    left_states : CarrayContainer\n        Left states primitive values for riemann problem.\n\n    right_states : CarrayContainer\n        Left states primitive values for riemann problem.\n\n    limiter : str\n        Value of 0 is AREPOs and 1 is TESS implementation of\n        limiting the gradients.\n\n    has_passive_scalars : bool\n        Flag indicating if passive scalars are present for\n        reconstruction.\n\n    num_passive : int\n        Number of passive scalars in particle containers.\n\n    reconstruct_fields : dict\n       Dictionary of primitive fields where the keys are the names\n       and values are the data type of carrays to create in the\n       container.\n\n    reconstruct_field_groups : dict\n        Dictionary of collection of field names allowing for ease\n        of subsetting of fields.\n\n    reconstruct_grads : dict\n       Dictionary of primitive gradients where the keys are the names\n       and values are the data type of carrays to create in the\n       container.\n\n    reconstruct_grad_groups : dict\n        Dictionary of collection of gradient names allowing for ease\n        of subsetting of gradients.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_3phd_14reconstruction_14reconstruction_PieceWiseLinear, /*tp_traverse*/
  __pyx_tp_clear_3phd_14reconstruction_14reconstruction_PieceWiseLinear, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3phd_14reconstruction_14reconstruction_PieceWiseLinear, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3phd_14reconstruction_14reconstruction_PieceWiseLinear, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3phd_14reconstruction_14reconstruction_PieceWiseLinear, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_reconstruction(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_reconstruction},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "reconstruction",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_ERROR_Missing_fields_in_particle, __pyx_k_ERROR_Missing_fields_in_particle, sizeof(__pyx_k_ERROR_Missing_fields_in_particle), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_Unrecognized_limiter, __pyx_k_ERROR_Unrecognized_limiter, sizeof(__pyx_k_ERROR_Unrecognized_limiter), 0, 0, 1, 0},
  {&__pyx_kp_s_ERROR_incorrect_neighbors, __pyx_k_ERROR_incorrect_neighbors, sizeof(__pyx_k_ERROR_incorrect_neighbors), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_ParticleTAGS, __pyx_k_ParticleTAGS, sizeof(__pyx_k_ParticleTAGS), 0, 0, 1, 1},
  {&__pyx_n_s_PieceWiseConstant, __pyx_k_PieceWiseConstant, sizeof(__pyx_k_PieceWiseConstant), 0, 0, 1, 1},
  {&__pyx_kp_s_PieceWiseConstant_Starting_recon, __pyx_k_PieceWiseConstant_Starting_recon, sizeof(__pyx_k_PieceWiseConstant_Starting_recon), 0, 0, 1, 0},
  {&__pyx_n_s_PieceWiseLinear, __pyx_k_PieceWiseLinear, sizeof(__pyx_k_PieceWiseLinear), 0, 0, 1, 1},
  {&__pyx_kp_s_PieceWiseLinear_Starting_gradien, __pyx_k_PieceWiseLinear_Starting_gradien, sizeof(__pyx_k_PieceWiseLinear_Starting_gradien), 0, 0, 1, 0},
  {&__pyx_kp_s_PieceWiseLinear_Starting_spatial, __pyx_k_PieceWiseLinear_Starting_spatial, sizeof(__pyx_k_PieceWiseLinear_Starting_spatial), 0, 0, 1, 0},
  {&__pyx_kp_s_PieceWiseLinear_Starting_tempora, __pyx_k_PieceWiseLinear_Starting_tempora, sizeof(__pyx_k_PieceWiseLinear_Starting_tempora), 0, 0, 1, 0},
  {&__pyx_n_s_Real, __pyx_k_Real, sizeof(__pyx_k_Real), 0, 0, 1, 1},
  {&__pyx_n_s_ReconstructionBase, __pyx_k_ReconstructionBase, sizeof(__pyx_k_ReconstructionBase), 0, 0, 1, 1},
  {&__pyx_kp_s_Reconstruction__compute_gradient, __pyx_k_Reconstruction__compute_gradient, sizeof(__pyx_k_Reconstruction__compute_gradient), 0, 0, 1, 0},
  {&__pyx_kp_s_Reconstruction_add_spatial_calle, __pyx_k_Reconstruction_add_spatial_calle, sizeof(__pyx_k_Reconstruction_add_spatial_calle), 0, 0, 1, 0},
  {&__pyx_kp_s_Reconstruction_add_temporal_call, __pyx_k_Reconstruction_add_temporal_call, sizeof(__pyx_k_Reconstruction_add_temporal_call), 0, 0, 1, 0},
  {&__pyx_kp_s_Reconstruction_compute_called, __pyx_k_Reconstruction_compute_called, sizeof(__pyx_k_Reconstruction_compute_called), 0, 0, 1, 0},
  {&__pyx_kp_s_Reconstruction_did_not_set_field, __pyx_k_Reconstruction_did_not_set_field, sizeof(__pyx_k_Reconstruction_did_not_set_field), 0, 0, 1, 0},
  {&__pyx_kp_s_Reconstruction_initialize_called, __pyx_k_Reconstruction_initialize_called, sizeof(__pyx_k_Reconstruction_initialize_called), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 1},
  {&__pyx_n_s_add_spatial, __pyx_k_add_spatial, sizeof(__pyx_k_add_spatial), 0, 0, 1, 1},
  {&__pyx_n_s_add_temporal, __pyx_k_add_temporal, sizeof(__pyx_k_add_temporal), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_area, __pyx_k_area, sizeof(__pyx_k_area), 0, 0, 1, 1},
  {&__pyx_n_s_arepo, __pyx_k_arepo, sizeof(__pyx_k_arepo), 0, 0, 1, 1},
  {&__pyx_n_s_boost, __pyx_k_boost, sizeof(__pyx_k_boost), 0, 0, 1, 1},
  {&__pyx_n_s_carray_named_groups, __pyx_k_carray_named_groups, sizeof(__pyx_k_carray_named_groups), 0, 0, 1, 1},
  {&__pyx_n_s_carrays_to_register, __pyx_k_carrays_to_register, sizeof(__pyx_k_carrays_to_register), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_com, __pyx_k_com, sizeof(__pyx_k_com), 0, 0, 1, 1},
  {&__pyx_n_s_compute_gradients, __pyx_k_compute_gradients, sizeof(__pyx_k_compute_gradients), 0, 0, 1, 1},
  {&__pyx_n_s_compute_states, __pyx_k_compute_states, sizeof(__pyx_k_compute_states), 0, 0, 1, 1},
  {&__pyx_n_s_dcom, __pyx_k_dcom, sizeof(__pyx_k_dcom), 0, 0, 1, 1},
  {&__pyx_n_s_density, __pyx_k_density, sizeof(__pyx_k_density), 0, 0, 1, 1},
  {&__pyx_n_s_domain_manager, __pyx_k_domain_manager, sizeof(__pyx_k_domain_manager), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_fields_to_reconstruct_groups, __pyx_k_fields_to_reconstruct_groups, sizeof(__pyx_k_fields_to_reconstruct_groups), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_gamma, __pyx_k_gamma, sizeof(__pyx_k_gamma), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gizmo_limiter, __pyx_k_gizmo_limiter, sizeof(__pyx_k_gizmo_limiter), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_limiter, __pyx_k_limiter, sizeof(__pyx_k_limiter), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mesh, __pyx_k_mesh, sizeof(__pyx_k_mesh), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_kp_s_pair_i, __pyx_k_pair_i, sizeof(__pyx_k_pair_i), 0, 0, 1, 0},
  {&__pyx_kp_s_pair_j, __pyx_k_pair_j, sizeof(__pyx_k_pair_j), 0, 0, 1, 0},
  {&__pyx_n_s_particles, __pyx_k_particles, sizeof(__pyx_k_particles), 0, 0, 1, 1},
  {&__pyx_n_s_passive_scalars, __pyx_k_passive_scalars, sizeof(__pyx_k_passive_scalars), 0, 0, 1, 1},
  {&__pyx_kp_s_passive_scalars_2, __pyx_k_passive_scalars_2, sizeof(__pyx_k_passive_scalars_2), 0, 0, 1, 0},
  {&__pyx_n_s_phd, __pyx_k_phd, sizeof(__pyx_k_phd), 0, 0, 1, 1},
  {&__pyx_n_s_phdLogger, __pyx_k_phdLogger, sizeof(__pyx_k_phdLogger), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_pressure, __pyx_k_pressure, sizeof(__pyx_k_pressure), 0, 0, 1, 1},
  {&__pyx_n_s_primitive, __pyx_k_primitive, sizeof(__pyx_k_primitive), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_kp_s_self_alpha_self_df_self_dpassive, __pyx_k_self_alpha_self_df_self_dpassive, sizeof(__pyx_k_self_alpha_self_df_self_dpassive), 0, 0, 1, 0},
  {&__pyx_kp_s_self_dpassive_self_passive_self, __pyx_k_self_dpassive_self_passive_self, sizeof(__pyx_k_self_dpassive_self_passive_self), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_n_s_tess, __pyx_k_tess, sizeof(__pyx_k_tess), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_utils_particle_tags, __pyx_k_utils_particle_tags, sizeof(__pyx_k_utils_particle_tags), 0, 0, 1, 1},
  {&__pyx_n_s_vel, __pyx_k_vel, sizeof(__pyx_k_vel), 0, 0, 1, 1},
  {&__pyx_n_s_velocity, __pyx_k_velocity, sizeof(__pyx_k_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 181, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 324, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 884, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_dpassive_self_passive_self); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_dpassive_self_passive_self); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "phd/reconstruction/reconstruction.pyx":181
 * 
 *         if not self.fields_registered:
 *             raise RuntimeError("Reconstruction did not set fields to reconstruct!")             # <<<<<<<<<<<<<<
 * 
 *         # left/right face states for riemann solver
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Reconstruction_did_not_set_field); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "phd/reconstruction/reconstruction.pyx":215
 *         if "primitive" not in particles.carray_named_groups or\
 *                 "velocity" not in particles.carray_named_groups:
 *                     raise RuntimeError("ERROR: Missing fields in particles!")             # <<<<<<<<<<<<<<
 * 
 *         # add primitive fields
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Missing_fields_in_particle); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_dpassive_self_passive_self); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.dpassive,self.passive,self.passive_l,self.passive_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_dpassive_self_passive_self); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "phd/reconstruction/reconstruction.pyx":411
 *             self.slope_limiter = 1
 *         else:
 *             raise RuntimeError("ERROR: Unrecognized limiter")             # <<<<<<<<<<<<<<
 * 
 *         self.limiter = limiter
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_ERROR_Unrecognized_limiter); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "phd/reconstruction/reconstruction.pyx":652
 *                         j = pair_i.data[fid]
 *                     else:
 *                         raise RuntimeError("ERROR: incorrect neighbors!")             # <<<<<<<<<<<<<<
 * 
 *                     r = 0.0
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_ERROR_incorrect_neighbors); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_alpha_self_df_self_dpassive); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.alpha,self.df,self.dpassive,self.grad_pointer,self.passive,self.passive_l,self.passive_r,self.phi_max,self.phi_min,self.prim_pointer,self.priml_pointer,self.primr_pointer,self.state_l,self.state_r cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self_alpha_self_df_self_dpassive); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(3, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(3, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "phd/reconstruction/reconstruction.pyx":11
 * from ..utils.carray cimport DoubleArray, IntArray, LongArray
 * 
 * phdLogger = logging.getLogger("phd")             # <<<<<<<<<<<<<<
 * 
 * cdef int REAL = ParticleTAGS.Real
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_phd); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_3phd_14reconstruction_14reconstruction_ReconstructionBase = &__pyx_vtable_3phd_14reconstruction_14reconstruction_ReconstructionBase;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_ReconstructionBase.compute_gradients = (PyObject *(*)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch))__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_compute_gradients;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_ReconstructionBase.add_spatial = (PyObject *(*)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch))__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_add_spatial;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_ReconstructionBase.add_temporal = (PyObject *(*)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch))__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_add_temporal;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_ReconstructionBase.compute_states = (PyObject *(*)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch))__pyx_f_3phd_14reconstruction_14reconstruction_18ReconstructionBase_compute_states;
  if (PyType_Ready(&__pyx_type_3phd_14reconstruction_14reconstruction_ReconstructionBase) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3phd_14reconstruction_14reconstruction_ReconstructionBase.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3phd_14reconstruction_14reconstruction_ReconstructionBase.tp_dictoffset && __pyx_type_3phd_14reconstruction_14reconstruction_ReconstructionBase.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3phd_14reconstruction_14reconstruction_ReconstructionBase.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3phd_14reconstruction_14reconstruction_ReconstructionBase.tp_dict, __pyx_vtabptr_3phd_14reconstruction_14reconstruction_ReconstructionBase) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ReconstructionBase, (PyObject *)&__pyx_type_3phd_14reconstruction_14reconstruction_ReconstructionBase) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3phd_14reconstruction_14reconstruction_ReconstructionBase) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_ptype_3phd_14reconstruction_14reconstruction_ReconstructionBase = &__pyx_type_3phd_14reconstruction_14reconstruction_ReconstructionBase;
  __pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseConstant = &__pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseConstant;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseConstant.__pyx_base = *__pyx_vtabptr_3phd_14reconstruction_14reconstruction_ReconstructionBase;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseConstant.__pyx_base.compute_gradients = (PyObject *(*)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch))__pyx_f_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_compute_gradients;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseConstant.__pyx_base.compute_states = (PyObject *(*)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch))__pyx_f_3phd_14reconstruction_14reconstruction_17PieceWiseConstant_compute_states;
  __pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant.tp_base = __pyx_ptype_3phd_14reconstruction_14reconstruction_ReconstructionBase;
  if (PyType_Ready(&__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant.tp_dictoffset && __pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant.tp_dict, __pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseConstant) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PieceWiseConstant, (PyObject *)&__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseConstant = &__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseConstant;
  __pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseLinear = &__pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseLinear;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseLinear.__pyx_base = *__pyx_vtabptr_3phd_14reconstruction_14reconstruction_ReconstructionBase;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseLinear.__pyx_base.compute_gradients = (PyObject *(*)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, int __pyx_skip_dispatch))__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_compute_gradients;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseLinear.__pyx_base.add_spatial = (PyObject *(*)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch))__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_add_spatial;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseLinear.__pyx_base.add_temporal = (PyObject *(*)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch))__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_add_temporal;
  __pyx_vtable_3phd_14reconstruction_14reconstruction_PieceWiseLinear.__pyx_base.compute_states = (PyObject *(*)(struct __pyx_obj_3phd_14reconstruction_14reconstruction_ReconstructionBase *, struct __pyx_obj_3phd_10containers_10containers_CarrayContainer *, struct __pyx_obj_3phd_4mesh_4mesh_Mesh *, double, struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager *, double, int, int __pyx_skip_dispatch))__pyx_f_3phd_14reconstruction_14reconstruction_15PieceWiseLinear_compute_states;
  __pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear.tp_base = __pyx_ptype_3phd_14reconstruction_14reconstruction_ReconstructionBase;
  if (PyType_Ready(&__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear) < 0) __PYX_ERR(0, 355, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear.tp_dictoffset && __pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear.tp_dict, __pyx_vtabptr_3phd_14reconstruction_14reconstruction_PieceWiseLinear) < 0) __PYX_ERR(0, 355, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PieceWiseLinear, (PyObject *)&__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear) < 0) __PYX_ERR(0, 355, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear) < 0) __PYX_ERR(0, 355, __pyx_L1_error)
  __pyx_ptype_3phd_14reconstruction_14reconstruction_PieceWiseLinear = &__pyx_type_3phd_14reconstruction_14reconstruction_PieceWiseLinear;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.utils.carray"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_5utils_6carray_BaseArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "BaseArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_BaseArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_BaseArray) __PYX_ERR(5, 5, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_BaseArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_BaseArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_BaseArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_BaseArray)) __PYX_ERR(5, 5, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_BaseArrayIter = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "BaseArrayIter", sizeof(struct __pyx_obj_3phd_5utils_6carray_BaseArrayIter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_BaseArrayIter) __PYX_ERR(5, 7, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_DoubleArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "DoubleArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_DoubleArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_DoubleArray) __PYX_ERR(5, 31, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_DoubleArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_DoubleArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_DoubleArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_DoubleArray)) __PYX_ERR(5, 31, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_IntArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "IntArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_IntArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_IntArray) __PYX_ERR(5, 54, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_IntArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_IntArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_IntArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_IntArray)) __PYX_ERR(5, 54, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_LongArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "LongArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_LongArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_LongArray) __PYX_ERR(5, 77, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_LongArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_LongArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_LongArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_LongArray)) __PYX_ERR(5, 77, __pyx_L1_error)
  __pyx_ptype_3phd_5utils_6carray_LongLongArray = __Pyx_ImportType(__pyx_t_1, "phd.utils.carray", "LongLongArray", sizeof(struct __pyx_obj_3phd_5utils_6carray_LongLongArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_5utils_6carray_LongLongArray) __PYX_ERR(5, 100, __pyx_L1_error)
  __pyx_vtabptr_3phd_5utils_6carray_LongLongArray = (struct __pyx_vtabstruct_3phd_5utils_6carray_LongLongArray*)__Pyx_GetVtable(__pyx_ptype_3phd_5utils_6carray_LongLongArray->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_5utils_6carray_LongLongArray)) __PYX_ERR(5, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.containers.containers"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_10containers_10containers_CarrayContainer = __Pyx_ImportType(__pyx_t_1, "phd.containers.containers", "CarrayContainer", sizeof(struct __pyx_obj_3phd_10containers_10containers_CarrayContainer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_10containers_10containers_CarrayContainer) __PYX_ERR(6, 5, __pyx_L1_error)
  __pyx_vtabptr_3phd_10containers_10containers_CarrayContainer = (struct __pyx_vtabstruct_3phd_10containers_10containers_CarrayContainer*)__Pyx_GetVtable(__pyx_ptype_3phd_10containers_10containers_CarrayContainer->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_10containers_10containers_CarrayContainer)) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.domain.boundary"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "BoundaryConditionBase", sizeof(struct __pyx_obj_3phd_6domain_8boundary_BoundaryConditionBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase = (struct __pyx_vtabstruct_3phd_6domain_8boundary_BoundaryConditionBase*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_BoundaryConditionBase->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_BoundaryConditionBase)) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_ptype_3phd_6domain_8boundary_Reflective = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "Reflective", sizeof(struct __pyx_obj_3phd_6domain_8boundary_Reflective), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_Reflective) __PYX_ERR(7, 29, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_Reflective = (struct __pyx_vtabstruct_3phd_6domain_8boundary_Reflective*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_Reflective->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_Reflective)) __PYX_ERR(7, 29, __pyx_L1_error)
  __pyx_ptype_3phd_6domain_8boundary_Periodic = __Pyx_ImportType(__pyx_t_1, "phd.domain.boundary", "Periodic", sizeof(struct __pyx_obj_3phd_6domain_8boundary_Periodic), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_8boundary_Periodic) __PYX_ERR(7, 32, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_8boundary_Periodic = (struct __pyx_vtabstruct_3phd_6domain_8boundary_Periodic*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_8boundary_Periodic->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_8boundary_Periodic)) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.load_balance.tree"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.tree", "TreeMemoryPool", sizeof(struct __pyx_obj_3phd_12load_balance_4tree_TreeMemoryPool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool) __PYX_ERR(8, 37, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool = (struct __pyx_vtabstruct_3phd_12load_balance_4tree_TreeMemoryPool*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_4tree_TreeMemoryPool->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_4tree_TreeMemoryPool)) __PYX_ERR(8, 37, __pyx_L1_error)
  __pyx_ptype_3phd_12load_balance_4tree_Tree = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.tree", "Tree", sizeof(struct __pyx_obj_3phd_12load_balance_4tree_Tree), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_4tree_Tree) __PYX_ERR(8, 50, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_4tree_Tree = (struct __pyx_vtabstruct_3phd_12load_balance_4tree_Tree*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_4tree_Tree->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_4tree_Tree)) __PYX_ERR(8, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.load_balance.load_balance"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance = __Pyx_ImportType(__pyx_t_1, "phd.load_balance.load_balance", "LoadBalance", sizeof(struct __pyx_obj_3phd_12load_balance_12load_balance_LoadBalance), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance) __PYX_ERR(9, 9, __pyx_L1_error)
  __pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance = (struct __pyx_vtabstruct_3phd_12load_balance_12load_balance_LoadBalance*)__Pyx_GetVtable(__pyx_ptype_3phd_12load_balance_12load_balance_LoadBalance->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_12load_balance_12load_balance_LoadBalance)) __PYX_ERR(9, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.domain.domain_manager"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_6domain_14domain_manager_DomainManager = __Pyx_ImportType(__pyx_t_1, "phd.domain.domain_manager", "DomainManager", sizeof(struct __pyx_obj_3phd_6domain_14domain_manager_DomainManager), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_6domain_14domain_manager_DomainManager) __PYX_ERR(10, 45, __pyx_L1_error)
  __pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager = (struct __pyx_vtabstruct_3phd_6domain_14domain_manager_DomainManager*)__Pyx_GetVtable(__pyx_ptype_3phd_6domain_14domain_manager_DomainManager->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_6domain_14domain_manager_DomainManager)) __PYX_ERR(10, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.mesh.pytess"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_4mesh_6pytess_PyTess = __Pyx_ImportType(__pyx_t_1, "phd.mesh.pytess", "PyTess", sizeof(struct __pyx_obj_3phd_4mesh_6pytess_PyTess), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_4mesh_6pytess_PyTess) __PYX_ERR(11, 34, __pyx_L1_error)
  __pyx_vtabptr_3phd_4mesh_6pytess_PyTess = (struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess*)__Pyx_GetVtable(__pyx_ptype_3phd_4mesh_6pytess_PyTess->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_4mesh_6pytess_PyTess)) __PYX_ERR(11, 34, __pyx_L1_error)
  __pyx_ptype_3phd_4mesh_6pytess_PyTess2d = __Pyx_ImportType(__pyx_t_1, "phd.mesh.pytess", "PyTess2d", sizeof(struct __pyx_obj_3phd_4mesh_6pytess_PyTess2d), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_4mesh_6pytess_PyTess2d) __PYX_ERR(11, 46, __pyx_L1_error)
  __pyx_vtabptr_3phd_4mesh_6pytess_PyTess2d = (struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess2d*)__Pyx_GetVtable(__pyx_ptype_3phd_4mesh_6pytess_PyTess2d->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_4mesh_6pytess_PyTess2d)) __PYX_ERR(11, 46, __pyx_L1_error)
  __pyx_ptype_3phd_4mesh_6pytess_PyTess3d = __Pyx_ImportType(__pyx_t_1, "phd.mesh.pytess", "PyTess3d", sizeof(struct __pyx_obj_3phd_4mesh_6pytess_PyTess3d), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_4mesh_6pytess_PyTess3d) __PYX_ERR(11, 49, __pyx_L1_error)
  __pyx_vtabptr_3phd_4mesh_6pytess_PyTess3d = (struct __pyx_vtabstruct_3phd_4mesh_6pytess_PyTess3d*)__Pyx_GetVtable(__pyx_ptype_3phd_4mesh_6pytess_PyTess3d->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_4mesh_6pytess_PyTess3d)) __PYX_ERR(11, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.equation_state.equation_state"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_14equation_state_14equation_state_EquationStateBase = __Pyx_ImportType(__pyx_t_1, "phd.equation_state.equation_state", "EquationStateBase", sizeof(struct __pyx_obj_3phd_14equation_state_14equation_state_EquationStateBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_14equation_state_14equation_state_EquationStateBase) __PYX_ERR(12, 5, __pyx_L1_error)
  __pyx_vtabptr_3phd_14equation_state_14equation_state_EquationStateBase = (struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_EquationStateBase*)__Pyx_GetVtable(__pyx_ptype_3phd_14equation_state_14equation_state_EquationStateBase->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_14equation_state_14equation_state_EquationStateBase)) __PYX_ERR(12, 5, __pyx_L1_error)
  __pyx_ptype_3phd_14equation_state_14equation_state_IdealGas = __Pyx_ImportType(__pyx_t_1, "phd.equation_state.equation_state", "IdealGas", sizeof(struct __pyx_obj_3phd_14equation_state_14equation_state_IdealGas), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_14equation_state_14equation_state_IdealGas) __PYX_ERR(12, 13, __pyx_L1_error)
  __pyx_vtabptr_3phd_14equation_state_14equation_state_IdealGas = (struct __pyx_vtabstruct_3phd_14equation_state_14equation_state_IdealGas*)__Pyx_GetVtable(__pyx_ptype_3phd_14equation_state_14equation_state_IdealGas->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_14equation_state_14equation_state_IdealGas)) __PYX_ERR(12, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.riemann.riemann"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_7riemann_7riemann_RiemannBase = __Pyx_ImportType(__pyx_t_1, "phd.riemann.riemann", "RiemannBase", sizeof(struct __pyx_obj_3phd_7riemann_7riemann_RiemannBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_7riemann_7riemann_RiemannBase) __PYX_ERR(13, 7, __pyx_L1_error)
  __pyx_vtabptr_3phd_7riemann_7riemann_RiemannBase = (struct __pyx_vtabstruct_3phd_7riemann_7riemann_RiemannBase*)__Pyx_GetVtable(__pyx_ptype_3phd_7riemann_7riemann_RiemannBase->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_7riemann_7riemann_RiemannBase)) __PYX_ERR(13, 7, __pyx_L1_error)
  __pyx_ptype_3phd_7riemann_7riemann_HLL = __Pyx_ImportType(__pyx_t_1, "phd.riemann.riemann", "HLL", sizeof(struct __pyx_obj_3phd_7riemann_7riemann_HLL), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_7riemann_7riemann_HLL) __PYX_ERR(13, 25, __pyx_L1_error)
  __pyx_vtabptr_3phd_7riemann_7riemann_HLL = (struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLL*)__Pyx_GetVtable(__pyx_ptype_3phd_7riemann_7riemann_HLL->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_7riemann_7riemann_HLL)) __PYX_ERR(13, 25, __pyx_L1_error)
  __pyx_ptype_3phd_7riemann_7riemann_HLLC = __Pyx_ImportType(__pyx_t_1, "phd.riemann.riemann", "HLLC", sizeof(struct __pyx_obj_3phd_7riemann_7riemann_HLLC), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_7riemann_7riemann_HLLC) __PYX_ERR(13, 32, __pyx_L1_error)
  __pyx_vtabptr_3phd_7riemann_7riemann_HLLC = (struct __pyx_vtabstruct_3phd_7riemann_7riemann_HLLC*)__Pyx_GetVtable(__pyx_ptype_3phd_7riemann_7riemann_HLLC->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_7riemann_7riemann_HLLC)) __PYX_ERR(13, 32, __pyx_L1_error)
  __pyx_ptype_3phd_7riemann_7riemann_Exact = __Pyx_ImportType(__pyx_t_1, "phd.riemann.riemann", "Exact", sizeof(struct __pyx_obj_3phd_7riemann_7riemann_Exact), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_7riemann_7riemann_Exact) __PYX_ERR(13, 35, __pyx_L1_error)
  __pyx_vtabptr_3phd_7riemann_7riemann_Exact = (struct __pyx_vtabstruct_3phd_7riemann_7riemann_Exact*)__Pyx_GetVtable(__pyx_ptype_3phd_7riemann_7riemann_Exact->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_7riemann_7riemann_Exact)) __PYX_ERR(13, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("phd.mesh.mesh"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_3phd_4mesh_4mesh_Mesh = __Pyx_ImportType(__pyx_t_1, "phd.mesh.mesh", "Mesh", sizeof(struct __pyx_obj_3phd_4mesh_4mesh_Mesh), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_3phd_4mesh_4mesh_Mesh) __PYX_ERR(14, 15, __pyx_L1_error)
  __pyx_vtabptr_3phd_4mesh_4mesh_Mesh = (struct __pyx_vtabstruct_3phd_4mesh_4mesh_Mesh*)__Pyx_GetVtable(__pyx_ptype_3phd_4mesh_4mesh_Mesh->tp_dict); if (unlikely(!__pyx_vtabptr_3phd_4mesh_4mesh_Mesh)) __PYX_ERR(14, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initreconstruction(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initreconstruction(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_reconstruction(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_reconstruction(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_reconstruction(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'reconstruction' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_reconstruction(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("reconstruction", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_phd__reconstruction__reconstruction) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "phd.reconstruction.reconstruction")) {
      if (unlikely(PyDict_SetItemString(modules, "phd.reconstruction.reconstruction", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "phd/reconstruction/reconstruction.pyx":1
 * import logging             # <<<<<<<<<<<<<<
 * import numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":2
 * import logging
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cimport numpy as np
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "phd/reconstruction/reconstruction.pyx":8
 * from libc.math cimport sqrt, fmax, fmin, fabs
 * 
 * from ..utils.particle_tags import ParticleTAGS             # <<<<<<<<<<<<<<
 * from ..utils.carray cimport DoubleArray, IntArray, LongArray
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ParticleTAGS);
  __Pyx_GIVEREF(__pyx_n_s_ParticleTAGS);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ParticleTAGS);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_utils_particle_tags, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParticleTAGS, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/reconstruction/reconstruction.pyx":11
 * from ..utils.carray cimport DoubleArray, IntArray, LongArray
 * 
 * phdLogger = logging.getLogger("phd")             # <<<<<<<<<<<<<<
 * 
 * cdef int REAL = ParticleTAGS.Real
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_phdLogger, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phd/reconstruction/reconstruction.pyx":13
 * phdLogger = logging.getLogger("phd")
 * 
 * cdef int REAL = ParticleTAGS.Real             # <<<<<<<<<<<<<<
 * 
 * cdef class ReconstructionBase:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ParticleTAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Real); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_3phd_14reconstruction_14reconstruction_REAL = __pyx_t_3;

  /* "phd/reconstruction/reconstruction.pyx":1
 * import logging             # <<<<<<<<<<<<<<
 * import numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init phd.reconstruction.reconstruction", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init phd.reconstruction.reconstruction");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
