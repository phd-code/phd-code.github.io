{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sedov-Taylor Blast Wave\n",
    "\n",
    "This is another problem that demonstrates the ability of the code to handle creation and propagation of shocks. Specifically, we inject a large amount of energy into a single point at the center of a homogeneous gas – for example, one can imagine the detonation of an explosive. The strength of the resulting explosion will produce a spherical shock wave that propagates outwards and once this shock has moved to a large distance (so the only relevant parameter is the strength of the explosion, or, equivalently, the energy injected), we can describe the flow of gas around the shock using the Euler equations. In particular, the region around the shock is well described by the Rankine-Hugoniot shock jump conditions and a series of substitutions into the Euler equations (in spherical coordinates, as [here](https://en.wikipedia.org/wiki/Taylor%E2%80%93von_Neumann%E2%80%93Sedov_blast_wave#Self-similar_solution)) yields an analytic self-similar solution. From this, we get a maximum density compression (over the uniform background density) of \n",
    "$$\\frac{\\rho_\\mathrm{max}}{\\rho} = \\frac{\\gamma+1}{\\gamma-1}$$\n",
    "Physically, we expect that the mass is swept up into a thin region immediately behind the shock front, creating a cavity behind the shock that grows as the shock propagates outwards.\n",
    "\n",
    "### In the Code\n",
    "Much of the setup in the code is similar to the preceding few example/test problems – we define a method to create the particle container and initialize the different modules of the simulation. Specifically, here, we can see how the code can be used in three dimensions, a natural extension of the 2D setup we had before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import phd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We create a grid of particles with resolution $45\\times 45\\times 45$, set the background density to be $\\rho = 1$ and the pressure to be $P = 10^{-6}(\\gamma - 1)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_particles(dim=3, nx=45, Lx=1.0, gamma=1.4, units = \"cgs\"):\n",
    "\n",
    "    dx = Lx/nx # spacing between particles\n",
    "    n = nx**3  # number of points\n",
    "\n",
    "    # create particle container\n",
    "    particles, units = phd.HydroParticleCreator(n, dim=3, unit_sys = units)\n",
    "    part = 0\n",
    "    np.random.seed(0)\n",
    "    for i in range(nx):\n",
    "        for j in range(nx):\n",
    "            for k in range(nx):\n",
    "                particles[\"position-x\"][part] = (i+0.5)*dx + 1.0e-8*dx*np.random.rand()\n",
    "                particles[\"position-y\"][part] = (j+0.5)*dx + 1.0e-8*dx*np.random.rand()\n",
    "                particles[\"position-z\"][part] = (k+0.5)*dx + 1.0e-8*dx*np.random.rand()\n",
    "                particles[\"ids\"][part] = part\n",
    "                part += 1\n",
    "\n",
    "    # set ambient values\n",
    "    particles[\"density\"][:]  = 1.0               # density\n",
    "    particles[\"pressure\"][:] = 1.0E-6*(gamma-1)  # total energy\n",
    "    particles[\"velocity-x\"][:] = 0.0\n",
    "    particles[\"velocity-y\"][:] = 0.0\n",
    "    particles[\"velocity-z\"][:] = 0.0\n",
    "\n",
    "    # put all energy in center particle\n",
    "    r = dx * .51\n",
    "    cell = ((particles[\"position-x\"]-.5)**2 +\\\n",
    "             (particles[\"position-y\"]-.5)**2 +\\\n",
    "             (particles[\"position-z\"]-.5)**2) <= r**2\n",
    "\n",
    "    particles[\"pressure\"][cell] = 1.0/(dx*dx*dx)*(gamma-1)\n",
    "\n",
    "    return particles, units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "phd: [\u001b[32mSTARTUP\u001b[0m  ] 2021-07-28 10:56:29,949: \n",
      "\n",
      " __________.__         .___\n",
      "\\______   \\  |__    __| _/\n",
      " |     ___/  |  \\  / __ |\n",
      " |    |   |   Y  \\/ /_/ |\n",
      " |____|   |___|  /\\____ |\n",
      "               \\/      \\/\n",
      "Welcome to Python Hydro-Dynamics!\n",
      "\n",
      "Simulation Information\n",
      "------------------------------\n",
      "Running in serial\n",
      "Log file saved at: sedov.log\n",
      "Problem solving: sedov\n",
      "Output data will be saved at: sedov_output\n",
      "\n",
      "Classes used in the simulation\n",
      "------------------------------\n",
      "boundary_condition: Reflective\n",
      "domain_manager: DomainManager\n",
      "equation_state: IdealGas\n",
      "integrator: MovingMeshMUSCLHancock\n",
      "mesh: Mesh\n",
      "particles: CarrayContainer\n",
      "reconstruction: PieceWiseLinear\n",
      "riemann: HLLC\n",
      "units: Units\n",
      "\n",
      "phd: [\u001b[32mSUCCESS\u001b[0m  ] 2021-07-28 11:08:47,857: Simulation successfully finished!\n"
     ]
    }
   ],
   "source": [
    "dim = 3; gamma = 5./3.\n",
    "particles, units = phd.distribute_initial_particles(\n",
    "        create_particles, dim=dim, gamma=gamma, units = \"cgs\")\n",
    "\n",
    "# computation related to boundaries\n",
    "domain_manager = phd.DomainManager(\n",
    "        xmin=[0., 0., 0.], xmax=[1., 1., 1.],\n",
    "        initial_radius=0.1)\n",
    "\n",
    "# create voronoi mesh\n",
    "mesh = phd.Mesh()\n",
    "\n",
    "# computation\n",
    "integrator = phd.MovingMeshMUSCLHancock()\n",
    "integrator.set_mesh(mesh)\n",
    "integrator.set_riemann(phd.HLLC())\n",
    "integrator.set_particles(particles)\n",
    "integrator.set_domain_manager(domain_manager)\n",
    "integrator.set_boundary_condition(phd.Reflective())\n",
    "integrator.set_reconstruction(phd.PieceWiseLinear())\n",
    "integrator.set_equation_state(phd.IdealGas(gamma=gamma))\n",
    "integrator.set_units(units)\n",
    "\n",
    "sim_name = \"sedov\"\n",
    "if phd._in_parallel:\n",
    "    integrator.set_load_balance(phd.LoadBalance())\n",
    "    sim_name = \"mpi_sedov\"\n",
    "\n",
    "# add finish criteria\n",
    "simulation_time_manager = phd.SimulationTimeManager()\n",
    "simulation_time_manager.add_finish(phd.Time(time_max=0.06))\n",
    "\n",
    "# output every time interval\n",
    "output = phd.TimeInterval(time_interval=0.01)\n",
    "output.set_writer(phd.Hdf5())\n",
    "simulation_time_manager.add_output(output)\n",
    "\n",
    "# output last step\n",
    "output = phd.FinalOutput()\n",
    "output.set_writer(phd.Hdf5())\n",
    "simulation_time_manager.add_output(output)\n",
    "\n",
    "# Create simulator\n",
    "simulation = phd.Simulation(simulation_name=sim_name, log_level = \"startup\")\n",
    "simulation.set_integrator(integrator)\n",
    "simulation.set_simulation_time_manager(simulation_time_manager)\n",
    "simulation.initialize()\n",
    "simulation.solve()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we can extract the simulation output data using the io method ``phd.Hdf5()`` and plot the computed fields, observing the shock profile at $r \\sim 0.35$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "phd: [\u001b[32mINFO\u001b[0m     ] 2021-06-02 12:04:25,077: hdf5 format: Reading filename sedov_output/final_output/final_output0000/final_output0000.hdf5\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x864 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "mpl.rcParams[\"mathtext.fontset\"] = \"stix\"\n",
    "mpl.rcParams[\"font.family\"] = \"STIXGeneral\"\n",
    "mpl.rcParams[\"xtick.labelsize\"] = 16\n",
    "mpl.rcParams[\"ytick.labelsize\"] = 16\n",
    "\n",
    "# plot cartesian or uniform run\n",
    "file_name=\"sedov_output/final_output/final_output0000/final_output0000.hdf5\"\n",
    "reader = phd.Hdf5()\n",
    "sedov, units = reader.read(file_name)\n",
    "sedov.remove_tagged_particles(phd.ParticleTAGS.Ghost)\n",
    "\n",
    "r = np.sqrt((sedov[\"position-x\"]-0.5)**2 + (sedov[\"position-y\"]-0.5)**2 + (sedov[\"position-z\"]-0.5)**2)\n",
    "v = np.sqrt(sedov[\"velocity-x\"]**2 + sedov[\"velocity-y\"]**2 + sedov[\"velocity-z\"]**2)\n",
    "\n",
    "plt.figure(figsize=(6,12))\n",
    "plt.subplot(3,1,1)\n",
    "plt.scatter(r, sedov[\"density\"], color=\"lightsteelblue\", label=\"phd\", s= 5)\n",
    "plt.xlim(0,0.5)\n",
    "plt.ylim(-1,4.1)\n",
    "plt.xlabel(\"Radius\")\n",
    "plt.ylabel(\"Density\")\n",
    "l = plt.legend(loc=\"upper left\", prop={\"size\":12})\n",
    "l.draw_frame(False)\n",
    "\n",
    "plt.subplot(3,1,2)\n",
    "plt.scatter(r, v, color=\"lightsteelblue\")\n",
    "plt.xlim(0,0.5)\n",
    "plt.ylim(-0.5,2.0)\n",
    "plt.xlabel(\"Radius\")\n",
    "plt.ylabel(\"Velocity\")\n",
    "\n",
    "plt.subplot(3,1,3)\n",
    "plt.scatter(r, sedov[\"pressure\"], color=\"lightsteelblue\")\n",
    "plt.xlim(0,0.5)\n",
    "plt.ylim(-0.5,4.5)\n",
    "plt.xlabel(\"Radius\")\n",
    "plt.ylabel(\"Pressure\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig(\"sedov_3d.png\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
