{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A simple linear wave\n",
    "\n",
    "### Some context\n",
    "A very basic test problem that also introduces some of the features of the code is to observe the wave transmission of disturbances in the fluid. In other words, if we begin with a constant pressure $P_0$ and density $\\rho_0$ fluid, with no velocity $\\mathbf{v}=0$, then we can introduce perturbations of the form:\n",
    "\n",
    "$$\n",
    "\\begin{gathered}\n",
    "\\rho(x,t) = \\rho_0 + \\delta\\rho(x,t) \\\\\n",
    "P(x,t) = P_0 + \\delta P(x,t) \\\\\n",
    "\\mathbf{v}(x,t) = \\delta\\mathbf{v}(x,t)\n",
    "\\end{gathered}\n",
    "$$\n",
    "\n",
    "Then, taking the [Euler](https://en.wikipedia.org/wiki/Euler_equations_(fluid_dynamics)#Incompressible_Euler_equations) (with no external forces) and continuity equations, we have (respectively)\n",
    "\n",
    "$$\n",
    "\\begin{gathered}\n",
    "\\frac{\\partial\\mathbf{v}}{\\partial t} = -\\frac{\\nabla P}{\\rho} \\\\\n",
    "\\frac{\\partial\\rho}{\\partial t} + \\nabla\\cdot(\\rho\\mathbf{v}) = 0\n",
    "\\end{gathered}\n",
    "$$\n",
    "\n",
    "Then, linearizing these equations (dropping all second-order and higher terms), assuming $\\delta P, \\delta \\rho << 1$, and taking these two equations together, we get a wave equation for the perturbations\n",
    "\n",
    "$$\\frac{\\partial^2 \\delta\\rho}{\\partial t^2} = -\\nabla^2\\delta P$$\n",
    "\n",
    "and using an EOS, could express this as a wave equation for each variable. Ultimately, we can see that by specifying the functional form of the density perturbation/disturbance, we can extract initial conditions ($t=0$) for our velocity and pressure perturbations. Explicitly, this means if we take $\\delta\\rho = A\\sin(kx+\\omega t)$ (i.e. a sinusoidal disturbance with $k=\\omega=2\\pi$ and amplitude $A = 10^{-6}$ is induced initially), then we have a corresponding\n",
    "\n",
    "$$\n",
    "\\begin{gathered}\n",
    "\\delta\\mathbf{v}(x,0) = \\bigg(\\frac{\\omega}{k}\\bigg)\\frac{\\rho(x,0)}{\\rho_0}\\mathbf{\\hat{x}} \\\\\n",
    "\\delta P(x,0) = \\bigg(\\frac{\\omega}{k}\\bigg)^2\\delta\\rho(x,0)\n",
    "\\end{gathered}\n",
    "$$\n",
    "\n",
    "If we specify $\\rho_0 = 1.0$, $P_0=1$, $\\mathbf{v}=0$, and $\\gamma = 5/3$ with periodic boundary conditions, then we can see that we have a wave propagating to the right (positive $\\mathbf{\\hat{x}}$ direction) with velocity 1. This means that after 1 unit of time in the simulation, the wave should propagate through the simulation box and return to its original position – so comparison of the initial and final densities should give us a good indication of the code performance. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using the code\n",
    "First we need to import the necessary packages. We can import the code via the simple command `import phd`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import phd\n",
    "import numpy as np\n",
    "\n",
    "import h5py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initially, we need to set-up our particle grid. This can be achieved very straightforwardly with some basic code commands. The primary method of doing this is with the `HydroParticleCreator` method, which interfaces with the `CarrayContainer` class to produce a one-dimensional grid of particles of size `n` (in this case, 10):  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "nx = 10   # number of particles in x direction\n",
    "Lx = 1.    # domain size in x\n",
    "dx = Lx/nx # spacing between particles\n",
    "n = nx*nx  # number of points\n",
    "\n",
    "particles = phd.HydroParticleCreator(n) # create particle container"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we can specify the initial conditions as outlined above and feed those into the `particles` object just as dictionary key values specified for all particles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "rho0, vel0, pre0, gamma = 1.0, 0.0, 1.0, 5./3. # density, velocity, pressure initial conditions\n",
    "A, w, k = 1.0e-6, 2*np.pi, 2*np.pi # amplitude, frequency, wavenumber of sinusoidal perturbation\n",
    "\n",
    "particles[\"density\"][:] = rho0\n",
    "particles[\"velocity-x\"][:] = vel0\n",
    "particles[\"velocity-y\"][:] = 0.0\n",
    "particles[\"pressure\"][:] = pre0/gamma"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can iterate through each of the particles and add the initial perturbation as given above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(nx):\n",
    "    for j in range(nx):\n",
    "        part = 10*i + j                                        # indexing/counting each of the particles\n",
    "        x = (i+0.5)*dx; y = (j+0.5)*dx                         # x and y position of the cell\n",
    "        delta_rho = A*np.sin(k*x)                              # density perturbation (with t=0)\n",
    "        particles[\"density\"][part] += delta_rho\n",
    "        particles[\"velocity-x\"][part] += (w/k)*delta_rho/rho0\n",
    "        particles[\"pressure\"][part] += (w/k)**2*delta_rho\n",
    "\n",
    "        particles[\"position-x\"][part] = x\n",
    "        particles[\"position-y\"][part] = y\n",
    "        particles[\"ids\"][part] = part                          # particle ID"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this in hand, we are ready to initialize our simulation! The following code block establishes the simulation domain via the `DomainManager` class. Next we want to establish the mesh with no regularization and initialize the integration object – here we are simply selecting the integrator that we will use to solve the fluid equations, feeding in each of the components we have defined so far, and setting the Riemann solver `HLLC`. Following that, we establish the stopping criterion for the simulation and dictate that it output the final and initial steps to the screen. Lastly, we name the simulation (this corresponds to the output files that will be stored; here we use `linear_wave_10` to indicate the number of particles) and can run the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "phd: [INFO     ] 2021-03-02 11:57:00,896: \n",
      "\n",
      " __________.__         .___\n",
      "\\______   \\  |__    __| _/\n",
      " |     ___/  |  \\  / __ |\n",
      " |    |   |   Y  \\/ /_/ |\n",
      " |____|   |___|  /\\____ |\n",
      "               \\/      \\/\n",
      "Welcome to Python Hydro-Dynamics!\n",
      "\n",
      "Simulation Information\n",
      "------------------------------\n",
      "Running in serial\n",
      "Log file saved at: linear_wave_10.log\n",
      "Problem solving: linear_wave_10\n",
      "Output data will be saved at: linear_wave_10_output\n",
      "\n",
      "Classes used in the simulation\n",
      "------------------------------\n",
      "boundary_condition: Periodic\n",
      "domain_manager: DomainManager\n",
      "equation_state: IdealGas\n",
      "integrator: MovingMeshMUSCLHancock\n",
      "mesh: Mesh\n",
      "particles: CarrayContainer\n",
      "reconstruction: PieceWiseLinear\n",
      "riemann: HLLC\n",
      "\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,898: IntegrateBase: Building initial mesh\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,899: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,906: hdf5 format: Writting initial_output0000.hdf5\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,928: Beginning integration loop\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,930: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,930: Starting iteration: 0 time: 0.000000 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,931: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,931: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,932: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,933: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,934: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,934: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,938: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,938: Starting iteration: 1 time: 0.028209 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,939: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,939: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,941: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,941: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,941: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,942: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,945: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,946: Starting iteration: 2 time: 0.056419 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,946: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,947: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,948: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,949: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,949: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,950: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,952: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,953: Starting iteration: 3 time: 0.084628 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,953: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,954: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,955: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,955: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,955: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,956: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,958: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,958: Starting iteration: 4 time: 0.112838 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,959: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,959: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,960: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,960: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,961: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,961: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,964: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,965: Starting iteration: 5 time: 0.141047 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,965: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,966: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,966: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,967: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,967: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,967: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,969: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,970: Starting iteration: 6 time: 0.169257 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,970: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,970: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,971: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,971: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,972: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,972: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,974: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,974: Starting iteration: 7 time: 0.197466 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,974: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,975: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,976: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,976: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,976: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,976: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,978: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,979: Starting iteration: 8 time: 0.225676 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,979: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,980: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,981: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,981: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,981: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,982: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,984: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,984: Starting iteration: 9 time: 0.253885 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,984: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,985: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,985: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,986: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,986: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,986: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,988: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,988: Starting iteration: 10 time: 0.282095 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,989: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,989: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,990: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,990: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,990: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,991: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,993: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,993: Starting iteration: 11 time: 0.310304 dt: 0.028209\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "phd: [INFO     ] 2021-03-02 11:57:00,993: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,994: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,995: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,995: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,996: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,996: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,999: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,999: Starting iteration: 12 time: 0.338514 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:00,999: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,000: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,001: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,001: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,001: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,001: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,003: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,004: Starting iteration: 13 time: 0.366723 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,004: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,004: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,005: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,005: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,006: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,006: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,008: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,008: Starting iteration: 14 time: 0.394932 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,009: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,009: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,010: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,010: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,010: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,011: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,013: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,014: Starting iteration: 15 time: 0.423142 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,014: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,015: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,015: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,016: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,016: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,017: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,019: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,019: Starting iteration: 16 time: 0.451351 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,019: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,020: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,020: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,021: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,021: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,021: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,023: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,024: Starting iteration: 17 time: 0.479561 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,024: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,024: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,025: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,025: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,026: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,026: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,028: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,029: Starting iteration: 18 time: 0.507770 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,029: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,030: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,030: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,031: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,031: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,031: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,033: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,033: Starting iteration: 19 time: 0.535980 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,034: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,034: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,035: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,035: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,035: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,036: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,038: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,038: Starting iteration: 20 time: 0.564189 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,038: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,039: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,040: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,040: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,040: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,040: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,042: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,043: Starting iteration: 21 time: 0.592399 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,043: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,043: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,044: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,045: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,045: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,046: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,048: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,048: Starting iteration: 22 time: 0.620608 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,049: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,049: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,050: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,050: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,050: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,051: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,052: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,053: Starting iteration: 23 time: 0.648817 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,053: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,054: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,054: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,055: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,055: HLLC: Starting riemann\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "phd: [INFO     ] 2021-03-02 11:57:01,055: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,057: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,057: Starting iteration: 24 time: 0.677027 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,058: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,058: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,059: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,059: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,059: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,060: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,062: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,062: Starting iteration: 25 time: 0.705236 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,063: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,063: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,064: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,064: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,065: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,065: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,067: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,067: Starting iteration: 26 time: 0.733446 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,068: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,068: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,069: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,069: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,069: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,070: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,071: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,072: Starting iteration: 27 time: 0.761655 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,072: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,072: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,073: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,073: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,074: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,074: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,076: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,076: Starting iteration: 28 time: 0.789865 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,077: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,078: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,079: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,079: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,079: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,080: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,082: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,082: Starting iteration: 29 time: 0.818074 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,082: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,083: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,083: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,084: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,084: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,084: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,086: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,086: Starting iteration: 30 time: 0.846284 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,087: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,087: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,088: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,088: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,088: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,089: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,090: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,091: Starting iteration: 31 time: 0.874493 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,091: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,091: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,092: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,092: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,093: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,093: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,095: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,096: Starting iteration: 32 time: 0.902703 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,096: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,096: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,097: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,097: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,098: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,098: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,100: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,100: Starting iteration: 33 time: 0.930912 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,100: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,101: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,101: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,101: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,102: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,102: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,104: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,104: Starting iteration: 34 time: 0.959122 dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,104: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,105: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,105: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,106: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,106: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,106: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,108: Hydro dt: 0.028209\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,108: Starting iteration: 35 time: 0.987331 dt: 0.012669\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,109: MovingMeshMUSCLHancock: Starting integration\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,109: PieceWiseLinear: Starting gradient cacluation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,110: PieceWiseLinear: Starting spatial reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,110: PieceWiseLinear: Starting temporal reconstruction\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,110: HLLC: Starting riemann\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,111: Mesh: Starting mesh creation\n",
      "phd: [INFO     ] 2021-03-02 11:57:01,113: hdf5 format: Writting final_output0000.hdf5\n",
      "phd: [SUCCESS  ] 2021-03-02 11:57:01,122: Simulation successfully finished!\n"
     ]
    }
   ],
   "source": [
    "# computation related to boundaries\n",
    "domain_manager = phd.DomainManager(xmin=[0., 0.], xmax=[1., 1.], initial_radius=0.1)\n",
    "\n",
    "# create voronoi mesh\n",
    "mesh = phd.Mesh(regularize=False)\n",
    "\n",
    "# computation\n",
    "integrator = phd.MovingMeshMUSCLHancock()\n",
    "integrator.set_mesh(mesh)\n",
    "integrator.set_riemann(phd.HLLC())\n",
    "integrator.set_particles(particles)\n",
    "integrator.set_domain_manager(domain_manager)\n",
    "integrator.set_boundary_condition(phd.Periodic())\n",
    "integrator.set_reconstruction(phd.PieceWiseLinear(gizmo_limiter=False))\n",
    "integrator.set_equation_state(phd.IdealGas(gamma=gamma))\n",
    "\n",
    "# add finish criteria\n",
    "simulation_time_manager = phd.SimulationTimeManager()\n",
    "simulation_time_manager.add_finish(phd.Time(time_max=1.0))\n",
    "\n",
    "# output last step\n",
    "output = phd.FinalOutput()\n",
    "output.set_writer(phd.Hdf5())\n",
    "simulation_time_manager.add_output(output)\n",
    "\n",
    "# output initial data \n",
    "output = phd.InitialOutput()\n",
    "output.set_writer(phd.Hdf5())\n",
    "simulation_time_manager.add_output(output)\n",
    "\n",
    "# Create simulator\n",
    "simulation = phd.Simulation(simulation_name=\"linear_wave_10\", colored_logs=False)\n",
    "simulation.set_integrator(integrator)\n",
    "simulation.set_simulation_time_manager(simulation_time_manager)\n",
    "simulation.initialize()\n",
    "simulation.solve()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To visualize the results, we can extract the data from the initial and final output files, plotting the density on the upper left, and the pressures, densities, and velocities in the other three panels. Comparing the initial (x's) and final (o's) values, we can see some slight discrepancy, which improves as we increase the grid resolution (i.e. increase `nx`), with convergence that is approximately second-order. Extrapolating to higher resolutions is a simple extension of the above procedure and can be functionally achieved by locally defining a method to create particles and looping through different resolutions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "phd: [INFO     ] 2021-03-02 11:57:15,412: hdf5 format: Reading filename ../../notebooks_tests/linear_wave/linear_wave_10_output/initial_output/initial_output0000/initial_output0000.hdf5\n",
      "phd: [INFO     ] 2021-03-02 11:57:15,423: hdf5 format: Reading filename ../../notebooks_tests/linear_wave/linear_wave_10_output/final_output/final_output0000/final_output0000.hdf5\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# For plotting...\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.collections import PatchCollection\n",
    "%matplotlib inline\n",
    "\n",
    "mpl.rcParams[\"mathtext.fontset\"] = \"stix\"\n",
    "mpl.rcParams[\"font.family\"] = \"STIXGeneral\"\n",
    "mpl.rcParams[\"xtick.labelsize\"] = 16\n",
    "mpl.rcParams[\"ytick.labelsize\"] = 16\n",
    "\n",
    "\n",
    "path_to_output = '../../notebooks_tests/linear_wave/'\n",
    "init_output = path_to_output + 'linear_wave_10_output/initial_output/initial_output0000/initial_output0000.hdf5'\n",
    "final_output = path_to_output + 'linear_wave_10_output/final_output/final_output0000/final_output0000.hdf5'\n",
    "\n",
    "reader = phd.Hdf5()\n",
    "init_particles = reader.read(init_output)\n",
    "final_particles = reader.read(final_output)\n",
    "\n",
    "fig, axes = plt.subplots(2,2, figsize=(12,12))\n",
    "\n",
    "fig.patch.set_facecolor('white')\n",
    "fig.patch.set_alpha(0.8)\n",
    "\n",
    "patch, colors = phd.vor_collection(init_particles, \"density\")\n",
    "init_particles.remove_tagged_particles(phd.ParticleTAGS.Ghost)\n",
    "final_particles.remove_tagged_particles(phd.ParticleTAGS.Ghost)\n",
    "\n",
    "p = PatchCollection(patch, cmap=\"jet\", edgecolor=\"black\", alpha=0.4)\n",
    "p.set_array(np.array(colors))\n",
    "ax = axes[0,0]\n",
    "ax.set_xlabel(\"X\")\n",
    "ax.set_ylabel(\"Y\")\n",
    "ax.set_xlim(0,1)\n",
    "ax.set_ylim(0,1)\n",
    "ax.add_collection(p)\n",
    "\n",
    "ax = axes[0,1]\n",
    "ax.plot(init_particles[\"position-x\"], init_particles[\"density\"], \"kx\", label=\"t=0.\")\n",
    "ax.plot(final_particles[\"position-x\"], final_particles[\"density\"], \"r.\", label=\"t=1.\")\n",
    "ax.set_xlim(0,1.0)\n",
    "ax.set_ylim(1.0-2.0e-6,1.0+2.0e-6)\n",
    "ax.set_xlabel(\"X\")\n",
    "ax.set_ylabel(\"Density\")\n",
    "ax.legend()\n",
    "\n",
    "ax = axes[1,0]\n",
    "ax.plot(init_particles[\"position-x\"], init_particles[\"velocity-x\"], \"kx\", label=\"t=0.\")\n",
    "ax.plot(final_particles[\"position-x\"], final_particles[\"velocity-x\"], \"r.\", label=\"t=1.\")\n",
    "ax.set_xlim(0,1)\n",
    "ax.set_ylim(-2.0e-6,+2.0e-6)\n",
    "ax.set_xlabel(\"X\")\n",
    "ax.set_ylabel(\"Velocity\")\n",
    "\n",
    "ax = axes[1,1]\n",
    "ax.plot(init_particles[\"position-x\"], init_particles[\"pressure\"], \"kx\", label=\"t=0\")\n",
    "ax.plot(final_particles[\"position-x\"], final_particles[\"pressure\"], \"r.\", label=\"t=1\")\n",
    "ax.set_xlim(0,1)\n",
    "ax.set_ylim(3./5.-2.0e-6,3.0/5.+2.0e-6)\n",
    "ax.set_xlabel(\"X\")\n",
    "ax.set_ylabel(\"Pressure\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig(\"linear_wave_plot.png\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
